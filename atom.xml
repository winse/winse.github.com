<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Winse Blog]]></title>
  <link href="http://winseliu.com/atom.xml" rel="self"/>
  <link href="http://winseliu.com/"/>
  <updated>2017-05-07T07:43:23+08:00</updated>
  <id>http://winseliu.com/</id>
  <author>
    <name><![CDATA[Winse Liu]]></name>
    <email><![CDATA[winseliu@foxmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Puppet批量自动化部署实战]]></title>
    <link href="http://winseliu.com/blog/2017/05/05/puppet-automate-deploy-hosts/"/>
    <updated>2017-05-05T08:33:37+08:00</updated>
    <id>http://winseliu.com/blog/2017/05/05/puppet-automate-deploy-hosts</id>
    <content type="html"><![CDATA[<p>断断续续使用Puppet近一年，多次体验到Puppet的强大：SSH更新、需ROOT权限批量处理等等。这次集群新上架了又爽了一把。把整个过程记录下来，方便今后参考。</p>

<p>运维的同事也想了解puppet，在docker容器上安装了一遍，把具体的内容附上：<a href="http://winseliu.com/files/expect+puppet.txt">expect+puppet.txt</a></p>

<p>这次操作是对以前零零碎碎积累的一次检验和温习。需要用到的工具比较多：</p>

<ul>
<li>RPM打包、本地YUM仓库 - RPMBUILD、CREATEREPO</li>
<li>SSH无密钥登录 - EXPECT&amp;FOR</li>
<li>时间同步、host配置 - SCP、SSH&amp;FOR</li>
<li>创建用户、新用户无密钥等 - PUPPET</li>
<li>ssh_known_hosts - PUPPETDB</li>
<li>rhel.repo、gmond、时区设置 - PUPPET</li>
</ul>


<p>远程配置机器首先当然是进行无密钥登录的设置，这样才能进行批量操作，不然几百台机器每次都需要干预太烦人、工作量太大。无密钥登录使用原来写好的EXPECT脚本，使用FOR循环执行，等待结果即可。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@hadoop-master1 ~]# cat ssh-copy-id.expect 
</span><span class='line'>#!/usr/bin/expect  
</span><span class='line'>
</span><span class='line'>## Usage $0 [user@]host password
</span><span class='line'>
</span><span class='line'>set host [lrange $argv 0 0];
</span><span class='line'>set password [lrange $argv 1 1] ;
</span><span class='line'>
</span><span class='line'>set timeout 30;
</span><span class='line'>
</span><span class='line'>spawn ssh-copy-id $host ;
</span><span class='line'>
</span><span class='line'>expect {
</span><span class='line'>  "(yes/no)?" { send yes\n; exp_continue; }
</span><span class='line'>  "password:" { send $password\n; exp_continue; }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>exec sleep 1;
</span><span class='line'>
</span><span class='line'># 用for，不要用while
</span><span class='line'>for h in `cat /etc/hosts | grep -v '^#' | grep slaver | grep -E '\.36\.|\.37\.' | awk '{print $2}' ` ; do 
</span><span class='line'>  ./ssh-copy-id.expect $h 'PASSWD';
</span><span class='line'>done
</span></code></pre></td></tr></table></div></figure>


<p>做好无密钥登录，拷贝 /etc/hosts, /etc/cron.daily/ntp.cron, /etc/yum.repos.d/puppet.repo 到全部的新机器。这里puppet.repo是自己编译搭建的私有仓库（具体编译配置步骤查看puppet分类下的文章），通过 <code>yum install mcollective-plugins-simple</code> 就可以把mcolletive和puppet-agent安装好。把所有步骤封装到一个prepare.sh脚本，内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'># must be hostname!!
</span><span class='line'>HOSTS="$@"
</span><span class='line'>PASSWD=${PASSWD:-'root'}
</span><span class='line'>PUPPETSERVER="hadoop-master1"
</span><span class='line'>
</span><span class='line'>for h in $HOSTS ; do ./ssh-copy-id.expect $h "$PASSWD" ; done
</span><span class='line'>
</span><span class='line'>for h in $HOSTS ; do
</span><span class='line'>scp /etc/hosts $h:/etc ;
</span><span class='line'>scp /etc/yum.repos.d/puppet.repo $h:/etc/yum.repos.d/ ;
</span><span class='line'>scp /etc/cron.daily/ntp.cron $h:/etc/cron.daily/ ;
</span><span class='line'>
</span><span class='line'>ssh $h '
</span><span class='line'>#ntpdate cu-omc1 #着重注意
</span><span class='line'>rm -rf /etc/yum.repos.d/CentOS-*
</span><span class='line'>yum install mcollective-plugins-simple -y
</span><span class='line'>' ;
</span><span class='line'>
</span><span class='line'>scp /etc/puppetlabs/mcollective/server.cfg $h:/etc/puppetlabs/mcollective/
</span><span class='line'>ssh $h "
</span><span class='line'>sed -i '/HOSTNAME/ {
</span><span class='line'>i \
</span><span class='line'>HOSTNAME=$h
</span><span class='line'>d
</span><span class='line'>} ' /etc/sysconfig/network
</span><span class='line'>hostname $h
</span><span class='line'>
</span><span class='line'>echo -e '\n\n[agent]\nserver = $PUPPETSERVER\ncertname=$h' &gt; /etc/puppetlabs/puppet/puppet.conf
</span><span class='line'>chkconfig mcollective on
</span><span class='line'>service mcollective start
</span><span class='line'>"
</span><span class='line'>
</span><span class='line'>done
</span></code></pre></td></tr></table></div></figure>


<p>然后执行 <code>./prepare.sh hadoop-slaver{200..500}</code> 就可以了。</p>

<p>接下来重点讲讲PUPPET配置的编写。</p>

<p>首先根据当前需要创建的用户、组把创建用户的配置写好：</p>

<ul>
<li><a href="https://docs.puppet.com/puppet/4.10/quick_start_user_group.html">https://docs.puppet.com/puppet/4.10/quick_start_user_group.html</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@hadoop-master1 ~]# puppet resource -e group hadoop
</span><span class='line'>group { 'hadoop':
</span><span class='line'>  ensure =&gt; 'present',
</span><span class='line'>  gid    =&gt; '501',
</span><span class='line'>}
</span><span class='line'>[root@hadoop-master1 ~]# puppet resource -e user hadoop
</span><span class='line'>user { 'hadoop':
</span><span class='line'>  ensure           =&gt; 'present',
</span><span class='line'>  gid              =&gt; '501',
</span><span class='line'>  groups           =&gt; ['wheel'],
</span><span class='line'>  home             =&gt; '/home/hadoop',
</span><span class='line'>  password         =&gt; '$6$AfnA...uIhHC9I.',
</span><span class='line'>  password_max_age =&gt; '99999',
</span><span class='line'>  password_min_age =&gt; '0',
</span><span class='line'>  shell            =&gt; '/bin/bash',
</span><span class='line'>  uid              =&gt; '501',
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>添加require、groups，然后删除uid、gid。最后需要添加 managehome => true, 否则用户目录就不会自动创建：</p>

<ul>
<li><a href="http://www.dbalex.com/category/devops/puppet">http://www.dbalex.com/category/devops/puppet</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 默认不创建用户目录
</span><span class='line'>[root@hadoop-slaver200 ~]# su - hadoop
</span><span class='line'>su: warning: cannot change directory to /home/hadoop: No such file or directory
</span><span class='line'>-bash-4.1$ 
</span><span class='line'>
</span><span class='line'># 创建用户配置成品
</span><span class='line'>group { 'hadoop':
</span><span class='line'>  ensure =&gt; 'present',
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>user { 'hadoop':
</span><span class='line'>  ensure           =&gt; 'present',
</span><span class='line'>  groups           =&gt; ['hadoop', 'wheel'],
</span><span class='line'>  home             =&gt; '/home/hadoop',
</span><span class='line'>  password         =&gt; '$6$Af...IhHC9I.',
</span><span class='line'>  password_max_age =&gt; '99999',
</span><span class='line'>  password_min_age =&gt; '0',
</span><span class='line'>  shell            =&gt; '/bin/bash',
</span><span class='line'>  managehome       =&gt; true,
</span><span class='line'>  require          =&gt; Group['hadoop'],
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://ask.puppet.com/question/15753/how-can-i-chown-directories-recursivley/">https://ask.puppet.com/question/15753/how-can-i-chown-directories-recursivley/</a></li>
<li><a href="https://serverfault.com/questions/542947/issue-with-changing-permission-and-owner-recursively-on-files-with-puppet-and-va">https://serverfault.com/questions/542947/issue-with-changing-permission-and-owner-recursively-on-files-with-puppet-and-va</a></li>
<li><a href="https://serverfault.com/questions/416254/adding-an-existing-user-to-a-group-with-puppet">https://serverfault.com/questions/416254/adding-an-existing-user-to-a-group-with-puppet</a></li>
</ul>


<p>添加好用户后，就是把无密钥登录也让PUPPET来弄。其实就是把 id_rsa.pub 的内容写入都行机器的 authorized_keys ，PUPPET已经自带了这个类：ssh_authorized_key。把id_ras.pub的内容（中间的内容）赋值给 key 属性即可。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh_authorized_key {'root@hadoop-master1':
</span><span class='line'>  user =&gt; 'root',
</span><span class='line'>  type =&gt; 'ssh-rsa',
</span><span class='line'>  key =&gt; 'AAAAB3NzaC1y...O1Q==',
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>ssh_authorized_key {'hadoop@hadoop-master1':
</span><span class='line'>  user =&gt; 'hadoop',
</span><span class='line'>  type =&gt; 'ssh-rsa',
</span><span class='line'>  key =&gt; 'AAAAB3Nza...IZYPw==',
</span><span class='line'>  require  =&gt; User['hadoop'],
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>无密钥登录比较容易，没有涉及到收集节点信息。仅仅把公钥写入新机器还不够，还得把 known_hosts 也处理好，不然第一次连接新机器都需要输入一下yes。内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[hadoop@hadoop-slaver200 ~]$ ssh hadoop-slaver202
</span><span class='line'>The authenticity of host 'hadoop-slaver202 (192.168.36.59)' can't be established.
</span><span class='line'>RSA key fingerprint is fe:7e:26:c4:56:ea:f4:21:61:82:6d:9b:4a:72:93:a4.
</span><span class='line'>Are you sure you want to continue connecting (yes/no)? </span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://docs.puppet.com/puppet/4.4/lang_virtual.html">https://docs.puppet.com/puppet/4.4/lang_virtual.html</a></li>
<li><a href="https://docs.puppet.com/puppet/4.4/lang_collectors.html">https://docs.puppet.com/puppet/4.4/lang_collectors.html</a></li>
<li><a href="https://docs.puppet.com/puppet/4.4/lang_exported.html">https://docs.puppet.com/puppet/4.4/lang_exported.html</a></li>
<li><a href="https://docs.puppet.com/puppet/4.4/lang_resources_advanced.html#amending-attributes-with-a-collector">https://docs.puppet.com/puppet/4.4/lang_resources_advanced.html#amending-attributes-with-a-collector</a></li>
<li><a href="https://docs.puppet.com/puppet/latest/types/ssh_authorized_key.html">https://docs.puppet.com/puppet/latest/types/ssh_authorized_key.html</a></li>
<li><a href="https://www.puppetcookbook.com/posts/install-package.html">https://www.puppetcookbook.com/posts/install-package.html</a></li>
<li><a href="https://docs.puppet.com/puppet/4.10/lang_conditional.html">https://docs.puppet.com/puppet/4.10/lang_conditional.html</a></li>
</ul>


<p>正如上面官网介绍的，需要用到虚拟资源，自动把新机器指纹（fingerprint）写入到机器需要PUPPETDB的支持，安装配置又需要PGSQL的配合。需要耗费一番功夫，但是还是划得来的（具体安装步骤查看puppet分类下的文章）。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if $hostname =~ /^hadoop-/ {
</span><span class='line'>
</span><span class='line'>  $host_aliases = [ $ipaddress, $hostname ]
</span><span class='line'>  
</span><span class='line'>  # Export hostkeys from all hosts.
</span><span class='line'>  @@sshkey { $::fqdn:
</span><span class='line'>    ensure =&gt; present,
</span><span class='line'>    host_aliases =&gt; $host_aliases,
</span><span class='line'>    type =&gt; 'ssh-rsa',
</span><span class='line'>    key =&gt; $sshrsakey,
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  if $hostname =~ /^hadoop-master/ {
</span><span class='line'>    # realize all exported
</span><span class='line'>    Sshkey &lt;&lt;| |&gt;&gt;
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>先在所有slaver机器运行一遍 puppet agent -t ，然后再在master节点把收集的指纹写入到 /etc/ssh/ssh_known_hosts 。</p>

<p>这里说个插曲：机器的hosts和hostname是通过 FOR&amp;SSH 命令来统一修改的，有些可能没有配置好导致机器的主机名有重复。通过执行配置known_hosts竟然帮我找出了hostname重复的机器，意外的收获。该问题的处理我是直接登录到PGSQL改了对应表的数据处理的。</p>

<p>到这里机器基本能用了。主机名、hosts、时间同步、hadoop用户以及master到该用户的无密钥登录都已经配置好了。</p>

<p>接下来把实战过程中安装gmond的步骤帖出来：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$$ cd /etc/puppetlabs/code/environments/production/manifests/
</span><span class='line'>
</span><span class='line'>$$ vi change_site.sh
</span><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'>## Usage:
</span><span class='line'>##  ./change_site.sh nrpe.site
</span><span class='line'>##
</span><span class='line'>
</span><span class='line'>[[ $# != 1 ]] && exit 1
</span><span class='line'>
</span><span class='line'>cd $(cd $(dirname $0); pwd)
</span><span class='line'>
</span><span class='line'>rm -rf site.pp
</span><span class='line'>ln -s $1 site.pp
</span><span class='line'>
</span><span class='line'>$$ vi pexec.sh
</span><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'>## Usage:
</span><span class='line'>##   ./pexec.sh /cu-ud/ sudo_revert.site 
</span><span class='line'>##
</span><span class='line'>
</span><span class='line'>case $# in
</span><span class='line'>1)
</span><span class='line'>  FUNC="$1"
</span><span class='line'>  HOST_PARAM=
</span><span class='line'>  ;;
</span><span class='line'>2)
</span><span class='line'>  FUNC="$2"
</span><span class='line'>  HOST_PARAM="-I $1"
</span><span class='line'>  ;;
</span><span class='line'>*)
</span><span class='line'>  while [ $# -gt 1 ] ; do 
</span><span class='line'>    HOST_PARAM="$HOST_PARAM -I $1"
</span><span class='line'>    shift
</span><span class='line'>  done
</span><span class='line'>  FUNC=$1
</span><span class='line'>  ;;
</span><span class='line'>esac
</span><span class='line'>
</span><span class='line'>cd $(cd $(dirname $0); pwd)
</span><span class='line'>
</span><span class='line'>./change_site.sh "$FUNC"
</span><span class='line'>
</span><span class='line'>if [[ "$HOST_PARAM" != "" && ! "$HOST_PARAM" =~ */* ]] ; then
</span><span class='line'>  mco shell $HOST_PARAM run -- `which puppet` agent -t
</span><span class='line'>else
</span><span class='line'>  mco puppet $HOST_PARAM runall 20
</span><span class='line'>fi</span></code></pre></td></tr></table></div></figure>


<p>由于机器增加比较多，且网络环境变的复杂化。把原来的2个分组修改成4个。不同的网络段和功能分别设置不同的广播端口。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./pexec.sh /hadoop-slaver.$/ gmond.site 
</span><span class='line'>
</span><span class='line'># 采集数据的节点重启后，其他发送数据的节点貌似都需要重启。
</span><span class='line'>$ screen
</span><span class='line'>$ for ((i=1;i&lt;=53;i++)); do  mco shell -I /hadoop-slaver${i}.$/ run -- ' service gmond restart ' ; done 
</span><span class='line'># 这个确认搞的很麻烦，
</span><span class='line'># 想通过ganglia-web获取数据然后判断是否有数据进行重启。</span></code></pre></td></tr></table></div></figure>


<p>Ganglia删除某节点后，如果要从rrds上去掉改节点的信息，需要：重启对应收集的gmond，对应集群的rrds目录，然后重启gmetad。</p>

<h2>总结</h2>

<p>现在添加机器，直接连上puppetserver机器然后执行几个命令就可以搞定；</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HOST=new-host-name 
</span><span class='line'># 无密钥登录和puppet/mco
</span><span class='line'>PASSWD=new-host-root-password ./prepare.sh $HOST
</span><span class='line'>
</span><span class='line'>./pexec.sh $HOST new-hadoop.site
</span><span class='line'>./pexec.sh $HOST gmond.site # 当前需要到web界面确认新节点的数据是否被采集</span></code></pre></td></tr></table></div></figure>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[K8s Hadoop Deploy]]></title>
    <link href="http://winseliu.com/blog/2017/04/14/k8s-hadoop-deploy/"/>
    <updated>2017-04-14T10:56:39+08:00</updated>
    <id>http://winseliu.com/blog/2017/04/14/k8s-hadoop-deploy</id>
    <content type="html"><![CDATA[<p>折磨了一个多星期，最后还是调通了。折磨源于不自知，源于孤单，源于自负，后来通过扩展、查阅资料、请教同事顺利解决。简单部署可以查看<a href="https://github.com/winse/docker-hadoop">README.md</a> 。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum install docker-engine-1.12.6 docker-engine-selinux-1.12.6 -y
</span><span class='line'>
</span><span class='line'>cd kube-deploy
</span><span class='line'>vi hosts
</span><span class='line'>vi k8s.profile
</span><span class='line'>./rsync-deploy.sh
</span><span class='line'>
</span><span class='line'>cd docker-multinode/
</span><span class='line'>./master.sh or ./worker.sh
</span><span class='line'>
</span><span class='line'>docker save gcr.io/google_containers/etcd-amd64:3.0.4 | docker-bs load
</span><span class='line'>docker save quay.io/coreos/flannel:v0.6.1-amd64 | docker-bs load
</span><span class='line'>
</span><span class='line'>cd kube-deploy/hadoop/kubenetes/
</span><span class='line'>./prepare.sh
</span><span class='line'>kubectl create -f hadoop-master2.yaml
</span><span class='line'>kubectl create -f hadoop-slaver.yaml </span></code></pre></td></tr></table></div></figure>


<p>Tip：使用一套配置就可以启动多个集群，在 <code>kubectl create</code> 后面加上 <code>-n namespace</code> 即可。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@cu2 kubenetes]# kubectl create namespace hd1
</span><span class='line'>[root@cu2 kubenetes]# kubectl create namespace hd2
</span><span class='line'>
</span><span class='line'>[root@cu2 kubenetes]# ./prepare.sh hd1
</span><span class='line'>[root@cu2 kubenetes]# kubectl create -f hadoop-master2.yaml -n hd1
</span><span class='line'>[root@cu2 kubenetes]# kubectl create -f hadoop-slaver.yaml -n hd1
</span><span class='line'>[root@cu2 kubenetes]# ./prepare.sh hd2
</span><span class='line'>[root@cu2 kubenetes]# kubectl create -f hadoop-master2.yaml -n hd2
</span><span class='line'>[root@cu2 kubenetes]# kubectl create -f hadoop-slaver.yaml -n hd2
</span><span class='line'>
</span><span class='line'>[root@cu2 kubenetes]# kubectl get pods --all-namespaces
</span><span class='line'>NAMESPACE     NAME                                    READY     STATUS    RESTARTS   AGE
</span><span class='line'>hd1           hadoop-master2                          1/1       Running   0          28s
</span><span class='line'>hd1           slaver-rc-fdcsw                         1/1       Running   0          18s
</span><span class='line'>hd1           slaver-rc-qv964                         1/1       Running   0          18s
</span><span class='line'>hd2           hadoop-master2                          1/1       Running   0          26s
</span><span class='line'>hd2           slaver-rc-0vdfk                         1/1       Running   0          17s
</span><span class='line'>hd2           slaver-rc-r7g84                         1/1       Running   0          17s
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>现在想来其实就是 <strong> dockerd &ndash;ip-masq=false </strong>的问题（所有涉及的dockerd都需要加）。 还有就是一台机器单机下的容器互相访问，源IP都错也是安装了openvpn所导致对所有过eth0的都加了MASQUERADE。</p>

<p>根源就在于请求的源地址被替换，也就是iptables的转发进行了SNAT。关于iptables转发这篇文章讲的非常清晰；<a href="http://fancyxinyu.blog.163.com/blog/static/18232136620136185434661/">IPtables之四：NAT原理和配置  </a> 。</p>

<h2>所遇到的问题</h2>

<p>没加ip-masq之前，namenode收到datanode的请求后，源地址是flannel.0的ip: 10.1.98.0。</p>

<p>namenode对应的日志为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2017-04-09 07:22:06,920 INFO org.apache.hadoop.hdfs.StateChange: BLOCK* registerDatanode: from DatanodeRegistration(10.1.98.0, datanodeUuid=5086c549-f3bb-4ef6-8f56-05b1f7adb7d3, infoPort=50075, ipcPort=50020, storageInfo=lv=-56;cid=CID-522174fa-6e7b-4c3f-ae99-23c3018e35d7;nsid=1613705851;c=0) storage 5086c549-f3bb-4ef6-8f56-05b1f7adb7d3
</span><span class='line'>2017-04-09 07:22:06,920 INFO org.apache.hadoop.net.NetworkTopology: Removing a node: /default-rack/10.1.98.0:50010
</span><span class='line'>2017-04-09 07:22:06,921 INFO org.apache.hadoop.net.NetworkTopology: Adding a new node: /default-rack/10.1.98.0:50010</span></code></pre></td></tr></table></div></figure>


<p>一开始以为是flannel的问题，换成yum安装，然后同时flannel把backend切换成vxlan后，还是一样的问题。</p>

<p>最后请教搞网络的同事，应该是请求的源地址被替换了，也就定位到iptables。然后通过查看文档，其实前面也有看到过对应的文章，但是看不明白不知道缘由。</p>

<ul>
<li><a href="https://groups.google.com/d/msg/kubernetes-users/P4uh7y383oo/bPzIRaxhs5gJ">Networking Problem in creating HDFS cluster. - Eugene Yakubovich </a></li>
<li><a href="https://groups.google.com/d/msg/kubernetes-users/P4uh7y383oo/a1GIV4hcAgAJ">Networking Problem in creating HDFS cluster. - Huihui He </a></li>
<li><a href="https://developer.ibm.com/recipes/tutorials/networking-your-docker-containers-using-docker0-bridge/">Networking your docker containers using docker0 bridge</a></li>
</ul>


<p>iptables的部分相关信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@cu2 ~]# iptables -S -t nat
</span><span class='line'>...
</span><span class='line'>-A PREROUTING -m comment --comment "kubernetes service portals" -j KUBE-SERVICES
</span><span class='line'>-A PREROUTING -j PREROUTING_direct
</span><span class='line'>-A PREROUTING -j PREROUTING_ZONES_SOURCE
</span><span class='line'>-A PREROUTING -j PREROUTING_ZONES
</span><span class='line'>-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER
</span><span class='line'>-A OUTPUT -m comment --comment "kubernetes service portals" -j KUBE-SERVICES
</span><span class='line'>-A OUTPUT -j OUTPUT_direct
</span><span class='line'>-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER
</span><span class='line'>-A POSTROUTING -s 10.1.34.0/24 ! -o docker0 -j MASQUERADE
</span><span class='line'>-A POSTROUTING -m comment --comment "kubernetes postrouting rules" -j KUBE-POSTROUTING
</span><span class='line'>-A POSTROUTING -j POSTROUTING_direct
</span><span class='line'>-A POSTROUTING -j POSTROUTING_ZONES_SOURCE
</span><span class='line'>-A POSTROUTING -j POSTROUTING_ZONES
</span><span class='line'>-A KUBE-MARK-DROP -j MARK --set-xmark 0x8000/0x8000
</span><span class='line'>-A KUBE-MARK-MASQ -j MARK --set-xmark 0x4000/0x4000
</span><span class='line'>-A KUBE-POSTROUTING -m comment --comment "kubernetes service traffic requiring SNAT" -m mark --mark 0x4000/0x4000 -j MASQUERADE
</span><span class='line'>-A KUBE-SEP-75CPIAPDB4MAVFWI -s 10.1.40.3/32 -m comment --comment "kube-system/kube-dns:dns-tcp" -j KUBE-MARK-MASQ
</span><span class='line'>-A KUBE-SEP-75CPIAPDB4MAVFWI -p tcp -m comment --comment "kube-system/kube-dns:dns-tcp" -m tcp -j DNAT --to-destination 10.1.40.3:53
</span><span class='line'>-A KUBE-SEP-IWNPEB4T46P6VG5J -s 192.168.0.148/32 -m comment --comment "default/kubernetes:https" -j KUBE-MARK-MASQ
</span><span class='line'>-A KUBE-SEP-IWNPEB4T46P6VG5J -p tcp -m comment --comment "default/kubernetes:https" -m recent --set --name KUBE-SEP-IWNPEB4T46P6VG5J --mask 255.255.255.255 --rsource -m tcp -j DNAT --to-destination 192.168.0.148:6443
</span><span class='line'>-A KUBE-SEP-UYUINV25NDNSKNUW -s 10.1.40.3/32 -m comment --comment "kube-system/kube-dns:dns" -j KUBE-MARK-MASQ
</span><span class='line'>-A KUBE-SEP-UYUINV25NDNSKNUW -p udp -m comment --comment "kube-system/kube-dns:dns" -m udp -j DNAT --to-destination 10.1.40.3:53
</span><span class='line'>-A KUBE-SEP-XDHL2OHX2ICPQHKI -s 10.1.40.2/32 -m comment --comment "kube-system/kubernetes-dashboard:" -j KUBE-MARK-MASQ
</span><span class='line'>-A KUBE-SEP-XDHL2OHX2ICPQHKI -p tcp -m comment --comment "kube-system/kubernetes-dashboard:" -m tcp -j DNAT --to-destination 10.1.40.2:9090
</span><span class='line'>-A KUBE-SERVICES -d 10.0.0.1/32 -p tcp -m comment --comment "default/kubernetes:https cluster IP" -m tcp --dport 443 -j KUBE-SVC-NPX46M4PTMTKRN6Y
</span><span class='line'>-A KUBE-SERVICES -d 10.0.0.95/32 -p tcp -m comment --comment "kube-system/kubernetes-dashboard: cluster IP" -m tcp --dport 80 -j KUBE-SVC-XGLOHA7QRQ3V22RZ
</span><span class='line'>-A KUBE-SERVICES -d 10.0.0.10/32 -p udp -m comment --comment "kube-system/kube-dns:dns cluster IP" -m udp --dport 53 -j KUBE-SVC-TCOU7JCQXEZGVUNU
</span><span class='line'>-A KUBE-SERVICES -d 10.0.0.10/32 -p tcp -m comment --comment "kube-system/kube-dns:dns-tcp cluster IP" -m tcp --dport 53 -j KUBE-SVC-ERIFXISQEP7F7OF4
</span><span class='line'>-A KUBE-SERVICES -m comment --comment "kubernetes service nodeports; NOTE: this must be the last rule in this chain" -m addrtype --dst-type LOCAL -j KUBE-NODEPORTS
</span><span class='line'>-A KUBE-SVC-ERIFXISQEP7F7OF4 -m comment --comment "kube-system/kube-dns:dns-tcp" -j KUBE-SEP-75CPIAPDB4MAVFWI
</span><span class='line'>-A KUBE-SVC-NPX46M4PTMTKRN6Y -m comment --comment "default/kubernetes:https" -m recent --rcheck --seconds 10800 --reap --name KUBE-SEP-IWNPEB4T46P6VG5J --mask 255.255.255.255 --rsource -j KUBE-SEP-IWNPEB4T46P6VG5J
</span><span class='line'>-A KUBE-SVC-NPX46M4PTMTKRN6Y -m comment --comment "default/kubernetes:https" -j KUBE-SEP-IWNPEB4T46P6VG5J
</span><span class='line'>-A KUBE-SVC-TCOU7JCQXEZGVUNU -m comment --comment "kube-system/kube-dns:dns" -j KUBE-SEP-UYUINV25NDNSKNUW
</span><span class='line'>-A KUBE-SVC-XGLOHA7QRQ3V22RZ -m comment --comment "kube-system/kubernetes-dashboard:" -j KUBE-SEP-XDHL2OHX2ICPQHKI</span></code></pre></td></tr></table></div></figure>


<p>在dockerd服务脚本加上 <code>--ip-masq=false</code> 后，<code>-A POSTROUTING -s 10.1.34.0/24 ! -o docker0 -j MASQUERADE</code> 这一句就没有了，也就是不会进行源地址重写了，这样请求发送到namenode后还是datanode容器的IP。问题解决，原因简单的让人欲哭无泪啊。</p>

<p>写yaml遇到的一些其他问题：</p>

<ul>
<li><a href="http://andykdocs.de/development/Docker/Fixing+the+Docker+TERM+variable+issue">Fixing the Docker TERM variable issue</a></li>
<li><a href="http://stackoverflow.com/questions/27195466/hdfs-datanode-denied-communication-with-namenode-because-hostname-cannot-be-reso">hdfs Datanode denied communication with namenode because hostname cannot be resolved</a></li>
</ul>


<p>当然还有很多其他的问题，这篇就写这么多，优化工作后面的弄好了再写。</p>

<h2>中间过程步骤记录</h2>

<p>记录下中间通过yum安装etcd和flanneld的过程。物理机安装flanneld会把配置docker环境变量（/run/flannel/subnet.env）加入启动脚本。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>安装docker-v1.12
</span><span class='line'>https://docs.docker.com/v1.12/
</span><span class='line'>https://docs.docker.com/v1.12/engine/installation/linux/centos/
</span><span class='line'>
</span><span class='line'>sudo tee /etc/yum.repos.d/docker.repo &lt;&lt;-'EOF'
</span><span class='line'>[dockerrepo]
</span><span class='line'>name=Docker Repository
</span><span class='line'>baseurl=https://yum.dockerproject.org/repo/main/centos/7/
</span><span class='line'>enabled=1
</span><span class='line'>gpgcheck=1
</span><span class='line'>gpgkey=https://yum.dockerproject.org/gpg
</span><span class='line'>EOF
</span><span class='line'>
</span><span class='line'>https://yum.dockerproject.org/repo/main/centos/7/Packages/
</span><span class='line'>[root@cu3 yum.repos.d]# yum install docker-engine-1.12.6 docker-engine-selinux-1.12.6
</span><span class='line'>
</span><span class='line'>https://kubernetes.io/docs/getting-started-guides/centos/centos_manual_config/
</span><span class='line'>
</span><span class='line'>cat &gt; /etc/yum.repos.d/virt7-docker-common-release.repo &lt;&lt;EOF
</span><span class='line'>[virt7-docker-common-release]
</span><span class='line'>name=virt7-docker-common-release
</span><span class='line'>baseurl=http://cbs.centos.org/repos/virt7-docker-common-release/x86_64/os/
</span><span class='line'>gpgcheck=0
</span><span class='line'>EOF
</span><span class='line'>
</span><span class='line'>yum -y install --enablerepo=virt7-docker-common-release etcd flannel
</span><span class='line'>yum -y install --enablerepo=virt7-docker-common-release flannel
</span><span class='line'>
</span><span class='line'>- ETCD配置
</span><span class='line'>[root@cu3 docker-multinode]# 
</span><span class='line'>etcdctl mkdir /kube-centos/network
</span><span class='line'>etcdctl set /kube-centos/network/config "{ \"Network\": \"10.1.0.0/16\", \"SubnetLen\": 24, \"Backend\": { \"Type\": \"vxlan\" } }"
</span><span class='line'>
</span><span class='line'>- FlANNEL
</span><span class='line'>[root@cu3 ~]# cat /etc/sysconfig/flanneld
</span><span class='line'># Flanneld configuration options  
</span><span class='line'>
</span><span class='line'># etcd url location.  Point this to the server where etcd runs
</span><span class='line'>FLANNEL_ETCD_ENDPOINTS="http://cu3:2379"
</span><span class='line'>
</span><span class='line'># etcd config key.  This is the configuration key that flannel queries
</span><span class='line'># For address range assignment
</span><span class='line'>FLANNEL_ETCD_PREFIX="/kube-centos/network"
</span><span class='line'>
</span><span class='line'># Any additional options that you want to pass
</span><span class='line'>#FLANNEL_OPTIONS=""
</span><span class='line'>
</span><span class='line'>[root@cu2 yum.repos.d]# systemctl daemon-reload
</span><span class='line'>
</span><span class='line'>[root@cu2 yum.repos.d]# cat /run/flannel/subnet.env
</span><span class='line'>
</span><span class='line'>[root@cu2 ~]# systemctl cat docker
</span><span class='line'>...
</span><span class='line'># /usr/lib/systemd/system/docker.service.d/flannel.conf
</span><span class='line'>[Service]
</span><span class='line'>EnvironmentFile=-/run/flannel/docker </span></code></pre></td></tr></table></div></figure>


<p>测试过程中有yaml配置中启动sshd，然后启动容器后，通过手动启动namenode、datanode的方式来测试：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd hadoop-2.6.5
</span><span class='line'>gosu hadoop mkdir /data/bigdata
</span><span class='line'>gosu hadoop sbin/hadoop-daemon.sh start datanode 
</span><span class='line'>
</span><span class='line'>cd hadoop-2.6.5/
</span><span class='line'>gosu hadoop  bin/hadoop namenode -format 
</span><span class='line'>gosu hadoop sbin/hadoop-daemon.sh start namenode</span></code></pre></td></tr></table></div></figure>


<p>后来发现问题出在iptables后，又回到原来的docker-bootstrap启动，需要删除flannel.1的网络：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># yum安装flanneld后停止 https://kubernetes.io/docs/getting-started-guides/scratch/
</span><span class='line'>ip link set flannel.1 down
</span><span class='line'>ip link delete flannel.1
</span><span class='line'>route -n
</span><span class='line'>
</span><span class='line'>rm /usr/lib/systemd/system/docker.service.d/flannel.conf </span></code></pre></td></tr></table></div></figure>


<p>开了防火墙的话，把容器的端加入到信任列表：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>systemctl enable firewalld && systemctl start firewalld
</span><span class='line'>
</span><span class='line'>firewall-cmd --zone=trusted --add-source=10.0.0.0/8 --permanent 
</span><span class='line'>firewall-cmd --zone=trusted --add-source=192.168.0.0/16 --permanent 
</span><span class='line'>firewall-cmd --reload</span></code></pre></td></tr></table></div></figure>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[K8s Harbor Config]]></title>
    <link href="http://winseliu.com/blog/2017/03/30/k8s-harbor-config/"/>
    <updated>2017-03-30T14:21:50+08:00</updated>
    <id>http://winseliu.com/blog/2017/03/30/k8s-harbor-config</id>
    <content type="html"><![CDATA[<p>为了对比，还是想写写在centos7上面<a href="https://github.com/vmware/harbor/tree/master/make/kubernetes">安装Harbor</a>：太简单了，想想当初在6上面安装那酸爽($.$)。。。</p>

<h2>环境说明</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@cu2 kube-deploy]# yum install -y redhat-lsb
</span><span class='line'>[root@cu2 kube-deploy]# lsb_release -a
</span><span class='line'>LSB Version:    :core-4.1-amd64:core-4.1-noarch:cxx-4.1-amd64:cxx-4.1-noarch:desktop-4.1-amd64:desktop-4.1-noarch:languages-4.1-amd64:languages-4.1-noarch:printing-4.1-amd64:printing-4.1-noarch
</span><span class='line'>Distributor ID: CentOS
</span><span class='line'>Description:    CentOS Linux release 7.3.1611 (Core) 
</span><span class='line'>Release:        7.3.1611
</span><span class='line'>Codename:       Core
</span><span class='line'>
</span><span class='line'>[root@cu2 kube-deploy]# docker version
</span><span class='line'>Client:
</span><span class='line'> Version:      1.12.6
</span><span class='line'> API version:  1.24
</span><span class='line'> Go version:   go1.6.4
</span><span class='line'> Git commit:   78d1802
</span><span class='line'> Built:        Tue Jan 10 20:20:01 2017
</span><span class='line'> OS/Arch:      linux/amd64
</span><span class='line'>
</span><span class='line'>Server:
</span><span class='line'> Version:      1.12.6
</span><span class='line'> API version:  1.24
</span><span class='line'> Go version:   go1.6.4
</span><span class='line'> Git commit:   78d1802
</span><span class='line'> Built:        Tue Jan 10 20:20:01 2017
</span><span class='line'> OS/Arch:      linux/amd64
</span></code></pre></td></tr></table></div></figure>


<h2>使用docker-multinode搭建的环境</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@cu2 kube-deploy]# kubectl version
</span><span class='line'>Client Version: version.Info{Major:"1", Minor:"5", GitVersion:"v1.5.6", GitCommit:"114f8911f9597be669a747ab72787e0bd74c9359", GitTreeState:"clean", BuildDate:"2017-03-28T13:36:31Z", GoVersion:"go1.7.4", Compiler:"gc", Platform:"linux/amd64"}
</span><span class='line'>Server Version: version.Info{Major:"1", Minor:"5", GitVersion:"v1.5.6", GitCommit:"114f8911f9597be669a747ab72787e0bd74c9359", GitTreeState:"clean", BuildDate:"2017-03-28T13:36:31Z", GoVersion:"go1.7.4", Compiler:"gc", Platform:"linux/amd64"}</span></code></pre></td></tr></table></div></figure>


<h2>安装配置</h2>

<ul>
<li>证书准备</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@cu2 ~]# cd /data/kubernetes/
</span><span class='line'>[root@cu2 kubernetes]# cd kube-deploy/
</span><span class='line'>[root@cu2 kube-deploy]# cat easy-rsa.sh 
</span><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'># cd /data/kubernetes
</span><span class='line'>cd ..
</span><span class='line'>
</span><span class='line'>git clone https://github.com/OpenVPN/easy-rsa.git
</span><span class='line'>cd easy-rsa/easyrsa3
</span><span class='line'>
</span><span class='line'>echo "# ======  CA  ======= #"
</span><span class='line'>./easyrsa init-pki
</span><span class='line'>./easyrsa build-ca #记住输入的密码，下面颁发证书还会用到
</span><span class='line'>
</span><span class='line'>echo "# ======  CERT  ======= #"
</span><span class='line'>./easyrsa gen-req cu nopass
</span><span class='line'>./easyrsa sign-req server cu #commonName填将要用到的域名咯</span></code></pre></td></tr></table></div></figure>


<ul>
<li>下载离线镜像</li>
</ul>


<p><a href="http://pan.baidu.com/s/1c1Rtnag">harbor-offline-installer-0.5.0.tgz</a>，加载harbor.0.5.0.tgz里面的镜像</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@cu2 harbor-make]# docker images 
</span><span class='line'>REPOSITORY                                            TAG                 IMAGE ID            CREATED             SIZE
</span><span class='line'>vmware/harbor-jobservice                              0.5.0               1700fbe602a0        3 months ago        148.4 MB
</span><span class='line'>vmware/harbor-ui                                      0.5.0               6db5718f2012        3 months ago        209.6 MB
</span><span class='line'>vmware/harbor-db                                      0.5.0               c401344852c6        3 months ago        326.8 MB
</span><span class='line'>nginx                                                 1.11.5              cc16e49f1304        4 months ago        181.4 MB
</span><span class='line'>registry                                              2.5.0               44a8766d1758        8 months ago        33.28 MB
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>修改配置和yaml配置的镜像名称</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@cu2 harbor-make]# vi harbor.cfg
</span><span class='line'>
</span><span class='line'>hostname = cu.eshore.cn
</span><span class='line'>ui_url_protocol = https
</span><span class='line'>ssl_cert = /data/kubernetes/easy-rsa/easyrsa3/pki/issued/cu.crt
</span><span class='line'>ssl_cert_key = /data/kubernetes/easy-rsa/easyrsa3/pki/private/cu.key 
</span><span class='line'>
</span><span class='line'>[root@cu2 harbor-make]# find kubernetes/ -name "*.rc.yaml" 
</span><span class='line'>kubernetes/nginx/nginx.rc.yaml
</span><span class='line'>kubernetes/mysql/mysql.rc.yaml
</span><span class='line'>kubernetes/registry/registry.rc.yaml
</span><span class='line'>kubernetes/ui/ui.rc.yaml
</span><span class='line'>kubernetes/jobservice/jobservice.rc.yaml</span></code></pre></td></tr></table></div></figure>


<ul>
<li>启动</li>
</ul>


<p>k8s启动的配置用github上最新的，不要用release下面的！！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@cu2 harbor-make]# cd kubernetes/
</span><span class='line'>[root@cu2 kubernetes]# python prepare 
</span><span class='line'>
</span><span class='line'>[root@cu2 kubernetes]# cat kube.sh 
</span><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'>OP=${1:-"apply"}
</span><span class='line'>
</span><span class='line'>kubectl $OP -f pv/
</span><span class='line'>
</span><span class='line'>kubectl $OP -f jobservice/jobservice.cm.yaml
</span><span class='line'>kubectl $OP -f mysql/mysql.cm.yaml
</span><span class='line'>kubectl $OP -f nginx/nginx.cm.yaml
</span><span class='line'>kubectl $OP -f registry/registry.cm.yaml
</span><span class='line'>kubectl $OP -f ui/ui.cm.yaml
</span><span class='line'>
</span><span class='line'>kubectl $OP -f jobservice/jobservice.svc.yaml
</span><span class='line'>kubectl $OP -f mysql/mysql.svc.yaml
</span><span class='line'>kubectl $OP -f nginx/nginx.svc.yaml
</span><span class='line'>kubectl $OP -f registry/registry.svc.yaml
</span><span class='line'>kubectl $OP -f ui/ui.svc.yaml
</span><span class='line'>
</span><span class='line'>kubectl $OP -f registry/registry.rc.yaml 
</span><span class='line'>kubectl $OP -f mysql/mysql.rc.yaml 
</span><span class='line'>kubectl $OP -f jobservice/jobservice.rc.yaml 
</span><span class='line'>kubectl $OP -f ui/ui.rc.yaml 
</span><span class='line'>kubectl $OP -f nginx/nginx.rc.yaml
</span></code></pre></td></tr></table></div></figure>


<p>客户端CA</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@cu2 kube-deploy]# cat rsync-deploy.sh 
</span><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'>SERVICES="$@"
</span><span class='line'>HOSTS=$(echo cu{1..5} )
</span><span class='line'>
</span><span class='line'>#########
</span><span class='line'># Harbor
</span><span class='line'>if echo "$SERVICES" | grep harbor &gt;/dev/null ; then 
</span><span class='line'>
</span><span class='line'>  sed -i '/cu.eshore.cn/d' /etc/hosts
</span><span class='line'>
</span><span class='line'>  cat &gt;&gt;/etc/hosts &lt;&lt;EOF
</span><span class='line'>$( kubectl get service nginx -n default -o jsonpath="{..clusterIP}" ) cu.eshore.cn
</span><span class='line'>EOF
</span><span class='line'>  echo "Updated Local Hosts"
</span><span class='line'>
</span><span class='line'>  for h in $HOSTS ; do
</span><span class='line'>    if [[ $h != "$(hostname)" ]] ; then
</span><span class='line'>      rsync -az /etc/hosts $h:/etc/
</span><span class='line'>    fi
</span><span class='line'>
</span><span class='line'>    ssh $h "mkdir -p /etc/docker/certs.d/cu.eshore.cn/"
</span><span class='line'>    rsync -az /data/kubernetes/easy-rsa/easyrsa3/pki/ca.crt $h:/etc/docker/certs.d/cu.eshore.cn/
</span><span class='line'>
</span><span class='line'>    ssh $h "docker login -u admin -p Harbor12345 cu.eshore.cn"
</span><span class='line'>  done
</span><span class='line'>  echo "Harbor Rsync Succeeded"
</span><span class='line'>
</span><span class='line'>fi 
</span></code></pre></td></tr></table></div></figure>


<p>搞定，上传下载一个镜像试试：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@cu1 dev]# docker build -t cu.eshore.cn/library/codis:3.2 codis/
</span><span class='line'>[root@cu1 dev]# docker push cu.eshore.cn/library/codis:3.2
</span><span class='line'>
</span><span class='line'>[root@cu2 ~]# docker pull cu.eshore.cn/library/codis:3.2
</span><span class='line'>3.2: Pulling from library/codis
</span><span class='line'>386a066cd84a: Already exists 
</span><span class='line'>a3ed95caeb02: Pull complete 
</span><span class='line'>b1d31257c103: Pull complete 
</span><span class='line'>0e627f083b66: Pull complete 
</span><span class='line'>83912002f3f9: Pull complete 
</span><span class='line'>fc5e0ef7d361: Pull complete 
</span><span class='line'>47fe51a74a06: Pull complete 
</span><span class='line'>08dacccac43c: Pull complete 
</span><span class='line'>ec5a5e8fd71b: Pull complete 
</span><span class='line'>83f9da97d228: Pull complete 
</span><span class='line'>d4735c06cafa: Pull complete 
</span><span class='line'>3a4dc262a84d: Pull complete 
</span><span class='line'>bcf78ab0a1a9: Pull complete 
</span><span class='line'>7ac5a6fd0bf8: Pull complete 
</span><span class='line'>Digest: sha256:1c9280840222d736b7419b7e896b6286709d08e53890ae9e3d18062d61a9ad58
</span><span class='line'>Status: Downloaded newer image for cu.eshore.cn/library/codis:3.2
</span><span class='line'>
</span><span class='line'>[root@cu3 ~]# docker pull cu.eshore.cn/library/codis:3.2
</span><span class='line'>...
</span><span class='line'>layers from manifest don't match image configuration 暂时不清楚啥问题，临时解决。。。囧
</span><span class='line'>[root@cu2 data]# docker save cu.eshore.cn/library/codis:3.2 | ssh cu3 docker load</span></code></pre></td></tr></table></div></figure>


<h2>小结</h2>

<p>高版本的docker和k8s对环境变量和config volumes都支持，配置相对就很简单。</p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codis使用进阶]]></title>
    <link href="http://winseliu.com/blog/2017/03/23/codis-usage2/"/>
    <updated>2017-03-23T17:48:55+08:00</updated>
    <id>http://winseliu.com/blog/2017/03/23/codis-usage2</id>
    <content type="html"><![CDATA[<p>去年年中的时刻有安装过codis。当时因为任务紧就使用jedis的ShardedJedisPool功能粗略的解决，由于是自己手动路由和管理，维护起来太难，特别是当初设置的实例数不够用时，相当麻烦。</p>

<p>年初项目各种测试，于是有些闲暇的时间，重新弄一弄redis cluster。算是搭建一个环境来测试：</p>

<p>版本：</p>

<ul>
<li>codis-3.2</li>
<li>centos6</li>
</ul>


<h2>测试环境编译安装</h2>

<p>现在的版本已经有了全部的依赖，直接编译即可。（centos6和官网提供的编译版本不兼容）</p>

<ul>
<li><a href="https://github.com/CodisLabs/codis/blob/release3.2/doc/tutorial_zh.md#0-%E4%B8%8B%E8%BD%BD%E4%B8%8E%E7%BC%96%E8%AF%91">官网文档</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tar zxvf go1.6.2.linux-amd64.tar.gz 
</span><span class='line'>
</span><span class='line'>/etc/profile
</span><span class='line'>export GOROOT=/usr/local/go
</span><span class='line'>export GOPATH=/opt/go
</span><span class='line'>export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
</span><span class='line'>
</span><span class='line'>-
</span><span class='line'>
</span><span class='line'>[root@cu2 CodisLabs]# pwd
</span><span class='line'>/opt/go/src/github.com/CodisLabs
</span><span class='line'>
</span><span class='line'>[root@cu2 CodisLabs]# git clone --branch release3.2  https://github.com/CodisLabs/codis.git 
</span><span class='line'>
</span><span class='line'>[root@cu2 CodisLabs]# cd codis/
</span><span class='line'>
</span><span class='line'>[root@cu2 codis]# make 
</span><span class='line'>
</span><span class='line'>[root@cu2 codis]# ll bin/
</span><span class='line'>total 101292
</span><span class='line'>drwxr-xr-x 4 root root     4096 Mar 15 12:58 assets
</span><span class='line'>-rwxr-xr-x 1 root root 21036930 Mar 15 12:58 codis-admin
</span><span class='line'>-rwxr-xr-x 1 root root 22343059 Mar 15 12:58 codis-dashboard
</span><span class='line'>-rwxr-xr-x 1 root root 18378506 Mar 15 12:58 codis-fe
</span><span class='line'>-rwxr-xr-x 1 root root 22675153 Mar 15 12:58 codis-proxy
</span><span class='line'>-rwxr-xr-x 1 root root  7982967 Mar 15 12:58 codis-server
</span><span class='line'>-rwxr-xr-x 1 root root  5580431 Mar 15 12:58 redis-benchmark
</span><span class='line'>-rwxr-xr-x 1 root root  5712419 Mar 15 12:58 redis-cli
</span><span class='line'>-rw-r--r-- 1 root root      170 Mar 15 12:58 version
</span><span class='line'>[root@cu2 codis]# cat bin/version 
</span><span class='line'>version = 2017-03-15 00:40:41 +0800 @be9ee25c63a64396b5fb0076447be560497b909d @3.2-beta-10-gbe9ee25
</span><span class='line'>compile = 2017-03-15 12:58:23 +0800 by go version go1.6.2 linux/amd64
</span><span class='line'>
</span><span class='line'># 生成默认配置
</span><span class='line'>[root@cu2 codis]# bin/codis-dashboard --default-config | tee dashboard.toml
</span><span class='line'>[root@cu2 codis]# bin/codis-proxy --default-config | tee proxy.toml
</span></code></pre></td></tr></table></div></figure>


<h2>生产部署</h2>

<p>把测试环境的GOPATH和GOROOT全部拷贝到生产即可。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ud@cu-ud6 opt]$ ll
</span><span class='line'>drwxrwxr-x.  2 ud   ud   4096 3月  18 00:10 bin
</span><span class='line'>drwxr-xr-x. 11 ud   ud   4096 4月  20 2016 go
</span><span class='line'>drwxr-xr-x.  4 ud   ud   4096 3月  15 12:58 gopath
</span><span class='line'>drwxr-xr-x.  8 ud   ud   4096 3月  17 20:13 jdk1.8.0_92
</span><span class='line'>drwxr-xr-x. 10 ud   ud   4096 2月  20 2014 zookeeper-3.4.6
</span><span class='line'>
</span><span class='line'>[ud@cu-ud6 opt]$ ll bin
</span><span class='line'>总用量 24
</span><span class='line'>-rw-rw-r--. 1 ud ud 234 3月  17 20:36 codis.profile
</span><span class='line'>lrwxrwxrwx. 1 ud ud  54 3月  17 20:34 redis-cli -&gt; ../gopath/src/github.com/CodisLabs/codis/bin/redis-cli
</span><span class='line'>-rwxrwxr-x. 1 ud ud 487 3月  17 20:54 start-codis-dashboard.sh
</span><span class='line'>-rwxrwxr-x. 1 ud ud 310 3月  18 00:10 start-codis-proxy.sh
</span><span class='line'>-rwxrwxr-x. 1 ud ud 335 3月  17 21:17 start-redis.sh
</span><span class='line'>-rwxrwxr-x. 1 ud ud 323 3月  17 20:55 start-zoo.sh
</span><span class='line'>
</span><span class='line'>[ud@cu-ud6 opt]$ for f in $( find bin -type f ) ; do echo " =============== $f ================= "; cat "$f" ; done
</span><span class='line'> =============== bin/codis.profile ================= 
</span><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'>export GOROOT=/opt/go
</span><span class='line'>export GOPATH=/opt/gopath
</span><span class='line'>export CODIS_HOME=$GOPATH/src/github.com/CodisLabs/codis/
</span><span class='line'>export LOG_DIR=/var/log
</span><span class='line'>
</span><span class='line'>export JAVA_HOME=/opt/jdk1.8.0_92
</span><span class='line'>
</span><span class='line'>export PATH=$JAVA_HOME/bin:$GOPATH/bin:$GOROOT/bin:$PATH
</span><span class='line'>
</span><span class='line'> =============== bin/start-zoo.sh ================= 
</span><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'>CODIS_BIN="${BASH_SOURCE-$0}"
</span><span class='line'>CODIS_BIN="$(dirname "${CODIS_BIN}")"
</span><span class='line'>CODIS_BINDIR="$(cd "${CODIS_BIN}"; pwd)"
</span><span class='line'>
</span><span class='line'>source $CODIS_BINDIR/codis.profile
</span><span class='line'>
</span><span class='line'>export ZOO_LOG_DIR=$LOG_DIR
</span><span class='line'>
</span><span class='line'>cd /opt/zookeeper-3.4.6
</span><span class='line'>sed 's@dataDir=/tmp/zookeeper@dataDir=/data/zookeeper@' conf/zoo_sample.cfg &gt;conf/zoo.cfg
</span><span class='line'>
</span><span class='line'>bin/zkServer.sh start
</span><span class='line'>
</span><span class='line'> =============== bin/start-codis-dashboard.sh ================= 
</span><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'>CODIS_BIN="${BASH_SOURCE-$0}"
</span><span class='line'>CODIS_BIN="$(dirname "${CODIS_BIN}")"
</span><span class='line'>CODIS_BINDIR="$(cd "${CODIS_BIN}"; pwd)"
</span><span class='line'>
</span><span class='line'>source $CODIS_BINDIR/codis.profile
</span><span class='line'>
</span><span class='line'>cd $CODIS_HOME
</span><span class='line'>nohup bin/codis-dashboard \
</span><span class='line'>  --ncpu=4 \
</span><span class='line'>  --config=dashboard.toml \
</span><span class='line'>  --log=$LOG_DIR/codis_dashboard.log \
</span><span class='line'>  --log-level=INFO \
</span><span class='line'>  &gt;/dev/null 2&gt;&1 &
</span><span class='line'>
</span><span class='line'>nohup bin/codis-fe \
</span><span class='line'>  --ncpu=4 \
</span><span class='line'>  --zookeeper=127.0.0.1:2181 \
</span><span class='line'>  --listen=0.0.0.0:28080 \
</span><span class='line'>  --log=$LOG_DIR/codis_fe.log \
</span><span class='line'>  --log-level=INFO \
</span><span class='line'>  &gt;/dev/null 2&gt;&1 &
</span><span class='line'>
</span><span class='line'> =============== bin/start-codis-proxy.sh ================= 
</span><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'>CODIS_BIN="${BASH_SOURCE-$0}"
</span><span class='line'>CODIS_BIN="$(dirname "${CODIS_BIN}")"
</span><span class='line'>CODIS_BINDIR="$(cd "${CODIS_BIN}"; pwd)"
</span><span class='line'>
</span><span class='line'>source $CODIS_BINDIR/codis.profile
</span><span class='line'>
</span><span class='line'>cd $CODIS_HOME
</span><span class='line'>nohup bin/codis-proxy \
</span><span class='line'>  --ncpu=24 \
</span><span class='line'>  --config=proxy.toml \
</span><span class='line'>  --log=$LOG_DIR/codis_proxy.log \
</span><span class='line'>  --log-level=INFO \
</span><span class='line'>  &gt;/dev/null 2&gt;&1 &
</span><span class='line'>
</span><span class='line'> =============== bin/start-redis.sh ================= 
</span><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'>CODIS_BIN="${BASH_SOURCE-$0}"
</span><span class='line'>CODIS_BIN="$(dirname "${CODIS_BIN}")"
</span><span class='line'>CODIS_BINDIR="$(cd "${CODIS_BIN}"; pwd)"
</span><span class='line'>
</span><span class='line'>source $CODIS_BINDIR/codis.profile
</span><span class='line'>
</span><span class='line'>PORT=${1:-6379}
</span><span class='line'>
</span><span class='line'>cd $CODIS_HOME
</span><span class='line'>bin/codis-server --daemonize yes --port $PORT --pidfile /var/run/redis_$PORT.pid --logfile $LOG_DIR/redis_$PORT.log --save "" --bind $(hostname) 
</span></code></pre></td></tr></table></div></figure>


<p>环境：</p>

<ul>
<li>zookeeper: cu-ud6</li>
<li>dashboard: cu-ud6</li>
<li>fa: cu-ud6</li>
<li>proxy: cu-ud6/7/8</li>
<li>redis: cu-ud6/7/8:6378/6379</li>
<li>nginx代理: cu-ud9</li>
</ul>


<p>web界面添加步骤：</p>

<ul>
<li>界面上添加proxy : cu6/7/8:11080</li>
<li>再添加group，填数字: &frac12;/&frac34;/5/6</li>
<li>然后添加server : cu-ud6/7/8:6378/6379</li>
<li>最后分配slots</li>
</ul>


<p><img src="http://winseliu.com/images/blogs/codis.jpg" alt="" /></p>

<p>nginx1.11新版本已经支持tcp的代理，可以实现proxy的负载均衡：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 编译Nginx
</span><span class='line'>./configure --with-stream --with-http_ssl_module --with-pcre=src/pcre --with-zlib=src/zlib --prefix=/usr/local/nginx
</span><span class='line'>make && make install
</span><span class='line'>
</span><span class='line'>[ud@cu-ud9 nginx]$ cat conf/nginx.conf
</span><span class='line'>
</span><span class='line'>#user  nobody;
</span><span class='line'>worker_processes  1;
</span><span class='line'>
</span><span class='line'>#error_log  logs/error.log;
</span><span class='line'>error_log  /var/log/nginx_error.log  notice;
</span><span class='line'>#error_log  logs/error.log  info;
</span><span class='line'>
</span><span class='line'>#pid        logs/nginx.pid;
</span><span class='line'>
</span><span class='line'>events {
</span><span class='line'>    worker_connections  1024;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>stream {
</span><span class='line'>  upstream proxy {
</span><span class='line'>    hash   $remote_addr;
</span><span class='line'>    server cu-ud6:19000;
</span><span class='line'>    server cu-ud7:19000;
</span><span class='line'>    server cu-ud8:19000;
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  server {
</span><span class='line'>    listen cu-ud9:19000;
</span><span class='line'>    proxy_timeout 600s;
</span><span class='line'>    proxy_pass proxy;
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'># 测试获取数据
</span><span class='line'>[ud@cu-ud6 opt]$ bin/redis-cli -h cu-ud6 -p 6379 scan 0 # 样本Key
</span><span class='line'>[ud@cu-ud6 opt]$ bin/redis-cli -h cu-ud9 -p 19000
</span><span class='line'>&gt; get XXX
</span></code></pre></td></tr></table></div></figure>


<p>重置统计量：</p>

<ul>
<li><a href="https://github.com/CodisLabs/codis/issues/1049">https://github.com/CodisLabs/codis/issues/1049</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ud@cu-ud6 codis]$ bin/codis-admin --proxy=cu-ud6:11080 --reset-stats</span></code></pre></td></tr></table></div></figure>


<h2>问题</h2>

<p>pipeline量太大，修改proxy的 backend_max_pipeline/session_max_pipeline 。同时在客户端代码里面执行一定量的pipe后执行sync。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2017/03/18 00:01:23 session.go:79: [INFO] session [0xc839888d80] create: {"ops":0,"create":1489766483,"remote":"192.168.32.182:57029"}
</span><span class='line'>2017/03/18 00:01:24 session.go:86: [INFO] session [0xc834a06d80] closed: {"ops":39601,"create":1489766483,"lastop":1489766484,"remote":"192.168.32.182:57028"}, error: too many pipelined r
</span><span class='line'>equests</span></code></pre></td></tr></table></div></figure>


<p>sync还是会超时，修改nginx的proxy_timeout以及客户端初始化的timeout参数。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>new JedisPool(new GenericObjectPoolConfig(), "cu-ud9", 19000, 10 * 60 * 1000)</span></code></pre></td></tr></table></div></figure>


<p>W：感觉proxy还是会有停顿，sync后有时会出现几分钟时间没响应。</p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[K8s Harbor Config on Centos6]]></title>
    <link href="http://winseliu.com/blog/2017/03/12/k8s-harbor-config-on-centos6/"/>
    <updated>2017-03-12T23:21:30+08:00</updated>
    <id>http://winseliu.com/blog/2017/03/12/k8s-harbor-config-on-centos6</id>
    <content type="html"><![CDATA[<h2>前传</h2>

<p>前面有写在 centos6 安装k8s的文章，后来重启一台worker节点后该节点的网络就不通了 <strong> connect: Invalid argument </strong> 。更新到最新的0.7.0后worker节点重启网络都能正常连通。</p>

<ul>
<li><a href="https://github.com/coreos/flannel/issues/180">https://github.com/coreos/flannel/issues/180</a></li>
</ul>


<p>言归正传，来说说harbor的安装。想的是安装一个类似maven私服的功能（原来都是一台机一台机的save/load，麻烦）：</p>

<ul>
<li>本来安装registry就好了，每次都要加端口很烦有没有！！！</li>
<li>弄了个service整到80端口，还得加 <strong> &ndash;insecure-registry </strong> 参数。还行吧，但是没有图形界面</li>
<li>好了，看到有人用nexus3做docker私服。主要吧真没弄通，第二nexus3不会用！反正就是没搭成功了。</li>
<li>本来前面有看到过vmware harbor，但是官网说是要docker1.10+的，差点就打消念头了，但是nexus3实在是搞不懂，只能硬着头皮尝试下harbor。</li>
</ul>


<p>这hardor是一坑货啊，功能是狠牛逼但是文档版本都对不上的！！！</p>

<p>这里还是在 centos6 上面安装。并且老版本k8s-1.2各种配置不能用，一个个坑填的好苦！行，先爽一把，看看修改后的简单的安装操作流程：</p>

<h2>简单配置</h2>

<p>版本信息</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@cu2 ~]# lsb_release -a
</span><span class='line'>LSB Version:    :base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch
</span><span class='line'>Distributor ID: CentOS
</span><span class='line'>Description:    CentOS release 6.8 (Final)
</span><span class='line'>Release:        6.8
</span><span class='line'>Codename:       Final
</span><span class='line'>[root@cu2 ~]# docker version
</span><span class='line'>Client version: 1.7.1
</span><span class='line'>Client API version: 1.19
</span><span class='line'>Go version (client): go1.4.2
</span><span class='line'>Git commit (client): 786b29d/1.7.1
</span><span class='line'>OS/Arch (client): linux/amd64
</span><span class='line'>Server version: 1.7.1
</span><span class='line'>Server API version: 1.19
</span><span class='line'>Go version (server): go1.4.2
</span><span class='line'>Git commit (server): 786b29d/1.7.1
</span><span class='line'>OS/Arch (server): linux/amd64</span></code></pre></td></tr></table></div></figure>


<ul>
<li>创建CA和证书</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@cu2 kubernetes]# git clone https://github.com/OpenVPN/easy-rsa.git
</span><span class='line'>
</span><span class='line'>[root@cu2 easyrsa3]# ./easyrsa init-pki
</span><span class='line'>[root@cu2 easyrsa3]# ./easyrsa build-ca #记住输入的密码，下面颁发证书还会用到
</span><span class='line'>
</span><span class='line'>[root@cu2 easyrsa3]# ./easyrsa gen-req cu nopass
</span><span class='line'>[root@cu2 easyrsa3]# ./easyrsa sign-req server cu #commonName填将要用到的域名咯
</span><span class='line'>
</span><span class='line'>生成的key和证书在pki/private和pki/issued下</span></code></pre></td></tr></table></div></figure>


<ul>
<li>下载配置</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/winse/docker-hadoop.git
</span><span class='line'>cd docker-hadoop/k8s-centos6/containers/harbor-make/</span></code></pre></td></tr></table></div></figure>


<ul>
<li>修改harbor.cfg配置</li>
</ul>


<p>把 <strong>域名</strong> 和 <strong>证书路径</strong> 修改成自己的。</p>

<ul>
<li>生成ConfigMaps配置</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>scl enable python27 bash
</span><span class='line'>python2.7 kubernetes/prepare </span></code></pre></td></tr></table></div></figure>


<ul>
<li>创建服务和容器</li>
</ul>


<p>这里需要先下载官网的离线包harbor-offline-installer-0.5.0.tgz，加载harbor.0.5.0.tgz里面的镜像</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@cu2 harbor]# docker images 
</span><span class='line'>REPOSITORY                                            TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
</span><span class='line'>gcr.io/google_containers/heapster-grafana-amd64       v4.0.2              74d2c72849cc        7 weeks ago         131.5 MB
</span><span class='line'>gcr.io/google_containers/heapster-influxdb-amd64      v1.1.1              55d63942e2eb        7 weeks ago         11.59 MB
</span><span class='line'>gcr.io/google_containers/heapster-amd64               v1.3.0-beta.1       026fb02eca65        7 weeks ago         101.3 MB
</span><span class='line'>quay.io/coreos/flannel                                v0.7.0-amd64        072e88d50780        8 weeks ago         73.75 MB
</span><span class='line'>gcr.io/google_containers/kubernetes-dashboard-amd64   v1.5.1              9af7d5c61ccf        8 weeks ago         103.6 MB
</span><span class='line'>vmware/harbor-log                                     0.5.0               5cccdd11efe0        3 months ago        190.5 MB
</span><span class='line'>vmware/harbor-jobservice                              0.5.0               573d0bbd91ee        3 months ago        169.4 MB
</span><span class='line'>vmware/harbor-ui                                      0.5.0               990d3476bf93        3 months ago        233 MB
</span><span class='line'>vmware/harbor-db                                      0.5.0               9a595c26d6bc        3 months ago        326.8 MB
</span><span class='line'>nginx                                                 1.11.5              98f8314de615        4 months ago        181.4 MB
</span><span class='line'>gcr.io/google_containers/hyperkube-amd64              v1.2.7              1dd7250ed1b3        4 months ago        231.4 MB
</span><span class='line'>quay.io/coreos/flannel                                v0.6.1-amd64        ef86f3a53de0        6 months ago        27.89 MB
</span><span class='line'>gcr.io/google_containers/etcd-amd64                   3.0.4               ef5e89d609f1        7 months ago        39.62 MB
</span><span class='line'>registry                                              2.5.0               8cc599785872        7 months ago        33.28 MB
</span><span class='line'>gcr.io/google_containers/kube2sky-amd64               1.15                f93305484d65        10 months ago       29.16 MB
</span><span class='line'>gcr.io/google_containers/etcd-amd64                   2.2.5               a6752fb962b5        11 months ago       30.45 MB
</span><span class='line'>gcr.io/google_containers/skydns-amd64                 1.0                 a925f95d080a        11 months ago       15.57 MB
</span><span class='line'>gcr.io/google_containers/exechealthz-amd64            1.0                 5b9ac190b20c        11 months ago       7.116 MB
</span><span class='line'>gcr.io/google_containers/pause                        2.0                 9981ca1bbdb5        17 months ago       350.2 kB
</span><span class='line'>
</span><span class='line'>---
</span><span class='line'>
</span><span class='line'>cd kubernetes/
</span><span class='line'>sh apply.sh</span></code></pre></td></tr></table></div></figure>


<ul>
<li>手动修复容器的配置文件</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh config.sh</span></code></pre></td></tr></table></div></figure>


<p>CentOS6-K8S上面麻烦点，在CentOS7-K8S_V1.5+上面ConfigMap Volumn是可以用的，就不需要自己手动拷贝配置了。</p>

<ul>
<li>使用</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@cu2 easyrsa3]# kubectl get services 
</span><span class='line'>NAME         CLUSTER-IP   EXTERNAL-IP   PORT(S)             AGE
</span><span class='line'>jobservice   10.0.0.154   &lt;none&gt;        80/TCP              1d
</span><span class='line'>kubernetes   10.0.0.1     &lt;none&gt;        443/TCP             2d
</span><span class='line'>mysql        10.0.0.176   &lt;none&gt;        3306/TCP            1d
</span><span class='line'>nginx        10.0.0.78    &lt;none&gt;        80/TCP,443/TCP      1d
</span><span class='line'>registry     10.0.0.46    &lt;none&gt;        5000/TCP,5001/TCP   1d
</span><span class='line'>ui           10.0.0.11    &lt;none&gt;        80/TCP              1d
</span><span class='line'>
</span><span class='line'># 域名
</span><span class='line'>[root@cu3 ~]# vi /etc/hosts
</span><span class='line'>10.0.0.78 cu.eshore.cn
</span><span class='line'>
</span><span class='line'># 证书
</span><span class='line'>[root@cu3 ~]# mkdir -p /etc/docker/certs.d/cu.eshore.cn/
</span><span class='line'>
</span><span class='line'>[root@cu2 pki]# scp ca.crt cu3:/etc/docker/certs.d/cu.eshore.cn/
</span><span class='line'>
</span><span class='line'># 登录
</span><span class='line'>[root@cu3 certs.d]# docker login cu.eshore.cn
</span><span class='line'>Username: admin
</span><span class='line'>Password: Harbor12345
</span><span class='line'>Email: 1
</span><span class='line'>WARNING: login credentials saved in /root/.docker/config.json
</span><span class='line'>Login Succeeded
</span><span class='line'>
</span><span class='line'># https://cu.eshore.cn 通过WEB页面创建项目 google_containers
</span><span class='line'>
</span><span class='line'># PUSH
</span><span class='line'>[root@cu3 certs.d]# docker tag gcr.io/google_containers/pause:2.0 cu.eshore.cn/google_containers/pause:2.0
</span><span class='line'>
</span><span class='line'>[root@cu3 certs.d]# docker push cu.eshore.cn/google_containers/pause:2.0
</span><span class='line'>The push refers to a repository [cu.eshore.cn/google_containers/pause] (len: 1)
</span><span class='line'>9981ca1bbdb5: Image already exists 
</span><span class='line'>6995a49b90f2: Image successfully pushed 
</span><span class='line'>Digest: sha256:139471770ffc22a2f15ae2ad8e3a0b3b9cbd620ad32400c7e8024a3d09ebec7d
</span></code></pre></td></tr></table></div></figure>


<h1>&mdash;&mdash; 下面是记流水账内容 &mdash;&mdash;</h1>

<h2>简单搭建配置</h2>

<p>参考阅读</p>

<ul>
<li><a href="http://www.zoues.com/2017/02/19/vmware-harbor-%E5%9C%A8-kubernetes-%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2%E3%80%90zoues-com%E3%80%91/">在 KUBERNETES 上的部署 VMWare Harbor</a></li>
<li><a href="https://github.com/vmware/harbor/blob/master/docs/kubernetes_deployment.md">主干文档 Integration with Kubernetes </a></li>
<li><a href="https://github.com/vmware/harbor/blob/master/docs/installation_guide.md">https://github.com/vmware/harbor/blob/master/docs/installation_guide.md</a></li>
<li><a href="https://github.com/vmware/harbor/tree/00259567a8b59758930950440a0ecfd6061db485/make/kubernetes">https://github.com/vmware/harbor/tree/00259567a8b59758930950440a0ecfd6061db485/make/kubernetes</a></li>
</ul>


<p>简略步骤：</p>

<ul>
<li>下载0.5.0的离线压缩包 harbor-offline-installer-0.5.0.tgz</li>
<li>把镜像加载到本地（解压offline后在目录下有tgz的镜像压缩包） <code>docker load -i harbor.0.5.0.tgz</code></li>
<li>下载github主干的源码 harbor-master.zip ，对是主干，不是release页面的源码！！！（香菇，release源码包里面的k8s配置文件尽然是不配套的，那打什么版本咯！！文档也不说明下。非常非常感谢 www.zoues.com 博主，这才是明灯啊）</li>
<li>安装python2.7（prepare脚本需要） <code>yum install centos-release-scl; yum install -y python27</code></li>
<li>解压进入到 harbor-master/make 目录</li>
<li>修改harbor.cfg文件配置。（这里我就改了域名而已，会有https的问题。先不管跑起来先，后面在讲https的处理）</li>
<li>执行prepare脚本，用于生成配置键值对cm文件（ConfigMaps）。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@cu2 make]# python kubernetes/prepare 
</span><span class='line'>Traceback (most recent call last):
</span><span class='line'>  File "kubernetes/prepare", line 145, in &lt;module&gt;
</span><span class='line'>    pkey = subprocess.check_output(['openssl','genrsa','4096'], stderr=devnull)
</span><span class='line'>AttributeError: 'module' object has no attribute 'check_output'
</span><span class='line'>
</span><span class='line'>&gt; Python should be version 2.7 or higher. Note that you may have to install Python on Linux distributions (Gentoo, Arch) that do not come with a Python interpreter installed by default
</span><span class='line'>
</span><span class='line'>https://github.com/h2oai/h2o-2/wiki/installing-python-2.7-on-centos-6.3.-follow-this-sequence-exactly-for-centos-machine-only
</span><span class='line'>https://gist.github.com/dalegaspi/dec44117fa5e7597a559  我按这个小写的安装的
</span><span class='line'>[root@cu2 make]# yum install centos-release-scl
</span><span class='line'>[root@cu2 make]# yum install -y python27
</span><span class='line'>
</span><span class='line'>[root@cu2 make]# scl enable python27 bash
</span><span class='line'>[root@cu2 make]# /opt/rh/python27/root/usr/bin/python -V
</span><span class='line'>Python 2.7.8
</span><span class='line'>
</span><span class='line'>[root@cu2 make]# less harbor.cfg 
</span><span class='line'>
</span><span class='line'>[root@cu2 make]# /opt/rh/python27/root/usr/bin/python kubernetes/prepare 
</span><span class='line'>Warning: Key(ldap_searchdn) is not existing. Use empty string as default
</span><span class='line'>Warning: Key(ldap_search_pwd) is not existing. Use empty string as default
</span><span class='line'>Warning: Key(ldap_filter) is not existing. Use empty string as default</span></code></pre></td></tr></table></div></figure>


<ul>
<li>然后就是愉快的执行apply就好：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kubectl apply -f pv/
</span><span class='line'>
</span><span class='line'>kubectl apply -f jobservice/jobservice.cm.yaml
</span><span class='line'>kubectl apply -f mysql/mysql.cm.yaml
</span><span class='line'>kubectl apply -f nginx/nginx.cm.yaml
</span><span class='line'>kubectl apply -f registry/registry.cm.yaml
</span><span class='line'>kubectl apply -f ui/ui.cm.yaml
</span><span class='line'>
</span><span class='line'>kubectl apply -f jobservice/jobservice.svc.yaml
</span><span class='line'>kubectl apply -f mysql/mysql.svc.yaml
</span><span class='line'>kubectl apply -f nginx/nginx.svc.yaml
</span><span class='line'>kubectl apply -f registry/registry.svc.yaml
</span><span class='line'>kubectl apply -f ui/ui.svc.yaml
</span><span class='line'>
</span><span class='line'>kubectl apply -f registry/registry.rc.yaml
</span><span class='line'>kubectl apply -f mysql/mysql.rc.yaml
</span><span class='line'>kubectl apply -f jobservice/jobservice.rc.yaml
</span><span class='line'>kubectl apply -f ui/ui.rc.yaml
</span><span class='line'>kubectl apply -f nginx/nginx.rc.yaml
</span></code></pre></td></tr></table></div></figure>


<p>由于ConfigMaps方式不能正确的创建文件需要把配置文件拷贝到对应容器的config目录下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sh config.sh</span></code></pre></td></tr></table></div></figure>


<p>除了nginx报https的证书问题外，其他都正常跑起来了。把nginx.conf的https server部分先删掉，先查看效果。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@cu2 kubernetes]# kubectl get rc
</span><span class='line'>NAME            DESIRED   CURRENT   AGE
</span><span class='line'>jobservice-rc   1         1         4h
</span><span class='line'>mysql-rc        1         1         4h
</span><span class='line'>nginx-rc        1         1         4h
</span><span class='line'>registry-rc     1         1         4h
</span><span class='line'>ui-rc           1         1         4h
</span><span class='line'>[root@cu2 kubernetes]# kubectl get pods
</span><span class='line'>NAME                       READY     STATUS    RESTARTS   AGE
</span><span class='line'>jobservice-rc-3hhea        1/1       Running   0          4h
</span><span class='line'>k8s-master-192.168.0.214   4/4       Running   28         2d
</span><span class='line'>k8s-proxy-192.168.0.214    1/1       Running   4          2d
</span><span class='line'>mysql-rc-nyk6z             1/1       Running   0          4h
</span><span class='line'>nexus-3126345715-mfteg     1/1       Running   0          2d # 这个是maven私服
</span><span class='line'>nginx-rc-93cdr             1/1       Running   15         4h
</span><span class='line'>registry-rc-qbdfk          1/1       Running   12         4h
</span><span class='line'>ui-rc-7e76i                1/1       Running   10         4h
</span><span class='line'>
</span><span class='line'>[root@cu2 kubernetes]# kubectl get services nginx
</span><span class='line'>NAME      CLUSTER-IP   EXTERNAL-IP   PORT(S)          AGE
</span><span class='line'>nginx     10.0.0.78    &lt;none&gt;        80/TCP,443/TCP   1d
</span></code></pre></td></tr></table></div></figure>


<p>访问nginx：</p>

<p><img src="http://winseliu.com/images/blogs/k8s-harbor.jpg" alt="" /></p>

<p>安装完了后，使用harbor.cfg配置文件里面的admin和密码进行登录。然后看看官网的操作文档 <a href="https://github.com/vmware/harbor/blob/master/docs/user_guide.md">https://github.com/vmware/harbor/blob/master/docs/user_guide.md</a></p>

<p>现在PUSH要加 <code>--insecure-registry</code> 参数，还得重启docker太麻烦了。等下先弄https，搞好后添加证书直接push比较爽。</p>

<h2>修改配置过程中遇到的一些问题</h2>

<p>pvc在v1.2的时刻不支持selector。使用volumeName属性来代替。</p>

<ul>
<li><a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/">https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/</a></li>
<li><a href="https://kubernetes.io/docs/user-guide/persistent-volumes/#persistentvolumeclaims">https://kubernetes.io/docs/user-guide/persistent-volumes/#persistentvolumeclaims</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/tree/v1.2.7/docs/user-guide/persistent-volumes/claims">https://github.com/kubernetes/kubernetes/tree/v1.2.7/docs/user-guide/persistent-volumes/claims</a></li>
<li><a href="https://kubernetes.io/docs/resources-reference/v1.5/#persistentvolumeclaim-v1">https://kubernetes.io/docs/resources-reference/v1.5/#persistentvolumeclaim-v1</a></li>
<li><a href="http://blog.fleeto.us/translation/persistent-volumes">http://blog.fleeto.us/translation/persistent-volumes</a></li>
</ul>


<p>巨坑，键名对不能用下划线、不能大写字母，到1.4才修复。</p>

<ul>
<li><a href="https://github.com/kubernetes/kubernetes/issues/23722">Allow underscore in configMapKeyRef key&rsquo;s</a></li>
</ul>


<p>configmap~volumn用于创建volumns好像有问题，没有创建对应文件。</p>

<ul>
<li><a href="https://kubernetes.io/docs/user-guide/configmap/">https://kubernetes.io/docs/user-guide/configmap/</a></li>
<li><a href="http://stackoverflow.com/questions/36187624/kubernetes-configmap-volume-doesnt-create-file-in-container">http://stackoverflow.com/questions/36187624/kubernetes-configmap-volume-doesnt-create-file-in-container</a></li>
</ul>


<p>在1.5.3上面是可以生成的。。。囧，相比puppet的文档，k8s的文档真的差了十万八千里啊！！！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@k8s kube-deploy]# kubectl logs nginx-rc-fr52v
</span><span class='line'>https.crt
</span><span class='line'>https.key
</span><span class='line'>nginx.conf</span></code></pre></td></tr></table></div></figure>


<p>后面看到nginx的v1.2用了secrets修改后也不行。</p>

<ul>
<li><a href="https://github.com/kubernetes/kubernetes/blob/release-1.2/examples/https-nginx/nginx-app.yaml">https://github.com/kubernetes/kubernetes/blob/release-1.2/examples/https-nginx/nginx-app.yaml</a> 看到1.2使用secret volumes</li>
<li><a href="https://github.com/kubernetes/kubernetes/blob/52f4d3806919e4ec16cb17336a1802461cf40a46/test/kubemark/resources/hollow-node_template.yaml">https://github.com/kubernetes/kubernetes/blob/52f4d3806919e4ec16cb17336a1802461cf40a46/test/kubemark/resources/hollow-node_template.yaml</a></li>
<li><a href="https://kubernetes.io/docs/user-guide/secrets/">https://kubernetes.io/docs/user-guide/secrets/</a></li>
<li><a href="https://kubernetes.io/docs/user-guide/configmap/">https://kubernetes.io/docs/user-guide/configmap/</a></li>
<li><a href="https://kubernetes.io/docs/tasks/configure-pod-container/downward-api-volume-expose-pod-information/">https://kubernetes.io/docs/tasks/configure-pod-container/downward-api-volume-expose-pod-information/</a></li>
</ul>


<p>其实就是docker版本老的不支持shared，其实在kubelet的容器里面是创建了对应的文件的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># docker logs
</span><span class='line'>I0316 08:22:19.729825   13206 volumes.go:279] Used volume plugin "kubernetes.io/configmap" to mount config
</span><span class='line'>I0316 08:22:19.729860   13206 configmap.go:118] Setting up volume config for pod cfe8b3f6-09fb-11e7-bdde-020047eb000e at /var/lib/kubelet/pods/cfe8b3f6-09fb-11e7-bdde-020047eb000e/volumes/kubernetes.io~configmap/config
</span><span class='line'>I0316 08:22:19.729915   13206 volumes.go:279] Used volume plugin "kubernetes.io/empty-dir" to mount wrapped_config
</span><span class='line'>...
</span><span class='line'>I0316 08:22:19.733309   13206 configmap.go:145] Received configMap default/harbor-ui-config containing (30) pieces of data, 3739 total bytes
</span><span class='line'>I0316 08:22:19.733470   13206 atomic_writer.go:316] /var/lib/kubelet/pods/cfe8b3f6-09fb-11e7-bdde-020047eb000e/volumes/kubernetes.io~configmap/config: current paths:   [app.conf private_key.pem]
</span><span class='line'>I0316 08:22:19.733493   13206 atomic_writer.go:328] /var/lib/kubelet/pods/cfe8b3f6-09fb-11e7-bdde-020047eb000e/volumes/kubernetes.io~configmap/config: new paths:       [app.conf private_key.pem]
</span><span class='line'>I0316 08:22:19.733502   13206 atomic_writer.go:331] /var/lib/kubelet/pods/cfe8b3f6-09fb-11e7-bdde-020047eb000e/volumes/kubernetes.io~configmap/config: paths to remove: map[]
</span><span class='line'>I0316 08:22:19.733552   13206 atomic_writer.go:136] pod default/ui-rc-psjzs volume config: no update required for target directory /var/lib/kubelet/pods/cfe8b3f6-09fb-11e7-bdde-020047eb000e/volumes/kubernetes.io~configmap/config
</span><span class='line'>
</span><span class='line'>[root@cu3 config]# docker exec -ti b34c51260dda bash
</span><span class='line'>root@cu3:/# ls -al /var/lib/kubelet/pods/cfe8b3f6-09fb-11e7-bdde-020047eb000e/volumes/kubernetes.io~configmap/config
</span><span class='line'>total 4
</span><span class='line'>drwxrwxrwt 3 root root  120 Mar 16 04:08 .
</span><span class='line'>drwxr-xr-x 3 root root 4096 Mar 16 04:08 ..
</span><span class='line'>drwxr-xr-x 2 root root   80 Mar 16 04:08 ..3983_16_03_04_08_50.565987072
</span><span class='line'>lrwxrwxrwx 1 root root   31 Mar 16 04:08 ..data -&gt; ..3983_16_03_04_08_50.565987072
</span><span class='line'>lrwxrwxrwx 1 root root   15 Mar 16 04:08 app.conf -&gt; ..data/app.conf
</span><span class='line'>lrwxrwxrwx 1 root root   22 Mar 16 04:08 private_key.pem -&gt; ..data/private_key.pem</span></code></pre></td></tr></table></div></figure>


<p>最后放弃了，直接用脚本来创建文件，然后把文件拷贝到对应的机器。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@cu2 kubernetes]# cd harbor-make/kubernetes/
</span><span class='line'>[root@cu2 kubernetes]# sh config.sh </span></code></pre></td></tr></table></div></figure>


<h2>HTTPS</h2>

<ul>
<li><a href="http://www.pangxie.space/docker/353">Docker部署认证私有仓库(registry2.x+nginx)-centos7</a></li>
<li><a href="https://github.com/vmware/harbor/blob/master/docs/configure_https.md">Configuring Harbor with HTTPS Access</a></li>
</ul>


<p>生成CA和证书</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@cu2 kubernetes]# git clone https://github.com/OpenVPN/easy-rsa.git
</span><span class='line'>
</span><span class='line'>https://github.com/OpenVPN/easy-rsa/blob/master/README.quickstart.md
</span><span class='line'>
</span><span class='line'>[root@cu2 easyrsa3]# ll
</span><span class='line'>total 56
</span><span class='line'>-rwxr-xr-x 1 root root 35253 Mar 13 01:04 easyrsa
</span><span class='line'>-rw-r--r-- 1 root root  4560 Mar 13 01:04 openssl-1.0.cnf
</span><span class='line'>-rw-r--r-- 1 root root  8126 Mar 13 01:04 vars.example
</span><span class='line'>drwxr-xr-x 2 root root  4096 Mar 13 01:04 x509-types
</span><span class='line'>[root@cu2 easyrsa3]# ./easyrsa init-pki
</span><span class='line'>
</span><span class='line'>init-pki complete; you may now create a CA or requests.
</span><span class='line'>Your newly created PKI dir is: /data/kubernetes/easy-rsa/easyrsa3/pki
</span><span class='line'>
</span><span class='line'>[root@cu2 easyrsa3]# ./easyrsa build-ca
</span><span class='line'>Generating a 2048 bit RSA private key
</span><span class='line'>.............................+++
</span><span class='line'>..............................................+++
</span><span class='line'>writing new private key to '/data/kubernetes/easy-rsa/easyrsa3/pki/private/ca.key.Nj5oHgfZC5'
</span><span class='line'>Enter PEM pass phrase: 123456
</span><span class='line'>Verifying - Enter PEM pass phrase: 123456
</span><span class='line'>-----
</span><span class='line'>You are about to be asked to enter information that will be incorporated
</span><span class='line'>into your certificate request.
</span><span class='line'>What you are about to enter is what is called a Distinguished Name or a DN.
</span><span class='line'>There are quite a few fields but you can leave some blank
</span><span class='line'>For some fields there will be a default value,
</span><span class='line'>If you enter '.', the field will be left blank.
</span><span class='line'>-----
</span><span class='line'>Common Name (eg: your user, host, or server name) [Easy-RSA CA]:eshore.cn
</span><span class='line'>
</span><span class='line'>CA creation complete and you may now import and sign cert requests.
</span><span class='line'>Your new CA certificate file for publishing is at:
</span><span class='line'>/data/kubernetes/easy-rsa/easyrsa3/pki/ca.crt
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>[root@cu2 easyrsa3]# ./easyrsa gen-req cu nopass
</span><span class='line'>Generating a 2048 bit RSA private key
</span><span class='line'>..........+++
</span><span class='line'>.................................+++
</span><span class='line'>writing new private key to '/data/kubernetes/easy-rsa/easyrsa3/pki/private/cu.key.LQX3Dr2jG3'
</span><span class='line'>-----
</span><span class='line'>You are about to be asked to enter information that will be incorporated
</span><span class='line'>into your certificate request.
</span><span class='line'>What you are about to enter is what is called a Distinguished Name or a DN.
</span><span class='line'>There are quite a few fields but you can leave some blank
</span><span class='line'>For some fields there will be a default value,
</span><span class='line'>If you enter '.', the field will be left blank.
</span><span class='line'>-----
</span><span class='line'>Common Name (eg: your user, host, or server name) [cu]:cu.eshore.cn
</span><span class='line'>
</span><span class='line'>Keypair and certificate request completed. Your files are:
</span><span class='line'>req: /data/kubernetes/easy-rsa/easyrsa3/pki/reqs/cu.req
</span><span class='line'>key: /data/kubernetes/easy-rsa/easyrsa3/pki/private/cu.key
</span><span class='line'>
</span><span class='line'>[root@cu2 easyrsa3]# ./easyrsa sign-req server cu
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>You are about to sign the following certificate.
</span><span class='line'>Please check over the details shown below for accuracy. Note that this request
</span><span class='line'>has not been cryptographically verified. Please be sure it came from a trusted
</span><span class='line'>source or that you have verified the request checksum with the sender.
</span><span class='line'>
</span><span class='line'>Request subject, to be signed as a server certificate for 3650 days:
</span><span class='line'>
</span><span class='line'>subject=
</span><span class='line'>    commonName                = cu.eshore.cn
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Type the word 'yes' to continue, or any other input to abort.
</span><span class='line'>  Confirm request details: yes
</span><span class='line'>Using configuration from /data/kubernetes/easy-rsa/easyrsa3/openssl-1.0.cnf
</span><span class='line'>Enter pass phrase for /data/kubernetes/easy-rsa/easyrsa3/pki/private/ca.key:
</span><span class='line'>Check that the request matches the signature
</span><span class='line'>Signature ok
</span><span class='line'>The Subject's Distinguished Name is as follows
</span><span class='line'>commonName            :PRINTABLE:'cu.eshore.cn'
</span><span class='line'>Certificate is to be certified until Mar 10 23:36:42 2027 GMT (3650 days)
</span><span class='line'>
</span><span class='line'>Write out database with 1 new entries
</span><span class='line'>Data Base Updated
</span><span class='line'>
</span><span class='line'>Certificate created at: /data/kubernetes/easy-rsa/easyrsa3/pki/issued/cu.crt
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>[root@cu2 easyrsa3]# 
</span><span class='line'>
</span><span class='line'>这里得用签发server端证书，如果是client使用时会报错： v2 ping attempt failed with error: Get https://cu.eshore.cn/v2/: x509: certificate specifies an incompatible key usage
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>[root@cu2 easyrsa3]# tree .
</span><span class='line'>.
</span><span class='line'>├── easyrsa
</span><span class='line'>├── openssl-1.0.cnf
</span><span class='line'>├── pki
</span><span class='line'>│   ├── ca.crt
</span><span class='line'>│   ├── certs_by_serial
</span><span class='line'>│   │   └── 01.pem
</span><span class='line'>│   ├── index.txt
</span><span class='line'>│   ├── index.txt.attr
</span><span class='line'>│   ├── index.txt.old
</span><span class='line'>│   ├── issued
</span><span class='line'>│   │   └── cu.crt
</span><span class='line'>│   ├── private
</span><span class='line'>│   │   ├── ca.key
</span><span class='line'>│   │   └── cu.key
</span><span class='line'>│   ├── reqs
</span><span class='line'>│   │   └── cu.req
</span><span class='line'>│   ├── serial
</span><span class='line'>│   └── serial.old
</span><span class='line'>├── vars.example
</span><span class='line'>└── x509-types
</span><span class='line'>    ├── ca
</span><span class='line'>    ├── client
</span><span class='line'>    ├── COMMON
</span><span class='line'>    └── server
</span><span class='line'>
</span><span class='line'>6 directories, 18 files</span></code></pre></td></tr></table></div></figure>


<p>重新执行以下上面的步骤，配置关联比较多。https和http请求地址会有冲突。</p>

<p>重新配置后，把ca.cert拷贝到docker节点，然后登录、创建项目、提交项目即可。最开始有帖操作的代码，这里不重复了。</p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[k8s在Centos6部署实践]]></title>
    <link href="http://winseliu.com/blog/2017/03/05/k8s-docker-multinode-on-centos6/"/>
    <updated>2017-03-05T08:49:29+08:00</updated>
    <id>http://winseliu.com/blog/2017/03/05/k8s-docker-multinode-on-centos6</id>
    <content type="html"><![CDATA[<p>2017-3-17 08:33:56 折腾了大半个月，写点小结。在centos6 + docker-1.7 + k8s-1.2 是能用起来，安装了dashboard、nexus2、harbor，但是对于一些新的东西不能用，并且k8s官网文档不分版本并且没讲明白docker兼容的版本（至少官网文档），感觉人家就是行到自己这里就不行，各种折腾然后到后面是版本问题。docker和k8s在容器大热的当前，版本更新太快了，docker都到1.17了。综上，如果在centos6上面玩玩了解了k8s的概况还是好的，但是真的要用还是升级centos7吧。</p>

<p>configmap-volumes真是好东西，没办法docker-1.7不支持shared volume。</p>

<p>&ndash;</p>

<p>centos6系统比较&#8221;老&#8221;啊，既没有systemd，也没有docker-engine。网上各种资料要么是原始安装（非bootstrap docker），要么就是在centos7上装的。不太想在系统上做安装，按照kube-deploy的docker-multinode的脚本来进行修改安装，版本不兼容需要开推土机填坑啊，centos6上面的docker才1.7还不能用kubernetes-1.3，dashboard也需要自己安装。</p>

<p>环境描述：</p>

<ul>
<li>cu2: bootstrap(etcd, flannel), main(hyperkube, pause, kubernetes-dashboard)</li>
<li>cu4、cu5: bootstrap(flannel), main(hyperkube, pause)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@cu2 ~]# docker -H unix:///var/run/docker-bootstrap.sock ps | grep -v IMAGE | awk '{print $2}' | sort -u
</span><span class='line'>gcr.io/google_containers/etcd-amd64:3.0.4
</span><span class='line'>quay.io/coreos/flannel:v0.6.1-amd64
</span><span class='line'>[root@cu4 ~]# docker -H unix:///var/run/docker-bootstrap.sock ps | grep -v IMAGE | awk '{print $2}' | sort -u
</span><span class='line'>quay.io/coreos/flannel:v0.6.1-amd64
</span><span class='line'>
</span><span class='line'>[root@cu2 kubernetes]# docker images
</span><span class='line'>REPOSITORY                                            TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
</span><span class='line'>bigdata                                               v1                  9e30d146824b        38 hours ago        457.2 MB
</span><span class='line'>gcr.io/google_containers/heapster-grafana-amd64       v4.0.2              74d2c72849cc        6 weeks ago         131.5 MB
</span><span class='line'>gcr.io/google_containers/heapster-influxdb-amd64      v1.1.1              55d63942e2eb        6 weeks ago         11.59 MB
</span><span class='line'>gcr.io/google_containers/heapster-amd64               v1.3.0-beta.1       026fb02eca65        6 weeks ago         101.3 MB
</span><span class='line'>gcr.io/google_containers/kubernetes-dashboard-amd64   v1.5.1              9af7d5c61ccf        7 weeks ago         103.6 MB
</span><span class='line'>gcr.io/google_containers/hyperkube-amd64              v1.2.7              1dd7250ed1b3        4 months ago        231.4 MB
</span><span class='line'>quay.io/coreos/flannel                                v0.6.1-amd64        ef86f3a53de0        6 months ago        27.89 MB
</span><span class='line'>gcr.io/google_containers/etcd-amd64                   3.0.4               ef5e89d609f1        6 months ago        39.62 MB
</span><span class='line'>gcr.io/google_containers/kube2sky-amd64               1.15                f93305484d65        10 months ago       29.16 MB
</span><span class='line'>gcr.io/google_containers/etcd-amd64                   2.2.5               a6752fb962b5        10 months ago       30.45 MB
</span><span class='line'>gcr.io/google_containers/skydns-amd64                 1.0                 a925f95d080a        11 months ago       15.57 MB
</span><span class='line'>gcr.io/google_containers/exechealthz-amd64            1.0                 5b9ac190b20c        11 months ago       7.116 MB
</span><span class='line'>gcr.io/google_containers/pause                        2.0                 9981ca1bbdb5        17 months ago       350.2 kB
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>etcd，flannel，和kubernetes-dashboard用的是docker-multinode时的版本。</li>
<li>kubelet是1.2的最新版v1.2.7。</li>
<li>pause:2.0是启动apiserver、controller容器时自动下载的版本。</li>
<li>新增DNS镜像（2017-3-6 02:07:14）</li>
<li>新增heapster镜像（2017-3-6 17:00:48）</li>
</ul>


<p>最好每台机器都load所有镜像。</p>

<h2>准备</h2>

<ul>
<li>安装docker，<a href="https://wiki.centos.org/zh/Cloud/Docker">Docker</a> <a href="http://winseliu.com/blog/2014/09/27/docker-start-guide-on-centos/">Docker入门</a></li>
<li>代理，<a href="http://winseliu.com/blog/2017/02/04/privoxy-http-proxy-for-shadowsocks/">Privoxy</a></li>
<li>镜像导入导出，<a href="http://winseliu.com/blog/2017/02/06/docker-http-proxy-and-save-reload/">Docker save/load</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export NO_PROXY="localhost,127.0.0.1,10.0.0.0/8"
</span><span class='line'>export https_proxy=http://localhost:8118/
</span><span class='line'>export http_proxy=http://localhost:8118/</span></code></pre></td></tr></table></div></figure>


<h2>先看操作和效果（看了菜单再看吃不吃）</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>## 下载部署脚本 
</span><span class='line'># https://github.com/winse/docker-hadoop/tree/master/k8s-centos6/docker-multinode
</span><span class='line'>
</span><span class='line'>## 防火墙，关闭selinux
</span><span class='line'># 或者最后面增加 iptables -A INPUT -s 10.0.0.0/8 -j ACCEPT
</span><span class='line'>iptables -I INPUT 1 -s 10.0.0.0/8 -j ACCEPT
</span><span class='line'>
</span><span class='line'>## 先把镜像全部下载下来 git pull ...
</span><span class='line'>* 在master节点
</span><span class='line'>[root@cu2 ~]# docker images
</span><span class='line'>REPOSITORY                                            TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
</span><span class='line'>bigdata                                               v1                  9e30d146824b        2 days ago          457.2 MB
</span><span class='line'>redis                                                 3.2.8               c30a7507ec4d        6 days ago          182.9 MB
</span><span class='line'>gcr.io/google_containers/heapster-grafana-amd64       v4.0.2              74d2c72849cc        6 weeks ago         131.5 MB
</span><span class='line'>gcr.io/google_containers/heapster-influxdb-amd64      v1.1.1              55d63942e2eb        6 weeks ago         11.59 MB
</span><span class='line'>gcr.io/google_containers/heapster-amd64               v1.3.0-beta.1       026fb02eca65        6 weeks ago         101.3 MB
</span><span class='line'>gcr.io/google_containers/kubernetes-dashboard-amd64   v1.5.1              9af7d5c61ccf        7 weeks ago         103.6 MB
</span><span class='line'>gcr.io/google_containers/hyperkube-amd64              v1.2.7              1dd7250ed1b3        4 months ago        231.4 MB
</span><span class='line'>quay.io/coreos/flannel                                v0.6.1-amd64        ef86f3a53de0        6 months ago        27.89 MB
</span><span class='line'>gcr.io/google_containers/etcd-amd64                   3.0.4               ef5e89d609f1        6 months ago        39.62 MB
</span><span class='line'>gcr.io/google_containers/kube2sky-amd64               1.15                f93305484d65        10 months ago       29.16 MB
</span><span class='line'>gcr.io/google_containers/etcd-amd64                   2.2.5               a6752fb962b5        10 months ago       30.45 MB
</span><span class='line'>gcr.io/google_containers/skydns-amd64                 1.0                 a925f95d080a        11 months ago       15.57 MB
</span><span class='line'>gcr.io/google_containers/exechealthz-amd64            1.0                 5b9ac190b20c        11 months ago       7.116 MB
</span><span class='line'>gcr.io/google_containers/pause                        2.0                 9981ca1bbdb5        17 months ago       350.2 kB
</span><span class='line'>
</span><span class='line'>## 下载kubectl
</span><span class='line'>https://storage.googleapis.com/kubernetes-release/release/v1.2.7/bin/linux/amd64/kubectl 
</span><span class='line'># https://kubernetes.io/docs/user-guide/prereqs/
</span><span class='line'># https://kubernetes.io/docs/user-guide/kubectl/kubectl_version/
</span><span class='line'>
</span><span class='line'>## 环境变量
</span><span class='line'># https://kubernetes.io/docs/user-guide/kubeconfig-file/
</span><span class='line'>export KUBECONFIG=/var/lib/kubelet/kubeconfig/kubeconfig.yaml
</span><span class='line'>export PATH=...加kubectl所在文件夹
</span><span class='line'>
</span><span class='line'>## 启动MASTER
</span><span class='line'>./master.sh
</span><span class='line'>
</span><span class='line'>## 测试效果
</span><span class='line'>curl -fsSL http://localhost:2379/health
</span><span class='line'>curl -s http://localhost:8080/healthz
</span><span class='line'>curl -s http://localhost:8080/api
</span><span class='line'>kubectl get ns
</span><span class='line'>kubectl create namespace kube-system
</span><span class='line'>
</span><span class='line'>* 在worker节点
</span><span class='line'>[root@cu3 ~]# docker images
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>## 启动WORKER
</span><span class='line'>MASTER_IP=cu2 ./worker.sh
</span></code></pre></td></tr></table></div></figure>


<p>小状况：在第一次启动master脚本可能会有点问题：setup-files容器运行可能不正常，需要从googleapi下载easy-rsa.tar.gz，可以先手动下载到/root/kube目录，然后运行setup-files。sh脚本。如果不急的话等上一段时间多run几次后好像也能跑起来（囧）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@cu2 ~]# docker exec -ti kube_kubelet_624b2 bash
</span><span class='line'>root@cu2:/# /setup-files.sh IP:10.0.0.1,DNS:kubernetes,DNS:kubernetes.default,DNS:kubernetes.default.svc,DNS:kubernetes.default.svc.cluster.local
</span><span class='line'>
</span><span class='line'>然后再次提交dashboard：
</span><span class='line'>[root@cu2 docker-multinode-centos6]# ./dashboard.sh 
</span></code></pre></td></tr></table></div></figure>


<p>然后启动应用，测试多节点的情况下启动的容器网络能否互通：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>## 运行查看容器
</span><span class='line'>[root@cu2 ~]# kubectl run redis --image=bigdata:v1 -r 5 --command -- /usr/sbin/sshd -D
</span><span class='line'>
</span><span class='line'>[root@cu2 ~]# kubectl get pods -o wide
</span><span class='line'>NAME                       READY     STATUS    RESTARTS   AGE       NODE
</span><span class='line'>k8s-master-192.168.0.214   4/4       Running   22         1h        192.168.0.214
</span><span class='line'>k8s-proxy-192.168.0.214    1/1       Running   0          1h        192.168.0.214
</span><span class='line'>redis-2212193268-1789v     1/1       Running   0          1h        192.168.0.174
</span><span class='line'>redis-2212193268-1j4ej     1/1       Running   0          1h        192.168.0.174
</span><span class='line'>redis-2212193268-8dbmq     1/1       Running   0          1h        192.168.0.30
</span><span class='line'>redis-2212193268-a447n     1/1       Running   0          1h        192.168.0.30
</span><span class='line'>redis-2212193268-tu5fl     1/1       Running   0          1h        192.168.0.214
</span><span class='line'>
</span><span class='line'>https://kubernetes.io/docs/user-guide/jsonpath/
</span><span class='line'>[root@cu2 ~]# kubectl get pods -o wide -l run=redis -o jsonpath={..podIP}
</span><span class='line'>10.1.75.2 10.1.75.3 10.1.58.3 10.1.58.2 10.1.33.3
</span><span class='line'>
</span><span class='line'>## 登录容器
</span><span class='line'># 用ssh登录
</span><span class='line'>[root@cu2 ~]# kubectl describe pods redis-2212193268-tu5fl | grep IP
</span><span class='line'>IP:             10.1.33.3
</span><span class='line'>[root@cu2 ~]# ssh 10.1.33.3
</span><span class='line'>The authenticity of host '10.1.33.3 (10.1.33.3)' can't be established.
</span><span class='line'>RSA key fingerprint is e5:58:ae:3b:54:c9:bb:0d:4c:9b:bc:fd:04:fe:be:cc.
</span><span class='line'>Are you sure you want to continue connecting (yes/no)? yes
</span><span class='line'>Warning: Permanently added '10.1.33.3' (RSA) to the list of known hosts.
</span><span class='line'>root@10.1.33.3's password: 
</span><span class='line'>Last login: Sat Mar  4 18:17:51 2017 from 10.1.61.1
</span><span class='line'>[root@redis-2212193268-tu5fl ~]# exit
</span><span class='line'>logout
</span><span class='line'>Connection to 10.1.33.3 closed.
</span><span class='line'>
</span><span class='line'># exec登录
</span><span class='line'>[root@cu2 ~]# kubectl exec -ti redis-2212193268-tu5fl bash
</span><span class='line'>[root@redis-2212193268-tu5fl /]# 
</span><span class='line'>
</span><span class='line'>## ping五台机器全部节点的机器都是互通的
</span><span class='line'>[root@redis-2212193268-tu5fl /]# ping 10.1.75.2
</span><span class='line'>PING 10.1.75.2 (10.1.75.2) 56(84) bytes of data.
</span><span class='line'>64 bytes from 10.1.75.2: icmp_seq=1 ttl=60 time=1.15 ms
</span><span class='line'>...
</span><span class='line'>[root@redis-2212193268-tu5fl /]# ping 10.1.75.3
</span><span class='line'>PING 10.1.75.3 (10.1.75.3) 56(84) bytes of data.
</span><span class='line'>64 bytes from 10.1.75.3: icmp_seq=1 ttl=60 time=1.23 ms
</span><span class='line'>...
</span><span class='line'>[root@redis-2212193268-tu5fl /]# ping 10.1.58.3
</span><span class='line'>PING 10.1.58.3 (10.1.58.3) 56(84) bytes of data.
</span><span class='line'>64 bytes from 10.1.58.3: icmp_seq=1 ttl=60 time=1.60 ms
</span><span class='line'>...
</span><span class='line'>[root@redis-2212193268-tu5fl /]# ping 10.1.58.2
</span><span class='line'>PING 10.1.58.2 (10.1.58.2) 56(84) bytes of data.
</span><span class='line'>64 bytes from 10.1.58.2: icmp_seq=1 ttl=60 time=1.39 ms
</span><span class='line'>...
</span><span class='line'>[root@redis-2212193268-tu5fl /]# ping 10.1.33.3         
</span><span class='line'>PING 10.1.33.3 (10.1.33.3) 56(84) bytes of data.
</span><span class='line'>64 bytes from 10.1.33.3: icmp_seq=1 ttl=64 time=0.036 ms
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>全部启动好后dashboard的效果图：</p>

<p><img src="http://winseliu.com/images/blogs/k8s-dashboard.jpg" alt="" /></p>

<h2>从脚本中学习</h2>

<p>官网这份<a href="https://kubernetes.io/docs/getting-started-guides/scratch/#starting-cluster-services">Creating a Custom Cluster from Scratch</a> 看的糊里糊涂，真不是给入门级的同学看的。需要有一定的实践经验才能看的懂。</p>

<p>另辟蹊径，根据docker-multi的启动脚本来拆分学习然后模拟动手实践。在根据 <a href="https://kubernetes.io/docs/getting-started-guides/docker-multinode/">Portable Multi-Node Cluster</a> 文档学习操作的时刻不理解bootstrap docker以及main docker的含义。</p>

<p>这次通过单独运行提取每个函数运行后才理解，其实就相当于跑两个docker应用程序，互相不影响。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@cu2 ~]# ps aux|grep docker
</span><span class='line'>root      5310  0.0  0.2 645128 19180 pts/1    Sl   13:14   0:01 docker -d -H unix:///var/run/docker-bootstrap.sock -p /var/run/docker-bootstrap.pid --iptables=false --ip-masq=false --bridge=none --graph=/var/lib/docker-bootstrap --exec-root=/var/run/docker-bootstrap
</span><span class='line'>root      5782  1.1  0.5 2788284 43620 pts/1   Sl   13:14   0:23 /usr/bin/docker -d --mtu=1464 --bip=10.1.33.1/24
</span><span class='line'>root     10935  0.0  0.0 103316   896 pts/1    S+   13:47   0:00 grep docker
</span></code></pre></td></tr></table></div></figure>


<p>bootstrap docker启动后，容器etcd和flannel启动都很顺利。</p>

<p>以下的问题都是在自己虚拟机试，弄好后再放到测试环境的。</p>

<ul>
<li>问题1： 执行docker0网卡重置失败</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@bigdata1 data]# ip link set docker0 down
</span><span class='line'>[root@bigdata1 data]# ip link del docker0
</span><span class='line'>RTNETLINK answers: Operation not supported
</span><span class='line'>
</span><span class='line'>[root@bigdata1 data]# ip addr 
</span><span class='line'>
</span><span class='line'>删不掉，但是可以修改ip地址来实现相似的效果
</span><span class='line'>
</span><span class='line'>ifconfig docker0 ${FLANNEL_SUBNET}
</span><span class='line'>或者 
</span><span class='line'>[root@bigdata1 data]# ip link set dev docker0 mtu 1460
</span><span class='line'>[root@bigdata1 data]# ip addr del 172.17.42.1/16 dev docker0
</span><span class='line'>[root@bigdata1 data]# ip addr add ${FLANNEL_SUBNET} dev docker0
</span><span class='line'>[root@bigdata1 data]# ip link set dev docker0 up
</span><span class='line'>[root@bigdata1 data]# ifconfig # 查看重新分配的IP
</span><span class='line'>
</span><span class='line'>先添加参数在前端运行
</span><span class='line'>[root@bigdata1 data]# docker -d --mtu=1472 --bip=10.1.42.1/24
</span><span class='line'>
</span><span class='line'>启动
</span><span class='line'>[root@bigdata1 data]# sed -i 's/other_args=/other_args="--mtu=1472 --bip=10.1.42.1/24"/' /etc/sysconfig/docker
</span><span class='line'>[root@bigdata1 data]# service docker start
</span><span class='line'>Starting docker:                                           [确定]
</span><span class='line'>[root@bigdata1 data]# service docker status
</span><span class='line'>docker (pid  4542) 正在运行...</span></code></pre></td></tr></table></div></figure>


<ul>
<li>问题2：volumns mount不支持shared</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@bigdata1 data]# echo $KUBELET_MOUNTS
</span><span class='line'>-v /sys:/sys:rw -v /var/run:/var/run:rw -v /run:/run:rw -v /var/lib/docker:/var/lib/docker:rw -v /var/lib/kubelet:/var/lib/kubelet:shared -v /var/log/containers:/var/log/containers:rw
</span><span class='line'>
</span><span class='line'>[root@bigdata1 data]# mkdir -p /var/lib/kubelet
</span><span class='line'>[root@bigdata1 data]# mount --bind /var/lib/kubelet /var/lib/kubelet
</span><span class='line'>[root@bigdata1 data]# mount --make-shared /var/lib/kubelet
</span><span class='line'>
</span><span class='line'>[root@bigdata1 data]# docker run -d \
</span><span class='line'>&gt;     --net=host \
</span><span class='line'>&gt;     --pid=host \
</span><span class='line'>&gt;     --privileged \
</span><span class='line'>&gt;     --name kube_kubelet_$(kube::helpers::small_sha) \
</span><span class='line'>&gt;     ${KUBELET_MOUNTS} \
</span><span class='line'>&gt;     gcr.io/google_containers/hyperkube-${ARCH}:${K8S_VERSION} \
</span><span class='line'>&gt;     /hyperkube kubelet \
</span><span class='line'>&gt;       --allow-privileged \
</span><span class='line'>&gt;       --api-servers=http://localhost:8080 \
</span><span class='line'>&gt;       --config=/etc/kubernetes/manifests-multi \
</span><span class='line'>&gt;       --cluster-dns=10.0.0.10 \
</span><span class='line'>&gt;       --cluster-domain=cluster.local \
</span><span class='line'>&gt;       ${CNI_ARGS} \
</span><span class='line'>&gt;       ${CONTAINERIZED_FLAG} \
</span><span class='line'>&gt;       --hostname-override=${IP_ADDRESS} \
</span><span class='line'>&gt;       --v=2
</span><span class='line'>Error response from daemon: invalid mode for volumes-from: shared
</span><span class='line'>
</span><span class='line'># 改成z -- 2017-3-16 19:15:57不支持shared，后面会遇到volume的问题！
</span><span class='line'>    KUBELET_MOUNT="-v /var/lib/kubelet:/var/lib/kubelet:z"
</span><span class='line'>  
</span><span class='line'>[root@bigdata1 ~]# echo $KUBELET_MOUNTS
</span><span class='line'>-v /sys:/sys:rw -v /var/run:/var/run:rw -v /run:/run:rw -v /var/lib/docker:/var/lib/docker:rw -v /var/lib/kubelet:/var/lib/kubelet:z -v /var/log/containers:/var/log/containers:rw</span></code></pre></td></tr></table></div></figure>


<ul>
<li>问题3：cgroup问题</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Error: failed to run Kubelet: failed to get mounted cgroup subsystems: failed to find cgroup mounts
</span><span class='line'>failed to run Kubelet: failed to get mounted cgroup subsystems: failed to find cgroup mounts
</span><span class='line'>
</span><span class='line'>centos7 
</span><span class='line'>[root@k8s docker.service.d]# ll /sys/fs/cgroup/
</span><span class='line'>blkio/            cpuacct/          cpuset/           freezer/          memory/           net_cls,net_prio/ perf_event/       systemd/          
</span><span class='line'>cpu/              cpu,cpuacct/      devices/          hugetlb/          net_cls/          net_prio/         pids/             
</span><span class='line'>
</span><span class='line'>centos6
</span><span class='line'>http://wushank.blog.51cto.com/3489095/1203545
</span><span class='line'>[root@bigdata1 bin]# ls /cgroup/
</span><span class='line'>blkio  cpu  cpuacct  cpuset  devices  freezer  memory  net_cls
</span><span class='line'>
</span><span class='line'>把/cgroup加入到卷映射路径
</span><span class='line'>  KUBELET_MOUNTS="\
</span><span class='line'>    ${ROOTFS_MOUNT} \
</span><span class='line'>    -v /sys:/sys:rw \
</span><span class='line'>    -v /cgroup:/cgroup:rw \
</span><span class='line'>    -v /var/run:/var/run:rw \
</span><span class='line'>    -v /run:/run:rw \
</span><span class='line'>    -v /var/lib/docker:/var/lib/docker:rw \
</span><span class='line'>    ${KUBELET_MOUNT} \
</span><span class='line'>    -v /var/log/containers:/var/log/containers:rw"</span></code></pre></td></tr></table></div></figure>


<ul>
<li>问题4：再说版本，v1.3+的版本在centos6上运行kubelet报错：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@bigdata1 ~]# docker logs 7a2f7aec2239
</span><span class='line'>...
</span><span class='line'>E0228 10:56:05.408129    2516 kubelet.go:2049] Container runtime sanity check failed: container runtime version is older than 1.21</span></code></pre></td></tr></table></div></figure>


<p>1.3以上的版本都会报这个错。kubernetes用1.2.7的版本即可。</p>

<ul>
<li><p>问题5：dashboard/dns配置注意点</p></li>
<li><p>imagePullPolicy 就是个坑啊！改成IfNotPresent <a href="https://kubernetes.io/docs/user-guide/images/">https://kubernetes.io/docs/user-guide/images/</a></p></li>
<li>namespace 也不能改，好像会写数据库然后指定的namespace就是kube-system</li>
<li>apiserver 由于没有addon-manager的支持，暂时使用http获取数据（DNS的问题确认了很久，kube2sky容器日志有报错，修改server地址有http方式才解决）</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@cu2 docker-multinode-centos6]# docker exec -ti 193863bc646b bash
</span><span class='line'>[root@redis-2212193268-0ovu7 /]# nslookup kubernetes.default
</span><span class='line'>Server:         10.0.0.10
</span><span class='line'>Address:        10.0.0.10#53
</span><span class='line'>
</span><span class='line'>Name:   kubernetes.default.svc.cluster.local
</span><span class='line'>Address: 10.0.0.1</span></code></pre></td></tr></table></div></figure>


<p>处理完以上问题，K8S集群就跑起来了，然后整合成开始用的脚本。当然后续还有很多工作，不仅仅是怎么用，还有一些其他辅助的软件需要配置和安装。</p>

<h2>监控</h2>

<ul>
<li><a href="https://kubernetes.io/docs/user-guide/monitoring/">Resource Usage Monitoring</a></li>
<li><a href="https://github.com/kubernetes/heapster/blob/master/docs/influxdb.md">Run Heapster in a Kubernetes cluster with an InfluxDB backend and a Grafana UI</a></li>
<li><a href="http://codingwater.org/2016/08/18/Kubernetes%E9%9B%86%E7%BE%A4%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7-Heapster/">Kubernetes集群性能监控&ndash;Heapster</a></li>
<li><a href="http://www.pangxie.space/docker/727">Kubernetes部署监控(Heapster+Influxdb+Grafana)-centos7</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>可以通过4194访问cAdvisor  &lt;http://www.dockone.io/article/page-46&gt;
</span><span class='line'>http://cu2:4194/containers/
</span><span class='line'>
</span><span class='line'>[root@cu2 influxdb]# kubectl create -f ./
</span><span class='line'>deployment "monitoring-grafana" created
</span><span class='line'>service "monitoring-grafana" created
</span><span class='line'>deployment "heapster" created
</span><span class='line'>service "heapster" created
</span><span class='line'>deployment "monitoring-influxdb" created
</span><span class='line'>service "monitoring-influxdb" created
</span><span class='line'>
</span><span class='line'>[root@cu2 influxdb]# kubectl get pods --namespace=kube-system -o wide
</span><span class='line'>NAME                                    READY     STATUS             RESTARTS   AGE       NODE
</span><span class='line'>heapster-2621086088-s77cl               0/1       CrashLoopBackOff   2          37s       192.168.0.148
</span><span class='line'>kube-dns-v8-00p5h                       4/4       Running            1          5h        192.168.0.174
</span><span class='line'>kubernetes-dashboard-2845140353-l7o8o   1/1       Running            0          5h        192.168.0.30
</span><span class='line'>monitoring-grafana-1501214244-kw3im     1/1       Running            0          37s       192.168.0.148
</span><span class='line'>monitoring-influxdb-3498630124-241tx    1/1       Running            0          37s       192.168.0.30
</span><span class='line'>
</span><span class='line'>第一次启动heapster失败，定位机器查看日志
</span><span class='line'>[root@cu3 ~]# docker logs aad68dd07ff8
</span><span class='line'>I0306 09:06:25.611251       1 heapster.go:71] /heapster --source=kubernetes:https://kubernetes.default --sink=influxdb:http://monitoring-influxdb:8086
</span><span class='line'>I0306 09:06:25.611523       1 heapster.go:72] Heapster version v1.3.0-beta.1
</span><span class='line'>F0306 09:06:25.611555       1 heapster.go:174] Failed to create source provide: open /var/run/secrets/kubernetes.io/serviceaccount/token: no such file or directory
</span><span class='line'>
</span><span class='line'>https://github.com/kubernetes/heapster/blob/master/docs/source-configuration.md 改成http
</span><span class='line'>
</span><span class='line'>重新加载
</span><span class='line'>[root@cu2 influxdb]# for file in * ; do sed -e "s|MASTER_IP|${IP_ADDRESS}|g" $file | kubectl apply -f - ; done
</span><span class='line'>deployment "monitoring-grafana" configured
</span><span class='line'>service "monitoring-grafana" configured
</span><span class='line'>deployment "heapster" configured
</span><span class='line'>service "heapster" configured
</span><span class='line'>deployment "monitoring-influxdb" configured
</span><span class='line'>service "monitoring-influxdb" configured
</span><span class='line'>
</span><span class='line'>[root@cu2 influxdb]# kubectl get service --namespace=kube-system -o wide
</span><span class='line'>NAME                   CLUSTER-IP   EXTERNAL-IP   PORT(S)         AGE       SELECTOR
</span><span class='line'>heapster               10.0.0.54    &lt;none&gt;        80/TCP          8m        k8s-app=heapster
</span><span class='line'>kube-dns               10.0.0.10    &lt;none&gt;        53/UDP,53/TCP   6h        k8s-app=kube-dns
</span><span class='line'>kubernetes-dashboard   10.0.0.181   nodes         80/TCP          6h        app=kubernetes-dashboard
</span><span class='line'>monitoring-grafana     10.0.0.220   &lt;none&gt;        80/TCP          8m        k8s-app=grafana
</span><span class='line'>monitoring-influxdb    10.0.0.223   &lt;none&gt;        8086/TCP        8m        k8s-app=influxdb
</span><span class='line'>
</span><span class='line'>浏览器访问grafana 登录：admin/admin
</span><span class='line'>http://10.0.0.220/
</span></code></pre></td></tr></table></div></figure>


<p>安装好监控后，dashboard也有图标了。</p>

<p><img src="http://winseliu.com/images/blogs/k8s-dashboard-pro.jpg" alt="" /></p>

<h4>某机器数据不显示问题定位</h4>

<p>原来是三台机器的，后面增加了148的机器进来。添加heapster监控后，就148机器图形显示不出来。并且dashboard的 148 Node 页面的 <strong> Conditions - Last heartbeat time </strong> 没显示内容。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@cu2 ~]# kubectl get services --all-namespaces
</span><span class='line'>NAMESPACE     NAME                   CLUSTER-IP   EXTERNAL-IP   PORT(S)         AGE
</span><span class='line'>default       kubernetes             10.0.0.1     &lt;none&gt;        443/TCP         1d
</span><span class='line'>kube-system   heapster               10.0.0.196   &lt;none&gt;        80/TCP          12m
</span><span class='line'>kube-system   kube-dns               10.0.0.10    &lt;none&gt;        53/UDP,53/TCP   21h
</span><span class='line'>kube-system   kubernetes-dashboard   10.0.0.181   nodes         80/TCP          21h
</span><span class='line'>kube-system   monitoring-grafana     10.0.0.215   &lt;none&gt;        80/TCP          12m
</span><span class='line'>kube-system   monitoring-influxdb    10.0.0.226   &lt;none&gt;        8086/TCP        12m
</span><span class='line'>
</span><span class='line'>查看接口
</span><span class='line'>https://github.com/kubernetes/heapster/blob/master/docs/debugging.md
</span><span class='line'>
</span><span class='line'>  http://10.0.0.196/metrics
</span><span class='line'>
</span><span class='line'>  这里没有148机器的key
</span><span class='line'>  http://10.0.0.196/api/v1/model/debug/allkeys
</span><span class='line'>
</span><span class='line'>  http://192.168.0.30:10255/stats/container/
</span><span class='line'>
</span><span class='line'>https://github.com/kubernetes/heapster/blob/master/docs/sink-configuration.md
</span><span class='line'>
</span><span class='line'>等到heapster机器运行命令，改下端口，日志输出详细点
</span><span class='line'>/ # /heapster --source=kubernetes:http://192.168.0.214:8080?inClusterConfig=false --sink=log --heapster-port=8083 -v 10
</span><span class='line'>
</span><span class='line'>  http://192.168.0.214:8080/api/v1/nodes
</span><span class='line'>  Node
</span><span class='line'>  Pod
</span><span class='line'>  Namespace
</span><span class='line'>  
</span><span class='line'>148机器的10255和4194端口都正常运行，heapster从148也获取到数据了。但是最后log输出的时刻没有148机器。系统时间？抱着尝试的心态改了一下，148的机器快了几分钟。
</span><span class='line'>
</span><span class='line'>果不其然啊！！同步时间后监控图就显示出来了。</span></code></pre></td></tr></table></div></figure>


<h2>后续学习操作</h2>

<ul>
<li>安全HTTPS <a href="https://kubernetes.io/docs/admin/authentication/#creating-certificates">https://kubernetes.io/docs/admin/authentication/#creating-certificates</a></li>
<li>register <a href="http://www.pangxie.space/docker/643">http://www.pangxie.space/docker/643</a> k8s版本旧的话很麻烦</li>
<li><a href="https://kubernetes.io/docs/tasks/">https://kubernetes.io/docs/tasks/</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/blob/release-1.2/examples/redis/redis-controller.yaml">https://github.com/kubernetes/kubernetes/blob/release-1.2/examples/redis/redis-controller.yaml</a></li>
</ul>


<p>阿里云的镜像加速还是很赞的，由于我域名是在万网注册的本来就有账号，登录就能看到加速的地址，非常的方便。科技大学的加速镜像也很赞！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@cu1 ~]# cat /etc/sysconfig/docker
</span><span class='line'>...
</span><span class='line'>#other_args=" --registry-mirror=https://us69kjun.mirror.aliyuncs.com "
</span><span class='line'>other_args=" --registry-mirror=https://docker.mirrors.ustc.edu.cn "
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>有趣的命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://kubernetes.io/docs/user-guide/jsonpath/
</span><span class='line'>[root@cu2 ~]# kubectl get pods -o wide -l run=redis -o jsonpath={..podIP}
</span><span class='line'>10.1.75.2 10.1.75.3 10.1.58.3 10.1.58.2 10.1.33.3
</span><span class='line'>
</span><span class='line'>修改启动entry，以及网络共用
</span><span class='line'>docker run -ti --entrypoint=sh --net=container:8e9f21956469f4ef7e5b9d91798788ab83f380795d2825cdacae0ed28f5ba03b gcr.io/google_containers/skydns-amd64:1.0
</span><span class='line'>
</span><span class='line'>https://kubernetes.io/docs/tasks/kubectl/list-all-running-container-images/
</span><span class='line'>[root@cu2 ~]# kubectl get pods --all-namespaces -o jsonpath="{..image}" |\
</span><span class='line'>&gt; tr -s '[[:space:]]' '\n' |\
</span><span class='line'>&gt; sort |\
</span><span class='line'>&gt; uniq -c
</span><span class='line'>      2 gcr.io/google_containers/etcd-amd64:2.2.5
</span><span class='line'>      2 gcr.io/google_containers/exechealthz-amd64:1.0
</span><span class='line'>      2 gcr.io/google_containers/heapster-amd64:v1.3.0-beta.1
</span><span class='line'>      2 gcr.io/google_containers/heapster-grafana-amd64:v4.0.2
</span><span class='line'>      2 gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
</span><span class='line'>     10 gcr.io/google_containers/hyperkube-amd64:v1.2.7
</span><span class='line'>      2 gcr.io/google_containers/kube2sky-amd64:1.15
</span><span class='line'>      2 gcr.io/google_containers/kubernetes-dashboard-amd64:v1.5.1
</span><span class='line'>      2 gcr.io/google_containers/skydns-amd64:1.0
</span><span class='line'>      2 redis:3.2.8
</span><span class='line'>
</span><span class='line'>kubectl get pods --all-namespaces -o jsonpath="{.items[*].spec.containers[*].image}"
</span><span class='line'>
</span><span class='line'>[root@cu2 ~]# export POD_COL="custom-columns=NAME:.metadata.name,RESTARTS:.status.containerStatuses[*].restartCount,CONTAINERS:.spec.containers[*].name,IP:.status.podIP,HOST:.spec.nodeName"
</span><span class='line'>[root@cu2 ~]# kubectl get pods -o $POD_COL 
</span><span class='line'>
</span><span class='line'># 加label
</span><span class='line'>[root@cu2 ~]# cat /etc/hosts | grep -E "\scu[0-9]\s" | awk '{print "kubectl label nodes "$1" hostname="$2}' | while read line ; do sh -c "$line" ; done
</span><span class='line'>
</span><span class='line'>[root@cu2 kubernetes]# kubectl run redis --image=redis:3.2.8 
</span><span class='line'>[root@cu2 kubernetes]# kubectl scale --replicas=9 deployment/redis</span></code></pre></td></tr></table></div></figure>


<h2>其他参考</h2>

<p>纯手动安装，所有应用都作为服务启动
* <a href="http://chenguomin.blog.51cto.com/8794192/1828905">http://chenguomin.blog.51cto.com/8794192/1828905</a> 网络使用flannel、DNS的安装配置
* <a href="http://www.pangxie.space/docker/618">http://www.pangxie.space/docker/618</a>
* <a href="https://xuxinkun.github.io/2016/03/27/k8s-service/">https://xuxinkun.github.io/2016/03/27/k8s-service/</a> service是在防火墙做的跳转 => iptables -S -t nat</p>

<p>介绍
* <a href="http://www.infoq.com/cn/articles/kubernetes-and-cloud-native-applications-part01">http://www.infoq.com/cn/articles/kubernetes-and-cloud-native-applications-part01</a>
* <a href="http://www.codingwater.org/2016/08/25/Docker-Kubernetes-Intro/">http://www.codingwater.org/2016/08/25/Docker-Kubernetes-Intro/</a>
* <a href="https://github.com/kubernetes/kubernetes/tree/v1.0.1/cluster/addons/dns">https://github.com/kubernetes/kubernetes/tree/v1.0.1/cluster/addons/dns</a></p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[K8s集群部署]]></title>
    <link href="http://winseliu.com/blog/2017/02/25/k8s-docker-multinode/"/>
    <updated>2017-02-25T21:25:26+08:00</updated>
    <id>http://winseliu.com/blog/2017/02/25/k8s-docker-multinode</id>
    <content type="html"><![CDATA[<p>前面讲了在本机windows安装方式，最近在linux多机器上尝试部署并操作。</p>

<p>先看官网的文档<a href="https://kubernetes.io/docs/getting-started-guides/docker-multinode/">Portable Multi-Node Cluster</a>。这里根据文章进行实际操作记录下来，k8s是真的好用管理起来很方便。</p>

<h2>安装docker（on centos7）</h2>

<h4>不正确的打开方式</h4>

<p>不要用这种方式安装</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@k8s ~]# yum install docker
</span><span class='line'>
</span><span class='line'>[root@k8s ~]# docker -v
</span><span class='line'>Docker version 1.12.5, build 047e51b/1.12.5</span></code></pre></td></tr></table></div></figure>


<p>否则运行报错的daemon语句，报错：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@k8s docker-multinode]# docker daemon -H unix:///var/run/docker-bootstrap.sock -p /var/run/docker-bootstrap.pid --iptables=false --ip-masq=false --bridge=none --graph=/var/lib/docker-bootstrap --exec-root=/var/run/docker-bootstrap
</span><span class='line'>exec: "dockerd": executable file not found in $PATH</span></code></pre></td></tr></table></div></figure>


<p>先清理旧的软件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum remove docker -y
</span><span class='line'>yum remove container-selinux -y
</span><span class='line'>yum remove docker-common -y</span></code></pre></td></tr></table></div></figure>


<h4>安装docker的正确姿势</h4>

<ul>
<li><a href="https://docs.docker.com/engine/installation/linux/centos/">Get Docker for CentOS</a></li>
</ul>


<p>变化很快，直接按官网的操作。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@k8s ~]# yum install -y yum-utils
</span><span class='line'>
</span><span class='line'>[root@k8s ~]# yum-config-manager --add-repo https://docs.docker.com/engine/installation/linux/repo_files/centos/docker.repo
</span><span class='line'>Loaded plugins: fastestmirror, langpacks
</span><span class='line'>Repository base is listed more than once in the configuration
</span><span class='line'>Repository updates is listed more than once in the configuration
</span><span class='line'>Repository extras is listed more than once in the configuration
</span><span class='line'>Repository centosplus is listed more than once in the configuration
</span><span class='line'>adding repo from: https://docs.docker.com/engine/installation/linux/repo_files/centos/docker.repo
</span><span class='line'>grabbing file https://docs.docker.com/engine/installation/linux/repo_files/centos/docker.repo to /etc/yum.repos.d/docker.repo
</span><span class='line'>repo saved to /etc/yum.repos.d/docker.repo
</span><span class='line'>
</span><span class='line'>[root@k8s ~]# yum makecache fast
</span><span class='line'>[root@k8s ~]# yum -y install docker-engine
</span><span class='line'>
</span><span class='line'># 把保存数据的目录转移到大磁盘下面去
</span><span class='line'>先启动服务来产生docker目录
</span><span class='line'>[root@k8s ~]# service docker start
</span><span class='line'>[root@k8s ~]# service docker stop
</span><span class='line'>
</span><span class='line'>[root@k8s ~]# rm -rf /var/lib/docker/
</span><span class='line'>[root@k8s ~]# ln -s /data/var/lib/docker /var/lib/</span></code></pre></td></tr></table></div></figure>


<h2>安装k8s</h2>

<ul>
<li><a href="https://kubernetes.io/docs/getting-started-guides/docker-multinode/">Portable Multi-Node Cluster</a></li>
</ul>


<h4>准备</h4>

<ul>
<li><a href="https://kubernetes.io/docs/user-guide/prereqs/">Installing and Setting up kubectl</a></li>
<li><a href="https://kubernetes.io/docs/getting-started-guides/kubectl/">https://kubernetes.io/docs/getting-started-guides/kubectl/</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 删除旧的容器
</span><span class='line'>[root@k8s docker-multinode]# docker rm -f `docker ps -a | grep -v IMAGE | awk '{print $1}'`
</span><span class='line'>[root@k8s docker-multinode]# docker ps -a
</span><span class='line'>
</span><span class='line'># 下载部署的工具
</span><span class='line'>[root@k8s ~]# yum install git -y
</span><span class='line'>[root@k8s ~]# git clone https://github.com/kubernetes/kube-deploy
</span><span class='line'>
</span><span class='line'># kubectl安装，需要代理你懂得 
</span><span class='line'>export NO_PROXY="localhost,127.0.0.1,10.0.0.0/8"
</span><span class='line'>export https_proxy=http://k8s:8118/
</span><span class='line'>export http_proxy=http://k8s:8118/
</span><span class='line'>
</span><span class='line'>[root@k8s ~]# curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
</span><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'>100 48.0M  100 48.0M    0     0  1692k      0  0:00:29  0:00:29 --:--:-- 2351k
</span><span class='line'>[root@k8s ~]# chmod +x kubectl 
</span><span class='line'>[root@k8s ~]# mkdir ~/bin
</span><span class='line'>[root@k8s ~]# mv ./kubectl ~/bin/
</span><span class='line'>
</span><span class='line'>[root@k8s ~]# source &lt;(kubectl completion bash)
</span><span class='line'>[root@k8s ~]# echo "source &lt;(kubectl completion bash)" &gt;&gt; ~/.bashrc
</span><span class='line'>== 修改成下面的语句，不然你scp、rsync就不能用了: https://my.oschina.net/leejun2005/blog/342865
</span><span class='line'>== export PATH=~/bin:$PATH
</span><span class='line'>== [[ $- == *i* ]] && source &lt;(kubectl completion bash)
</span></code></pre></td></tr></table></div></figure>


<h4>启动master</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@k8s ~]# cd kube-deploy/docker-multinode/
</span><span class='line'>[root@k8s docker-multinode]# ./master.sh 
</span><span class='line'>+++ [0206 19:07:23] K8S_VERSION is set to: v1.5.2
</span><span class='line'>+++ [0206 19:07:23] ETCD_VERSION is set to: 3.0.4
</span><span class='line'>+++ [0206 19:07:23] FLANNEL_VERSION is set to: v0.6.1
</span><span class='line'>+++ [0206 19:07:23] FLANNEL_IPMASQ is set to: true
</span><span class='line'>+++ [0206 19:07:23] FLANNEL_NETWORK is set to: 10.1.0.0/16
</span><span class='line'>+++ [0206 19:07:23] FLANNEL_BACKEND is set to: udp
</span><span class='line'>+++ [0206 19:07:23] RESTART_POLICY is set to: unless-stopped
</span><span class='line'>+++ [0206 19:07:23] MASTER_IP is set to: localhost
</span><span class='line'>+++ [0206 19:07:23] ARCH is set to: amd64
</span><span class='line'>+++ [0206 19:07:23] IP_ADDRESS is set to: 192.168.1.112
</span><span class='line'>+++ [0206 19:07:23] USE_CNI is set to: false
</span><span class='line'>+++ [0206 19:07:23] USE_CONTAINERIZED is set to: false
</span><span class='line'>+++ [0206 19:07:23] --------------------------------------------
</span><span class='line'>+++ [0206 19:07:23] Killing docker bootstrap...
</span><span class='line'>+++ [0206 19:07:24] Killing all kubernetes containers...
</span><span class='line'>Do you want to clean /var/lib/kubelet? [Y/n] y
</span><span class='line'>+++ [0206 19:07:27] Launching docker bootstrap...
</span><span class='line'>+++ [0206 19:07:28] Launching etcd...
</span><span class='line'>3ff0f0fd7a08282930449b2f496f786b9857f6290698d612cebc2086d1a1765c
</span><span class='line'>+++ [0206 19:07:31] Launching flannel...
</span><span class='line'>{"action":"set","node":{"key":"/coreos.com/network/config","value":"{ \"Network\": \"10.1.0.0/16\", \"Backend\": {\"Type\": \"udp\"}}","modifiedIndex":4,"createdIndex":4}}
</span><span class='line'>3651d077f453900a898ce6ad9fe67a7422f0c8084ec86b6e6a1a2ab6b9b1c629
</span><span class='line'>+++ [0206 19:07:33] FLANNEL_SUBNET is set to: 10.1.42.1/24
</span><span class='line'>+++ [0206 19:07:33] FLANNEL_MTU is set to: 1472
</span><span class='line'>+++ [0206 19:07:33] Restarting main docker daemon...
</span><span class='line'>+++ [0206 19:07:38] Restarted docker with the new flannel settings
</span><span class='line'>+++ [0206 19:07:38] Launching Kubernetes master components...
</span><span class='line'>d10130677853022fe37742437e39b21b3fcfbb90b3f24075457f469e238b0712
</span><span class='line'>+++ [0206 19:07:42] Done. It may take about a minute before apiserver is up.
</span><span class='line'>
</span><span class='line'>[root@k8s docker-multinode]# docker ps -a
</span><span class='line'>...一堆容器列表</span></code></pre></td></tr></table></div></figure>


<p>如果有问题基本就是防火墙的问题（我遇到过的啊，下载镜像和本地firewall设置的问题）。</p>

<p>上面安装kubectl时已经配置了代理地址。如果部署master的时刻pull镜像出错，那还得需要给docker配置代理增加配置 <strong> /etc/systemd/system/docker.service.d/http-proxy.conf </strong> / <strong> /usr/lib/systemd/system/docker.service </strong> 参考 <a href="https://docs.docker.com/engine/admin/systemd/#http-proxy">https://docs.docker.com/engine/admin/systemd/#http-proxy</a> 。具体错误详情及处理查看下面的【问题及处理】部分</p>

<p><strong>安装启动好</strong>后，就可以通过浏览器图形界面来管理集群了(dashboard启动有问题的话查看后面的问题处理)： <a href="http://k8s:8080/api/v1/proxy/namespaces/kube-system/services/kubernetes-dashboard/#/workload?namespace=default">http://k8s:8080/api/v1/proxy/namespaces/kube-system/services/kubernetes-dashboard/#/workload?namespace=default</a></p>

<h4>启动worker</h4>

<p>下载安装软件的工作这里就不帖了，和master一样的：安装git、clone kube-deploy、docker。</p>

<p>防火墙配置，master/slaves之间互通</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>centos7 firewall的add-source不知道怎么用的，反正加了地址也没效果；后面通过rule规则来实现。
</span><span class='line'>[root@bigdata-dev ~]# vi /etc/firewalld/zones/public.xml
</span><span class='line'>&lt;?xml version="1.0" encoding="utf-8"?&gt;
</span><span class='line'>&lt;zone&gt;
</span><span class='line'>  &lt;rule family="ipv4"&gt;
</span><span class='line'>    &lt;source address="192.168.1.112/32"/&gt;
</span><span class='line'>    &lt;accept/&gt;
</span><span class='line'>  &lt;/rule&gt;
</span><span class='line'>  &lt;service name="ssh"/&gt;
</span><span class='line'>  &lt;port protocol="tcp" port="80"/&gt;
</span><span class='line'>  &lt;port protocol="tcp" port="6379"/&gt;
</span><span class='line'>  &lt;port protocol="tcp" port="8080"/&gt;
</span><span class='line'>&lt;/zone&gt;
</span><span class='line'>[root@bigdata-dev ~]# firewall-cmd --complete-reload
</span><span class='line'>success
</span><span class='line'>[root@bigdata-dev ~]# firewall-cmd --list-all
</span><span class='line'>public (active)
</span><span class='line'>  target: default
</span><span class='line'>  icmp-block-inversion: no
</span><span class='line'>  interfaces: p4p1
</span><span class='line'>  sources: 
</span><span class='line'>  services: ssh
</span><span class='line'>  ports: 80/tcp 6379/tcp 8080/tcp
</span><span class='line'>  protocols: 
</span><span class='line'>  masquerade: no
</span><span class='line'>  forward-ports: 
</span><span class='line'>  sourceports: 
</span><span class='line'>  icmp-blocks: 
</span><span class='line'>  rich rules: 
</span><span class='line'>        rule family="ipv4" source address="192.168.1.112/32" accept
</span><span class='line'>
</span><span class='line'>[root@k8s ~]# cat /etc/firewalld/zones/public.xml
</span><span class='line'>&lt;?xml version="1.0" encoding="utf-8"?&gt;
</span><span class='line'>&lt;zone&gt;
</span><span class='line'>  &lt;rule family="ipv4"&gt;
</span><span class='line'>    &lt;source address="192.168.1.248"/&gt;
</span><span class='line'>    &lt;accept/&gt;
</span><span class='line'>  &lt;/rule&gt;
</span><span class='line'>  &lt;service name="ssh"/&gt;
</span><span class='line'>  &lt;port protocol="tcp" port="6443"/&gt;
</span><span class='line'>  &lt;port protocol="tcp" port="2379"/&gt;
</span><span class='line'>  &lt;port protocol="tcp" port="8118"/&gt;
</span><span class='line'>&lt;/zone&gt;</span></code></pre></td></tr></table></div></figure>


<p>加载已经下载的镜像。从master拷贝过来（save/load）不要浪费VPN流量啦：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@bigdata-dev docker-multinode]# docker load &lt;k8s.tar</span></code></pre></td></tr></table></div></figure>


<p>运行worker启动脚本：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 设置代理。如果有docker镜像下载失败的话再配置docker环境变量
</span><span class='line'>export NO_PROXY="localhost,127.0.0.1,10.0.0.0/8"
</span><span class='line'>export https_proxy=http://k8s:8118/
</span><span class='line'>export http_proxy=http://k8s:8118/
</span><span class='line'>
</span><span class='line'>[root@bigdata-dev docker-multinode]# export MASTER_IP=192.168.1.112 
</span><span class='line'>[root@bigdata-dev docker-multinode]# ./worker.sh 
</span><span class='line'>+++ [0208 08:59:37] K8S_VERSION is set to: v1.5.2
</span><span class='line'>+++ [0208 08:59:37] ETCD_VERSION is set to: 3.0.4
</span><span class='line'>+++ [0208 08:59:37] FLANNEL_VERSION is set to: v0.6.1
</span><span class='line'>+++ [0208 08:59:37] FLANNEL_IPMASQ is set to: true
</span><span class='line'>+++ [0208 08:59:37] FLANNEL_NETWORK is set to: 10.1.0.0/16
</span><span class='line'>+++ [0208 08:59:37] FLANNEL_BACKEND is set to: udp
</span><span class='line'>+++ [0208 08:59:37] RESTART_POLICY is set to: unless-stopped
</span><span class='line'>+++ [0208 08:59:37] MASTER_IP is set to: 192.168.1.112
</span><span class='line'>+++ [0208 08:59:37] ARCH is set to: amd64
</span><span class='line'>+++ [0208 08:59:37] IP_ADDRESS is set to: 192.168.1.248
</span><span class='line'>+++ [0208 08:59:37] USE_CNI is set to: false
</span><span class='line'>+++ [0208 08:59:37] USE_CONTAINERIZED is set to: false
</span><span class='line'>+++ [0208 08:59:37] --------------------------------------------
</span><span class='line'>+++ [0208 08:59:37] Killing all kubernetes containers...
</span><span class='line'>+++ [0208 08:59:37] Launching docker bootstrap...
</span><span class='line'>+++ [0208 08:59:38] Launching flannel...
</span><span class='line'>+++ [0208 08:59:39] FLANNEL_SUBNET is set to: 10.1.42.1/24
</span><span class='line'>+++ [0208 08:59:39] FLANNEL_MTU is set to: 1472
</span><span class='line'>+++ [0208 08:59:39] Restarting main docker daemon...
</span><span class='line'>+++ [0208 08:59:43] Restarted docker with the new flannel settings
</span><span class='line'>+++ [0208 08:59:43] Launching Kubernetes worker components...
</span><span class='line'>1ce6ee6af709485668c9f170b1bc234b34d55d18e53116295c887c88046ca231
</span><span class='line'>+++ [0208 08:59:44] Done. After about a minute the node should be ready.</span></code></pre></td></tr></table></div></figure>


<h2>查看集群状态</h2>

<p>安装好了后，需要学习基本的管理操作</p>

<ul>
<li>交互式的学习一些基本概念命令 <a href="https://kubernetes.io/docs/tutorials/kubernetes-basics/">Kubernetes Basics</a></li>
<li>常用的kubectl命令册子 <a href="https://kubernetes.io/docs/user-guide/kubectl-cheatsheet/">kubectl Cheat Sheet</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@k8s ~]# kubectl cluster-info
</span><span class='line'>Kubernetes master is running at http://localhost:8080
</span><span class='line'>KubeDNS is running at http://localhost:8080/api/v1/proxy/namespaces/kube-system/services/kube-dns
</span><span class='line'>kubernetes-dashboard is running at http://localhost:8080/api/v1/proxy/namespaces/kube-system/services/kubernetes-dashboard
</span><span class='line'>
</span><span class='line'>To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.
</span><span class='line'>
</span><span class='line'>[root@k8s ~]# kubectl get service
</span><span class='line'>NAME         CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
</span><span class='line'>kubernetes   10.0.0.1     &lt;none&gt;        443/TCP   16d
</span><span class='line'>
</span><span class='line'>[root@k8s ~]# kubectl get nodes
</span><span class='line'>NAME            STATUS    AGE
</span><span class='line'>192.168.1.112   Ready     16d
</span><span class='line'>192.168.1.248   Ready     16d
</span><span class='line'>
</span><span class='line'>[root@k8s ~]# kubectl get pods --namespace=kube-system
</span><span class='line'>NAME                                    READY     STATUS    RESTARTS   AGE
</span><span class='line'>k8s-master-192.168.1.112                4/4       Running   9          1d
</span><span class='line'>k8s-proxy-v1-4hp8c                      1/1       Running   0          1d
</span><span class='line'>k8s-proxy-v1-htrrf                      1/1       Running   0          1d
</span><span class='line'>kube-addon-manager-192.168.1.112        2/2       Running   0          1d
</span><span class='line'>kube-dns-4101612645-q0kcw               4/4       Running   0          1d
</span><span class='line'>kubernetes-dashboard-3543765157-hsls9   1/1       Running   0          1d
</span><span class='line'>
</span><span class='line'>dashboard运行正常的话，就可以通过浏览器查看以及管理集群
</span><span class='line'>== https://kubernetes.io/docs/user-guide/ui/
</span><span class='line'>== 走socks5代理
</span><span class='line'>http://k8s:8080/api/v1/proxy/namespaces/kube-system/services/kubernetes-dashboard/#/workload?namespace=default</span></code></pre></td></tr></table></div></figure>


<h2>问题及处理</h2>

<p>镜像或者启动失败的问题可以 <strong>set -x</strong> 输出脚本调试信息，获取到出错位置的命令单独重新执行来定位。</p>

<p>另一种情况，脚本启动完成后，服务不能正常运行。重启机器，再次运行master后就不能访问dashboard了，把master机器的防火墙关闭就行了。github上有同样的一个问题<a href="https://github.com/kubernetes/dashboard/issues/916">https://github.com/kubernetes/dashboard/issues/916</a></p>

<p>处理定位问题步骤如下：</p>

<p>清理所有重新弄，无济于事</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker kill $(docker ps -q)
</span><span class='line'>docker rm $(docker ps -aq)
</span><span class='line'>[reboot]
</span><span class='line'>sudo rm -R /var/lib/kubelet
</span><span class='line'>sudo rm -R /var/run/kubernetes
</span><span class='line'>
</span><span class='line'>./turndown.sh & ./master.sh 
</span><span class='line'>kubectl get pods --namespace=kube-system # 显示的dashboard容器启动总是失败，可以通过kubectl logs/docker logs查看。</span></code></pre></td></tr></table></div></figure>


<p>重新定位问题</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>既然关闭防火墙能正常运行，下面通过拦截日志查看封堵日志
</span><span class='line'>[root@k8s ~]# firewall-cmd --set-log-denied=all
</span><span class='line'>
</span><span class='line'>[root@k8s ~]# less /var/log/messages
</span><span class='line'>Feb 25 00:04:30 k8s kernel: XFS (dm-32): Unmounting Filesystem
</span><span class='line'>Feb 25 00:04:30 k8s kernel: XFS (dm-32): Mounting V5 Filesystem
</span><span class='line'>Feb 25 00:04:30 k8s kernel: XFS (dm-32): Ending clean mount
</span><span class='line'>Feb 25 00:04:32 k8s kernel: FINAL_REJECT: IN=docker0 OUT= PHYSIN=veth2fd9745 MAC=02:42:cf:c5:2c:da:02:42:0a:01:49:03:08:00 SRC=10.1.73.3 DST=192.168.1.112 LEN=60 TOS=0x00 PREC=0x00 TTL=64 ID=11531 DF PROTO=TCP SPT=38734 DPT=6443 WINDOW=28640 RES=0x00 SYN URGP=0 
</span><span class='line'>Feb 25 00:04:33 k8s kernel: FINAL_REJECT: IN=docker0 OUT= PHYSIN=veth2fd9745 MAC=02:42:cf:c5:2c:da:02:42:0a:01:49:03:08:00 SRC=10.1.73.3 DST=192.168.1.112 LEN=60 TOS=0x00 PREC=0x00 TTL=64 ID=11532 DF PROTO=TCP SPT=38734 DPT=6443 WINDOW=28640 RES=0x00 SYN URGP=0 
</span><span class='line'>Feb 25 00:04:33 k8s dockerd: time="2017-02-25T00:04:33.935301481+08:00" level=error msg="containerd: deleting container" error="exit status 1: \"container dcb4a44031b96470eaef50eb8ac4ee2b9f958906702d94645c3a45c4852b6335 does not exist\\none or more of the container deletions failed\\n\""
</span><span class='line'>Feb 25 00:04:34 k8s kernel: XFS (dm-32): Unmounting Filesystem
</span><span class='line'>Feb 25 00:04:35 k8s systemd-udevd: inotify_add_watch(7, /dev/dm-32, 10) failed: No such file or directory
</span><span class='line'>Feb 25 00:04:36 k8s systemd-udevd: inotify_add_watch(7, /dev/dm-32, 10) failed: No such file or directory
</span><span class='line'>Feb 25 00:04:36 k8s dockerd: time="2017-02-25T00:04:36.406470062+08:00" level=error msg="Handler for GET /v1.25/containers/5bd86339f0dcd513da632ec300d4235d8a09c3f9546f751ac8874de411de3c10/json returned error: No such container: 5bd86339f0dcd513da632ec300d4235d8a09c3f9546f751ac8874de411de3c10"
</span><span class='line'>可以看出访问的端口6443被拦截了</span></code></pre></td></tr></table></div></figure>


<p>开放6443端口dashboard启动成功（直接把放开ip段也行）。通过浏览器能正常访问</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@k8s ~]# firewall-cmd --zone=public --add-port=6443/tcp --permanent
</span><span class='line'>success
</span><span class='line'>[root@k8s ~]# firewall-cmd --reload
</span><span class='line'>success
</span><span class='line'>
</span><span class='line'>[root@k8s ~]# kubectl get pods --namespace=kube-system
</span><span class='line'>NAME                                    READY     STATUS    RESTARTS   AGE
</span><span class='line'>k8s-master-192.168.1.112                4/4       Running   1          9m
</span><span class='line'>k8s-proxy-v1-nzkgt                      1/1       Running   0          9m
</span><span class='line'>kube-addon-manager-192.168.1.112        2/2       Running   0          8m
</span><span class='line'>kube-dns-4101612645-k4j0s               4/4       Running   4          9m
</span><span class='line'>kubernetes-dashboard-3543765157-h5g5f   1/1       Running   6          9m
</span><span class='line'>等所有都Running才能通过dashboard查看</span></code></pre></td></tr></table></div></figure>


<h2>使用</h2>

<p>使用已有镜像（网上、本地）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@k8s ~]# kubectl run hello-nginx --image=nginx --port=80
</span><span class='line'>
</span><span class='line'>[root@k8s ~]# kubectl get pods
</span><span class='line'>NAME                           READY     STATUS    RESTARTS   AGE
</span><span class='line'>hello-nginx-2471083592-94pm7   1/1       Running   0          19m
</span><span class='line'>[root@k8s ~]# kubectl describe pod hello-nginx-2471083592-94pm7
</span><span class='line'>Name:           hello-nginx-2471083592-94pm7
</span><span class='line'>Namespace:      default
</span><span class='line'>Node:           192.168.1.248/192.168.1.248
</span><span class='line'>Start Time:     Fri, 24 Feb 2017 12:37:30 +0800
</span><span class='line'>Labels:         pod-template-hash=2471083592
</span><span class='line'>                run=hello-nginx
</span><span class='line'>Status:         Running
</span><span class='line'>IP:             10.1.42.3
</span><span class='line'>Controllers:    ReplicaSet/hello-nginx-2471083592</span></code></pre></td></tr></table></div></figure>


<p>查看到pod的ip，登录Node对应的机器就可以直接通过IP访问了。IP与flannel0网卡在同一网段。</p>

<p>定制镜像</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@k8s ~]# docker pull centos:centos5
</span><span class='line'>[root@k8s ~]# docker pull centos:centos6
</span><span class='line'>[root@k8s ~]# docker pull centos:centos7
</span><span class='line'>
</span><span class='line'>把最新的修改提交保存为行的镜像。
</span><span class='line'>登录centos6，安装sshd后，启动sshd服务（产生key）。清理yum缓冲、临时文件/tmp、以及history等。写Dockerfile减小镜像的大小： https://hui.lu/reduce-docker-image-size/  
</span><span class='line'>[root@k8s ~]# docker run -t -i centos:centos6 
</span><span class='line'>...yum install -y openssh-server openssh-clients ; service sshd start ; yum clean all ; history -c ; rm -rf /tmp/*
</span><span class='line'>
</span><span class='line'>提交的名字一定要打标签tag
</span><span class='line'>[root@k8s ~]# docker ps -a
</span><span class='line'>[root@k8s ~]# docker commit CONTAINER_ID bigdata:v1
</span><span class='line'>查看下版本的历史
</span><span class='line'>[root@k8s ~]# docker history bigdata:v1
</span><span class='line'>
</span><span class='line'>[root@k8s ~]# docker images
</span><span class='line'>[root@k8s ~]# docker save centos:centos5 centos:centos6 centos:centos7 bigdata:v1 &gt;bigdata.tar
</span><span class='line'>
</span><span class='line'>拷贝
</span><span class='line'>[root@bigdata-dev ~]# scp k8s:~/bigdata.tar ./
</span><span class='line'>centos.tar                                                                                                                                               100%  668MB  11.1MB/s   01:00    
</span><span class='line'>[root@bigdata-dev ~]# docker load &lt;bigdata.tar
</span><span class='line'>[root@bigdata-dev ~]# docker images
</span><span class='line'> 
</span><span class='line'>真正的跑自己的镜像
</span><span class='line'>[root@k8s ~]# kubectl run hadoop --image=bigdata:v1 --command -- /usr/sbin/sshd -D
</span><span class='line'>deployment "hadoop" created</span></code></pre></td></tr></table></div></figure>


<p>查看运行情况以及一些简单操作</p>

<ul>
<li><a href="https://kubernetes.io/docs/user-guide/debugging-pods-and-replication-controllers/">https://kubernetes.io/docs/user-guide/debugging-pods-and-replication-controllers/</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@k8s ~]# kubectl get pods
</span><span class='line'>NAME                      READY     STATUS    RESTARTS   AGE
</span><span class='line'>hadoop-2607718808-cqx2n   1/1       Running   0          2h
</span><span class='line'>[root@k8s ~]# kubectl describe pods hadoop-2607718808-cqx2n
</span><span class='line'>通过输出信息中Node和IP即可通过登录主机（IP与flannel0网卡在同一网段）
</span><span class='line'>
</span><span class='line'>也可以通过kubectl来登录
</span><span class='line'>[root@k8s ~]# kubectl exec hadoop-2607718808-cqx2n -i -t -- bash 
</span><span class='line'>[root@hadoop-2607718808-cqx2n /]# 
</span><span class='line'>[root@hadoop-2607718808-cqx2n /]# ifconfig 
</span><span class='line'>eth0      Link encap:Ethernet  HWaddr 02:42:0A:01:49:02  
</span><span class='line'>          inet addr:10.1.73.2  Bcast:0.0.0.0  Mask:255.255.255.0
</span><span class='line'>          inet6 addr: fe80::42:aff:fe01:4902/64 Scope:Link
</span><span class='line'>          UP BROADCAST RUNNING MULTICAST  MTU:1472  Metric:1
</span><span class='line'>          RX packets:8 errors:0 dropped:0 overruns:0 frame:0
</span><span class='line'>          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0
</span><span class='line'>          collisions:0 txqueuelen:0 
</span><span class='line'>          RX bytes:648 (648.0 b)  TX bytes:648 (648.0 b)
</span><span class='line'>
</span><span class='line'>lo        Link encap:Local Loopback  
</span><span class='line'>          inet addr:127.0.0.1  Mask:255.0.0.0
</span><span class='line'>          inet6 addr: ::1/128 Scope:Host
</span><span class='line'>          UP LOOPBACK RUNNING  MTU:65536  Metric:1
</span><span class='line'>          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
</span><span class='line'>          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
</span><span class='line'>          collisions:0 txqueuelen:1 
</span><span class='line'>          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)
</span><span class='line'>
</span><span class='line'>[root@k8s ~]# kubectl scale --replicas=4 deployment/hadoop
</span><span class='line'>[root@k8s ~]# kubectl get pods
</span><span class='line'>NAME                      READY     STATUS    RESTARTS   AGE
</span><span class='line'>hadoop-2607718808-0dzm6   1/1       Running   0          15s
</span><span class='line'>hadoop-2607718808-9twzq   1/1       Running   0          15s
</span><span class='line'>hadoop-2607718808-cqx2n   1/1       Running   0          6h
</span><span class='line'>hadoop-2607718808-k243d   1/1       Running   0          15s
</span><span class='line'>
</span><span class='line'>登上以及启动的机器
</span><span class='line'>[root@k8s ~]# kubectl exec hadoop-2607718808-cqx2n -i -t -- bash
</span><span class='line'>[root@hadoop-2607718808-cqx2n /]# 
</span><span class='line'>
</span><span class='line'>改变部署实例个数
</span><span class='line'>[root@k8s ~]# kubectl scale --replicas=2 deployment/hadoop
</span><span class='line'>deployment "hadoop" scaled
</span><span class='line'>[root@k8s ~]# kubectl get pods
</span><span class='line'>NAME                      READY     STATUS    RESTARTS   AGE
</span><span class='line'>hadoop-2607718808-cqx2n   1/1       Running   0          6h
</span><span class='line'>hadoop-2607718808-k243d   1/1       Running   0          9m</span></code></pre></td></tr></table></div></figure>


<h2>小结</h2>

<p>通过脚本来安装其实不难，就是要翻墙以及一些防火墙的设置需要特别的注意。</p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[K8s Minikube on Windows]]></title>
    <link href="http://winseliu.com/blog/2017/02/08/k8s-minikube-on-windows/"/>
    <updated>2017-02-08T22:50:06+08:00</updated>
    <id>http://winseliu.com/blog/2017/02/08/k8s-minikube-on-windows</id>
    <content type="html"><![CDATA[<p>在windows配置minikube需要先安装docker，或者更直接点的说就是需要docker一样的依赖环境（都是通过iso装载到虚拟机，我们这里不考虑iso内部的软件配置）。先安装docker会把这些依赖都配置好。</p>

<p>系统当前的版本不支持直接安装<a href="https://docs.docker.com/docker-for-windows/">Docker</a>（This version of Docker requires Windows 10 Pro, Enterprise or Education edition with a mininum build number of 10586, Please use <a href="https://www.docker.com/products/docker-toolbox">Docker Toolbox</a>），</p>

<ul>
<li><a href="https://docs.docker.com/toolbox/toolbox_install_windows/">https://docs.docker.com/toolbox/toolbox_install_windows/</a></li>
<li><a href="https://rominirani.com/tutorial-getting-started-with-kubernetes-on-your-windows-laptop-with-minikube-3269b54a226#.qvn9h99l4">Tutorial : Getting Started with Kubernetes on your Windows Laptop with Minikube</a></li>
<li><a href="https://blogs.msdn.microsoft.com/wasimbloch/2017/01/23/setting-up-kubernetes-on-windows10-laptop-with-minikube/">Setting up Kubernetes on Windows10 Laptop with Minikube use Hyper-V</a></li>
</ul>


<p>如果直接全部安装toolbox的VirtualBox、git的应该一切顺利的。由于已有cygwin，想着复用下结果惹了一身骚。</p>

<p>按照自己的安装过程，先介绍下配合cygwin安装docker，然后再介绍全部按官网的工具安装k8s。</p>

<h2>仅尝试Docker，不安装k8s</h2>

<p>但是不想安装git直接使用cygwin来代替。刚刚开始的时刻出现了一些理解上的偏差，后来查询start.sh脚本后大概了解到快捷方式、脚本内容后问题就迎刃而解。</p>

<p>先安装docker toolbox：先禁用windows的Hyper-V；安装时去掉git组件。</p>

<p>安装完成后，启动cygwin的命令行（不要用Docker的快捷图标启动）。然后进行如下配置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>winse@Lenovo-PC ~
</span><span class='line'>$ cd "C:\Program Files\Docker Toolbox"
</span><span class='line'>
</span><span class='line'>做一个c盘的映射
</span><span class='line'>winse@Lenovo-PC /cygdrive/c/Program Files/Docker Toolbox
</span><span class='line'>$ ll /
</span><span class='line'>...
</span><span class='line'>lrwxrwxrwx   1 winse None               11 Apr  5  2016 c -&gt; /cygdrive/c
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>根据cygwin的路径配置VirtualBox的路径
</span><span class='line'>winse@Lenovo-PC /cygdrive/c/Program Files/Docker Toolbox
</span><span class='line'>$ export VBOX_MSI_INSTALL_PATH="/cygdrive/c/Program Files/Oracle/VirtualBox/"
</span><span class='line'>
</span><span class='line'>首先下载boot2docker.iso到 C:\Users\winse\.docker\machine\cache\boot2docker.iso
</span><span class='line'>https://github.com/boot2docker/boot2docker/releases/download/v1.13.0/boot2docker.iso...
</span><span class='line'>
</span><span class='line'>创建一个空的clear脚本（cygwin没有包括clear脚本）
</span><span class='line'>winse@Lenovo-PC /cygdrive/c/Program Files/Docker Toolbox
</span><span class='line'>$ touch ~/bin/clear && chmod +x ~/bin/clear
</span><span class='line'>
</span><span class='line'># 启动
</span><span class='line'>winse@Lenovo-PC /cygdrive/c/Program Files/Docker Toolbox
</span><span class='line'>$ ./start.sh
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>                        ##         .
</span><span class='line'>                  ## ## ##        ==
</span><span class='line'>               ## ## ## ## ##    ===
</span><span class='line'>           /"""""""""""""""""\___/ ===
</span><span class='line'>      ~~~ {~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~
</span><span class='line'>           \______ o           __/
</span><span class='line'>             \    \         __/
</span><span class='line'>              \____\_______/
</span><span class='line'>
</span><span class='line'>docker is configured to use the default machine with IP 192.168.99.100
</span><span class='line'>For help getting started, check out the docs at https://docs.docker.com
</span><span class='line'>
</span><span class='line'>Start interactive shell
</span><span class='line'>
</span><span class='line'>winse@Lenovo-PC ~
</span><span class='line'>$ docker run hello-world
</span><span class='line'>time="2017-02-08T22:48:33+08:00" level=warning msg="Unable to use system certificate pool: crypto/x509: system root pool is not available on Windows"
</span><span class='line'>Unable to find image 'hello-world:latest' locally
</span><span class='line'>latest: Pulling from library/hello-world
</span><span class='line'>78445dd45222: Pulling fs layer
</span><span class='line'>78445dd45222: Verifying Checksum
</span><span class='line'>78445dd45222: Download complete
</span><span class='line'>78445dd45222: Pull complete
</span><span class='line'>Digest: sha256:c5515758d4c5e1e838e9cd307f6c6a0d620b5e07e6f927b07d05f6d12a1ac8d7
</span><span class='line'>Status: Downloaded newer image for hello-world:latest
</span><span class='line'>
</span><span class='line'>Hello from Docker!
</span><span class='line'>This message shows that your installation appears to be working correctly.
</span><span class='line'>
</span><span class='line'>To generate this message, Docker took the following steps:
</span><span class='line'> 1. The Docker client contacted the Docker daemon.
</span><span class='line'> 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
</span><span class='line'> 3. The Docker daemon created a new container from that image which runs the
</span><span class='line'>    executable that produces the output you are currently reading.
</span><span class='line'> 4. The Docker daemon streamed that output to the Docker client, which sent it
</span><span class='line'>    to your terminal.
</span><span class='line'>
</span><span class='line'>To try something more ambitious, you can run an Ubuntu container with:
</span><span class='line'> $ docker run -it ubuntu bash
</span><span class='line'>
</span><span class='line'>Share images, automate workflows, and more with a free Docker ID:
</span><span class='line'> https://cloud.docker.com/
</span><span class='line'>
</span><span class='line'>For more examples and ideas, visit:
</span><span class='line'> https://docs.docker.com/engine/userguide/
</span></code></pre></td></tr></table></div></figure>


<h2>使用默认安装，并安装k8s</h2>

<p>由于cygwin的路径与windows的不兼容，而git bash则本身依托于windows的命令行的，兼容性方面更优。</p>

<p>重新安装Docker ToolBox，安装时选择git。</p>

<p>下载minikube需要的一些软件：</p>

<ul>
<li><a href="https://github.com/kubernetes/minikube/releases">minikube.exe</a></li>
<li><a href="https://github.com/kubernetes/minikube/blob/v0.16.0/README.md">minikube文档</a></li>
<li><a href="https://storage.googleapis.com/kubernetes-release/release/v1.5.2/bin/windows/amd64/kubectl.exe">kubectl.exe</a></li>
<li><a href="https://rominirani.com/tutorial-getting-started-with-kubernetes-on-your-windows-laptop-with-minikube-3269b54a226#.pg14q9wst">Tutorial : Getting Started with Kubernetes on your Windows Laptop with Minikube</a></li>
<li><a href="https://kubernetes.io/docs/tutorials/stateless-application/hello-minikube/">Hello Minikube On OS X</a></li>
<li><a href="https://kubernetes.io/docs/getting-started-guides/minikube/">Running Kubernetes Locally via Minikube</a></li>
</ul>


<p>下载minikube和kubectl放到PATH路径下（bin目录已经在PATH中）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>E:\local\bin&gt;dir
</span><span class='line'>...
</span><span class='line'>2017-02-08  14:05        50,735,616 kubectl.exe
</span><span class='line'>2017-02-08  11:22        84,239,872 minikube-windows-amd64.exe
</span><span class='line'>2017-02-08  11:25    &lt;SYMLINK&gt;      minikube.exe [minikube-windows-amd64.exe] （mklink minikube.exe minikube-windows-amd64.exe）</span></code></pre></td></tr></table></div></figure>


<p>运行 <strong>Docker Quickstart Terminal</strong> (这个快捷方式会先启动docker的虚拟机)，或者直接打开 C:\Program Files\Git\bin\bash.exe 执行如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>查看帮助
</span><span class='line'>winse@Lenovo-PC MINGW64 ~
</span><span class='line'>$ minikube start --help
</span><span class='line'>Starts a local kubernetes cluster using Virtualbox. This command
</span><span class='line'>assumes you already have Virtualbox installed.
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>设置代理: 老外的教程都很简单就成功，但是我们操作一堆问题，主要就是万恶的防火墙！！！
</span><span class='line'>winse@Lenovo-PC MINGW64 ~
</span><span class='line'>$ export HTTPS_PROXY=http://localhost:8118
</span><span class='line'>$ export HTTP_PROXY=http://localhost:8118
</span><span class='line'>$ export NO_PROXY="192.168.0.0/16"
</span><span class='line'>
</span><span class='line'>启动
</span><span class='line'>winse@Lenovo-PC MINGW64 ~
</span><span class='line'>$ minikube start --v=7 --logtostderr
</span><span class='line'>
</span><span class='line'>winse@Lenovo-PC MINGW64 ~
</span><span class='line'>$ minikube status
</span><span class='line'>minikubeVM: Running
</span><span class='line'>localkube: Running
</span><span class='line'>
</span><span class='line'>winse@Lenovo-PC MINGW64 ~
</span><span class='line'>$ kubectl get nodes
</span><span class='line'>NAME       STATUS    AGE
</span><span class='line'>minikube   Ready     3h</span></code></pre></td></tr></table></div></figure>


<h4>再次启动，添加代理参数后dashboard才正常运行</h4>

<ul>
<li><a href="https://kubernetes.io/docs/tutorials/stateless-application/hello-minikube/">https://kubernetes.io/docs/tutorials/stateless-application/hello-minikube/</a></li>
<li><a href="https://rominirani.com/tutorial-getting-started-with-kubernetes-on-your-windows-laptop-with-minikube-3269b54a226">https://rominirani.com/tutorial-getting-started-with-kubernetes-on-your-windows-laptop-with-minikube-3269b54a226</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>winse@Lenovo-PC MINGW64 /c/Program Files/Git/bin
</span><span class='line'>$ minikube start --docker-env HTTP_PROXY=http://192.168.99.1:8118 --docker-env HTTPS_PROXY=http://192.168.99.1:8118
</span><span class='line'>Starting local Kubernetes cluster...
</span><span class='line'>Kubectl is now configured to use the cluster.
</span><span class='line'>
</span><span class='line'>winse@Lenovo-PC MINGW64 /c/Program Files/Git/bin
</span><span class='line'>$ minikube status
</span><span class='line'>minikubeVM: Running
</span><span class='line'>localkube: Running
</span><span class='line'>
</span><span class='line'>winse@Lenovo-PC MINGW64 /c/Program Files/Git/bin
</span><span class='line'>$ kubectl cluster-info
</span><span class='line'>Kubernetes master is running at https://192.168.99.100:8443
</span><span class='line'>KubeDNS is running at https://192.168.99.100:8443/api/v1/proxy/namespaces/kube-system/services/kube-dns
</span><span class='line'>kubernetes-dashboard is running at https://192.168.99.100:8443/api/v1/proxy/namespaces/kube-system/services/kubernetes-dashboard
</span><span class='line'>
</span><span class='line'>To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.
</span><span class='line'>
</span><span class='line'>#Open dashboard
</span><span class='line'>https://github.com/kubernetes/minikube/issues/379
</span><span class='line'>https://github.com/kubernetes/minikube/issues/522
</span><span class='line'>winse@Lenovo-PC MINGW64 /c/Program Files/Git/bin
</span><span class='line'>$ minikube dashboard
</span><span class='line'>Opening kubernetes dashboard in default browser...
</span><span class='line'>
</span><span class='line'>运行实例
</span><span class='line'>winse@Lenovo-PC MINGW64 /e/local/home/k8s
</span><span class='line'>$ kubectl get nodes
</span><span class='line'>NAME       STATUS    AGE
</span><span class='line'>minikube   Ready     8h
</span><span class='line'>
</span><span class='line'>winse@Lenovo-PC MINGW64 /e/local/home/k8s
</span><span class='line'>$ kubectl run hello-nginx --image=nginx --port=80
</span><span class='line'>deployment "hello-nginx" created
</span><span class='line'>
</span><span class='line'>winse@Lenovo-PC MINGW64 /e/local/home/k8s
</span><span class='line'>$ kubectl.exe get pods
</span><span class='line'>NAME                           READY     STATUS              RESTARTS   AGE
</span><span class='line'>hello-nginx-2471083592-cgn29   0/1       ContainerCreating   0          19s
</span><span class='line'>
</span><span class='line'>winse@Lenovo-PC MINGW64 /e/local/home/k8s
</span><span class='line'>$ kubectl.exe get pods
</span><span class='line'>NAME                           READY     STATUS             RESTARTS   AGE
</span><span class='line'>hello-nginx-2471083592-cgn29   0/1       ImagePullBackOff   0          3m
</span><span class='line'>
</span><span class='line'>winse@Lenovo-PC MINGW64 /e/local/home/k8s
</span><span class='line'>$ kubectl.exe describe pod hello-nginx-2471083592-cgn29
</span><span class='line'>
</span><span class='line'>winse@Lenovo-PC MINGW64 /e/local/home/k8s
</span><span class='line'>$ kubectl.exe expose deployment hello-nginx --type=NodePort
</span><span class='line'>service "hello-nginx" exposed
</span><span class='line'>
</span><span class='line'>winse@Lenovo-PC MINGW64 /e/local/home/k8s
</span><span class='line'>$ kubectl.exe get services
</span><span class='line'>NAME          CLUSTER-IP   EXTERNAL-IP   PORT(S)        AGE
</span><span class='line'>hello-nginx   10.0.0.145   &lt;nodes&gt;       80:31570/TCP   1m
</span><span class='line'>kubernetes    10.0.0.1     &lt;none&gt;        443/TCP        9h
</span><span class='line'>
</span><span class='line'>winse@Lenovo-PC MINGW64 /e/local/home/k8s
</span><span class='line'>$ kubectl.exe describe service hello-nginx
</span><span class='line'>Name:                   hello-nginx
</span><span class='line'>Namespace:              default
</span><span class='line'>Labels:                 run=hello-nginx
</span><span class='line'>Selector:               run=hello-nginx
</span><span class='line'>Type:                   NodePort
</span><span class='line'>IP:                     10.0.0.145
</span><span class='line'>Port:                   &lt;unset&gt; 80/TCP
</span><span class='line'>NodePort:               &lt;unset&gt; 31570/TCP
</span><span class='line'>Endpoints:              172.17.0.4:80
</span><span class='line'>Session Affinity:       None
</span><span class='line'>No events.
</span><span class='line'>
</span><span class='line'>winse@Lenovo-PC MINGW64 /e/local/home/k8s
</span><span class='line'>$ minikube service --url=true hello-nginx
</span><span class='line'>http://192.168.99.100:31570
</span><span class='line'>
</span><span class='line'>winse@Lenovo-PC MINGW64 /e/local/home/k8s
</span><span class='line'>$ kubectl.exe logs hello-nginx-2471083592-cgn29
</span><span class='line'>172.17.0.1 - - [10/Feb/2017:02:07:53 +0000] "GET / HTTP/1.1" 200 612 "-" "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.111 Safari/537.36" "-"
</span><span class='line'>172.17.0.1 - - [10/Feb/2017:02:07:54 +0000] "GET /favicon.ico HTTP/1.1" 404 571 "http://192.168.99.100:31570/" "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.111 Safari/537.36" "-"
</span><span class='line'>2017/02/10 02:07:54 [error] 6#6: *1 open() "/usr/share/nginx/html/favicon.ico" failed (2: No such file or directory), client: 172.17.0.1, server: localhost, request: "GET /favicon.ico HTTP/1.1", host: "192.168.99.100:31570", referrer: "http://192.168.99.100:31570/"
</span><span class='line'>
</span><span class='line'>水平扩展
</span><span class='line'>winse@Lenovo-PC MINGW64 /e/local/home/k8s
</span><span class='line'>$ kubectl.exe scale --replicas=3 deployment/hello-nginx
</span><span class='line'>deployment "hello-nginx" scaled
</span><span class='line'>
</span><span class='line'>winse@Lenovo-PC MINGW64 /e/local/home/k8s
</span><span class='line'>$ kubectl.exe get deployment
</span><span class='line'>NAME          DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
</span><span class='line'>hello-nginx   3         3         3            1           21m</span></code></pre></td></tr></table></div></figure>


<p>暂时还不清楚负载均衡是怎么弄的。这个三个应用pods其实是在一个内网（172.17.0.4/5/6），对外有一个服务（10.0.0.145）。</p>

<p>基本的安装过程先记录这么多。</p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker代理配置以及导入导出]]></title>
    <link href="http://winseliu.com/blog/2017/02/06/docker-http-proxy-and-save-reload/"/>
    <updated>2017-02-06T08:40:09+08:00</updated>
    <id>http://winseliu.com/blog/2017/02/06/docker-http-proxy-and-save-reload</id>
    <content type="html"><![CDATA[<h2>代理</h2>

<p>关于http代理服务器的搭建，如果有外（国）网机器，直接用squid建就行了 <a href="http://dockone.io/article/1380">使用Squid3搭建Docker镜像下载代理</a> 。如果已有shadowsocks的代理，可以用privoxy转成http代理服务器。</p>

<ul>
<li>网上参考</li>
</ul>


<p><a href="http://nknu.net/proxy-configuration-for-docker-on-centos-7/">http://nknu.net/proxy-configuration-for-docker-on-centos-7/</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Edit /etc/sysconfig/docker and add the following lines:
</span><span class='line'>HTTP_PROXY='http://user:password@proxy-host:proxy-port'
</span><span class='line'>HTTPS_PROXY='http://user:password@proxy-host:proxy-port'
</span><span class='line'>
</span><span class='line'>For those settings to be taken into account, you’ll need to restart your docker daemon:
</span><span class='line'># systemctl restart docker</span></code></pre></td></tr></table></div></figure>


<ul>
<li>官网文档</li>
</ul>


<p><a href="https://docs.docker.com/engine/admin/systemd/#http-proxy">https://docs.docker.com/engine/admin/systemd/#http-proxy</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@k8s docker.service.d]# pwd
</span><span class='line'>/etc/systemd/system/docker.service.d
</span><span class='line'>[root@k8s docker.service.d]# cat http-proxy.conf 
</span><span class='line'>[Service]
</span><span class='line'>Environment="HTTP_PROXY=http://127.0.0.1:8118/" "NO_PROXY=localhost,127.0.0.1"
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>查看配置的环境变量是否生效
</span><span class='line'>$ sudo systemctl daemon-reload
</span><span class='line'>$ sudo service docker start
</span><span class='line'>$ sudo systemctl show --property Environment docker
</span><span class='line'>
</span><span class='line'>配置代理后下载google容器杠杠的
</span><span class='line'>[root@k8s docker-multinode]# docker pull gcr.io/google_containers/etcd-amd64:3.0.4
</span></code></pre></td></tr></table></div></figure>


<p>如果是自己编译的docker，自启动配置可以参考：<a href="https://github.com/docker/docker/blob/master/contrib/init/systemd/docker.socket">https://github.com/docker/docker/blob/master/contrib/init/systemd/docker.socket</a></p>

<h2>导入导出</h2>

<p><a href="https://tuhrig.de/difference-between-save-and-export-in-docker/">https://tuhrig.de/difference-between-save-and-export-in-docker/</a></p>

<p>对于已经通过代理下载的docker，可以通过导入导出到另外的机器。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@k8s ~]# docker save `docker images | grep -v TAG | awk '{print $1":"$2}'` &gt;k8s.tar
</span><span class='line'>
</span><span class='line'>[root@k8s data]# docker load &lt;k8s.tar
</span><span class='line'>0341ae9b0004: Loading layer [==================================================&gt;]  89.1 MB/89.1 MB
</span><span class='line'>Loaded image: gcr.io/google_containers/kubernetes-dashboard-amd64:v1.5.0
</span><span class='line'>011b303988d2: Loading layer [==================================================&gt;]  5.05 MB/5.05 MB
</span><span class='line'>5f70bf18a086: Loading layer [==================================================&gt;] 1.024 kB/1.024 kB
</span><span class='line'>596242791254: Loading layer [==================================================&gt;] 792.1 kB/792.1 kB
</span><span class='line'>4e504f64df23: Loading layer [==================================================&gt;]  5.29 MB/5.29 MB
</span><span class='line'>2897536d1f1f: Loading layer [==================================================&gt;] 3.584 kB/3.584 kB
</span><span class='line'>ae11e34e71e6: Loading layer [==================================================&gt;] 10.75 kB/10.75 kB
</span><span class='line'>81620de5436f: Loading layer [==================================================&gt;]  2.56 kB/2.56 kB
</span><span class='line'>77cb0f2fbaed: Loading layer [==================================================&gt;] 50.33 MB/50.33 MB
</span><span class='line'>Loaded image: gcr.io/google_containers/kube-addon-manager-amd64:v6.1
</span><span class='line'>9007f5987db3: Loading layer [==================================================&gt;]  5.05 MB/5.05 MB
</span><span class='line'>5f70bf18a086: Loading layer [==================================================&gt;] 1.024 kB/1.024 kB
</span><span class='line'>d41159f2130e: Loading layer [==================================================&gt;] 9.201 MB/9.201 MB
</span><span class='line'>Loaded image: gcr.io/google_containers/dnsmasq-metrics-amd64:1.0
</span><span class='line'>2c84284818d1: Loading layer [==================================================&gt;] 1.312 MB/1.312 MB
</span><span class='line'>5f70bf18a086: Loading layer [==================================================&gt;] 1.024 kB/1.024 kB
</span><span class='line'>5e47621858b3: Loading layer [==================================================&gt;] 38.51 MB/38.51 MB
</span><span class='line'>Loaded image: gcr.io/google_containers/etcd-amd64:3.0.4
</span><span class='line'>b6ca02dfe5e6: Loading layer [==================================================&gt;] 128.9 MB/128.9 MB
</span><span class='line'>c2c974a0ae12: Loading layer [==================================================&gt;] 231.6 MB/231.6 MB
</span><span class='line'>88e4c6b7e766: Loading layer [==================================================&gt;] 25.09 kB/25.09 kB
</span><span class='line'>96257390754d: Loading layer [==================================================&gt;] 10.75 kB/10.75 kB
</span><span class='line'>36bd77066b3a: Loading layer [==================================================&gt;]  7.68 kB/7.68 kB
</span><span class='line'>6e833518b289: Loading layer [==================================================&gt;] 28.16 kB/28.16 kB
</span><span class='line'>88d2c1399894: Loading layer [==================================================&gt;] 11.78 kB/11.78 kB
</span><span class='line'>b857f858f4ad: Loading layer [==================================================&gt;] 46.08 kB/46.08 kB
</span><span class='line'>13da16246a77: Loading layer [==================================================&gt;] 56.58 MB/56.58 MB
</span><span class='line'>98a8cc89f2d0: Loading layer [==================================================&gt;] 4.608 kB/4.608 kB
</span><span class='line'>1b7eeaac3364: Loading layer [==================================================&gt;]  5.12 kB/5.12 kB
</span><span class='line'>c85758bfcfdf: Loading layer [==================================================&gt;] 153.9 MB/153.9 MB
</span><span class='line'>Loaded image: gcr.io/google_containers/hyperkube-amd64:v1.5.2
</span><span class='line'>3fc666989c1d: Loading layer [==================================================&gt;] 5.046 MB/5.046 MB
</span><span class='line'>5f70bf18a086: Loading layer [==================================================&gt;] 1.024 kB/1.024 kB
</span><span class='line'>9eed5e14d7fb: Loading layer [==================================================&gt;] 348.7 kB/348.7 kB
</span><span class='line'>00dc4ffe8624: Loading layer [==================================================&gt;]  2.56 kB/2.56 kB
</span><span class='line'>Loaded image: gcr.io/google_containers/kube-dnsmasq-amd64:1.4
</span><span class='line'>8ac8bfaff55a: Loading layer [==================================================&gt;] 1.293 MB/1.293 MB
</span><span class='line'>5f70bf18a086: Loading layer [==================================================&gt;] 1.024 kB/1.024 kB
</span><span class='line'>dc978cfc3e09: Loading layer [==================================================&gt;] 7.279 MB/7.279 MB
</span><span class='line'>99740866972b: Loading layer [==================================================&gt;] 7.168 kB/7.168 kB
</span><span class='line'>Loaded image: gcr.io/google_containers/exechealthz-amd64:1.2
</span><span class='line'>5f70bf18a086: Loading layer [==================================================&gt;] 1.024 kB/1.024 kB
</span><span class='line'>41ff149e94f2: Loading layer [==================================================&gt;] 748.5 kB/748.5 kB
</span><span class='line'>Loaded image: gcr.io/google_containers/pause-amd64:3.0
</span><span class='line'>b79219965469: Loading layer [==================================================&gt;] 45.91 MB/45.91 MB
</span><span class='line'>Loaded image: gcr.io/google_containers/kubedns-amd64:1.9</span></code></pre></td></tr></table></div></figure>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Privoxy把shadowsocks转换为Http代理]]></title>
    <link href="http://winseliu.com/blog/2017/02/04/privoxy-http-proxy-for-shadowsocks/"/>
    <updated>2017-02-04T15:36:08+08:00</updated>
    <id>http://winseliu.com/blog/2017/02/04/privoxy-http-proxy-for-shadowsocks</id>
    <content type="html"><![CDATA[<p><a href="https://program-think.blogspot.com/2014/12/gfw-privoxy.html">https://program-think.blogspot.com/2014/12/gfw-privoxy.html</a></p>

<p>Privoxy是一个代理辅助工具，这里用Privoxy把Shadowsocks socks5代理转换为http代理。</p>

<p>kubernetes的docker容器需要访问google的服务，docker暂时只支持http代理，而我手上有的代理是 <a href="http://99ss.in">shadowsocks</a> 的。这里通过Privoxy把socks5转成http代理。</p>

<h2>安装Shadowsocks</h2>

<ul>
<li><a href="http://blog.lxx1.com/1420">http://blog.lxx1.com/1420</a></li>
<li><a href="https://shadowsocks.org/en/download/clients.html">https://shadowsocks.org/en/download/clients.html</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@k8s ~]# yum install epel-release python-pip -y
</span><span class='line'>
</span><span class='line'>[root@k8s ~]# pip install shadowsocks
</span><span class='line'>Collecting shadowsocks
</span><span class='line'>  Downloading shadowsocks-2.8.2.tar.gz
</span><span class='line'>Installing collected packages: shadowsocks
</span><span class='line'>  Running setup.py install for shadowsocks ... done
</span><span class='line'>Successfully installed shadowsocks-2.8.2
</span><span class='line'>You are using pip version 8.1.2, however version 9.0.1 is available.
</span><span class='line'>You should consider upgrading via the 'pip install --upgrade pip' command.
</span><span class='line'>
</span><span class='line'>上面软件已经安装好了, 推荐更新下pip.
</span><span class='line'>[root@k8s ~]# pip install --upgrade pip
</span><span class='line'>Collecting pip
</span><span class='line'>  Downloading pip-9.0.1-py2.py3-none-any.whl (1.3MB)
</span><span class='line'>    100% |████████████████████████████████| 1.3MB 46kB/s 
</span><span class='line'>Installing collected packages: pip
</span><span class='line'>  Found existing installation: pip 8.1.2
</span><span class='line'>    Uninstalling pip-8.1.2:
</span><span class='line'>      Successfully uninstalled pip-8.1.2
</span><span class='line'>Successfully installed pip-9.0.1
</span></code></pre></td></tr></table></div></figure>


<p>填写shadowsocks服务端信息以及本地映射端口，启动客户端</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@k8s ~]# cat /etc/shadowsocks.json 
</span><span class='line'>{
</span><span class='line'>"server": "xxxxxx",
</span><span class='line'>"server_port": xxx,
</span><span class='line'>"local_port": 1080,
</span><span class='line'>"password": "xxxxxxxx",
</span><span class='line'>"timeout": 600,
</span><span class='line'>"method": "rc4-md5",
</span><span class='line'>"fast_open": false,
</span><span class='line'>"workers": 1
</span><span class='line'>}
</span><span class='line'>[root@k8s ~]# sslocal -c /etc/shadowsocks.json </span></code></pre></td></tr></table></div></figure>


<p>配置防火墙，如果其他主机也需要用这个代理的话</p>

<p><a href="https://havee.me/linux/2015-01/using-firewalls-on-centos-7.html">https://havee.me/linux/2015-01/using-firewalls-on-centos-7.html</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@bigdata-dev ~]# firewall-cmd --zone=public --add-port=1080/tcp --permanent
</span><span class='line'>[root@bigdata-dev ~]# firewall-cmd --reload</span></code></pre></td></tr></table></div></figure>


<h2>安装privoxy</h2>

<ul>
<li><a href="https://www.privoxy.org/sf-download-mirror/Win32/3.0.26%20%28stable%29/">windows版本下载地址</a></li>
<li><a href="http://www.ttlsa.com/linux/privoxy-convert-socks-proxy-to-http/">http://www.ttlsa.com/linux/privoxy-convert-socks-proxy-to-http/</a></li>
<li><a href="https://blog.phpgao.com/privoxy-shadowsocks.html">https://blog.phpgao.com/privoxy-shadowsocks.html</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@k8s ~]# yum install privoxy -y
</span><span class='line'>
</span><span class='line'>查找listen-address行注释掉，在最后添加如下两行
</span><span class='line'>[root@k8s docker.service.d]# vi /etc/privoxy/config 
</span><span class='line'>...
</span><span class='line'>forward-socks5 / 127.0.0.1:1080 .
</span><span class='line'>listen-address k8s:8118
</span><span class='line'>
</span><span class='line'># 启动
</span><span class='line'>[root@k8s ~]# systemctl start privoxy
</span><span class='line'># 查看状态
</span><span class='line'>[root@k8s ~]# systemctl status privoxy
</span><span class='line'>
</span><span class='line'>[root@k8s ~]# systemctl enable privoxy
</span><span class='line'>Created symlink from /etc/systemd/system/multi-user.target.wants/privoxy.service to /usr/lib/systemd/system/privoxy.service.
</span><span class='line'>
</span><span class='line'>如果其他机器需要用到代理的话，需要配置防火墙开放端口
</span><span class='line'>[root@k8s ~]# firewall-cmd --zone=public --add-port=8118/tcp --permanent
</span><span class='line'>[root@k8s ~]# firewall-cmd --reload </span></code></pre></td></tr></table></div></figure>


<p>在本机调试会方便点，安装桌面环境</p>

<p><a href="http://unix.stackexchange.com/questions/181503/how-to-install-desktop-environments-on-centos-7">http://unix.stackexchange.com/questions/181503/how-to-install-desktop-environments-on-centos-7</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum -y groups install "GNOME Desktop" </span></code></pre></td></tr></table></div></figure>


<p>然后firefox安装autoproxy，配置http代理。（firefox自带的代理有点抽风，不太好用）</p>

<p>或者通过curl加代理参数：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@k8s ~]# curl google.com
</span><span class='line'>curl: (7) Failed to connect to 2404:6800:4008:802::200e: Network is unreachable
</span><span class='line'>[root@k8s ~]# 
</span><span class='line'>[root@k8s ~]# curl -x localhost:8118 google.com
</span><span class='line'>&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
</span><span class='line'>&lt;TITLE&gt;301 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;
</span><span class='line'>&lt;H1&gt;301 Moved&lt;/H1&gt;
</span><span class='line'>The document has moved
</span><span class='line'>&lt;A HREF="http://www.google.com/"&gt;here&lt;/A&gt;.
</span><span class='line'>&lt;/BODY&gt;&lt;/HTML&gt;</span></code></pre></td></tr></table></div></figure>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Centos7上安装VNC Server]]></title>
    <link href="http://winseliu.com/blog/2017/01/27/vnc-server-on-centos7/"/>
    <updated>2017-01-27T16:43:51+08:00</updated>
    <id>http://winseliu.com/blog/2017/01/27/vnc-server-on-centos7</id>
    <content type="html"><![CDATA[<h2>安装</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@bigdata-dev ~]# yum install -y tigervnc-server
</span><span class='line'>
</span><span class='line'>首先查看原来的默认配置
</span><span class='line'>[root@bigdata-dev ~]# cat /lib/systemd/system/vncserver@.service 
</span><span class='line'>
</span><span class='line'>[Service]
</span><span class='line'>Type=forking
</span><span class='line'># Clean any existing files in /tmp/.X11-unix environment
</span><span class='line'>ExecStartPre=/bin/sh -c '/usr/bin/vncserver -kill %i &gt; /dev/null 2&gt;&1 || :'
</span><span class='line'>ExecStart=/usr/sbin/runuser -l &lt;USER&gt; -c "/usr/bin/vncserver %i"
</span><span class='line'>PIDFile=/home/&lt;USER&gt;/.vnc/%H%i.pid
</span><span class='line'>ExecStop=/bin/sh -c '/usr/bin/vncserver -kill %i &gt; /dev/null 2&gt;&1 || :'
</span><span class='line'>
</span><span class='line'>复制一份修改，已root用户为例。其他用户类推
</span><span class='line'>[root@bigdata-dev system]# cp vncserver@.service vncserver@:1.service 
</span><span class='line'>[root@bigdata-dev system]# vi vncserver@\:1.service 
</span><span class='line'>
</span><span class='line'>[Service]
</span><span class='line'>Type=forking
</span><span class='line'># Clean any existing files in /tmp/.X11-unix environment
</span><span class='line'>ExecStartPre=/bin/sh -c '/usr/bin/vncserver -kill %i &gt; /dev/null 2&gt;&1 || :'
</span><span class='line'>ExecStart=/usr/sbin/runuser -l root -c "/usr/bin/vncserver %i"
</span><span class='line'>PIDFile=/root/.vnc/%H%i.pid
</span><span class='line'>ExecStop=/bin/sh -c '/usr/bin/vncserver -kill %i &gt; /dev/null 2&gt;&1 || :'
</span><span class='line'>
</span><span class='line'>[root@bigdata-dev system]# systemctl daemon-reload
</span><span class='line'>[root@bigdata-dev system]# systemctl enable vncserver@:1.service
</span><span class='line'>Created symlink from /etc/systemd/system/multi-user.target.wants/vncserver@:1.service to /etc/systemd/system/vncserver@:1.service.
</span><span class='line'>[root@bigdata-dev system]# systemctl start vncserver@:1.service
</span><span class='line'>[root@bigdata-dev system]# systemctl status vncserver@:1.service
</span><span class='line'>● vncserver@:1.service - Remote desktop service (VNC)
</span><span class='line'>   Loaded: loaded (/etc/systemd/system/vncserver@:1.service; enabled; vendor preset: disabled)
</span><span class='line'>   Active: active (running) since Wed 2017-01-25 14:28:04 CST; 27s ago
</span><span class='line'>   
</span><span class='line'>[root@bigdata-dev system]# vncpasswd 
</span><span class='line'>Password:
</span><span class='line'>Verify:
</span><span class='line'>[root@bigdata-dev system]# 
</span><span class='line'>[root@bigdata-dev system]# 
</span><span class='line'>[root@bigdata-dev system]# systemctl restart vncserver@:1.service
</span><span class='line'>http://www.aboutyun.com/thread-17535-1-1.html
</span><span class='line'>[root@bigdata-dev system]# systemctl status firewalld.service
</span><span class='line'>● firewalld.service - firewalld - dynamic firewall daemon
</span><span class='line'>   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)
</span><span class='line'>   Active: inactive (dead)
</span><span class='line'>     Docs: man:firewalld(1)</span></code></pre></td></tr></table></div></figure>


<h2>下载客户端并访问</h2>

<p><a href="https://www.realvnc.com/download/viewer/">https://www.realvnc.com/download/viewer/</a> 访问VNC服务的地址 HOST:5901</p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[整理] 环境准备工具集]]></title>
    <link href="http://winseliu.com/blog/2017/01/25/develop-environment-prepare/"/>
    <updated>2017-01-25T10:57:18+08:00</updated>
    <id>http://winseliu.com/blog/2017/01/25/develop-environment-prepare</id>
    <content type="html"><![CDATA[<p>工具其实很重要，不仅仅是帮你把东西管理起来，而是工具是一整套的解决方案，是前辈多年总结实践的成果。</p>

<p>初出茅庐的时刻，总觉得工具麻烦，写个java程序还得写个pom，直接把jar放到lib下然后加入classpath就好了。殊不知，后面还有打包，进阶后还要看源码等等问题接踵而来。慢慢把maven用起来，又觉得apache的访问太慢（忍了），项目组内部分功能，开始全部放一个parent下面（也还行）。但后面编译打包太麻烦，尝试在项目组自己建立maven私有仓库。</p>

<p>这里把这几年使用的工具罗列下：</p>

<p>私有仓库：</p>

<ul>
<li>Nexus 如：项目组私有仓库</li>
<li>YUM repo: createrepo <a href="http://winseliu.com/blog/2016/06/17/ganglia-install-on-centos-with-puppet/">使用Puppet安装配置Ganglia</a> 如：生产环境YUM仓库</li>
<li><a href="http://winseliu.com/blog/2016/04/04/rpm-build-your-package/">RPM打包</a></li>
<li>Docker register [TODO]</li>
<li><a href="http://winseliu.com/blog/2016/03/11/install-and-config-openvpn/">OpenVPN</a> 如：访问只能内网访问的服务组（OA、SSH）</li>
</ul>


<p>软件使用：</p>

<ul>
<li><a href="http://winseliu.com/images/blogs/linux-101-hacks-review-securecrt-config.png">SecureCRT</a> 如：访问只能内网访问的单服务（无依赖）</li>
<li><a href="http://winseliu.com/blog/2015/11/22/gfw-ladder/">翻墙</a> google值得拥有</li>
<li><a href="http://winseliu.com/blog/2015/04/12/optimize-system-ramdisk/">内存盘</a></li>
<li><a href="http://winseliu.com/blog/2012/10/08/eclipse-remote-debugging-java-applications/">远程调试</a> <a href="http://winseliu.com/blog/2014/04/22/remote-debug-hadoop2/">远程调试hadoop2以及错误处理方法</a></li>
<li><a href="http://winseliu.com/blog/2014/02/23/quickly-open-program-in-windows/">WIN + R 快速打开程序</a></li>
<li><a href="http://winseliu.com/blog/2013/09/19/let-shell-command-efficient/">Shell</a></li>
<li><a href="http://winseliu.com/blog/2014/10/18/docker-dnsmasq-handler-hosts-build-hadoop-cluster/">Dnsmasq</a></li>
<li><a href="http://winseliu.com/blog/2015/09/06/squid-http-proxy-server-install/">squid</a></li>
</ul>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jarsperreports生成PDF中文问题]]></title>
    <link href="http://winseliu.com/blog/2017/01/21/jarsperreports-pdf-chinese/"/>
    <updated>2017-01-21T12:06:31+08:00</updated>
    <id>http://winseliu.com/blog/2017/01/21/jarsperreports-pdf-chinese</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://blog.csdn.net/magicboylinw/article/details/8574202">JasperReport Studio生成PDF中文乱码的解决方案</a></li>
</ul>


<p>上个月弄JarsperReport报表，当时就有中文不能显示的问题。由于比较忙一直没有处理(能显示English基本能满足要求)，最近又遇到决定把它倒腾倒腾解决掉。</p>

<p>这里简单罗列下步骤，清楚怎么弄了其实非常简单。</p>

<ol>
<li>添加Jasperreport需要的字体（注意不是系统字体哦）： Window - Preferences - Jaspersoft Studio - Fonts - Add按钮</li>
<li>编辑弹出框Font Family：Family Name简单易记的就行（相当于唯一标识），添加Normal/Bold字体TTF的（微软雅黑是ttc的可以网上找工具转成ttf），PDF Details选择Identity-H、以及Embed this font in PDF document.</li>
<li>在报表jrxml中设置需要显示中文的文字字体为 <strong> 微软雅黑 </strong>（刚刚设置的名称），重新编译生成jasper文件。预览导出PDF已经可以正常显示中文了。</li>
<li><strong>导出字体为jar</strong>：回到Preferences字体配置页面，点击Export按钮把字体导出为jar。</li>
<li>把上面导出的jar放到应用的lib目录下。</li>
</ol>


<p>完成上面的步骤PDF就能展示中文了。</p>

<p>字体比较大，可以直接把jar加启动tomcat的classpath: Debug Configurations - Apache Tomcat - Classpath - User Entries 。</p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx Https With Tomcat Http]]></title>
    <link href="http://winseliu.com/blog/2017/01/20/nginx-https-with-tomcat-http/"/>
    <updated>2017-01-20T20:03:19+08:00</updated>
    <id>http://winseliu.com/blog/2017/01/20/nginx-https-with-tomcat-http</id>
    <content type="html"><![CDATA[<p>昨天配置了HTTPS了，nginx https代理访问应用的http登录页也确实没有问题的。一切都是那么的完美，然而今天一早测试的姐姐告诉我：登录失败报错400 Bad Request The plain HTTP request was sent to HTTPS port.</p>

<ul>
<li>nginx 1.10.2</li>
<li>tomcat 8.0.38</li>
</ul>


<h2>初步定位问题</h2>

<p>然后想起有看到过红薯蜀黍的 <a href="https://www.oschina.net/question/12_213459">https://www.oschina.net/question/12_213459</a> 如下：（注：最终版在最后，如果有兴趣可以看看心路历程）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># tomcat server.xml
</span><span class='line'>  &lt;Service name="Catalina"&gt;
</span><span class='line'>    &lt;Connector port="9000" protocol="HTTP/1.1"
</span><span class='line'>               connectionTimeout="20000"
</span><span class='line'>               URIEncoding="UTF-8" 
</span><span class='line'>               redirectPort="14443"
</span><span class='line'>               scheme="https" 
</span><span class='line'>               proxyPort="14443" /&gt;
</span><span class='line'>  ...
</span><span class='line'>
</span><span class='line'>    &lt;Engine name="Catalina" defaultHost="localhost"&gt;
</span><span class='line'>
</span><span class='line'>      &lt;Host name="localhost"  appBase="webapps"
</span><span class='line'>            unpackWARs="true" autoDeploy="true"&gt;
</span><span class='line'>
</span><span class='line'>      &lt;Valve className="org.apache.catalina.valves.RemoteIpValve"
</span><span class='line'>                remoteIpHeader="x-forwarded-for"
</span><span class='line'>                remoteIpProxiesHeader="x-forwarded-by"
</span><span class='line'>                protocolHeader="x-forwarded-proto"
</span><span class='line'>            /&gt;
</span><span class='line'>  
</span><span class='line'># nginx 
</span><span class='line'>    server {
</span><span class='line'>        listen       14443 ssl;
</span><span class='line'>        server_name localhost;
</span><span class='line'>
</span><span class='line'>        ssl on;
</span><span class='line'>        ssl_certificate      nginx.crt;
</span><span class='line'>        ssl_certificate_key  nginx.key;
</span><span class='line'>
</span><span class='line'>        ssl_session_cache    shared:SSL:10m;
</span><span class='line'>        ssl_session_timeout  5m;
</span><span class='line'>
</span><span class='line'>        ssl_ciphers  HIGH:!aNULL:!MD5;
</span><span class='line'>        ssl_prefer_server_ciphers  on;
</span><span class='line'>
</span><span class='line'>        location / {
</span><span class='line'>            root   html;
</span><span class='line'>            index  index.html index.htm;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        location /omc {
</span><span class='line'>          proxy_set_header Host $http_host;
</span><span class='line'>          proxy_set_header X-Real-IP $remote_addr;
</span><span class='line'>          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class='line'>          proxy_set_header X-Forwarded-Proto https;
</span><span class='line'>          proxy_connect_timeout      240;
</span><span class='line'>          proxy_send_timeout         240;
</span><span class='line'>          proxy_read_timeout         240;
</span><span class='line'>  
</span><span class='line'>          proxy_pass http://localhost:9000;
</span><span class='line'>          proxy_redirect off;
</span><span class='line'>          #proxy_redirect https://$host/ / ;
</span><span class='line'>      }
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>登录确实请求确实都是https请求了，但是重定向(302)返回的https的端口丢失了（即被替换为默认的443）。查了很多资料，先弄了一个折中的处理方式，把hostname替换掉，即最后注释的那一行proxy_redirect。</p>

<p>查看的文章多半是http问题和多了端口的问题。我这是少端口了，但是还是有参考价值对proxy_redirect和port_in_redirect多了解一点：</p>

<ul>
<li><a href="http://fuxueliang.com/config/2013/07/05/resolve-the-redirect-problem-when-configuring-nginx-and-tomcat-integration/">nginx 和 Tomcat 集成后发生的重定向问题分析和解决</a></li>
<li><a href="http://feitianbenyue.iteye.com/blog/2056357">Nginx SSL+tomcat集群,request.getScheme() 取到https正确的协议</a></li>
<li><a href="https://www.oschina.net/question/12_213459">Nginx + Tomcat + HTTPS 配置原来不需要在 Tomcat 上启用 SSL 支持</a></li>
<li><a href="http://webapp.org.ua/sysadmin/setting-up-nginx-ssl-reverse-proxy-for-tomcat/">Setting up NGINX SSL reverse proxy for Tomcat</a></li>
</ul>


<p>还有一些没啥卵用，还带点误导性质的，但是还是得把它帖出来（蜜汁尴尬）：(注：不是说人家的有错，而是说和上面的Valve结合后不行了)</p>

<ul>
<li><a href="http://m.blog.csdn.net/article/details?id=52539175">解决nginx https代理tomcat redirect问题</a></li>
</ul>


<h2>关于redirectPort</h2>

<p>但是终究不是一种的解决问题的办法，而且怎么看怎么感觉Connector的redirectPort咋一点作用都没有呢？并且翻到一篇关于Valve的文章，感觉应该用远程调试看看为什么端口变成默认的了。</p>

<p>先看<a href="http://tomcat.apache.org/tomcat-8.0-doc/config/http.html">redirectPort</a>，仅当http请求有安全约束才会转到端口使用SSL传输。so，redirectPort在这里没啥卵用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>redirectPort 
</span><span class='line'>If this Connector is supporting non-SSL requests, and a request is received for which a matching &lt;security-constraint&gt; requires SSL transport, Catalina will automatically redirect the request to the port number specified here.</span></code></pre></td></tr></table></div></figure>


<p>web.xml里面可以配置security-constraint节点</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;security-constraint&gt; 
</span><span class='line'>&lt;web-resource-collection&gt; 
</span><span class='line'>&lt;web-resource-name&gt;services&lt;/web-resource-name&gt; 
</span><span class='line'>&lt;url-pattern&gt;/login/*&lt;/url-pattern&gt; 
</span><span class='line'>&lt;/web-resource-collection&gt; 
</span><span class='line'>&lt;user-data-constraint&gt; 
</span><span class='line'>&lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt; 
</span><span class='line'>&lt;/user-data-constraint&gt; 
</span><span class='line'>&lt;/security-constraint&gt;</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li><a href="https://zm6.sm-tc.cn/?src=l4uLj8XQ0IiIiNGTlpGKh5abnNGckJLQs5aRiofQzc%2FOytLPydDOzsbNy8bRl4uS&amp;uid=994acb90d7abb10312dae9cc39c4e4dd&amp;hid=3e89e83b734878f3fb6350c5ec9107a2&amp;pos=8&amp;cid=9&amp;time=1484906401433&amp;from=click&amp;restype=1&amp;pagetype=0000004000000402&amp;bu=structure_web_kv&amp;query=nginx+https+tomcat&amp;mode=&amp;v=1&amp;uc_param_str=dnntnwvepffrgibijbprsvdsei">Nginx+Tomcat+SSL免费证书配置</a></li>
</ul>


<h2>Valve问题所在，解决https以及端口问题的源泉</h2>

<ul>
<li><a href="https://zm6.sm-tc.cn/?src=l4uLj8XQ0IiIiNGShpeenJTKx9GckJLQvo2LlpyTmtCMkI2Lz8bG0IyQjYvPzs%2FN0M3PzsnQyMvOz8fRl4uS&amp;uid=994acb90d7abb10312dae9cc39c4e4dd&amp;hid=3e89e83b734878f3fb6350c5ec9107a2&amp;pos=10&amp;cid=9&amp;time=1484906401433&amp;from=click&amp;restype=1&amp;pagetype=0000004000000402&amp;bu=structure_web_info&amp;query=nginx+https+tomcat&amp;mode=&amp;v=1&amp;uc_param_str=dnntnwvepffrgibijbprsvdsei">nginx ssL +tomcat实现https</a></li>
</ul>


<p>由于是https请求，tcpdump从端口查到的数据都是看不懂的。并且不知道问题是在tomcat还是nginx，只能想着远程调试看看端口是在什么时刻被修改的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@cu1 apache-tomcat-8.0.38]# export JPDA_ADDRESS=8000
</span><span class='line'>[root@cu1 apache-tomcat-8.0.38]# bin/catalina.sh jpda run
</span><span class='line'>
</span><span class='line'># 本地pom.xml
</span><span class='line'>&lt;dependency&gt;
</span><span class='line'>    &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;
</span><span class='line'>    &lt;artifactId&gt;tomcat-catalina&lt;/artifactId&gt;
</span><span class='line'>    &lt;version&gt;8.0.38&lt;/version&gt;
</span><span class='line'>&lt;/dependency&gt;</span></code></pre></td></tr></table></div></figure>


<p>然后本地maven项目临时加入tomcat的包，开启VPN在eclipse的 <code>org.apache.catalina.connector.ResponseFacade.sendRedirect(String)</code> 打断点调试。然后定位到 <code>org.apache.coyote.Request.setServerPort(int)</code>， 最终确定在 <code>org.apache.catalina.valves.RemoteIpValve.setPorts(Request, int)</code> 。RemoteIpValve类里面的Header和nginx中配置的Header是对应的。</p>

<h2>最终成果</h2>

<p>https配置的方法查看前一篇文章。</p>

<p>还有tomcat里面Header是不区分大小写的： <code>org.apache.tomcat.util.http.MimeHeaders.getValue(String)</code>
如果配置proxyPort（而不是Valve的话）取到协议好像会不对(没验证)，并且配置Valve可以不影响Connector。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># nginx
</span><span class='line'>    server {
</span><span class='line'>        listen       14443 ssl;
</span><span class='line'>        server_name localhost;
</span><span class='line'>
</span><span class='line'>        ssl on;
</span><span class='line'>        ssl_certificate      nginx.crt;
</span><span class='line'>        ssl_certificate_key  nginx.key;
</span><span class='line'>
</span><span class='line'>        ssl_session_cache    shared:SSL:10m;
</span><span class='line'>        ssl_session_timeout  5m;
</span><span class='line'>
</span><span class='line'>        ssl_ciphers  HIGH:!aNULL:!MD5;
</span><span class='line'>        ssl_prefer_server_ciphers  on;
</span><span class='line'>
</span><span class='line'>        location / {
</span><span class='line'>            root   html;
</span><span class='line'>            index  index.html index.htm;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        location /omc {
</span><span class='line'>        port_in_redirect on;
</span><span class='line'>
</span><span class='line'>        proxy_set_header Host $http_host;
</span><span class='line'>        proxy_set_header X-Forwarded-Host $http_host;
</span><span class='line'>        proxy_set_header X-Real-IP $remote_addr;
</span><span class='line'>        proxy_set_header X-Forwarded-Port $server_port; # 自定义port header
</span><span class='line'>        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class='line'>        proxy_set_header X-Forwarded-Proto https;
</span><span class='line'>        proxy_connect_timeout      240;
</span><span class='line'>        proxy_send_timeout         240;
</span><span class='line'>        proxy_read_timeout         240;
</span><span class='line'>
</span><span class='line'>        proxy_pass http://localhost:9000;
</span><span class='line'>        #proxy_redirect default;
</span><span class='line'>        proxy_redirect off;
</span><span class='line'>        #proxy_redirect https://$host/ / ;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'># tomcat server.xml
</span><span class='line'>  &lt;Service name="Catalina"&gt;
</span><span class='line'>    &lt;Connector port="9000" protocol="HTTP/1.1"
</span><span class='line'>               connectionTimeout="20000"
</span><span class='line'>               URIEncoding="UTF-8"
</span><span class='line'>               redirectPort="8443"
</span><span class='line'>                /&gt;
</span><span class='line'>  ...
</span><span class='line'>    &lt;Engine name="Catalina" defaultHost="localhost"&gt;
</span><span class='line'>  ...
</span><span class='line'>      &lt;Host name="localhost"  appBase="webapps"
</span><span class='line'>            unpackWARs="true" autoDeploy="true"&gt;
</span><span class='line'>          ...
</span><span class='line'>            &lt;Valve className="org.apache.catalina.valves.RemoteIpValve"
</span><span class='line'>                  portHeader="x-forwarded-port"
</span><span class='line'>                  remoteIpHeader="x-forwarded-for"
</span><span class='line'>                  proxiesHeader="x-forwarded-by"
</span><span class='line'>                  protocolHeader="x-forwarded-proto"
</span><span class='line'>            /&gt;</span></code></pre></td></tr></table></div></figure>


<h2>福利</h2>

<p>nginx https代理tomcat <a href="https:">https:</a> 其实就是和http代理一样，很简单。记得删掉上面的removeipvalve。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># tomcat server.xml
</span><span class='line'>&lt;Connector
</span><span class='line'>           protocol="org.apache.coyote.http11.Http11AprProtocol"
</span><span class='line'>           port="9443" maxThreads="200"
</span><span class='line'>           scheme="https" secure="true" SSLEnabled="true"
</span><span class='line'>           SSLCertificateFile="/home/cu/tools/apache-tomcat-8.0.38/conf/nginx.crt"
</span><span class='line'>           SSLCertificateKeyFile="/home/cu/tools/apache-tomcat-8.0.38/conf/nginx.key"
</span><span class='line'>           SSLVerifyClient="optional" SSLProtocol="TLSv1+TLSv1.1+TLSv1.2"/&gt;
</span><span class='line'>
</span><span class='line'># nginx
</span><span class='line'>location /omc {
</span><span class='line'>proxy_set_header Host $http_host;
</span><span class='line'>proxy_set_header X-Forwarded-Host $http_host;
</span><span class='line'>proxy_set_header X-Real-IP $remote_addr;
</span><span class='line'>proxy_connect_timeout      240;
</span><span class='line'>proxy_send_timeout         240;
</span><span class='line'>proxy_read_timeout         240;
</span><span class='line'>
</span><span class='line'>proxy_redirect off;
</span><span class='line'>proxy_pass https://localhost:9443;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://my.oschina.net/zhlmmc/blog/42125">https://my.oschina.net/zhlmmc/blog/42125</a></li>
</ul>


<p>nginx websockt:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    location /omc/webSocket {
</span><span class='line'>            proxy_pass http://localhost:8888/omc/webSocket;
</span><span class='line'>            proxy_redirect off;
</span><span class='line'>
</span><span class='line'>            proxy_http_version 1.1;
</span><span class='line'>            proxy_set_header Upgrade $http_upgrade;
</span><span class='line'>            proxy_set_header Connection "upgrade";
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>文件大小：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>proxy_read_timeout 86400;
</span><span class='line'>proxy_send_timeout 86400;
</span><span class='line'>
</span><span class='line'>client_max_body_size 1024m;</span></code></pre></td></tr></table></div></figure>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx配置https]]></title>
    <link href="http://winseliu.com/blog/2017/01/19/nginx-https/"/>
    <updated>2017-01-19T15:53:45+08:00</updated>
    <id>http://winseliu.com/blog/2017/01/19/nginx-https</id>
    <content type="html"><![CDATA[<p>很早前弄过https，当时只是玩玩实际工作中并没有用到。现在业务需要得配置https。欠的债总是要还的，使用puppet的时刻默认全部信任不走证书认证。这里为了安装tomcat的https还是绕不过去。硬着头皮整吧。</p>

<h2>编译</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[... nginx-1.10.2]$ tar zxvf zlib-1.2.8.tar.gz 
</span><span class='line'>[... nginx-1.10.2]$ tar zxvf pcre-8.36.tar.gz 
</span><span class='line'>
</span><span class='line'>[... nginx-1.10.2]$ mv zlib-1.2.8 src/zlib
</span><span class='line'>[... nginx-1.10.2]$ mv pcre-8.36 src/pcre
</span><span class='line'>
</span><span class='line'>[... nginx-1.10.2]$ ./configure --prefix=/home/hadoop/nginx --with-http_ssl_module --with-pcre=src/pcre --with-zlib=src/zlib
</span><span class='line'>[... nginx-1.10.2]$ make && make install</span></code></pre></td></tr></table></div></figure>


<h2>生成证书</h2>

<p>先整一个能访问的https，再通过本地CA来进行授权（本地浏览器安装这个CA），最后处理chrome sha-1的问题。</p>

<ul>
<li>自己签发（无CA）</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># RSA密钥
</span><span class='line'>[hadoop@cu1 conf]$ openssl genrsa -des3 -out server.key 1024
</span><span class='line'>Generating RSA private key, 1024 bit long modulus
</span><span class='line'>...........++++++
</span><span class='line'>................++++++
</span><span class='line'>e is 65537 (0x10001)
</span><span class='line'>Enter pass phrase for server.key:
</span><span class='line'>Verifying - Enter pass phrase for server.key:
</span><span class='line'># 拷贝一个不需要输入密码的密钥文件
</span><span class='line'>[hadoop@cu1 conf]$ cp server.key server.key.org
</span><span class='line'>[hadoop@cu1 conf]$ openssl rsa -in server.key.org -out server.key
</span><span class='line'>Enter pass phrase for server.key.org:
</span><span class='line'>writing RSA key
</span><span class='line'>
</span><span class='line'># 需要提交给 SSL 认证机构的(生成一个证书请求)
</span><span class='line'>[hadoop@cu1 conf]$ openssl req -new -key server.key -out server.csr
</span><span class='line'>You are about to be asked to enter information that will be incorporated
</span><span class='line'>into your certificate request.
</span><span class='line'>What you are about to enter is what is called a Distinguished Name or a DN.
</span><span class='line'>There are quite a few fields but you can leave some blank
</span><span class='line'>For some fields there will be a default value,
</span><span class='line'>If you enter '.', the field will be left blank.
</span><span class='line'>-----
</span><span class='line'>Country Name (2 letter code) [XX]:CN
</span><span class='line'>State or Province Name (full name) []:GD
</span><span class='line'>Locality Name (eg, city) [Default City]:GZ
</span><span class='line'>Organization Name (eg, company) [Default Company Ltd]:Eshore
</span><span class='line'>Organizational Unit Name (eg, section) []:CU
</span><span class='line'>Common Name (eg, your name or your server's hostname) []:cu.eshore.cn
</span><span class='line'>Email Address []:ca@eshore.cn
</span><span class='line'>
</span><span class='line'>Please enter the following 'extra' attributes
</span><span class='line'>to be sent with your certificate request
</span><span class='line'>A challenge password []:
</span><span class='line'>An optional company name []:
</span><span class='line'>
</span><span class='line'># 认证机构颁发(自己签发证书)
</span><span class='line'>[hadoop@cu1 conf]$ openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
</span><span class='line'>Signature ok
</span><span class='line'>subject=/C=CN/ST=Guangdong/L=Guangzhou/O=Eshore/OU=CU/CN=cu1
</span><span class='line'>Getting Private key
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>本地CA授权 &amp; SHA2(推荐)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@cu1 apache-tomcat-8.0.38]# ll /etc/pki/CA
</span><span class='line'>total 16
</span><span class='line'>drwxr-xr-x. 2 root root 4096 Mar  1  2016 certs 存放CA签署（颁发）过的数字证书（证书备份目录）
</span><span class='line'>drwxr-xr-x. 2 root root 4096 Mar  1  2016 crl 吊销的证书
</span><span class='line'>drwxr-xr-x. 2 root root 4096 Mar  1  2016 newcerts
</span><span class='line'>drwx------. 2 root root 4096 Mar  1  2016 private 用于存放CA的私钥
</span><span class='line'>[root@cu1 apache-tomcat-8.0.38]# ll /etc/pki/tls/
</span><span class='line'>total 24
</span><span class='line'>lrwxrwxrwx  1 root root    19 May 22  2015 cert.pem -&gt; certs/ca-bundle.crt
</span><span class='line'>drwxr-xr-x. 2 root root  4096 Mar 22  2016 certs
</span><span class='line'>drwxr-xr-x. 2 root root  4096 Mar 22  2016 misc
</span><span class='line'>-rw-r--r--  1 root root 10906 Feb 24  2016 openssl.cnf openssl的CA主配置文件
</span><span class='line'>drwxr-xr-x. 2 root root  4096 Mar  1  2016 private 证书密钥存放目录
</span><span class='line'>
</span><span class='line'># 修改配置(一部分为默认值，一部分与sha2有关)
</span><span class='line'>[root@cu1 pki]# pwd
</span><span class='line'>/etc/pki
</span><span class='line'>[root@cu1 pki]# vi tls/openssl.cnf 
</span><span class='line'>修改一些参数，后面的文件是修改后的
</span><span class='line'>[root@cu1 pki]# diff /home/hadoop/openssl.cnf tls/openssl.cnf 
</span><span class='line'>50c50
</span><span class='line'>&lt; certificate   = $dir/cacert.pem       # The CA certificate
</span><span class='line'>---
</span><span class='line'>&gt; certificate   = $dir/ca.crt   # The CA certificate
</span><span class='line'>55c55
</span><span class='line'>&lt; private_key   = $dir/private/cakey.pem# The private key
</span><span class='line'>---
</span><span class='line'>&gt; private_key   = $dir/private/ca.key # The private key
</span><span class='line'>74c74
</span><span class='line'>&lt; default_crl_days= 30                  # how long before next CRL
</span><span class='line'>---
</span><span class='line'>&gt; default_crl_days= 365                 # how long before next CRL
</span><span class='line'>86,87c86,87
</span><span class='line'>&lt; stateOrProvinceName   = match
</span><span class='line'>&lt; organizationName      = match
</span><span class='line'>---
</span><span class='line'>&gt; stateOrProvinceName   = optional
</span><span class='line'>&gt; organizationName      = optional
</span><span class='line'>107c107
</span><span class='line'>&lt; default_md            = sha1
</span><span class='line'>---
</span><span class='line'>&gt; default_md            = sha256
</span><span class='line'>126c126
</span><span class='line'>&lt; # req_extensions = v3_req # The extensions to add to a certificate request
</span><span class='line'>---
</span><span class='line'>&gt; req_extensions = v3_req # The extensions to add to a certificate request
</span><span class='line'>130c130
</span><span class='line'>&lt; countryName_default           = XX
</span><span class='line'>---
</span><span class='line'>&gt; countryName_default           = CN
</span><span class='line'>135c135
</span><span class='line'>&lt; #stateOrProvinceName_default  = Default Province
</span><span class='line'>---
</span><span class='line'>&gt; #stateOrProvinceName_default  = GD
</span><span class='line'>
</span><span class='line'># CA证书
</span><span class='line'>清理原来的旧文件
</span><span class='line'>[root@cu1 pki]# cd CA
</span><span class='line'>[root@cu1 CA]# rm -rf index.txt* serial*
</span><span class='line'>[root@cu1 CA]# rm cacert.pem private/cakey.pem 
</span><span class='line'>初始化
</span><span class='line'>[root@cu1 CA]# touch index.txt serial
</span><span class='line'>[root@cu1 CA]# echo 01 &gt; serial 
</span><span class='line'>
</span><span class='line'>[root@cu1 CA]# openssl genrsa -out private/ca.key 2048
</span><span class='line'>Generating RSA private key, 2048 bit long modulus
</span><span class='line'>.........................................................................+++
</span><span class='line'>...........................+++
</span><span class='line'>e is 65537 (0x10001)
</span><span class='line'>
</span><span class='line'>[root@cu1 CA]# chmod 600 private/ca.key 
</span><span class='line'>
</span><span class='line'>[root@cu1 CA]# openssl req -new -x509 -key private/ca.key -out ca.crt
</span><span class='line'>You are about to be asked to enter information that will be incorporated
</span><span class='line'>into your certificate request.
</span><span class='line'>What you are about to enter is what is called a Distinguished Name or a DN.
</span><span class='line'>There are quite a few fields but you can leave some blank
</span><span class='line'>For some fields there will be a default value,
</span><span class='line'>If you enter '.', the field will be left blank.
</span><span class='line'>-----
</span><span class='line'>Country Name (2 letter code) [CN]:CN
</span><span class='line'>State or Province Name (full name) []:GD
</span><span class='line'>Locality Name (eg, city) [Default City]:GZ
</span><span class='line'>Organization Name (eg, company) [Default Company Ltd]:Eshore
</span><span class='line'>Organizational Unit Name (eg, section) []:CU   
</span><span class='line'>Common Name (eg, your name or your server's hostname) []:eshore.cn
</span><span class='line'>Email Address []:ca@eshore.cn
</span><span class='line'>
</span><span class='line'># 应用端证书的新建
</span><span class='line'>[root@cu1 conf]# openssl genrsa -out nginx.key 2048
</span><span class='line'>Generating RSA private key, 2048 bit long modulus
</span><span class='line'>...................................................................+++
</span><span class='line'>.....+++
</span><span class='line'>e is 65537 (0x10001)
</span><span class='line'>[root@cu1 conf]# 
</span><span class='line'>
</span><span class='line'>[root@cu1 conf]# openssl req -new -key nginx.key -out nginx.csr
</span><span class='line'>You are about to be asked to enter information that will be incorporated
</span><span class='line'>into your certificate request.
</span><span class='line'>What you are about to enter is what is called a Distinguished Name or a DN.
</span><span class='line'>There are quite a few fields but you can leave some blank
</span><span class='line'>For some fields there will be a default value,
</span><span class='line'>If you enter '.', the field will be left blank.
</span><span class='line'>-----
</span><span class='line'>Country Name (2 letter code) [CN]:CN
</span><span class='line'>State or Province Name (full name) []:GD
</span><span class='line'>Locality Name (eg, city) [Default City]:GZ
</span><span class='line'>Organization Name (eg, company) [Default Company Ltd]:Eshore
</span><span class='line'>Organizational Unit Name (eg, section) []:Cu
</span><span class='line'>Common Name (eg, your name or your server's hostname) []:cu.eshore.cn
</span><span class='line'>Email Address []:cu@eshore.cn
</span><span class='line'>
</span><span class='line'>Please enter the following 'extra' attributes
</span><span class='line'>to be sent with your certificate request
</span><span class='line'>A challenge password []:
</span><span class='line'>An optional company name []:
</span><span class='line'>
</span><span class='line'>查看是否为sha-2
</span><span class='line'>[root@cu1 conf]# openssl req -in nginx.csr -text | grep sha256
</span><span class='line'>
</span><span class='line'># 应用端证书颁发 方式二选一
</span><span class='line'>* 默认的方式，但不是sha-2。把生成的证书请求csr文件发到CA服务器上，在CA上执行：
</span><span class='line'>签发过程其实默认使用配置中的ca.crt和ca.key这两个文件.
</span><span class='line'>[root@cu1 conf]# openssl ca -in nginx.csr -out nginx.crt
</span><span class='line'>Using configuration from /etc/pki/tls/openssl.cnf
</span><span class='line'>Check that the request matches the signature
</span><span class='line'>Signature ok
</span><span class='line'>Certificate Details:
</span><span class='line'>        Serial Number: 1 (0x1)
</span><span class='line'>        Validity
</span><span class='line'>            Not Before: Jan 19 07:24:24 2017 GMT
</span><span class='line'>            Not After : Jan 19 07:24:24 2018 GMT
</span><span class='line'>        Subject:
</span><span class='line'>            countryName               = CN
</span><span class='line'>            stateOrProvinceName       = GD
</span><span class='line'>            organizationName          = Eshore
</span><span class='line'>            organizationalUnitName    = Cu
</span><span class='line'>            commonName                = cu.eshore.cn
</span><span class='line'>            emailAddress              = cu@eshore.cn
</span><span class='line'>        X509v3 extensions:
</span><span class='line'>            X509v3 Basic Constraints: 
</span><span class='line'>                CA:FALSE
</span><span class='line'>            Netscape Comment: 
</span><span class='line'>                OpenSSL Generated Certificate
</span><span class='line'>            X509v3 Subject Key Identifier: 
</span><span class='line'>                7B:3D:E8:18:D9:77:20:8F:A2:76:7F:6C:F2:01:65:49:3F:92:1A:7F
</span><span class='line'>            X509v3 Authority Key Identifier: 
</span><span class='line'>                keyid:5F:8C:1E:3D:F7:A1:86:82:22:F5:88:12:36:16:82:49:B6:9C:84:F1
</span><span class='line'>
</span><span class='line'>Certificate is to be certified until Jan 19 07:24:24 2018 GMT (365 days)
</span><span class='line'>Sign the certificate? [y/n]:y
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>1 out of 1 certificate requests certified, commit? [y/n]y
</span><span class='line'>Write out database with 1 new entries
</span><span class='line'>Data Base Updated
</span><span class='line'>[root@cu1 conf]# 
</span><span class='line'>
</span><span class='line'>* sha-2签名算法
</span><span class='line'>http://www.ibm.com/support/knowledgecenter/zh/SSPMR3_9.0.0/com.ibm.tivoli.tem.doc_9.0/SUA_9.0/com.ibm.license.mgmt.doc/security/t_generate_certificate_CA.html
</span><span class='line'>[root@cu1 conf]# openssl x509 -req -days 365 -in nginx.csr -CA /etc/pki/CA/ca.crt -CAkey /etc/pki/CA/private/ca.key -CAserial /etc/pki/CA/serial -sha256 -out nginx.crt 
</span><span class='line'>Signature ok
</span><span class='line'>subject=/C=CN/ST=GD/L=GZ/O=Eshore/OU=Cu/CN=cu.eshore.cn/emailAddress=cu@eshore.cn
</span><span class='line'>Getting CA Private Key
</span></code></pre></td></tr></table></div></figure>


<p>生成key和csr请求可以一条命令搞定(==后期增加，和本文的一些配置有出处==)：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://www.digicert.com/easy-csr/openssl.htm
</span><span class='line'>
</span><span class='line'>openssl req -new -newkey rsa:2048 -nodes -out star_winse_com.csr -keyout star_winse_com.key -subj "/C=CN/ST=GD/L=GZ/O=winse/CN=*.winse.com"</span></code></pre></td></tr></table></div></figure>


<h2>nginx配置</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>    listen       14443 ssl;
</span><span class='line'>    server_name  cu.eshore.cn;
</span><span class='line'>
</span><span class='line'>    ssl on;
</span><span class='line'>    ssl_certificate      nginx.crt;
</span><span class='line'>    ssl_certificate_key  nginx.key;
</span><span class='line'>
</span><span class='line'>    ssl_session_cache    shared:SSL:1m;
</span><span class='line'>    ssl_session_timeout  5m;
</span><span class='line'>
</span><span class='line'>    ssl_ciphers  HIGH:!aNULL:!MD5;
</span><span class='line'>    ssl_prefer_server_ciphers  on;
</span><span class='line'>
</span><span class='line'>    location / {
</span><span class='line'>        root   html;
</span><span class='line'>        index  index.html index.htm;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    location /omc {
</span><span class='line'>        proxy_set_header        X-Real-IP $remote_addr;
</span><span class='line'>        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class='line'>        proxy_set_header        Host $http_host;
</span><span class='line'>
</span><span class='line'>        proxy_pass http://localhost:9000;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>MAKR</p>

<blockquote><p>同时，为了统一，你可以把这三个文件都移动到 /etc/ssl/private/ 目录。
然后可以修改 Nginx 配置文件
server { <br/>
    listen 80;
    listen [::]:80 ssl ipv6only=on;<br/>
    listen 443 ssl;
    listen [::]:443 ssl ipv6only=on;
    server_name example.com;
    ssl on;
    ssl_certificate /etc/ssl/private/example_com.crt;
    ssl_certificate_key /etc/ssl/private/example_com.key;
}</p>

<p>server_names barretlee.com *.barretlee.com
ssl on;
ssl_certificate /etc/nginx/ssl/barretlee.com.crt;
ssl_certificate_key /etc/nginx/ssl/barretlee.com.key;
ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_ciphers &ldquo;EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4EECDH EDH+aRSA RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !MEDIUM&rdquo;;</p>

<h1>Add perfect forward secrecy</h1>

<p>ssl_prefer_server_ciphers on;
add_header Strict-Transport-Security &ldquo;max-age=31536000; includeSubdomains&rdquo;;</p>

<p>同时，如果是全站 HTTPS 并且不考虑 HTTP 的话，可以加入 HSTS 告诉你的浏览器本
网站全站加密，并且强制用 HTTPS 访问
        add_header Strict-Transport-Security max-age=63072000;
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
同时也可以单独开一个 Nginx 配置，把 HTTP 的访问请求都用 301 跳转到 HTTPS</p>

<p>浏览器访问HTTP的请求重定向到HTTPS
If they come here using HTTP, bounce them to the correct scheme
error_page 497 <a href="https://$host:$server_port$request_uri;">https://$host:$server_port$request_uri;</a></p></blockquote>

<p>curl访问(把CA证书内容加入到ca-bundle.crt)：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@hadoop-master2 nginx]# curl https://www.winse.com
</span><span class='line'>curl: (60) Peer certificate cannot be authenticated with known CA certificates
</span><span class='line'>More details here: http://curl.haxx.se/docs/sslcerts.html
</span><span class='line'>
</span><span class='line'>curl performs SSL certificate verification by default, using a "bundle"
</span><span class='line'> of Certificate Authority (CA) public keys (CA certs). If the default
</span><span class='line'> bundle file isn't adequate, you can specify an alternate file
</span><span class='line'> using the --cacert option.
</span><span class='line'>If this HTTPS server uses a certificate signed by a CA represented in
</span><span class='line'> the bundle, the certificate verification probably failed due to a
</span><span class='line'> problem with the certificate (it might be expired, or the name might
</span><span class='line'> not match the domain name in the URL).
</span><span class='line'>If you'd like to turn off curl's verification of the certificate, use
</span><span class='line'> the -k (or --insecure) option.
</span><span class='line'> 
</span><span class='line'>[root@hadoop-master2 CA]# cp /etc/pki/tls/certs/ca-bundle.crt{,.bak}
</span><span class='line'>[root@hadoop-master2 CA]# cat /etc/pki/CA/ca.crt &gt;&gt; /etc/pki/tls/certs/ca-bundle.crt
</span><span class='line'>[root@hadoop-master2 CA]# 
</span><span class='line'>[root@hadoop-master2 CA]# curl https://www.winse.com
</span><span class='line'>curl: (51) SSL: certificate subject name 'winse.com' does not match target host name 'www.winse.com'
</span><span class='line'>[root@hadoop-master2 CA]# curl https://winse.com
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<h2>tomcat配置https</h2>

<p>直接使用nginx的key和crt，需要安装APR.</p>

<ul>
<li><a href="http://stackoverflow.com/questions/8716259/what-does-the-apr-based-apache-tomcat-native-library-was-not-found-mean">http://stackoverflow.com/questions/8716259/what-does-the-apr-based-apache-tomcat-native-library-was-not-found-mean</a></li>
<li><a href="http://stackoverflow.com/questions/4278047/apr-based-apache-tomcat-native-library-was-not-found-on-the-java-library-path">http://stackoverflow.com/questions/4278047/apr-based-apache-tomcat-native-library-was-not-found-on-the-java-library-path</a></li>
<li><a href="http://jmchung.github.io/blog/2013/09/06/centos-installing-apache-portable-runtime-apr-for-tomcat/">http://jmchung.github.io/blog/2013/09/06/centos-installing-apache-portable-runtime-apr-for-tomcat/</a></li>
<li><a href="https://tomcat.apache.org/native-doc/">https://tomcat.apache.org/native-doc/</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@cu1 apache-tomcat-8.0.38]# yum install tomcat-native
</span><span class='line'>[root@cu1 apache-tomcat-8.0.38]# less conf/server.xml 
</span><span class='line'>&lt;Connector
</span><span class='line'>           protocol="org.apache.coyote.http11.Http11AprProtocol"
</span><span class='line'>           port="9443" maxThreads="200"
</span><span class='line'>           scheme="https" secure="true" SSLEnabled="true"
</span><span class='line'>           SSLCertificateFile="/home/cu/tools/apache-tomcat-8.0.38/conf/nginx.crt"
</span><span class='line'>           SSLCertificateKeyFile="/home/cu/tools/apache-tomcat-8.0.38/conf/nginx.key"
</span><span class='line'>           SSLVerifyClient="optional" SSLProtocol="TLSv1+TLSv1.1+TLSv1.2"/&gt;</span></code></pre></td></tr></table></div></figure>


<h2>本地访问</h2>

<p>把/etc/pki/CA目录下的ca.crt拷贝本地，安装到<strong>受信任的根证书颁发机构</strong>目录下面。然后https访问即可。</p>

<h2>参考</h2>

<ul>
<li>V<a href="http://seanlook.com/2015/01/18/openssl-self-sign-ca/">基于OpenSSL自建CA和颁发SSL证书</a></li>
<li><p>V<a href="http://blog.csdn.net/napolunyishi/article/details/42425827">CentOS6.5下openssl加密解密及CA自签颁发证书详解</a></p></li>
<li><p><a href="http://fengwan.blog.51cto.com/508652/1869743">OpenSSL生成自签名的sha256泛域名证书</a></p></li>
<li><p><a href="http://blog.csdn.net/kent7306/article/details/50547388">tomcat配置https单向认证笔记</a></p></li>
<li><a href="https://tomcat.apache.org/tomcat-7.0-doc/ssl-howto.html">SSL/TLS Configuration HOW-TO</a></li>
<li><p><a href="https://www.oschina.net/question/12_23148">5分钟内搞定 Tomcat 的 SSL 配置</a></p></li>
<li><p><a href="http://www.freehao123.com/startssl-ssl/">StartSSL免费SSL证书</a></p></li>
<li><a href="http://nginx.org/en/docs/http/configuring_https_servers.html#single_http_https_server">http://nginx.org/en/docs/http/configuring_https_servers.html#single_http_https_server</a></li>
<li>Redirect http to https in nginx <a href="http://serverfault.com/questions/338700/redirect-http-mydomain-com12345-to-https-mydomain-com12345-in-nginx">http://serverfault.com/questions/338700/redirect-http-mydomain-com12345-to-https-mydomain-com12345-in-nginx</a></li>
</ul>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[elasticsearch5安装Head插件]]></title>
    <link href="http://winseliu.com/blog/2016/12/14/elasticsearch5-head-plugin-config/"/>
    <updated>2016-12-14T20:16:39+08:00</updated>
    <id>http://winseliu.com/blog/2016/12/14/elasticsearch5-head-plugin-config</id>
    <content type="html"><![CDATA[<p>新版本ES5和原来的有写不同，head等一些插件不能直接安装，需要单独起一个程序然后通过ajax的方式获取数据。</p>

<p>下载 elasticsearch-5.1.1 ，修改配置 <strong> network.host: cu-ud1 </strong>，然后启动服务 bin/elasticsearch -d 。</p>

<p>Head插件安装相对比较麻烦。在windows一些插件安装不了，现在能上外网的Linux下载依赖，然后把全部的包复制到生产环境。最后配置并启动head服务。</p>

<ul>
<li><a href="https://github.com/mobz/elasticsearch-head#running-with-built-in-server">https://github.com/mobz/elasticsearch-head#running-with-built-in-server</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[hadoop@cu2 elasticsearch-head]$ npm install
</span><span class='line'>
</span><span class='line'>[ud@cu-ud1 ~]$ xz -d node-v6.9.2-linux-x64.tar.xz 
</span><span class='line'>[ud@cu-ud1 ~]$ tar xvf node-v6.9.2-linux-x64.tar 
</span><span class='line'>[ud@cu-ud1 node-v6.9.2-linux-x64]$ vi ~/.bash_profile 
</span><span class='line'>...
</span><span class='line'>NODE_HOME=/home/ud/node-v6.9.2-linux-x64
</span><span class='line'>PATH=$NODE_HOME/bin:$PATH
</span><span class='line'>export PATH
</span><span class='line'>
</span><span class='line'>[ud@cu-ud1 ~]$ tar zxvf elasticsearch-head-standalone.tar.gz 
</span><span class='line'>
</span><span class='line'>[ud@cu-ud1 elasticsearch-5.1.1]$ vi config/elasticsearch.yml 
</span><span class='line'>...
</span><span class='line'>http.cors.enabled: true
</span><span class='line'>http.cors.allow-origin: "*"
</span><span class='line'>
</span><span class='line'>[ud@cu-ud1 elasticsearch-head]$ node_modules/grunt/bin/grunt server
</span></code></pre></td></tr></table></div></figure>


<p>然后浏览器访问9100端口即可。</p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spark2-0 & Kafka0-10-1订阅多个单只读一个分区]]></title>
    <link href="http://winseliu.com/blog/2016/12/09/spark2-0-kafka0-10-1-partitions-work-incorrent/"/>
    <updated>2016-12-09T12:02:38+08:00</updated>
    <id>http://winseliu.com/blog/2016/12/09/spark2-0-kafka0-10-1-partitions-work-incorrent</id>
    <content type="html"><![CDATA[<p>同事在使用Spark-Kafka-Streaming的时刻遇到只能读取一个分区的情况，最后他找到问题所在。这里记录下，说白了就是Spark-2.0.0默认是用Kafka-0.10.0.1，自己换程序版本有风险！</p>

<h2>问题的关键点</h2>

<ul>
<li>Kafka-0.10.1.0</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>org/apache/kafka/clients/consumer/KafkaConsumer.java
</span><span class='line'>    private void updateFetchPositions(Set&lt;TopicPartition&gt; partitions) {
</span><span class='line'>        // lookup any positions for partitions which are awaiting reset (which may be the
</span><span class='line'>        // case if the user called seekToBeginning or seekToEnd. We do this check first to
</span><span class='line'>        // avoid an unnecessary lookup of committed offsets (which typically occurs when
</span><span class='line'>        // the user is manually assigning partitions and managing their own offsets).
</span><span class='line'>        fetcher.resetOffsetsIfNeeded(partitions);
</span><span class='line'>
</span><span class='line'>        if (!subscriptions.hasAllFetchPositions()) {
</span><span class='line'>            // if we still don't have offsets for all partitions, then we should either seek
</span><span class='line'>            // to the last committed position or reset using the auto reset policy
</span><span class='line'>
</span><span class='line'>            // first refresh commits for all assigned partitions
</span><span class='line'>            coordinator.refreshCommittedOffsetsIfNeeded();
</span><span class='line'>
</span><span class='line'>            // then do any offset lookups in case some positions are not known
</span><span class='line'>            fetcher.updateFetchPositions(partitions);
</span><span class='line'>        }
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Kafka-0.10.0.1</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>org.apache.kafka.clients.consumer.KafkaConsumer#updateFetchPositions
</span><span class='line'>    private void updateFetchPositions(Set&lt;TopicPartition&gt; partitions) {
</span><span class='line'>        // refresh commits for all assigned partitions
</span><span class='line'>        coordinator.refreshCommittedOffsetsIfNeeded();
</span><span class='line'>
</span><span class='line'>        // then do any offset lookups in case some positions are not known
</span><span class='line'>        fetcher.updateFetchPositions(partitions);
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<h2>问题描述以及说明</h2>

<p>当订阅同一个主题的多个分区时，每次SparkStreaming会获取每次处理的Offset。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>org.apache.spark.streaming.kafka010.DirectKafkaInputDStream#latestOffsets
</span><span class='line'>  protected def latestOffsets(): Map[TopicPartition, Long] = {
</span><span class='line'>    val c = consumer
</span><span class='line'>    c.poll(0)
</span><span class='line'>    val parts = c.assignment().asScala
</span><span class='line'>
</span><span class='line'>    // make sure new partitions are reflected in currentOffsets
</span><span class='line'>    val newPartitions = parts.diff(currentOffsets.keySet)
</span><span class='line'>    // position for new partitions determined by auto.offset.reset if no commit
</span><span class='line'>    currentOffsets = currentOffsets ++ newPartitions.map(tp =&gt; tp -&gt; c.position(tp)).toMap
</span><span class='line'>    // don't want to consume messages, so pause
</span><span class='line'>    c.pause(newPartitions.asJava)
</span><span class='line'>    // find latest available offsets
</span><span class='line'>    c.seekToEnd(currentOffsets.keySet.asJava)
</span><span class='line'>    parts.map(tp =&gt; tp -&gt; c.position(tp)).toMap
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  override def compute(validTime: Time): Option[KafkaRDD[K, V]] = {
</span><span class='line'>    val untilOffsets = clamp(latestOffsets())
</span><span class='line'>    val offsetRanges = untilOffsets.map { case (tp, uo) =&gt;
</span><span class='line'>      val fo = currentOffsets(tp)
</span><span class='line'>      OffsetRange(tp.topic, tp.partition, fo, uo)
</span><span class='line'>    }
</span><span class='line'>    val rdd = new KafkaRDD[K, V](
</span><span class='line'>      context.sparkContext, executorKafkaParams, offsetRanges.toArray, getPreferredHosts, true)
</span><span class='line'>... </span></code></pre></td></tr></table></div></figure>


<p>如果使用kafka-0.10.1.0时，seekToEnd会重置当前客户端分区实例的position为null。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>org.apache.kafka.clients.consumer.KafkaConsumer#seekToEnd
</span><span class='line'>    public void seekToEnd(Collection&lt;TopicPartition&gt; partitions) {
</span><span class='line'>        acquire();
</span><span class='line'>        try {
</span><span class='line'>            Collection&lt;TopicPartition&gt; parts = partitions.size() == 0 ? this.subscriptions.assignedPartitions() : partitions;
</span><span class='line'>            for (TopicPartition tp : parts) {
</span><span class='line'>                log.debug("Seeking to end of partition {}", tp);
</span><span class='line'>                subscriptions.needOffsetReset(tp, OffsetResetStrategy.LATEST);
</span><span class='line'>            }
</span><span class='line'>        } finally {
</span><span class='line'>            release();
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>org.apache.kafka.clients.consumer.internals.SubscriptionState#needOffsetReset(TopicPartition, OffsetResetStrategy)
</span><span class='line'>    public void needOffsetReset(TopicPartition partition, OffsetResetStrategy offsetResetStrategy) {
</span><span class='line'>        assignedState(partition).awaitReset(offsetResetStrategy);
</span><span class='line'>    } 
</span><span class='line'>org.apache.kafka.clients.consumer.internals.SubscriptionState.TopicPartitionState#awaitReset
</span><span class='line'>        private void awaitReset(OffsetResetStrategy strategy) {
</span><span class='line'>            this.resetStrategy = strategy;
</span><span class='line'>            this.position = null;
</span><span class='line'>        }</span></code></pre></td></tr></table></div></figure>


<p>此时再调用position一个个分区的获取最新位置信息。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>org.apache.kafka.clients.consumer.KafkaConsumer#position
</span><span class='line'>    public long position(TopicPartition partition) {
</span><span class='line'>        acquire();
</span><span class='line'>        try {
</span><span class='line'>            if (!this.subscriptions.isAssigned(partition))
</span><span class='line'>                throw new IllegalArgumentException("You can only check the position for partitions assigned to this consumer.");
</span><span class='line'>            Long offset = this.subscriptions.position(partition);
</span><span class='line'>            if (offset == null) {
</span><span class='line'>                updateFetchPositions(Collections.singleton(partition));
</span><span class='line'>                offset = this.subscriptions.position(partition);
</span><span class='line'>            }
</span><span class='line'>            return offset;
</span><span class='line'>        } finally {
</span><span class='line'>            release();
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    private void updateFetchPositions(Set&lt;TopicPartition&gt; partitions) {
</span><span class='line'>        // lookup any positions for partitions which are awaiting reset (which may be the
</span><span class='line'>        // case if the user called seekToBeginning or seekToEnd. We do this check first to
</span><span class='line'>        // avoid an unnecessary lookup of committed offsets (which typically occurs when
</span><span class='line'>        // the user is manually assigning partitions and managing their own offsets).
</span><span class='line'>        fetcher.resetOffsetsIfNeeded(partitions);
</span><span class='line'>
</span><span class='line'>        if (!subscriptions.hasAllFetchPositions()) {
</span><span class='line'>            // if we still don't have offsets for all partitions, then we should either seek
</span><span class='line'>            // to the last committed position or reset using the auto reset policy
</span><span class='line'>
</span><span class='line'>            // first refresh commits for all assigned partitions
</span><span class='line'>            coordinator.refreshCommittedOffsetsIfNeeded();
</span><span class='line'>
</span><span class='line'>            // then do any offset lookups in case some positions are not known
</span><span class='line'>            fetcher.updateFetchPositions(partitions);
</span><span class='line'>        }
</span><span class='line'>    } 
</span><span class='line'>
</span><span class='line'>org.apache.kafka.clients.consumer.internals.Fetcher#resetOffsetsIfNeeded
</span><span class='line'>    public void resetOffsetsIfNeeded(Set&lt;TopicPartition&gt; partitions) {
</span><span class='line'>        for (TopicPartition tp : partitions) {
</span><span class='line'>            // TODO: If there are several offsets to reset, we could submit offset requests in parallel
</span><span class='line'>            if (subscriptions.isAssigned(tp) && subscriptions.isOffsetResetNeeded(tp))
</span><span class='line'>                resetOffset(tp);
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>org.apache.kafka.clients.consumer.internals.SubscriptionState.TopicPartitionState#seek
</span><span class='line'>        private void seek(long offset) {
</span><span class='line'>            this.position = offset;
</span><span class='line'>            this.resetStrategy = null;
</span><span class='line'>        } </span></code></pre></td></tr></table></div></figure>


<p>新版本KafkaConsumer先更新位置，最终调用seek设置position以及重置resetStrategy。</p>

<p>但是后面又额外多了一个判断！！检测所有的分区，只要有一个有问题就重新获取position，最对有问题啊！尽管后面又调用updateFetchPositions但是环境已经变了啊！！导致多个分区的情况下只能读取一个分区的数据。</p>

<p>问题找到了，直接客户端用旧的就行了。</p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jasperreports使用小结]]></title>
    <link href="http://winseliu.com/blog/2016/12/01/jasperreports-brief-summary/"/>
    <updated>2016-12-01T12:04:32+08:00</updated>
    <id>http://winseliu.com/blog/2016/12/01/jasperreports-brief-summary</id>
    <content type="html"><![CDATA[<p>最近接了一个报表的任务，原来也有接触过，但是仅限于了解没有真正的动手画过。这里把从选型到最后成型一路下来遇到的问题整理下。</p>

<p>主要两个大问题：环境的搭建，以及子报表(嵌套报表)的配置。</p>

<h2>选择Jasperreports</h2>

<p>知道的有Birts、Pentaho、FineReport感觉其实都差不多，大家各自都取长补当更多。由于一穷二白的，没有弄过。网上找了和SpringMVC结合的都是Jasperreport的文章，就这么草率的定下来了。</p>

<p>基本的操作都类似，报表HelloWorld还是比较简单的。下载<a href="http://community.jaspersoft.com/project/jaspersoft-studio">jaspersoftstudio</a>最新版，然后了解各个区域的作用。</p>

<ul>
<li><a href="http://www.lai18.com/content/9047924.html">JasperReport入门</a></li>
<li><a href="http://blog.csdn.net/bryanliu1982/article/details/598176">JasperReport Tutorial（翻译）</a></li>
</ul>


<blockquote><p>一个完全的报表模板包括如下几个区域：title, pageHeader, columnHeader, groupHeader, detail, groupFooter, columnFoter, pageFooter, summary</p></blockquote>

<h2>整合SpringMVC</h2>

<p>原来做报表的同时都是直接连数据库的，过程中遇到各种问题。很多没法维护的事情发生：改个字段，数据库测试/生产链接等等。我这里直接选择通过JavaBean来传递数据。</p>

<ul>
<li>*<a href="http://blog.csdn.net/hwt_211/article/details/19904333">SpringMVC整合jasperreport做报表</a></li>
<li><a href="http://www.javacoder.cn/?p=188">Spring MVC中使用JasperReport</a></li>
<li><a href="http://zzc1684.iteye.com/blog/2189000">SpringMVC与iReport(JasperReports) 5.6整合开发实例</a></li>
</ul>


<p>贴代码之前先说PDF报表字体的问题，本来报表是加粗的，但是服务器生成浏览的时刻没有效果。发现还需要单独添加字体的包：<a href="http://stackoverflow.com/questions/25977427/bold-not-working-in-jaspersoft-studio-for-fonts-other-than-sans-serif">pdf - Bold not working in Jaspersoft Studio for fonts other than sans serif</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#maven
</span><span class='line'>&lt;properties&gt;
</span><span class='line'>      &lt;spring.version&gt;4.2.5.RELEASE&lt;/spring.version&gt;
</span><span class='line'>...
</span><span class='line'>      &lt;dependency&gt;
</span><span class='line'>          &lt;groupId&gt;net.sf.jasperreports&lt;/groupId&gt;
</span><span class='line'>          &lt;artifactId&gt;jasperreports&lt;/artifactId&gt;
</span><span class='line'>          &lt;version&gt;6.3.1&lt;/version&gt;
</span><span class='line'>      &lt;/dependency&gt;
</span><span class='line'>      &lt;dependency&gt;
</span><span class='line'>          &lt;groupId&gt;net.sf.jasperreports&lt;/groupId&gt;
</span><span class='line'>          &lt;artifactId&gt;jasperreports-fonts&lt;/artifactId&gt;
</span><span class='line'>          &lt;version&gt;6.0.0&lt;/version&gt;
</span><span class='line'>      &lt;/dependency&gt;
</span><span class='line'>      &lt;dependency&gt;
</span><span class='line'>          &lt;groupId&gt;com.itextpdf&lt;/groupId&gt;
</span><span class='line'>          &lt;artifactId&gt;itextpdf&lt;/artifactId&gt;
</span><span class='line'>          &lt;version&gt;5.5.10&lt;/version&gt;
</span><span class='line'>      &lt;/dependency&gt;
</span><span class='line'>      &lt;dependency&gt;
</span><span class='line'>          &lt;groupId&gt;com.itextpdf&lt;/groupId&gt;
</span><span class='line'>          &lt;artifactId&gt;itext-asian&lt;/artifactId&gt;
</span><span class='line'>          &lt;version&gt;5.2.0&lt;/version&gt;
</span><span class='line'>      &lt;/dependency&gt;
</span><span class='line'>      &lt;dependency&gt;
</span><span class='line'>          &lt;groupId&gt;org.codehaus.groovy&lt;/groupId&gt;
</span><span class='line'>          &lt;artifactId&gt;groovy-all&lt;/artifactId&gt;
</span><span class='line'>          &lt;version&gt;2.4.7&lt;/version&gt;
</span><span class='line'>      &lt;/dependency&gt;
</span><span class='line'>
</span><span class='line'># spring mvc xml
</span><span class='line'>  &lt;bean id="viewResolver" class="org.springframework.web.servlet.view.ResourceBundleViewResolver"&gt;
</span><span class='line'>      &lt;property name="order" value="0"&gt;&lt;/property&gt;
</span><span class='line'>      &lt;property name="basename" value="views"&gt;&lt;/property&gt;
</span><span class='line'>  &lt;/bean&gt;
</span><span class='line'>  &lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
</span><span class='line'>      &lt;property name="order" value="1"&gt;&lt;/property&gt;
</span><span class='line'>      &lt;property name="viewClass"&gt;
</span><span class='line'>          &lt;value&gt;org.springframework.web.servlet.view.JstlView&lt;/value&gt;
</span><span class='line'>      &lt;/property&gt;
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'># views.properties
</span><span class='line'>HELLO.(class)=org.springframework.web.servlet.view.jasperreports.JasperReportsPdfView 
</span><span class='line'>HELLO.url=/WEB-INF/report/helloworld.jasper
</span><span class='line'>HELLO.reportDataKey=datasource
</span><span class='line'>
</span><span class='line'># java Controller
</span><span class='line'>@Controller
</span><span class='line'>@RequestMapping("/report")
</span><span class='line'>public class HelloReportController {
</span><span class='line'>
</span><span class='line'>  @RequestMapping("/hello.pdf")
</span><span class='line'>  public ModelAndView printExpress() {
</span><span class='line'>      ModelAndView mv = new ModelAndView("HELLO");
</span><span class='line'>
</span><span class='line'>      // 如果直接传对象bean不行，需要使用list传值
</span><span class='line'>      List&lt;HelloWorldData&gt; list = new ArrayList&lt;&gt;();
</span><span class='line'>      list.add(new HelloWorldData("jarperreport", "Hi"));
</span><span class='line'>
</span><span class='line'>      mv.addObject("datasource", list);
</span><span class='line'>      return mv;
</span><span class='line'>  }
</span></code></pre></td></tr></table></div></figure>


<p>最后通过浏览器就能查看报表的PDF文件了。</p>

<p>前端所有的页面都是通过ajax来获取展示的，这里通过jquery-media.js来进行展示（生成内嵌的iframe），这也是上面的地址加上pdf后缀的原因。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># html
</span><span class='line'>&lt;div class="modal-body" style="max-height: 900px; padding: 10px;"&gt;
</span><span class='line'>  &lt;a class="media" href="${contextPath}${url}"&gt;&lt;/a&gt;
</span><span class='line'>&lt;/div&gt;
</span><span class='line'>
</span><span class='line'># jquery
</span><span class='line'>$('a.media', $modal).media({width:"100%", height:600});</span></code></pre></td></tr></table></div></figure>


<h2>子报表</h2>

<p>有一个结账的报表，既要展示汇总信息，还得把详情列表也输出出来。一开始的JavaBean：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class InvoiceData {
</span><span class='line'>  private String roomNo;
</span><span class='line'>  private List&lt;InvoiceDetailData&gt; details;
</span><span class='line'>  ...
</span><span class='line'>}
</span><span class='line'>public class InvoiceDetailData {
</span><span class='line'>  private String date;
</span><span class='line'>  private String amount;
</span><span class='line'>  ...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>但是简单报表是一维的，不能展示list里面的内容。网上一堆资料都是简单的案例，涉及多维度的就Table、Crosstable、Subreport这几个控件。Table的样式调起来麻烦，数据也不知道怎么搞。子报表至少看起来合乎逻辑，操作起来也简单。画好图标以及把对应的字段对应好后，子报表的Datasource直接填 <code>$F{details}</code> 。</p>

<p>修改views.properties，写好controller后，启动竟然报<strong>找不到details子报表</strong>路径。根据文章修改如下：</p>

<ul>
<li>*<a href="http://docs.spring.io/autorepo/docs/spring-framework/3.0.0.M3/reference/html/ch17s07.html">Working with Sub-Reports</a></li>
<li><a href="https://www.tutorialspoint.com/jasper_reports/jasper_create_subreports.htm">Create SubReports</a></li>
<li>*<a href="http://it.zhaozhao.info/archives/5581">在 Spring MVC 3.1.2.RELEASE 产出 JasperReports 4.7.1 子报表（Subreport）</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 主报表
</span><span class='line'># 类型必须加哦！
</span><span class='line'>  &lt;parameter name="DetailSubReport" class="net.sf.jasperreports.engine.JasperReport"/&gt;
</span><span class='line'>  ...
</span><span class='line'>  &lt;subreport&gt;
</span><span class='line'>      &lt;reportElement stretchType="RelativeToBandHeight" x="0" y="0" width="520" height="167" uuid="8d69d85b-4fcf-482a-836c-c1698ce42dcd"/&gt;
</span><span class='line'>      &lt;dataSourceExpression&gt;&lt;![CDATA[$F{details}]]&gt;&lt;/dataSourceExpression&gt;
</span><span class='line'>      &lt;subreportExpression&gt;&lt;![CDATA[$P{DetailSubReport}]]&gt;&lt;/subreportExpression&gt;
</span><span class='line'>  &lt;/subreport&gt;
</span><span class='line'>  
</span><span class='line'># views.properties
</span><span class='line'>Invoice.(class)=org.springframework.web.servlet.view.jasperreports.JasperReportsPdfView 
</span><span class='line'>Invoice.url=/WEB-INF/report/invoice.jasper
</span><span class='line'>Invoice.reportDataKey=datasource
</span><span class='line'>Invoice.subReportUrls=DetailSubReport=/WEB-INF/report/InvoiceDetail.jasper</span></code></pre></td></tr></table></div></figure>


<p>罗马建成非一日之功，再次编译启动后，再次报错，这次的是<strong>类型错误</strong>。感觉正在慢慢向成功靠近。修改类型后最后启动展示搞定。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># javabean
</span><span class='line'>public class InvoiceData {
</span><span class='line'>  private JRDataSource details;
</span><span class='line'>  
</span><span class='line'>  public void setDetails(JRDataSource details) {
</span><span class='line'>      this.details = details;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public void setDetails(List&lt;InvoiceDetailData&gt; details) {
</span><span class='line'>      this.details = new JRBeanCollectionDataSource(details);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'># 主报表
</span><span class='line'>  &lt;field name="details" class="net.sf.jasperreports.engine.JRDataSource"&gt;
</span><span class='line'>      &lt;fieldDescription&gt;&lt;![CDATA[details]]&gt;&lt;/fieldDescription&gt;
</span><span class='line'>  &lt;/field&gt;</span></code></pre></td></tr></table></div></figure>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play2开发环境搭建]]></title>
    <link href="http://winseliu.com/blog/2016/11/10/play2-development-environment-with-eclipse/"/>
    <updated>2016-11-10T11:56:07+08:00</updated>
    <id>http://winseliu.com/blog/2016/11/10/play2-development-environment-with-eclipse</id>
    <content type="html"><![CDATA[<p>用惯了MAVEN后，在用SBT真有种生不如死的感觉。Maven更沉稳成熟些，SBT感觉首先不熟（入门也没maven简单）并且随性。</p>

<p>好了抱怨了这么多。入题，主要碰到的就是两个问题：</p>

<ol>
<li>Play2的HelloWorld主要卡在网络（也就是sbt的配置）；</li>
<li>导入Eclipse。由于有Maven缺各种插件的体验，这里直接用官网的生成好.class/.project再导入已经存在的项目。</li>
</ol>


<p>接下来一步步的介绍环境的搭建。</p>

<h4>下载Play2和SBT</h4>

<p>下载官网的<a href="https://playframework.com/download">Offline Distribution</a> ,解压后把 <code>activator-dist-1.3.12/repository</code> 的所有文件拷贝到 <code>~/.ivy2/cache</code> 。反正都会下载到这个目录，拷贝更快。</p>

<p>下载<a href="http://www.scala-sbt.org/download.html">SBT</a> ,下载zip就好。</p>

<h4>配置</h4>

<ol>
<li>在 activator-dist-1.3.12 创建 conf/sbtconfig.txt 。同时在 sbt/conf/sbtconfig.txt 加上同样的语句：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-Dsbt.override.build.repos=true</span></code></pre></td></tr></table></div></figure>


<ol>
<li>添加获取jar的repo地址，新建 ~/.sbt/repositories 文件</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[repositories]
</span><span class='line'>  local
</span><span class='line'>  local-maven: file:///D:/maven/.m2/repository/
</span><span class='line'>  cu: http://cu1:8081/nexus/content/groups/public/
</span><span class='line'>  #oschina: http://maven.oschina.net/content/groups/public/
</span><span class='line'>  jcenter: https://jcenter.bintray.com/
</span><span class='line'>  typesafe-ivy-releases: https://repo.typesafe.com/typesafe/ivy-releases/, [organization]/[module]/[revision]/[type]s/[artifact](-[classifier]).[ext], bootOnly
</span><span class='line'>  maven-central
</span><span class='line'>  ivy-typesafe: http://dl.bintray.com/typesafe/ivy-releases, [organization]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext]
</span><span class='line'>  ivy-sbt-plugin: http://dl.bintray.com/sbt/sbt-plugin-releases/, [organization]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext]</span></code></pre></td></tr></table></div></figure>


<p>配置相关参考：</p>

<ul>
<li><a href="http://9leg.com/scala/2015/10/17/scala-play-setting.html">http://9leg.com/scala/2015/10/17/scala-play-setting.html</a></li>
<li><a href="https://afoo.me/posts/2014-11-05-how-make-sbt-jump-over-GFW.html">https://afoo.me/posts/2014-11-05-how-make-sbt-jump-over-GFW.html</a></li>
<li><a href="https://www.jfrog.com/confluence/display/RTF/SBT+Repositories">https://www.jfrog.com/confluence/display/RTF/SBT+Repositories</a> +</li>
<li><a href="http://www.scala-sbt.org/0.13/docs/zh-cn/Library-Dependencies.html">http://www.scala-sbt.org/0.13/docs/zh-cn/Library-Dependencies.html</a></li>
<li><a href="http://www.scala-sbt.org/0.13/docs/Proxy-Repositories.html">http://www.scala-sbt.org/0.13/docs/Proxy-Repositories.html</a></li>
</ul>


<h4>创建新项目</h4>

<ul>
<li><a href="https://playframework.com/documentation/2.5.x/Tutorials">https://playframework.com/documentation/2.5.x/Tutorials</a></li>
</ul>


<p>添加环境变量自己主动点，activator和sbt都加一下。然后运行 activator new 根据模板创建项目。也可以参考官网的直接写build.sbt。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>R:\&gt;activator new helloworld play-java
</span><span class='line'>ACTIVATOR_HOME=E:\local\usr\share\activator-dist-1.3.12
</span><span class='line'>
</span><span class='line'>Fetching the latest list of templates...
</span><span class='line'>
</span><span class='line'>OK, application "helloworld" is being created using the "play-java" template.
</span><span class='line'>
</span><span class='line'>To run "helloworld" from the command line, "cd helloworld" then:
</span><span class='line'>R:\\helloworld/activator run
</span><span class='line'>
</span><span class='line'>To run the test for "helloworld" from the command line, "cd helloworld" then:
</span><span class='line'>R:\\helloworld/activator test
</span><span class='line'>
</span><span class='line'>To run the Activator UI for "helloworld" from the command line, "cd helloworld" then:
</span><span class='line'>R:\\helloworld/activator ui</span></code></pre></td></tr></table></div></figure>


<p>创建好项目后，运行 activator run 看看效果：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>R:\helloworld&gt;activator run
</span><span class='line'>ACTIVATOR_HOME=E:\local\usr\share\activator-dist-1.3.12
</span><span class='line'>[info] Loading project definition from R:\helloworld\project
</span><span class='line'>[info] Updating {file:/R:/helloworld/project/}helloworld-build...
</span><span class='line'>[info] Resolving org.fusesource.jansi#jansi;1.4 ...
</span><span class='line'>[info] Done updating.
</span><span class='line'>[info] Set current project to helloworld (in build file:/R:/helloworld/)
</span><span class='line'>[info] Updating {file:/R:/helloworld/}root...
</span><span class='line'>[info] Resolving jline#jline;2.12.1 ...
</span><span class='line'>[info] Done updating.
</span><span class='line'>
</span><span class='line'>--- (Running the application, auto-reloading is enabled) ---
</span><span class='line'>
</span><span class='line'>[info] p.c.s.NettyServer - Listening for HTTP on /0:0:0:0:0:0:0:0:9000
</span><span class='line'>
</span><span class='line'>(Server started, use Ctrl+D to stop and go back to the console...)
</span></code></pre></td></tr></table></div></figure>


<p>打开浏览器访问 <a href="http://localhost:9000">http://localhost:9000</a> ,访问的时刻可能会实时的编译会等一段时间。</p>

<h4>导入eclipse</h4>

<p>前面已经把helloworld跑起来了，接下来是把功能导入eclipse。直接导入或者手动加classpath挺麻烦的，play的一些配置会最终会编译class的。</p>

<p>这里使用 sbteclipse 来生成 eclipse 项目需要的文件。</p>

<ul>
<li><a href="https://www.playframework.com/documentation/2.5.x/IDE">https://www.playframework.com/documentation/2.5.x/IDE</a></li>
<li><a href="https://github.com/typesafehub/sbteclipse">https://github.com/typesafehub/sbteclipse</a></li>
<li><a href="https://github.com/typesafehub/sbteclipse/wiki/Using-sbteclipse">https://github.com/typesafehub/sbteclipse/wiki/Using-sbteclipse</a></li>
</ul>


<p>需要配置二个文件，先添加插件、然后修改配置。</p>

<p>在 helloworld/project/plugins.sbt 最后添加 sbteclipse 插件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>addSbtPlugin("com.typesafe.sbteclipse" % "sbteclipse-plugin" % "5.0.1")</span></code></pre></td></tr></table></div></figure>


<p>在 helloworld/build.sbt 最后添加配置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import com.typesafe.sbteclipse.plugin.EclipsePlugin.EclipseKeys
</span><span class='line'>// Compile the project before generating Eclipse files, so that generated .scala or .class files for views and routes are present
</span><span class='line'>EclipseKeys.preTasks := Seq(compile in Compile)
</span><span class='line'>EclipseKeys.projectFlavor := EclipseProjectFlavor.Java           // Java project. Don't expect Scala IDE
</span><span class='line'>EclipseKeys.createSrc := EclipseCreateSrc.Default + EclipseCreateSrc.ManagedClasses // Use .class files instead of generated .scala files for views and routes
</span><span class='line'>EclipseKeys.withSource := false
</span><span class='line'>EclipseKeys.withJavadoc := false</span></code></pre></td></tr></table></div></figure>


<p>然后用 sbt eclipse 生成IDE项目所需文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>R:\helloworld&gt;sbt
</span><span class='line'>Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8
</span><span class='line'>[info] Loading project definition from R:\helloworld\project
</span><span class='line'>[info] Updating {file:/R:/helloworld/project/}helloworld-build...
</span><span class='line'>[info] Resolving org.fusesource.jansi#jansi;1.4 ...
</span><span class='line'>[info] Done updating.
</span><span class='line'>[info] Set current project to helloworld (in build file:/R:/helloworld/)
</span><span class='line'>
</span><span class='line'>[helloworld] $ eclipse
</span><span class='line'>[info] About to create Eclipse project files for your project(s).
</span><span class='line'>[info] Updating {file:/R:/helloworld/}root...
</span><span class='line'>[info] Resolving jline#jline;2.12.1 ...
</span><span class='line'>[info] Done updating.
</span><span class='line'>[info] Compiling 6 Scala sources and 10 Java sources to R:\helloworld\target\scala-2.11\classes...
</span><span class='line'>[info] Successfully created Eclipse project files for project(s):
</span><span class='line'>[info] helloworld
</span><span class='line'>
</span><span class='line'>[helloworld] $ compile
</span><span class='line'>[success] Total time: 3 s, completed 2016-11-10 13:11:49
</span><span class='line'>
</span><span class='line'>[helloworld] $ eclipse
</span><span class='line'>[info] About to create Eclipse project files for your project(s).
</span><span class='line'>[info] Successfully created Eclipse project files for project(s):
</span><span class='line'>[info] helloworld
</span><span class='line'>[helloworld] $</span></code></pre></td></tr></table></div></figure>


<p>我这是专门重新弄的一个工程，依赖是原来已经下载好了的（下载需要等一段时间）。</p>

<p>然后导入已经存在的项目即可。看最终效果图：</p>

<p><img src="http://winseliu.com/images/blogs/play2-dev.jpg" alt="" /></p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[红帽6升级SSH]]></title>
    <link href="http://winseliu.com/blog/2016/10/20/ssh-upgrade-on-centos6/"/>
    <updated>2016-10-20T19:29:50+08:00</updated>
    <id>http://winseliu.com/blog/2016/10/20/ssh-upgrade-on-centos6</id>
    <content type="html"><![CDATA[<p>安全检查报告SSH版本太低存在漏洞需要进行升级，但是红帽没有现成的高版本打包好SSH的rpm。自己动手丰衣足食，没有网上一些朋友遇到那么多的问题，但是也是这纠结过程。</p>

<p>搞一台身边的机器测试安装，如果远程机器搞不好就连不上了！！先手动编译安装一遍，把编译需要的依赖都安装好，然后再rpmbuild就会比较顺利。</p>

<h2>运维同事编译安装的步骤</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>加载光盘的packages
</span><span class='line'># mount -o loop disk1.iso /mnt/disk
</span><span class='line'># vi /etc/yum.repo.d/local.repo
</span><span class='line'>
</span><span class='line'>[root@localhost SOURCES]# ll *.tar.gz
</span><span class='line'>-rw-r--r--. 1 root   root   1499808 3月  10 2016 openssh-7.2p2.tar.gz
</span><span class='line'>-rw-r--r--. 1 root   root   5489494 10月 20 16:41 openssl-1.0.2j.tar.gz
</span><span class='line'>-rw-r--r--. 1 root   root     29229 6月  26 2004 x11-ssh-askpass-1.2.4.1.tar.gz
</span><span class='line'>
</span><span class='line'>一、升级 Zlib
</span><span class='line'>1、下载最新版本 Zlib
</span><span class='line'># ./configure --prefix=/usr/local/zlib
</span><span class='line'>本次遇到GCC未安装
</span><span class='line'>yum -y install gcc
</span><span class='line'>./configure --prefix=/usr/local/zlib
</span><span class='line'># make
</span><span class='line'># make install
</span><span class='line'>这样，就把 zlib 编译安装在 /usr/local/zilib 中了。
</span><span class='line'>二、升级 OpenSSL
</span><span class='line'>1、下载最新版本 OpenSSL
</span><span class='line'>which openssl    查看到当前是在/usr/bin/openssl
</span><span class='line'># ./config --prefix=/usr --shared
</span><span class='line'>本次遇到系统时间不对的，修改好系统时间后config正常。
</span><span class='line'># make
</span><span class='line'># make test （这一步很重要哦！是进行 SSL 加密协议的完整测试，如果出现错误就要一定先找出哪里的原因，否则一味继续可能导致最终 SSH 不能使用，后果很严重哦！）
</span><span class='line'># make install
</span><span class='line'>三、升级 OpenSSH
</span><span class='line'>1、下载最新版本 OpenSSH
</span><span class='line'>#  ./configure --prefix=/usr --sysconfdir=/etc/ssh --with-pam --with-zlib=/usr/local/zlib --with-ssl-dir=/usr/bin/openssl --with-md5-passwords 
</span><span class='line'>（注意，如果 configure 时提示 PAM 有错误，那一般是因为系统中没有安装 pam-devel RPM 包，找到安装光盘，安装 pam-devel 就可以解决啦）如果是sshkeygen提示错误，需要make  clean再重新编译
</span><span class='line'>本次安装过程提示了pam问题,cd /opt/cdrom-mirror/Packages
</span><span class='line'>rpm -ivh pam-devel-1.1.1-10.el6_2.1.x86_64.rpm
</span><span class='line'>./configure --prefix=/usr --sysconfdir=/etc/ssh --with-pam --with-zlib=/usr/local/zlib --with-ssl-dir=/usr/bin/openssl --with-md5-passwords 
</span><span class='line'># make
</span><span class='line'># make install
</span><span class='line'>ssh -V 
</span></code></pre></td></tr></table></div></figure>


<h2>编译RPM包</h2>

<p>机器太多，不太可能一台台的编译安装。首先用rpmbuild打包，然后用createrepo制作本地私有仓库。主要是openssl打包比较纠结！OpenSSH完全依赖OpenSSL的，所以OpenSSL的版本一定要先编译安装好，然后再编译OpenSSH。相应的包下面都有对应的spec文件。</p>

<p>实际操作过程是先打包OpenSSH的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> cd
</span><span class='line'> mkdir rpmbuild
</span><span class='line'> cd rpmbuild/
</span><span class='line'> mkdir -pv {BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}
</span><span class='line'>
</span><span class='line'> cd SOURCES/
</span><span class='line'> cd ../SPECS/
</span><span class='line'> cp ~/updatessh/openssh-7.2p2/contrib/redhat/openssh.spec ./
</span><span class='line'> cd ..
</span><span class='line'> cd SOURCES/
</span><span class='line'> vi /etc/resolv.conf
</span><span class='line'> wget http://pkgs.fedoraproject.org/repo/pkgs/openssh/x11-ssh-askpass-1.2.4.1.tar.gz/8f2e41f3f7eaa8543a2440454637f3c3/x11-ssh-askpass-1.2.4.1.tar.gz
</span><span class='line'> wget http://pkgs.fedoraproject.org/repo/pkgs/openssh/openssh-7.2p2.tar.gz/13009a9156510d8f27e752659075cced/openssh-7.2p2.tar.gz
</span><span class='line'> cd ..
</span><span class='line'> yum groupinstall "X Window System" "Desktop" "Desktop Platform" "General Purpose Desktop"
</span><span class='line'> yum -y install libX11-devel
</span><span class='line'> yum install imake
</span><span class='line'> yum provides \*/Intrinsic.h
</span><span class='line'> yum install libXt-devel
</span><span class='line'> yum search gtk
</span><span class='line'> yum install gtk2 gtk2-devel
</span><span class='line'> vi SPECS/openssh.spec
</span><span class='line'> rpmbuild -bb SPECS/openssh.spec</span></code></pre></td></tr></table></div></figure>


<p>然后坑就摆在那里了：重启sshd失败。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 在rpmbuild\RPMS\x86_64目录下面创建createrepo私有仓库
</span><span class='line'># /etc/yum.repo.d/local.repo增加节点
</span><span class='line'>
</span><span class='line'># yum install openssh 
</span><span class='line'>
</span><span class='line'># 重启
</span><span class='line'>[root@localhost ~]# service sshd restart
</span><span class='line'>然后启动了[失败]（具体错没记下来）</span></code></pre></td></tr></table></div></figure>


<p>感觉是OpenSSL的问题了。然后打包好OpenSSL后安装竟然报错：找不到libssl的动态链接库</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Error: Package: wget-1.12-1.4.el6.x86_64 (@anaconda-RedHatEnterpriseLinux-201206132210.x86_64/6.3)
</span><span class='line'>           Requires: libcrypto.so.10()(64bit)
</span><span class='line'>           Removing: openssl-1.0.0-20.el6_2.5.x86_64 (@cdrom)
</span><span class='line'>               libcrypto.so.10()(64bit)
</span><span class='line'>           Updated By: openssl-1.0.2j-1.x86_64 (upgrade)
</span><span class='line'>               Not found
</span><span class='line'>Error: Package: 1:wpa_supplicant-0.7.3-3.el6.x86_64 (@cdrom)
</span><span class='line'>           Requires: libssl.so.10()(64bit)
</span><span class='line'>           Removing: openssl-1.0.0-20.el6_2.5.x86_64 (@cdrom)
</span><span class='line'>               libssl.so.10()(64bit)
</span><span class='line'>           Updated By: openssl-1.0.2j-1.x86_64 (upgrade)
</span><span class='line'>               Not found</span></code></pre></td></tr></table></div></figure>


<p>官方的出的spec打包的rpm安装后竟然会少东西。百思不得其解，通过查看cdrom openssl-1.0.0-20.el6_2.5.x86_64.rpm与rpmbuild openssl-1.0.2j-1.x86_64.rpm的确还不同：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@localhost ~]# rpm -qlp /opt/cdrom/Packages/openssl-1.0.0-20.el6_2.5.x86_64.rpm | grep libssl
</span><span class='line'>...
</span><span class='line'>/usr/lib64/libssl.so.1.0.0
</span><span class='line'>/usr/lib64/libssl.so.10
</span><span class='line'>
</span><span class='line'>[root@localhost ~]# rpm -qlp /opt/cdrom/Packages/openssl-1.0.0-20.el6_2.5.x86_64.rpm | grep libssl
</span><span class='line'>...
</span><span class='line'>/usr/lib64/libssl.so.1.0.0</span></code></pre></td></tr></table></div></figure>


<p>在spec里面增加libssl.so.10软链接也没用。rpm并没有提供libssl.so.10的 <strong> provide </strong> 服务（可以通过<a href="http://stackoverflow.com/questions/25638461/how-can-i-make-rpm-tell-what-libraries-are-provided-inside-it">rpm -qip &ndash;provides RPM</a>查看）。</p>

<p>实在想不出办法了，只能先看下官网怎么打包的。最后通过查看 openssl-1.0.0-20.el6_2.5.src.rpm 的打包spec是进行定制了的，把原来编译生成的动态链接库so.$(SHLIB_MAJOR).$(SHLIB_MINOR)文件名改成so.$(SHLIB_SONAMEVER)。主要的两个patch为：</p>

<ul>
<li>openssl-1.0.0-beta3-soversion.patch</li>
<li>openssl-1.0.0-beta4-redhat.patch</li>
</ul>


<p>参考修改如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>修改Makefile
</span><span class='line'>diff -u openssl-1.0.2j/Makefile.org rpmbuild/SOURCES/openssl-1.0.2j/Makefile.org
</span><span class='line'>--- openssl-1.0.2j/Makefile.org 2016-09-26 17:49:07.000000000 +0800
</span><span class='line'>+++ rpmbuild/SOURCES/openssl-1.0.2j/Makefile.org        2016-10-20 15:28:32.000000000 +0800
</span><span class='line'>@@ -10,6 +10,7 @@
</span><span class='line'> SHLIB_MAJOR=
</span><span class='line'> SHLIB_MINOR=
</span><span class='line'> SHLIB_EXT=
</span><span class='line'>+SHLIB_SONAMEVER=10
</span><span class='line'> PLATFORM=dist
</span><span class='line'> OPTIONS=
</span><span class='line'> CONFIGURE_ARGS=
</span><span class='line'>@@ -342,10 +343,9 @@
</span><span class='line'> link-shared:
</span><span class='line'>        @ set -e; for i in $(SHLIBDIRS); do \
</span><span class='line'>                $(MAKE) -f $(HERE)/Makefile.shared -e $(BUILDENV) \
</span><span class='line'>-                       LIBNAME=$$i LIBVERSION=$(SHLIB_MAJOR).$(SHLIB_MINOR) \
</span><span class='line'>+                       LIBNAME=$$i LIBVERSION=$(SHLIB_SONAMEVER) \
</span><span class='line'>                        LIBCOMPATVERSIONS=";$(SHLIB_VERSION_HISTORY)" \
</span><span class='line'>                        symlink.$(SHLIB_TARGET); \
</span><span class='line'>-               libs="$$libs -l$$i"; \
</span><span class='line'>        done
</span><span class='line'> 
</span><span class='line'> build-shared: do_$(SHLIB_TARGET) link-shared
</span><span class='line'>@@ -356,7 +356,7 @@
</span><span class='line'>                        libs="$(LIBKRB5) $$libs"; \
</span><span class='line'>                fi; \
</span><span class='line'>                $(CLEARENV) && $(MAKE) -f Makefile.shared -e $(BUILDENV) \
</span><span class='line'>-                       LIBNAME=$$i LIBVERSION=$(SHLIB_MAJOR).$(SHLIB_MINOR) \
</span><span class='line'>+                       LIBNAME=$$i LIBVERSION=$(SHLIB_SONAMEVER) \
</span><span class='line'>                        LIBCOMPATVERSIONS=";$(SHLIB_VERSION_HISTORY)" \
</span><span class='line'>                        LIBDEPS="$$libs $(EX_LIBS)" \
</span><span class='line'>                        link_a.$(SHLIB_TARGET); \
</span><span class='line'>
</span><span class='line'>修改Configure1
</span><span class='line'>diff -u openssl-1.0.2j/Configure rpmbuild/SOURCES/openssl-1.0.2j/Configure
</span><span class='line'>--- openssl-1.0.2j/Configure    2016-09-26 17:49:07.000000000 +0800
</span><span class='line'>+++ rpmbuild/SOURCES/openssl-1.0.2j/Configure   2016-10-20 16:40:33.000000000 +0800
</span><span class='line'>@@ -1781,7 +1781,7 @@
</span><span class='line'>        elsif ($shared_extension ne "" && $shared_extension =~ /^\.s([ol])\.[^\.]*\.[^\.]*$/)
</span><span class='line'>                {
</span><span class='line'>                my $sotmp = $1;
</span><span class='line'>-               s/^SHARED_LIBS_LINK_EXTS=.*/SHARED_LIBS_LINK_EXTS=.s$sotmp.\$(SHLIB_MAJOR) .s$sotmp/;
</span><span class='line'>+               s/^SHARED_LIBS_LINK_EXTS=.*/SHARED_LIBS_LINK_EXTS=.s$sotmp.\$(SHLIB_SONAMEVER) .s$sotmp/;
</span><span class='line'>                }
</span><span class='line'>        elsif ($shared_extension ne "" && $shared_extension =~ /^\.[^\.]*\.[^\.]*\.dylib$/)
</span><span class='line'>                {
</span><span class='line'>
</span><span class='line'>修改Configure2
</span><span class='line'>rpmbuild/SOURCES/openssl-1.0.2j/Configure 文件中 so.\$(SHLIB_MAJOR).\$(SHLIB_MINOR) 替换成 so.\$(SHLIB_SONAMEVER)
</span><span class='line'>
</span><span class='line'>修改spec
</span><span class='line'>[root@localhost ~]# diff openssl-1.0.2j/openssl.spec rpmbuild/SPECS/openssl.spec
</span><span class='line'>110a111,121
</span><span class='line'>&gt; version=%{version}
</span><span class='line'>&gt; soversion=10
</span><span class='line'>&gt; rename so.${soversion} so.${version} $RPM_BUILD_ROOT%{_libdir}/*.so.${soversion}
</span><span class='line'>&gt; for lib in $RPM_BUILD_ROOT/usr/lib64/*.so.${version} ; do
</span><span class='line'>&gt;         chmod 755 ${lib}
</span><span class='line'>&gt;         ln -s -f `basename ${lib}` $RPM_BUILD_ROOT/usr/lib64/`basename ${lib} .${version}`
</span><span class='line'>&gt;         ln -s -f `basename ${lib}` $RPM_BUILD_ROOT/usr/lib64/`basename ${lib} .${version}`.${soversion}
</span><span class='line'>&gt; 
</span><span class='line'>&gt; done
</span><span class='line'>&gt; </span></code></pre></td></tr></table></div></figure>


<p>然后打包OpenSSL，用Yum更新OpenSSL；再打包OpenSSH，最后再用Yum安装OpenSSH。</p>

<h2>配置</h2>

<p>打包好完成后完成大半的任务了，但是重启过程出现了一些问题：</p>

<ol>
<li>error while loading shared libraries: libcrypto.so.10: cannot enable executable stack as shared object requires: Permission denied</li>
</ol>


<p>运行： <code>execstack -c libcrypto.so.10</code> 解决。 <a href="http://www.linuxquestions.org/questions/linux-kernel-70/longterm-and-grsec-on-slackware-13-0-a-903612/">http://www.linuxquestions.org/questions/linux-kernel-70/longterm-and-grsec-on-slackware-13-0-a-903612/</a></p>

<ol>
<li>重启后远程密码登录上不，但是机器重启是可以登录的，而且su通过密码也是可以切换的。</li>
</ol>


<p>由于su切换没问题，应该不是加解密的问题。最后经常是selinux的问题： <code>setenforce 0 ; vi /etc/selinux/config</code> 完成配置。</p>

<p>到此纠结的SSH升级告一段落。后面上百台机器通过puppet就可以搞定了。</p>

<p>最后分享一个牛逼到不能再牛逼升级配置的文章： <a href="http://www.tsingfun.com/html/2016/env_0330/1332.html">http://www.tsingfun.com/html/2016/env_0330/1332.html</a> 包括了升级过程中你遇到和没遇到的所有问题了。</p>

<h2>再记</h2>

<p>在测试机上面搞的都是默认的配置啊，安全级别本来就不高。但是到生产就不同了，本来加了防护的。需要特别注意！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#centos6.8
</span><span class='line'>#直接用openssl-1.0.1e-48.el6
</span><span class='line'>[root@localhost yum.repos.d]# mount -o loop CentOS-6.8-x86_64-bin-DVD1.iso /opt/cdrom
</span><span class='line'>[root@localhost yum.repos.d]# vi local.repo
</span><span class='line'>
</span><span class='line'>[root@localhost rpmbuild]#  yum groupinstall "X Window System" "Desktop" "Desktop Platform" "General Purpose Desktop"
</span><span class='line'>
</span><span class='line'>[root@localhost yum.repos.d]# yum install -y libX11-devel imake libXt-devel gtk2 gtk2-devel 
</span><span class='line'>
</span><span class='line'>[root@localhost rpmbuild]# yum install -y rpm-build
</span><span class='line'>[root@localhost rpmbuild]# yum install -y openssl-devel   krb5-devel pam-devel 
</span><span class='line'>
</span><span class='line'>[root@localhost rpmbuild]# yum install gcc
</span><span class='line'>
</span><span class='line'>[root@localhost rpmbuild]# rpmbuild -bb SPEC/openssh.spec
</span><span class='line'>
</span><span class='line'>自己做的repo：
</span><span class='line'>
</span><span class='line'>[root@hadoop-master1 ssh]# ll
</span><span class='line'>total 6192
</span><span class='line'>-rw-r--r-- 1 root root  439708 Oct 21 17:53 openssh-7.2p2-1.x86_64.rpm
</span><span class='line'>-rw-r--r-- 1 root root   41752 Oct 21 17:53 openssh-askpass-7.2p2-1.x86_64.rpm
</span><span class='line'>-rw-r--r-- 1 root root   22684 Oct 21 17:53 openssh-askpass-gnome-7.2p2-1.x86_64.rpm
</span><span class='line'>-rw-r--r-- 1 root root  581836 Oct 21 17:53 openssh-clients-7.2p2-1.x86_64.rpm
</span><span class='line'>-rw-r--r-- 1 root root   16948 Oct 21 17:53 openssh-debuginfo-7.2p2-1.x86_64.rpm
</span><span class='line'>-rw-r--r-- 1 root root  391544 Oct 21 17:53 openssh-server-7.2p2-1.x86_64.rpm
</span><span class='line'>-rw-r--r-- 1 root root 3226970 Oct 21 17:23 openssl-1.0.1e-48.el6.src.rpm
</span><span class='line'>-rw-r--r-- 1 root root 1595916 May 12 18:49 openssl-1.0.1e-48.el6.x86_64.rpm
</span><span class='line'>drwxr-xr-x 2 root root    4096 Oct 21 18:47 repodata
</span><span class='line'>
</span><span class='line'>注意点：
</span><span class='line'>
</span><span class='line'>1 selinux关掉
</span><span class='line'>
</span><span class='line'>2 开个telnet以防万一
</span><span class='line'>
</span><span class='line'>yum install telnet-server
</span><span class='line'>chkconfig telnet on
</span><span class='line'>service xinetd restart
</span><span class='line'>
</span><span class='line'>3 PAM
</span><span class='line'>vi /etc/ssh/sshd_config
</span><span class='line'>UsePAM no（反正要确认pam，或者看看/etc/pam.d/sshd是否满足要求）
</span></code></pre></td></tr></table></div></figure>


<p>&ndash;END</p>
]]></content>
  </entry>
  
</feed>
