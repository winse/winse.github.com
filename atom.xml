<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Winse Blog]]></title>
  <link href="http://winseliu.com/atom.xml" rel="self"/>
  <link href="http://winseliu.com/"/>
  <updated>2019-04-12T07:02:16+08:00</updated>
  <id>http://winseliu.com/</id>
  <author>
    <name><![CDATA[Winse Liu]]></name>
    <email><![CDATA[winseliu@foxmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Try bk.tencent.com]]></title>
    <link href="http://winseliu.com/blog/2019/04/10/try-bk-dot-tencent-dot-com/"/>
    <updated>2019-04-10T22:43:14+08:00</updated>
    <id>http://winseliu.com/blog/2019/04/10/try-bk-dot-tencent-dot-com</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@docker82 ~]# rz
</span><span class='line'>rz waiting to receive.
</span><span class='line'>Starting zmodem transfer.  Press Ctrl+C to cancel.
</span><span class='line'>Transferring bkce_src-4.1.16.tgz...
</span><span class='line'>  100% 1397597 KB    10668 KB/sec    00:02:11       0 Errors  
</span><span class='line'>
</span><span class='line'>[root@docker82 ~]# mkdir /data
</span><span class='line'>[root@docker82 ~]# tar xf bkce_src-4.1.16.tgz  -C /data
</span><span class='line'>[root@docker82 ~]# rz
</span><span class='line'>rz waiting to receive.
</span><span class='line'>Starting zmodem transfer.  Press Ctrl+C to cancel.
</span><span class='line'>Transferring ssl_certificates.tar.gz...
</span><span class='line'>  100%      23 KB      23 KB/sec    00:00:01       0 Errors  
</span><span class='line'>
</span><span class='line'>[root@docker82 ~]# tar xf ssl_certificates.tar.gz -C /data/src/cert
</span><span class='line'>[root@docker82 ~]# cd /data/install/
</span><span class='line'>
</span><span class='line'>[root@docker82 install]# setenforce 0
</span><span class='line'>[root@docker82 install]# getenforce 
</span><span class='line'>Permissive
</span><span class='line'>[root@docker82 install]# vi /etc/selinux/config 
</span><span class='line'>
</span><span class='line'># This file controls the state of SELinux on the system.
</span><span class='line'># SELINUX= can take one of these three values:
</span><span class='line'>#     enforcing - SELinux security policy is enforced.
</span><span class='line'>#     permissive - SELinux prints warnings instead of enforcing.
</span><span class='line'>#     disabled - No SELinux policy is loaded.
</span><span class='line'>SELINUX=disabled
</span><span class='line'># SELINUXTYPE= can take one of three two values:
</span><span class='line'>#     targeted - Targeted processes are protected,
</span><span class='line'>#     minimum - Modification of targeted policy. Only selected processes are protected.
</span><span class='line'>#     mls - Multi Level Security protection.
</span><span class='line'>SELINUXTYPE=targeted
</span><span class='line'>
</span><span class='line'>[root@docker82 install]# reboot 
</span><span class='line'>
</span><span class='line'>[root@docker82 install]# yum -y install epel-release
</span><span class='line'>
</span><span class='line'>[root@docker82 install]# vi /etc/security/limits.conf 
</span><span class='line'>* hard nofile 102400
</span><span class='line'>
</span><span class='line'>[root@docker82 install]# ulimit -n 102400 
</span><span class='line'>
</span><span class='line'>ulimit -s unlimited
</span><span class='line'>
</span><span class='line'>[root@docker82 install]# service firewalld stop 
</span><span class='line'>[root@docker82 install]# service NetworkManager stop 
</span><span class='line'>
</span><span class='line'>[root@docker82 install]# ./install_minibk -y 
</span></code></pre></td></tr></table></div></figure>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Try K8s]]></title>
    <link href="http://winseliu.com/blog/2019/04/10/try-k8s/"/>
    <updated>2019-04-10T15:26:32+08:00</updated>
    <id>http://winseliu.com/blog/2019/04/10/try-k8s</id>
    <content type="html"><![CDATA[<h2>1. 登录配置主机信息:</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ hostnamectl --static set-hostname master-1
</span><span class='line'>
</span><span class='line'>$ cat /etc/hosts
</span><span class='line'>127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
</span><span class='line'>::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
</span><span class='line'>
</span><span class='line'>192.168.251.51 master-1
</span><span class='line'>192.168.251.50 node-1</span></code></pre></td></tr></table></div></figure>


<h2>2. 安装docker</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat | bash &lt;&lt;EOF
</span><span class='line'>wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
</span><span class='line'>yum clean all
</span><span class='line'>yum makecache
</span><span class='line'>
</span><span class='line'>## docker version:(Version:           18.09.3)
</span><span class='line'># https://kubernetes.io/docs/setup/release/notes/#external-dependencies
</span><span class='line'># https://docs.docker.com/install/linux/docker-ce/centos/
</span><span class='line'>
</span><span class='line'>yum remove docker \
</span><span class='line'>  docker-client \
</span><span class='line'>  docker-client-latest \
</span><span class='line'>  docker-common \
</span><span class='line'>  docker-latest \
</span><span class='line'>  docker-latest-logrotate \
</span><span class='line'>  docker-logrotate \
</span><span class='line'>  docker-engine
</span><span class='line'>
</span><span class='line'>yum install -y yum-utils \
</span><span class='line'>  device-mapper-persistent-data \
</span><span class='line'>  lvm2
</span><span class='line'>
</span><span class='line'>yum-config-manager \
</span><span class='line'>    --add-repo \
</span><span class='line'>    https://download.docker.com/linux/centos/docker-ce.repo
</span><span class='line'>yum install -y docker-ce docker-ce-cli containerd.io
</span><span class='line'>
</span><span class='line'>yum list docker-ce --showduplicates | sort -r
</span><span class='line'>
</span><span class='line'>systemctl enable docker
</span><span class='line'>systemctl start docker
</span><span class='line'>
</span><span class='line'>systemctl disable firewalld
</span><span class='line'>service firewalld stop
</span><span class='line'>
</span><span class='line'>sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config 
</span><span class='line'>setenforce 0
</span><span class='line'>EOF
</span></code></pre></td></tr></table></div></figure>


<h2>3. 翻墙</h2>

<ul>
<li><a href="http://www.winseliu.com/blog/2017/07/30/kubeadm-install-kubenetes-on-centos7/">http://www.winseliu.com/blog/2017/07/30/kubeadm-install-kubenetes-on-centos7/</a></li>
<li><a href="https://serverfault.com/questions/739504/how-can-i-make-docker-compose-pull-images-using-a-socks5-proxy">https://serverfault.com/questions/739504/how-can-i-make-docker-compose-pull-images-using-a-socks5-proxy</a></li>
<li><a href="https://github.com/moby/moby/issues/23931#issuecomment-233035772">https://github.com/moby/moby/issues/23931#issuecomment-233035772</a> 2016后的版本可以用socks5了</li>
</ul>


<p>需要有在国外的主机！</p>

<ul>
<li><a href="https://tangx.in/2018/11/09/k8s-pull-image-from-gcr.io/#sniproxy">https://tangx.in/2018/11/09/k8s-pull-image-from-gcr.io/#sniproxy</a></li>
<li><a href="https://www.logcg.com/archives/984.html">https://www.logcg.com/archives/984.html</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -NC -D 1080 9.9.9.9 -p 88888
</span><span class='line'>
</span><span class='line'>curl --socks5-hostname 127.0.0.1:1080 www.google.com
</span><span class='line'>
</span><span class='line'>mkdir /etc/systemd/system/docker.service.d
</span><span class='line'>cat &gt; /etc/systemd/system/docker.service.d/socks5-proxy.conf &lt;&lt;EOF
</span><span class='line'>[Service]
</span><span class='line'>Environment="ALL_PROXY=socks5://127.0.0.1:1080" "NO_PROXY=localhost,127.0.0.1,10.0.0.0/8,192.168.0.0/16"
</span><span class='line'>EOF
</span><span class='line'>
</span><span class='line'>systemctl daemon-reload
</span><span class='line'>systemctl restart docker
</span><span class='line'>
</span><span class='line'># cache rpm
</span><span class='line'>sed -i 's/keepcache=0/keepcache=1/' /etc/yum.conf 
</span></code></pre></td></tr></table></div></figure>


<h2>4. 安装K8S</h2>

<p><a href="https://kubernetes.io/docs/setup/independent/install-kubeadm/">https://kubernetes.io/docs/setup/independent/install-kubeadm/</a></p>

<p>添加repo并增加代理配置</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo
</span><span class='line'>[kubernetes]
</span><span class='line'>name=Kubernetes
</span><span class='line'>baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
</span><span class='line'>enabled=1
</span><span class='line'>gpgcheck=1
</span><span class='line'>repo_gpgcheck=1
</span><span class='line'>gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
</span><span class='line'>exclude=kube*
</span><span class='line'>proxy=socks5://127.0.0.1:1080
</span><span class='line'>EOF
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  ## yum.conf allows you to have per-repository settings as well as global ([main]) settings, 也可以定义在单个repo的配置里面！
</span><span class='line'>  ##sed '$a\\nproxy=socks5://127.0.0.1:1080' /etc/yum.conf 
</span><span class='line'>  ## proxy=_none_
</span><span class='line'>
</span><span class='line'>  
</span><span class='line'># Set SELinux in permissive mode (effectively disabling it)
</span><span class='line'>setenforce 0
</span><span class='line'>sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
</span><span class='line'>
</span><span class='line'>yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
</span><span class='line'>
</span><span class='line'>systemctl enable --now kubelet
</span></code></pre></td></tr></table></div></figure>


<h2>5. 配置K8S</h2>

<ul>
<li><a href="https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/">https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/</a></li>
<li><a href="https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/#pod-network">https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/#pod-network</a></li>
</ul>


<p>5.1 先加载镜像</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubeadm config images pull
</span><span class='line'>I0409 00:04:13.693615   18479 version.go:96] could not fetch a Kubernetes version from the internet: unable to get URL "https://dl.k8s.io/release/stable-1.txt": Get https://dl.k8s.io/release/stable-1.txt: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)
</span><span class='line'>I0409 00:04:13.694196   18479 version.go:97] falling back to the local client version: v1.14.0
</span><span class='line'>[config/images] Pulled k8s.gcr.io/kube-apiserver:v1.14.0
</span><span class='line'>[config/images] Pulled k8s.gcr.io/kube-controller-manager:v1.14.0
</span><span class='line'>[config/images] Pulled k8s.gcr.io/kube-scheduler:v1.14.0
</span><span class='line'>[config/images] Pulled k8s.gcr.io/kube-proxy:v1.14.0
</span><span class='line'>[config/images] Pulled k8s.gcr.io/pause:3.1
</span><span class='line'>[config/images] Pulled k8s.gcr.io/etcd:3.3.10
</span><span class='line'>[config/images] Pulled k8s.gcr.io/coredns:1.3.1</span></code></pre></td></tr></table></div></figure>


<p>5.2 初始化</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubeadm init --pod-network-cidr=10.244.0.0/16</span></code></pre></td></tr></table></div></figure>


<p>会遇到的问题1： <a href="https://github.com/kubernetes/kubeadm/issues/610">https://github.com/kubernetes/kubeadm/issues/610</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ journalctl -xeu kubelet
</span><span class='line'>....
</span><span class='line'>Apr 09 00:35:33 docker81 kubelet[24062]: I0409 00:35:33.996517   24062 server.go:625] --cgroups-per-qos enabled, but --cgroup-root was not specified.  defaulting to /
</span><span class='line'>Apr 09 00:35:33 docker81 kubelet[24062]: F0409 00:35:33.996923   24062 server.go:265] failed to run Kubelet: Running with swap on is not supported, please disable swap! or set --fail-swap
</span><span class='line'>Apr 09 00:35:33 docker81 systemd[1]: kubelet.service: main process exited, code=exited, status=255/n/a
</span><span class='line'>Apr 09 00:35:34 docker81 systemd[1]: Unit kubelet.service entered failed state.
</span><span class='line'>Apr 09 00:35:34 docker81 systemd[1]: kubelet.service failed.</span></code></pre></td></tr></table></div></figure>


<p>处理：</p>

<ul>
<li><a href="https://zhuanlan.zhihu.com/p/31398416">https://zhuanlan.zhihu.com/p/31398416</a> (关闭swap)使用kubeadm创建一个K8s 1.10的Cluster</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ swapoff -a
</span><span class='line'>$ sed -i '/swap/s/^/#/' /etc/fstab
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  # 禁用命令
</span><span class='line'>  sudo swapoff -a
</span><span class='line'>  # 启用命令
</span><span class='line'>  sudo swapon -a
</span><span class='line'>  # 把根目录文件系统设为可读写
</span><span class='line'>  sudo mount -n -o remount,rw /
</span><span class='line'>  </span></code></pre></td></tr></table></div></figure>


<p>5.3 再次初始化</p>

<p>先清理</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ 
</span><span class='line'>kubeadm reset
</span><span class='line'>iptables -F && iptables -t nat -F && iptables -t mangle -F && iptables -X
</span><span class='line'>
</span><span class='line'>$ kubeadm init --pod-network-cidr=10.244.0.0/16
</span><span class='line'>
</span><span class='line'>I0409 05:19:35.856967    3656 version.go:96] could not fetch a Kubernetes version from the internet: unable to get URL "https://dl.k8s.io/release/stable-1.txt": Get https://dl.k8s.io/release/stable-1.txt: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)
</span><span class='line'>I0409 05:19:35.857127    3656 version.go:97] falling back to the local client version: v1.14.1
</span><span class='line'>[init] Using Kubernetes version: v1.14.1
</span><span class='line'>[preflight] Running pre-flight checks
</span><span class='line'>        [WARNING Firewalld]: firewalld is active, please ensure ports [6443 10250] are open or your cluster may not function correctly
</span><span class='line'>        [WARNING IsDockerSystemdCheck]: detected "cgroupfs" as the Docker cgroup driver. The recommended driver is "systemd". Please follow the guide at https://kubernetes.io/docs/setup/cri/
</span><span class='line'>        [WARNING Hostname]: hostname "master-1" could not be reached
</span><span class='line'>        [WARNING Hostname]: hostname "master-1": lookup master-1 on 192.168.253.254:53: no such host
</span><span class='line'>[preflight] Pulling images required for setting up a Kubernetes cluster
</span><span class='line'>[preflight] This might take a minute or two, depending on the speed of your internet connection
</span><span class='line'>[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
</span><span class='line'>[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
</span><span class='line'>[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
</span><span class='line'>[kubelet-start] Activating the kubelet service
</span><span class='line'>[certs] Using certificateDir folder "/etc/kubernetes/pki"
</span><span class='line'>[certs] Generating "ca" certificate and key
</span><span class='line'>[certs] Generating "apiserver" certificate and key
</span><span class='line'>[certs] apiserver serving cert is signed for DNS names [master-1 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.251.51]
</span><span class='line'>[certs] Generating "apiserver-kubelet-client" certificate and key
</span><span class='line'>[certs] Generating "front-proxy-ca" certificate and key
</span><span class='line'>[certs] Generating "front-proxy-client" certificate and key
</span><span class='line'>[certs] Generating "etcd/ca" certificate and key
</span><span class='line'>[certs] Generating "etcd/peer" certificate and key
</span><span class='line'>[certs] etcd/peer serving cert is signed for DNS names [master-1 localhost] and IPs [192.168.251.51 127.0.0.1 ::1]
</span><span class='line'>[certs] Generating "etcd/healthcheck-client" certificate and key
</span><span class='line'>[certs] Generating "apiserver-etcd-client" certificate and key
</span><span class='line'>[certs] Generating "etcd/server" certificate and key
</span><span class='line'>[certs] etcd/server serving cert is signed for DNS names [master-1 localhost] and IPs [192.168.251.51 127.0.0.1 ::1]
</span><span class='line'>[certs] Generating "sa" key and public key
</span><span class='line'>[kubeconfig] Using kubeconfig folder "/etc/kubernetes"
</span><span class='line'>[kubeconfig] Writing "admin.conf" kubeconfig file
</span><span class='line'>[kubeconfig] Writing "kubelet.conf" kubeconfig file
</span><span class='line'>[kubeconfig] Writing "controller-manager.conf" kubeconfig file
</span><span class='line'>[kubeconfig] Writing "scheduler.conf" kubeconfig file
</span><span class='line'>[control-plane] Using manifest folder "/etc/kubernetes/manifests"
</span><span class='line'>[control-plane] Creating static Pod manifest for "kube-apiserver"
</span><span class='line'>[control-plane] Creating static Pod manifest for "kube-controller-manager"
</span><span class='line'>[control-plane] Creating static Pod manifest for "kube-scheduler"
</span><span class='line'>[etcd] Creating static Pod manifest for local etcd in "/etc/kubernetes/manifests"
</span><span class='line'>[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests". This can take up to 4m0s
</span><span class='line'>[apiclient] All control plane components are healthy after 13.506192 seconds
</span><span class='line'>[upload-config] storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
</span><span class='line'>[kubelet] Creating a ConfigMap "kubelet-config-1.14" in namespace kube-system with the configuration for the kubelets in the cluster
</span><span class='line'>[upload-certs] Skipping phase. Please see --experimental-upload-certs
</span><span class='line'>[mark-control-plane] Marking the node master-1 as control-plane by adding the label "node-role.kubernetes.io/master=''"
</span><span class='line'>[mark-control-plane] Marking the node master-1 as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]
</span><span class='line'>[bootstrap-token] Using token: zpf7je.xarawormfaeapib3
</span><span class='line'>[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
</span><span class='line'>[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
</span><span class='line'>[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
</span><span class='line'>[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
</span><span class='line'>[bootstrap-token] creating the "cluster-info" ConfigMap in the "kube-public" namespace
</span><span class='line'>[addons] Applied essential addon: CoreDNS
</span><span class='line'>[addons] Applied essential addon: kube-proxy
</span><span class='line'>
</span><span class='line'>Your Kubernetes control-plane has initialized successfully!
</span><span class='line'>
</span><span class='line'>To start using your cluster, you need to run the following as a regular user:
</span><span class='line'>
</span><span class='line'>  mkdir -p $HOME/.kube
</span><span class='line'>  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
</span><span class='line'>  sudo chown $(id -u):$(id -g) $HOME/.kube/config
</span><span class='line'>
</span><span class='line'>You should now deploy a pod network to the cluster.
</span><span class='line'>Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
</span><span class='line'>  https://kubernetes.io/docs/concepts/cluster-administration/addons/
</span><span class='line'>
</span><span class='line'>Then you can join any number of worker nodes by running the following on each as root:
</span><span class='line'>
</span><span class='line'>kubeadm join 192.168.251.51:6443 --token zpf7je.xarawormfaeapib3 \
</span><span class='line'>    --discovery-token-ca-cert-hash sha256:d7ff941542a03645209ad4149e1baa1c40ddad7e9c8296f82fe3bd2a91191f66 
</span></code></pre></td></tr></table></div></figure>


<p>执行添加kubeconfig配置</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ 
</span><span class='line'>  mkdir -p $HOME/.kube
</span><span class='line'>  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
</span><span class='line'>  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span></code></pre></td></tr></table></div></figure>


<p>5.4 查看状态</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl cluster-info 
</span><span class='line'>
</span><span class='line'>Kubernetes master is running at https://192.168.251.51:6443
</span><span class='line'>KubeDNS is running at https://192.168.251.51:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy
</span><span class='line'>
</span><span class='line'>To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>$ kubectl get pods -n kube-system 
</span><span class='line'>$ kubectl get pods --all-namespaces
</span><span class='line'>
</span><span class='line'>NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE
</span><span class='line'>kube-system   coredns-fb8b8dccf-hcrgw            0/1     Pending   0          100s
</span><span class='line'>kube-system   coredns-fb8b8dccf-zct25            0/1     Pending   0          100s
</span><span class='line'>kube-system   etcd-master-1                      1/1     Running   0          57s
</span><span class='line'>kube-system   kube-apiserver-master-1            1/1     Running   0          47s
</span><span class='line'>kube-system   kube-controller-manager-master-1   1/1     Running   0          62s
</span><span class='line'>kube-system   kube-proxy-p962p                   1/1     Running   3          100s
</span><span class='line'>kube-system   kube-scheduler-master-1            1/1     Running   0          45s</span></code></pre></td></tr></table></div></figure>


<p>5.5 添加网卡，dns的pod启动需要网络组建的支撑</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf
</span><span class='line'>net.bridge.bridge-nf-call-ip6tables = 1
</span><span class='line'>net.bridge.bridge-nf-call-iptables = 1
</span><span class='line'>EOF
</span><span class='line'>$ sysctl --system
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>$ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/a70459be0084506e4ec919aa1c114638878db11b/Documentation/kube-flannel.yml
</span><span class='line'>
</span><span class='line'>clusterrole.rbac.authorization.k8s.io/flannel created
</span><span class='line'>clusterrolebinding.rbac.authorization.k8s.io/flannel created
</span><span class='line'>serviceaccount/flannel created
</span><span class='line'>configmap/kube-flannel-cfg created
</span><span class='line'>daemonset.extensions/kube-flannel-ds-amd64 created
</span><span class='line'>daemonset.extensions/kube-flannel-ds-arm64 created
</span><span class='line'>daemonset.extensions/kube-flannel-ds-arm created
</span><span class='line'>daemonset.extensions/kube-flannel-ds-ppc64le created
</span><span class='line'>daemonset.extensions/kube-flannel-ds-s390x created</span></code></pre></td></tr></table></div></figure>


<p>查看状态，现在coredns也已经启动了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get pods --all-namespaces
</span><span class='line'>
</span><span class='line'>NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE
</span><span class='line'>kube-system   coredns-fb8b8dccf-hcrgw            1/1     Running   0          8m7s
</span><span class='line'>kube-system   coredns-fb8b8dccf-zct25            1/1     Running   0          8m7s
</span><span class='line'>kube-system   etcd-master-1                      1/1     Running   0          7m24s
</span><span class='line'>kube-system   kube-apiserver-master-1            1/1     Running   0          7m14s
</span><span class='line'>kube-system   kube-controller-manager-master-1   1/1     Running   0          7m29s
</span><span class='line'>kube-system   kube-flannel-ds-amd64-947zx        1/1     Running   0          2m32s
</span><span class='line'>kube-system   kube-proxy-p962p                   1/1     Running   3          8m7s
</span><span class='line'>kube-system   kube-scheduler-master-1            1/1     Running   0          7m12s</span></code></pre></td></tr></table></div></figure>


<h2>6. 安装Dashboard</h2>

<ul>
<li><a href="https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/#control-plane-node-isolation">https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/#control-plane-node-isolation</a></li>
<li><a href="https://github.com/kubernetes/dashboard#kubernetes-dashboard">https://github.com/kubernetes/dashboard#kubernetes-dashboard</a></li>
<li><a href="https://github.com/kubernetes/dashboard/wiki/Installation#update">https://github.com/kubernetes/dashboard/wiki/Installation#update</a></li>
</ul>


<p>先解除master不能部署pod的限制，然后部署dashboard：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl taint nodes --all node-role.kubernetes.io/master-
</span><span class='line'>
</span><span class='line'>node/master-1 untainted
</span><span class='line'>
</span><span class='line'>$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml
</span><span class='line'>
</span><span class='line'>secret/kubernetes-dashboard-certs created
</span><span class='line'>serviceaccount/kubernetes-dashboard created
</span><span class='line'>role.rbac.authorization.k8s.io/kubernetes-dashboard-minimal created
</span><span class='line'>rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard-minimal created
</span><span class='line'>deployment.apps/kubernetes-dashboard created
</span><span class='line'>service/kubernetes-dashboard created</span></code></pre></td></tr></table></div></figure>


<p>查看日志，故障定位</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kubectl describe pod kubernetes-dashboard-5f7b999d65-lt2df -n kube-system</span></code></pre></td></tr></table></div></figure>


<p>查看状态</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl get pods --all-namespaces
</span><span class='line'>
</span><span class='line'>NAMESPACE     NAME                                    READY   STATUS    RESTARTS   AGE
</span><span class='line'>kube-system   coredns-fb8b8dccf-hcrgw                 1/1     Running   0          15m
</span><span class='line'>kube-system   coredns-fb8b8dccf-zct25                 1/1     Running   0          15m
</span><span class='line'>kube-system   etcd-master-1                           1/1     Running   0          14m
</span><span class='line'>kube-system   kube-apiserver-master-1                 1/1     Running   0          14m
</span><span class='line'>kube-system   kube-controller-manager-master-1        1/1     Running   0          15m
</span><span class='line'>kube-system   kube-flannel-ds-amd64-947zx             1/1     Running   0          10m
</span><span class='line'>kube-system   kube-proxy-p962p                        1/1     Running   3          15m
</span><span class='line'>kube-system   kube-scheduler-master-1                 1/1     Running   0          14m
</span><span class='line'>kube-system   kubernetes-dashboard-5f7b999d65-lt2df   1/1     Running   0          6m6s</span></code></pre></td></tr></table></div></figure>


<h2>7. 访问Dashboard</h2>

<ul>
<li><a href="https://github.com/kubernetes/dashboard/wiki/Accessing-Dashboard---1.7.X-and-above">https://github.com/kubernetes/dashboard/wiki/Accessing-Dashboard&#8212;1.7.X-and-above</a></li>
</ul>


<p>7.1 本地查看</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl proxy
</span><span class='line'>Starting to serve on 127.0.0.1:8001
</span><span class='line'>
</span><span class='line'>http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy
</span></code></pre></td></tr></table></div></figure>


<p>7.2 用户浏览器查看</p>

<p>1* 失败的方法：</p>

<p>disable-filter=true表示禁用请求过滤功能，否则我们的请求会被拒绝，并提示 <code>Forbidden (403) Unauthorized</code> 。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kubectl proxy --address=0.0.0.0 --disable-filter=true</span></code></pre></td></tr></table></div></figure>


<p>可以成功访问到登录界面，但是却无法登录，这是因为Dashboard使用HTTP连接只允许localhost和127.0.0.1进行访问（限制为必须在kubectl执行的机器上访问），而其它地址只允许使用HTTPS。</p>

<p>2* 应该可行方法：（没有试）</p>

<p>Kubernetes API Server新增了 <code>-–anonymous-auth</code> 选项设置为 false，允许匿名请求访问secure port；再使用 <code>--basic-auth-file</code> 配置使用用户名登录。</p>

<p><a href="https://www.okay686.cn/984.html">https://www.okay686.cn/984.html</a></p>

<p>3* 证书+Token的方法：</p>

<ul>
<li><ul>
<li><a href="https://www.cnblogs.com/RainingNight/p/deploying-k8s-dashboard-ui.html">https://www.cnblogs.com/RainingNight/p/deploying-k8s-dashboard-ui.html</a> kubernetes-dashboard(1.8.3)部署与踩坑</li>
</ul>
</li>
<li><a href="https://stackoverflow.com/questions/45094665/user-systemanonymous-cannot-get-path">https://stackoverflow.com/questions/45094665/user-systemanonymous-cannot-get-path</a></li>
<li><a href="https://stackoverflow.com/questions/46664104/how-to-sign-in-kubernetes-dashboard">https://stackoverflow.com/questions/46664104/how-to-sign-in-kubernetes-dashboard</a> How to sign in kubernetes dashboard?</li>
<li><a href="https://www.jianshu.com/p/6f42ac331d8a">https://www.jianshu.com/p/6f42ac331d8a</a> (了解Dashboard RABC ) 从零开始搭建Kubernetes集群（四、搭建K8S Dashboard）</li>
<li><a href="https://stackoverflow.com/a/49992698">https://stackoverflow.com/a/49992698</a> (命令行创建一个dashboard token)</li>
<li><p><a href="https://andrewpqc.github.io/2018/04/25/k8s-dashboard-auth/">https://andrewpqc.github.io/2018/04/25/k8s-dashboard-auth/</a>  Kubernetes-dashboard的身份认证</p></li>
<li><p><a href="https://unofficialism.info/posts/accessing-rbac-enabled-kubernetes-dashboard/">https://unofficialism.info/posts/accessing-rbac-enabled-kubernetes-dashboard/</a></p></li>
</ul>


<p>3-1 证书</p>

<ul>
<li><a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/implementation-details/#generate-the-necessary-certificates">https://kubernetes.io/docs/reference/setup-tools/kubeadm/implementation-details/#generate-the-necessary-certificates</a></li>
<li><a href="https://stackoverflow.com/questions/45094665/user-systemanonymous-cannot-get-path">https://stackoverflow.com/questions/45094665/user-systemanonymous-cannot-get-path</a> (Token)User “system:anonymous” cannot get path “/”</li>
<li><a href="https://jimmysong.io/kubernetes-handbook/guide/kubectl-user-authentication-authorization.html">https://jimmysong.io/kubernetes-handbook/guide/kubectl-user-authentication-authorization.html</a>(kubeconfig) 创建用户认证授权的kubeconfig文件</li>
</ul>


<p>官方文档介绍：</p>

<ul>
<li><a href="https://kubernetes.io/docs/concepts/cluster-administration/certificates/">https://kubernetes.io/docs/concepts/cluster-administration/certificates/</a></li>
<li><a href="https://kubernetes.io/docs/tasks/tls/managing-tls-in-a-cluster/">https://kubernetes.io/docs/tasks/tls/managing-tls-in-a-cluster/</a></li>
<li><a href="https://github.com/kubernetes/dashboard/wiki/Certificate-management">https://github.com/kubernetes/dashboard/wiki/Certificate-management</a></li>
<li><a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet-authentication-authorization/#kubelet-authentication">https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet-authentication-authorization/#kubelet-authentication</a></li>
</ul>


<p><strong>方法0：</strong></p>

<p>申请证书</p>

<p><strong>方法1：</strong></p>

<p>对于API Server来说，它是使用证书进行认证的，我们需要先创建一个证书。首先找到kubectl命令的配置文件，默认情况下为 <code>/etc/kubernetes/admin.conf</code> 已经复制到了 <code>~/.kube/config</code> 中。然后我们使用client-certificate-data和client-key-data生成一个p12文件，可使用下列命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grep 'client-certificate-data' ~/.kube/config | head -n 1 | awk '{print $2}' | base64 -d &gt;&gt; kubecfg.crt
</span><span class='line'>grep 'client-key-data' ~/.kube/config | head -n 1 | awk '{print $2}' | base64 -d &gt;&gt; kubecfg.key
</span><span class='line'>openssl pkcs12 -export -clcerts -inkey kubecfg.key -in kubecfg.crt -out kubecfg.p12 -name "kubernetes-client"</span></code></pre></td></tr></table></div></figure>


<p>最后导入上面生成的p12文件，重新打开浏览器。</p>

<p><strong>方法偷懒2：</strong></p>

<p>What&rsquo;s causing: forbidden: User &ldquo;system:anonymous&rdquo; in some Cloud Providers
<a href="https://github.com/kubernetes-incubator/apiserver-builder-alpha/issues/225">https://github.com/kubernetes-incubator/apiserver-builder-alpha/issues/225</a></p>

<p>After reading this: <a href="https://kubernetes.io/docs/admin/authentication/#anonymous-requests">https://kubernetes.io/docs/admin/authentication/#anonymous-requests</a> then I tried this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kubectl create clusterrolebinding cluster-system-anonymous --clusterrole=cluster-admin --user=system:anonymous</span></code></pre></td></tr></table></div></figure>


<p>and it solved the problem.</p>

<p>3-2 权限</p>

<ul>
<li><a href="https://github.com/kubernetes/dashboard/wiki/Access-control#admin-privileges">https://github.com/kubernetes/dashboard/wiki/Access-control#admin-privileges</a></li>
<li><a href="https://github.com/kubernetes/dashboard/wiki/Access-control#authentication">https://github.com/kubernetes/dashboard/wiki/Access-control#authentication</a></li>
<li><a href="https://github.com/kubernetes/dashboard/wiki/Access-control#getting-token-with-kubectl">https://github.com/kubernetes/dashboard/wiki/Access-control#getting-token-with-kubectl</a></li>
</ul>


<p>方法1：创建新的用户</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@docker81 ~]# vi dashboard-admin-user.yml
</span><span class='line'>apiVersion: v1
</span><span class='line'>kind: ServiceAccount
</span><span class='line'>metadata:
</span><span class='line'>  name: admin-user
</span><span class='line'>  namespace: kube-system
</span><span class='line'>
</span><span class='line'>---
</span><span class='line'># ------------ role binding ---------------- #
</span><span class='line'>apiVersion: rbac.authorization.k8s.io/v1beta1
</span><span class='line'>kind: ClusterRoleBinding
</span><span class='line'>metadata:
</span><span class='line'>  name: admin-user
</span><span class='line'>roleRef:
</span><span class='line'>  apiGroup: rbac.authorization.k8s.io
</span><span class='line'>  kind: ClusterRole
</span><span class='line'>  name: cluster-admin
</span><span class='line'>subjects:
</span><span class='line'>- kind: ServiceAccount
</span><span class='line'>  name: admin-user
</span><span class='line'>  namespace: kube-system
</span><span class='line'>
</span><span class='line'>[root@docker81 ~]# kubectl create -f dashboard-admin-user.yml
</span><span class='line'>serviceaccount/admin-user created
</span><span class='line'>clusterrolebinding.rbac.authorization.k8s.io/admin-user created
</span><span class='line'>
</span><span class='line'>[root@docker81 ~]# kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}')
</span><span class='line'>Name:         admin-user-token-28dwk
</span><span class='line'>Namespace:    kube-system
</span><span class='line'>Labels:       &lt;none&gt;
</span><span class='line'>Annotations:  kubernetes.io/service-account.name: admin-user
</span><span class='line'>              kubernetes.io/service-account.uid: c23340a7-5a70-11e9-b2ca-005056887940
</span><span class='line'>
</span><span class='line'>Type:  kubernetes.io/service-account-token
</span><span class='line'>
</span><span class='line'>Data
</span><span class='line'>====
</span><span class='line'>ca.crt:     1025 bytes
</span><span class='line'>namespace:  11 bytes
</span><span class='line'>token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLTI4ZHdrIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJjMjMzNDBhNy01YTcwLTExZTktYjJjYS0wMDUwNTY4ODc5NDAiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.uaG_faYzLhiadXfz4XuQ_-X9tdl5exKQjbCK7OJqBFMCYve532O-8jH_zg5E2rgFUQycQUhH_siS_GCi0MoE8mqc-WJwIfaGB6QnLYOFRjvWWNhO_16FH56YaEZxGY2p62OPt4d1O9NK4KZLEcoZNbYYuol_9kBfAj9Imf3ii58TNGZ0WiRigXjLOsJK5P2IPyE4c_rqunsrb_sO1z56jgRTL9qnu2zsby8obJxNZefBnsTgakXnu-P8PwXg0PekLBWQNNr-G7TeiKCpfCGCjHM6gmEKdTjiernFbD1GxOG588pmZfWsFtjNNWuNAlfMe1bXpy2m981taQUTQa3kWQ
</span></code></pre></td></tr></table></div></figure>


<p>访问HTTPS地址：</p>

<p><a href="https://192.168.251.51:6443/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login">https://192.168.251.51:6443/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login</a></p>

<p>方法2：源头下手</p>

<p>kubernetes-dashboard.yaml的介绍，现在就理解了为什么其角色的名称为kubernetes-dashboard-minimal。一句话，这个Role的权限不够！
因此，我们可以更改RoleBinding修改为ClusterRoleBinding，并且修改roleRef中的kind和name，使用cluster-admin这个非常牛逼的CusterRole（超级用户权限，其拥有访问kube-apiserver的所有权限）。如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apiVersion: rbac.authorization.k8s.io/v1
</span><span class='line'>kind: ClusterRoleBinding
</span><span class='line'>metadata:
</span><span class='line'>  name: kubernetes-dashboard-minimal
</span><span class='line'>  namespace: kube-system
</span><span class='line'>roleRef:
</span><span class='line'>  apiGroup: rbac.authorization.k8s.io
</span><span class='line'>  kind: ClusterRole
</span><span class='line'>  name: cluster-admin
</span><span class='line'>subjects:
</span><span class='line'>- kind: ServiceAccount
</span><span class='line'>  name: kubernetes-dashboard
</span><span class='line'>  namespace: kube-system</span></code></pre></td></tr></table></div></figure>


<p>修改后，重新创建kubernetes-dashboard.yaml，Dashboard就可以拥有访问整个K8S 集群API的权限。</p>

<p>3-3 忽略登录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kubectl edit deployment/kubernetes-dashboard --namespace=kube-system
</span><span class='line'>
</span><span class='line'>      - args:
</span><span class='line'>        - --auto-generate-certificates
</span><span class='line'>        - --enable-skip-login
</span></code></pre></td></tr></table></div></figure>


<h2>8. 部署应用</h2>

<ul>
<li><a href="https://blog.51cto.com/12462495/2356619?source=dra">https://blog.51cto.com/12462495/2356619?source=dra</a></li>
<li><a href="https://kubernetes.io/docs/tasks/run-application/">https://kubernetes.io/docs/tasks/run-application/</a></li>
<li><a href="https://kubernetes.io/zh/docs/tasks/run-application/run-stateless-application-deployment/">https://kubernetes.io/zh/docs/tasks/run-application/run-stateless-application-deployment/</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@s1 ~]# kubectl create -f https://k8s.io/docs/tasks/run-application/deployment.yaml
</span><span class='line'>deployment.apps/nginx-deployment created
</span><span class='line'>
</span><span class='line'>kubectl describe deployment nginx-deployment
</span><span class='line'>kubectl get pods -l app=nginx
</span><span class='line'>
</span><span class='line'>[root@s1 ~]# kubectl describe pod nginx-deployment-76bf4969df-bmslp 
</span><span class='line'>
</span><span class='line'>kubectl apply -f https://k8s.io/examples/application/deployment-update.yaml
</span><span class='line'>kubectl apply -f https://k8s.io/docs/tutorials/stateless-application/deployment-update.yaml
</span><span class='line'>kubectl apply -f https://k8s.io/examples/application/deployment-scale.yaml
</span><span class='line'>
</span><span class='line'>kubectl describe deployment nginx-deployment
</span><span class='line'>kubectl get pods -l app=nginx
</span><span class='line'>kubectl describe pod &lt;pod-name&gt;
</span><span class='line'>
</span><span class='line'>[root@s1 ~]# curl 172.17.0.4
</span><span class='line'>
</span><span class='line'>kubectl delete deployment nginx-deployment
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://kubernetes.io/docs/tasks/access-kubernetes-api/http-proxy-access-api/">https://kubernetes.io/docs/tasks/access-kubernetes-api/http-proxy-access-api/</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@docker81 ~]# curl localhost:8001/api
</span><span class='line'>{
</span><span class='line'>  "kind": "APIVersions",
</span><span class='line'>  "versions": [
</span><span class='line'>    "v1"
</span><span class='line'>  ],
</span><span class='line'>  "serverAddressByClientCIDRs": [
</span><span class='line'>    {
</span><span class='line'>      "clientCIDR": "0.0.0.0/0",
</span><span class='line'>      "serverAddress": "192.168.193.81:6443"
</span><span class='line'>    }
</span><span class='line'>  ]
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>[root@docker81 ~]# curl localhost:8001/api/v1/namespaces/default/pods
</span><span class='line'>{
</span><span class='line'>  "kind": "PodList",
</span><span class='line'>  "apiVersion": "v1",
</span><span class='line'>  "metadata": {
</span><span class='line'>    "selfLink": "/api/v1/namespaces/default/pods",
</span><span class='line'>    "resourceVersion": "25607"
</span><span class='line'>  },
</span><span class='line'>  "items": []
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h2>9. 一些命令：</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kubectl cluster-info
</span><span class='line'>
</span><span class='line'>kubectl get nodes --all-namespaces -o wide
</span><span class='line'>
</span><span class='line'>kubectl get pods –namespace=kube-system
</span><span class='line'>kubectl get pod --all-namespaces=true
</span><span class='line'>
</span><span class='line'>kubectl describe pods
</span><span class='line'>kubectl describe pod coredns-7748f7f6df-7p58x --namespace=kube-system
</span><span class='line'>
</span><span class='line'>kubectl get services kube-dns --namespace=kube-system
</span><span class='line'>
</span><span class='line'>kubectl logs -n cattle-system cattle-node-agent-w5rj4
</span><span class='line'>
</span><span class='line'>kubectl -n kube-system get secret
</span><span class='line'>kubectl -n kube-system describe secret kubernetes-dashboard-token-zlfj7
</span><span class='line'>kubectl -n kube-system get secret kubernetes-dashboard-token-zlfj7 -o yaml
</span><span class='line'>
</span><span class='line'>kubectl -n kube-system describe $(kubectl -n kube-system get secret -n kube-system -o name | grep namespace) | grep token
</span><span class='line'>
</span><span class='line'>kubectl -n kube-system get service kubernetes-dashboard
</span><span class='line'>kubectl -n kube-system get svc kubernetes-dashboard
</span><span class='line'>kubectl -n kube-system get secret admin-token-nwphb -o jsonpath={.data.token}|base64 -d
</span><span class='line'>kubectl get secret $(kubectl get serviceaccount my-admin-user -n kube-system -o jsonpath="{.secrets[0].name}") -o jsonpath="{.data.token}" -n kube-system | base64 --decode
</span><span class='line'>
</span><span class='line'>kubectl delete -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml
</span><span class='line'>kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/aio/deploy/alternative/kubernetes-dashboard.yaml 
</span><span class='line'>
</span><span class='line'>kubectl -n kube-system edit service kubernetes-dashboard
</span><span class='line'>
</span><span class='line'>kubectl -n kube-system delete $(kubectl -n kube-system get pod -o name | grep dashboard)
</span><span class='line'>
</span><span class='line'>kubectl delete pod NAME --grace-period=0 --force
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>DNS解析：进入容器执行命令</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@k8s-master app]# kubectl exec -it coredns-78fcdf6894-244mp /bin/sh  -n kube-system                         
</span><span class='line'>/ # nslookup kubernetes.default 127.0.0.1</span></code></pre></td></tr></table></div></figure>


<ul>
<li>K8S二进制部署node节点 <a href="https://blog.51cto.com/ylw6006/2104692">https://blog.51cto.com/ylw6006/2104692</a></li>
</ul>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编译JCEF - Win64]]></title>
    <link href="http://winseliu.com/blog/2018/10/20/jcef-build-on-win64/"/>
    <updated>2018-10-20T10:47:59+08:00</updated>
    <id>http://winseliu.com/blog/2018/10/20/jcef-build-on-win64</id>
    <content type="html"><![CDATA[<h2>参考</h2>

<ul>
<li><a href="https://bitbucket.org/chromiumembedded/java-cef/wiki/BranchesAndBuilding">https://bitbucket.org/chromiumembedded/java-cef/wiki/BranchesAndBuilding</a></li>
<li><a href="https://bitbucket.org/Johness/java-cef/wiki/%E7%BC%96%E8%AF%91V49%E4%B8%BAWindows%E5%B9%B3%E5%8F%B0">编译V49为Windows平台</a> gif图片，过程很清晰。就是有点旧！</li>
<li><a href="https://my.oschina.net/penngo/blog/1538071">https://my.oschina.net/penngo/blog/1538071</a> 先下载 chromium-clang-format，最后创建项目的目录结构和添加DLL库路径</li>
<li><a href="http://wzdark.github.io/personalInfo/2015/12/02/jcef.html">http://wzdark.github.io/personalInfo/2015/12/02/jcef.html</a></li>
<li><a href="https://medium.com/@daniel.bischoff/integrating-chromium-as-a-web-renderer-in-a-java-application-with-jcef-72f67a677db6">https://medium.com/@daniel.bischoff/integrating-chromium-as-a-web-renderer-in-a-java-application-with-jcef-72f67a677db6</a> 创建项目，以及一些参数</li>
</ul>


<h2>简单过程摘录</h2>

<p>注意点：</p>

<ol>
<li>依赖：git/python2.7/java8/cmake3/visual studio 2017（这是我编译的环境，具体的版本要求请查看官网文档）</li>
<li>需要用git下载源码</li>
<li>先把 <a href="https://storage.googleapis.com/chromium-clang-format/6ddedd571c56b8c184f30a3c1fc36984e8c10ccd">chromium-clang-format</a> 下载放到 tools 目录下面</li>
</ol>


<p>步骤：</p>

<ol>
<li>cmake-3.12.3-win64-x64.zip，配置环境变量PATH</li>
<li>安装版python-2.7.15.amd64.msi、同时配置把python.exe加入到PATH</li>
<li>把 PortableGit 加入PATH： <code>set PATH=D:\PortableGit\bin;%PATH%</code></li>
<li>使用 VS 的命令行运行</li>
<li>命令：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>F:\wv&gt;git clone https://bitbucket.org/chromiumembedded/java-cef.git src
</span><span class='line'>
</span><span class='line'>F:\wv\src&gt;mkdir jcef_build && cd jcef_build
</span><span class='line'>
</span><span class='line'>F:\wv\src\jcef_build&gt;cmake -G "Visual Studio 14 Win64" ..
</span><span class='line'>用vs编译本地代码：
</span><span class='line'># Open jcef.sln in Visual Studio
</span><span class='line'># - Select Build &gt; Configuration Manager and change the "Active solution configuration" to "Release"
</span><span class='line'># - Select Build &gt; Build Solution.
</span><span class='line'>
</span><span class='line'>cd ..\tools
</span><span class='line'>compile.bat win64
</span><span class='line'>
</span><span class='line'>run.bat win64 Release detailed
</span><span class='line'>
</span><span class='line'>F:\wv\src\tools&gt;make_distrib.bat win64
</span></code></pre></td></tr></table></div></figure>


<p>生成的运行包放在 binary_distrib 目录下。查看下 <code>binary_distrib/win64/run.bat</code> 了解运行配置，同时参考上面文章中提到的项目的创建方法。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java -cp "./bin;./bin/*" -Djava.library.path=./bin/lib/win64 tests.detailed.MainFrame</span></code></pre></td></tr></table></div></figure>


<p>过程截图：</p>

<p><img src="http://winseliu.com/images/blogs/jcef/vs-cmd.png" alt="" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>**********************************************************************
</span><span class='line'>** Visual Studio 2017 Developer Command Prompt v15.7.4
</span><span class='line'>** Copyright (c) 2017 Microsoft Corporation
</span><span class='line'>**********************************************************************
</span><span class='line'>[vcvarsall.bat] Environment initialized for: 'x64'
</span><span class='line'>
</span><span class='line'>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community&gt;F:
</span><span class='line'>
</span><span class='line'>F:\&gt;cd wv
</span><span class='line'>F:\wv&gt;set PATH=D:\PortableGit\bin;%PATH%
</span><span class='line'>F:\wv&gt;git clone https://bitbucket.org/chromiumembedded/java-cef.git src
</span><span class='line'>
</span><span class='line'>F:\wv\src&gt;mkdir jcef_build && cd jcef_build
</span><span class='line'>
</span><span class='line'>F:\wv\src\jcef_build&gt;cmake -G "Visual Studio 14 Win64" ..
</span><span class='line'>-- Selecting Windows SDK version  to target Windows 10.0.16299.
</span><span class='line'>-- The C compiler identification is MSVC 19.0.24234.1
</span><span class='line'>-- The CXX compiler identification is MSVC 19.0.24234.1
</span><span class='line'>-- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/x86_amd64/cl.exe
</span><span class='line'>-- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/x86_amd64/cl.exe -- works
</span><span class='line'>-- Detecting C compiler ABI info
</span><span class='line'>-- Detecting C compiler ABI info - done
</span><span class='line'>-- Detecting C compile features
</span><span class='line'>-- Detecting C compile features - done
</span><span class='line'>-- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/x86_amd64/cl.exe
</span><span class='line'>-- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/x86_amd64/cl.exe -- works
</span><span class='line'>-- Detecting CXX compiler ABI info
</span><span class='line'>-- Detecting CXX compiler ABI info - done
</span><span class='line'>-- Detecting CXX compile features
</span><span class='line'>-- Detecting CXX compile features - done
</span><span class='line'>-- Downloading F:/wv/src/third_party/cef/cef_binary_3.3497.1831.g461fa1f_windows64.tar.bz2.sha1...
</span><span class='line'>-- Downloading F:/wv/src/third_party/cef/cef_binary_3.3497.1831.g461fa1f_windows64.tar.bz2...
</span><span class='line'>-- [download 0% complete]
</span><span class='line'>-- [download 1% complete]
</span><span class='line'>。。。
</span><span class='line'>-- [download 98% complete]
</span><span class='line'>-- [download 99% complete]
</span><span class='line'>-- [download 100% complete]
</span><span class='line'>-- Extracting F:/wv/src/third_party/cef/cef_binary_3.3497.1831.g461fa1f_windows64.tar.bz2...
</span><span class='line'>CMake Warning (dev) at CMakeLists.txt:153 (find_package):
</span><span class='line'>  Policy CMP0074 is not set: find_package uses &lt;PackageName&gt;_ROOT variables.
</span><span class='line'>  Run "cmake --help-policy CMP0074" for policy details.  Use the cmake_policy
</span><span class='line'>  command to set the policy and suppress this warning.
</span><span class='line'>
</span><span class='line'>  CMake variable CEF_ROOT is set to:
</span><span class='line'>
</span><span class='line'>    F:/wv/src/third_party/cef/cef_binary_3.3497.1831.g461fa1f_windows64
</span><span class='line'>
</span><span class='line'>  For compatibility, CMake is ignoring the variable.
</span><span class='line'>This warning is for project developers.  Use -Wno-dev to suppress it.
</span><span class='line'>
</span><span class='line'>-- Found PythonInterp: C:/Python27/python.exe (found version "2.7.15")
</span><span class='line'>-- Found JNI: C:/Java/jdk/lib/jawt.lib (Required is at least version "1.7")
</span><span class='line'>-- Generating native/jcef_version.h file...
</span><span class='line'>File native/jcef_version.h updated.
</span><span class='line'>-- Downloading clang-format from Google Storage...
</span><span class='line'>0&gt; Failed to fetch file gs://chromium-clang-format/6ddedd571c56b8c184f30a3c1fc36984e8c10ccd for tools/buildtools/win/clang-format.exe, skipping. [Err: F:\wv\src\tools\buildtools\external_bin\gsutil\gsutil_4.15\gsutil\third_party\boto\boto\pyami\config.py:71: UserWarning: Unable to load AWS_CREDENTIAL_FILE ()
</span><span class='line'>  warnings.warn('Unable to load AWS_CREDENTIAL_FILE (%s)' % full_path)
</span><span class='line'>Failure: Unable to find the server at www.googleapis.com.
</span><span class='line'>]
</span><span class='line'>Downloading 1 files took 3153.963000 second(s)
</span><span class='line'>Failed to fetch file gs://chromium-clang-format/6ddedd571c56b8c184f30a3c1fc36984e8c10ccd for tools/buildtools/win/clang-format.exe. [Err: F:\wv\src\tools\buildtools\external_bin\gsutil\gsutil_4.15\gsutil\third_party\boto\boto\pyami\config.py:71: UserWarning: Unable to load AWS_CREDENTIAL_FILE ()
</span><span class='line'>  warnings.warn('Unable to load AWS_CREDENTIAL_FILE (%s)' % full_path)
</span><span class='line'>Failure: Unable to find the server at www.googleapis.com.
</span><span class='line'>]
</span><span class='line'>CMake Error at CMakeLists.txt:265 (message):
</span><span class='line'>  Execution failed with unexpected result: 1
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>-- Configuring incomplete, errors occurred!
</span><span class='line'>See also "F:/wv/src/jcef_build/CMakeFiles/CMakeOutput.log".
</span><span class='line'>
</span><span class='line'>&lt;&lt;== https://my.oschina.net/penngo/blog/1538071
</span><span class='line'>&lt;&lt;&lt;&lt;----https://storage.googleapis.com/chromium-clang-format/6ddedd571c56b8c184f30a3c1fc36984e8c10ccd
</span><span class='line'>~~~~~~
</span><span class='line'>
</span><span class='line'>F:\wv\src\jcef_build&gt;cmake -G "Visual Studio 14 Win64" ..
</span><span class='line'>-- Selecting Windows SDK version  to target Windows 10.0.16299.
</span><span class='line'>CMake Warning (dev) at CMakeLists.txt:153 (find_package):
</span><span class='line'>  Policy CMP0074 is not set: find_package uses &lt;PackageName&gt;_ROOT variables.
</span><span class='line'>  Run "cmake --help-policy CMP0074" for policy details.  Use the cmake_policy
</span><span class='line'>  command to set the policy and suppress this warning.
</span><span class='line'>
</span><span class='line'>  CMake variable CEF_ROOT is set to:
</span><span class='line'>
</span><span class='line'>    F:/wv/src/third_party/cef/cef_binary_3.3497.1831.g461fa1f_windows64
</span><span class='line'>
</span><span class='line'>  For compatibility, CMake is ignoring the variable.
</span><span class='line'>This warning is for project developers.  Use -Wno-dev to suppress it.
</span><span class='line'>
</span><span class='line'>-- Generating native/jcef_version.h file...
</span><span class='line'>File native/jcef_version.h is already up to date.
</span><span class='line'>-- Downloading clang-format from Google Storage...
</span><span class='line'>0&gt; File tools/buildtools/win/clang-format.exe exists and SHA1 matches. Skipping.
</span><span class='line'>Success!
</span><span class='line'>Downloading 1 files took 0.006000 second(s)
</span><span class='line'>-- *** CEF CONFIGURATION SETTINGS ***
</span><span class='line'>-- Generator:                    Visual Studio 14 2015 Win64
</span><span class='line'>-- Platform:                     Windows
</span><span class='line'>-- Project architecture:         x86_64
</span><span class='line'>-- Binary distribution root:     F:/wv/src/third_party/cef/cef_binary_3.3497.1831.g461fa1f_windows64
</span><span class='line'>-- CEF Windows sandbox:          ON
</span><span class='line'>-- Visual Studio ATL support:    ON
</span><span class='line'>-- Standard libraries:           comctl32.lib;rpcrt4.lib;shlwapi.lib;ws2_32.lib;dbghelp.lib;psapi.lib;version.lib;winmm.lib
</span><span class='line'>-- Compile defines:              __STDC_CONSTANT_MACROS;__STDC_FORMAT_MACROS;WIN32;_WIN32;_WINDOWS;UNICODE;_UNICODE;WINVER=0x0601;_WIN32_WINNT=0x601;NOMINMAX;WIN32_LEAN_AND_MEAN;_HAS_EXCEPTIONS=0;PSAPI_VERSION=1;CEF_USE_SANDBOX;CEF_USE_ATL
</span><span class='line'>-- Compile defines (Debug):
</span><span class='line'>-- Compile defines (Release):    NDEBUG;_NDEBUG
</span><span class='line'>-- C compile flags:              /MP;/Gy;/GR-;/W4;/WX;/wd4100;/wd4127;/wd4244;/wd4481;/wd4512;/wd4701;/wd4702;/wd4996;/Zi
</span><span class='line'>-- C compile flags (Debug):      /MTd;/RTC1;/Od
</span><span class='line'>-- C compile flags (Release):    /MT;/O2;/Ob2;/GF
</span><span class='line'>-- C++ compile flags:            /MP;/Gy;/GR-;/W4;/WX;/wd4100;/wd4127;/wd4244;/wd4481;/wd4512;/wd4701;/wd4702;/wd4996;/Zi
</span><span class='line'>-- C++ compile flags (Debug):    /MTd;/RTC1;/Od
</span><span class='line'>-- C++ compile flags (Release):  /MT;/O2;/Ob2;/GF
</span><span class='line'>-- Exe link flags:                /MANIFEST:NO;/LARGEADDRESSAWARE
</span><span class='line'>-- Exe link flags (Debug):       /DEBUG
</span><span class='line'>-- Exe link flags (Release):
</span><span class='line'>-- Shared link flags:
</span><span class='line'>-- Shared link flags (Debug):    /DEBUG
</span><span class='line'>-- Shared link flags (Release):
</span><span class='line'>-- CEF Binary files:             chrome_elf.dll;d3dcompiler_43.dll;d3dcompiler_47.dll;libcef.dll;libEGL.dll;libGLESv2.dll;natives_blob.bin;snapshot_blob.bin;v8_context_snapshot.bin;swiftshader
</span><span class='line'>-- CEF Resource files:           cef.pak;cef_100_percent.pak;cef_200_percent.pak;cef_extensions.pak;devtools_resources.pak;icudtl.dat;locales
</span><span class='line'>-- *** JCEF CONFIGURATION SETTINGS ***
</span><span class='line'>-- Python executable:            C:/Python27/python.exe
</span><span class='line'>-- Java directory:               C:/Java/jdk
</span><span class='line'>-- JNI libraries:                C:/Java/jdk/lib/jawt.lib;C:/Java/jdk/lib/jvm.lib
</span><span class='line'>-- JNI include directories:      C:/Java/jdk/include;C:/Java/jdk/include/win32;C:/Java/jdk/include
</span><span class='line'>-- Configuring done
</span><span class='line'>-- Generating done
</span><span class='line'>-- Build files have been written to: F:/wv/src/jcef_build
</span><span class='line'>
</span><span class='line'>F:\wv\src\jcef_build&gt;
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://winseliu.com/images/blogs/jcef/vs2017.png" alt="" /></p>

<p><img src="http://winseliu.com/images/blogs/jcef/compile.png" alt="" /></p>

<p><img src="http://winseliu.com/images/blogs/jcef/run.png" alt="" /></p>

<p><img src="http://winseliu.com/images/blogs/jcef/run-windows.png" alt="" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>F:\wv\src\tools&gt;make_distrib.bat win64
</span><span class='line'>正在加载程序包org.cef.browser的源文件...
</span><span class='line'>正在加载程序包org.cef.browser.mac的源文件...
</span><span class='line'>正在加载程序包org.cef.callback的源文件...
</span><span class='line'>正在加载程序包org.cef的源文件...
</span><span class='line'>正在加载程序包org.cef.handler的源文件...
</span><span class='line'>正在加载程序包org.cef.misc的源文件...
</span><span class='line'>正在加载程序包org.cef.network的源文件...
</span><span class='line'>正在构造 Javadoc 信息...
</span><span class='line'>.\org\cef\browser\CefRenderer.java:11: 错误: 程序包com.jogamp.opengl不存在
</span><span class='line'>import com.jogamp.opengl.GL2;
</span><span class='line'>                        ^
</span><span class='line'>.\org\cef\browser\CefRenderer.java:15: 错误: 找不到符号
</span><span class='line'>    private GL2 initialized_context_ = null;
</span><span class='line'>            ^
</span><span class='line'>  符号:   类 GL2
</span><span class='line'>  位置: 类 CefRenderer
</span><span class='line'>.\org\cef\browser\CefRenderer.java:34: 错误: 找不到符号
</span><span class='line'>    protected void initialize(GL2 gl2) {
</span><span class='line'>                              ^
</span><span class='line'>  符号:   类 GL2
</span><span class='line'>  位置: 类 CefRenderer
</span><span class='line'>.\org\cef\browser\CefRenderer.java:64: 错误: 找不到符号
</span><span class='line'>    protected void cleanup(GL2 gl2) {
</span><span class='line'>                           ^
</span><span class='line'>  符号:   类 GL2
</span><span class='line'>  位置: 类 CefRenderer
</span><span class='line'>.\org\cef\browser\CefRenderer.java:69: 错误: 找不到符号
</span><span class='line'>    protected void render(GL2 gl2) {
</span><span class='line'>                          ^
</span><span class='line'>  符号:   类 GL2
</span><span class='line'>  位置: 类 CefRenderer
</span><span class='line'>.\org\cef\browser\CefRenderer.java:161: 错误: 找不到符号
</span><span class='line'>    protected void onPaint(GL2 gl2, boolean popup, Rectangle[] dirtyRects, ByteBuffer buffer,
</span><span class='line'>                           ^
</span><span class='line'>  符号:   类 GL2
</span><span class='line'>  位置: 类 CefRenderer
</span><span class='line'>.\org\cef\browser\CefBrowserOsr.java:23: 错误: 程序包com.jogamp.nativewindow不存在
</span><span class='line'>import com.jogamp.nativewindow.NativeSurface;
</span><span class='line'>                              ^
</span><span class='line'>.\org\cef\browser\CefBrowserOsr.java:24: 错误: 程序包com.jogamp.opengl.awt不存在
</span><span class='line'>import com.jogamp.opengl.awt.GLCanvas;
</span><span class='line'>                            ^
</span><span class='line'>.\org\cef\browser\CefBrowserOsr.java:25: 错误: 程序包com.jogamp.opengl不存在
</span><span class='line'>import com.jogamp.opengl.GLAutoDrawable;
</span><span class='line'>                        ^
</span><span class='line'>.\org\cef\browser\CefBrowserOsr.java:26: 错误: 程序包com.jogamp.opengl不存在
</span><span class='line'>import com.jogamp.opengl.GLEventListener;
</span><span class='line'>                        ^
</span><span class='line'>.\org\cef\browser\CefBrowserOsr.java:27: 错误: 程序包com.jogamp.opengl不存在
</span><span class='line'>import com.jogamp.opengl.GLProfile;
</span><span class='line'>                        ^
</span><span class='line'>.\org\cef\browser\CefBrowserOsr.java:28: 错误: 程序包com.jogamp.opengl不存在
</span><span class='line'>import com.jogamp.opengl.GLCapabilities;
</span><span class='line'>                        ^
</span><span class='line'>.\org\cef\browser\CefBrowserOsr.java:44: 错误: 找不到符号
</span><span class='line'>    private GLCanvas canvas_;
</span><span class='line'>            ^
</span><span class='line'>  符号:   类 GLCanvas
</span><span class='line'>  位置: 类 CefBrowserOsr
</span><span class='line'>.\org\cef\browser\mac\CefBrowserWindowMac.java:9: 错误: 程序包sun.lwawt不存在
</span><span class='line'>import sun.lwawt.LWComponentPeer;
</span><span class='line'>                ^
</span><span class='line'>.\org\cef\browser\mac\CefBrowserWindowMac.java:10: 错误: 程序包sun.lwawt不存在
</span><span class='line'>import sun.lwawt.PlatformWindow;
</span><span class='line'>                ^
</span><span class='line'>.\org\cef\browser\mac\CefBrowserWindowMac.java:11: 错误: 程序包sun.lwawt.macosx不存在
</span><span class='line'>import sun.lwawt.macosx.CFRetainedResource;
</span><span class='line'>                       ^
</span><span class='line'>.\org\cef\browser\mac\CefBrowserWindowMac.java:12: 错误: 程序包sun.lwawt.macosx不存在
</span><span class='line'>import sun.lwawt.macosx.CPlatformWindow;
</span><span class='line'>                       ^
</span><span class='line'>标准 Doclet 版本 1.8.0_181
</span><span class='line'>正在构建所有程序包和类的树...
</span><span class='line'>正在生成..\out\docs\org\cef\browser\CefBrowser.html...
</span><span class='line'>正在生成..\out\docs\org\cef\browser\CefBrowserFactory.html...
</span><span class='line'>正在生成..\out\docs\org\cef\browser\CefBrowserWindow.html...
</span><span class='line'>正在生成..\out\docs\org\cef\browser\CefFrame.html...
</span><span class='line'>正在生成..\out\docs\org\cef\browser\CefMessageRouter.html...
</span><span class='line'>.\org\cef\browser\CefMessageRouter.java:185: 警告 - @return 标记没有参数。
</span><span class='line'>.\org\cef\browser\CefMessageRouter.java:185: 警告 - @param argument "config" 不是参数名称。
</span><span class='line'>正在生成..\out\docs\org\cef\browser\CefMessageRouter.CefMessageRouterConfig.html...
</span><span class='line'>正在生成..\out\docs\org\cef\browser\CefRequestContext.html...
</span><span class='line'>。。。
</span><span class='line'>正在生成..\out\docs\constant-values.html...
</span><span class='line'>正在构建所有程序包和类的索引...
</span><span class='line'>正在生成..\out\docs\overview-tree.html...
</span><span class='line'>正在生成..\out\docs\index-all.html...
</span><span class='line'>正在构建所有类的索引...
</span><span class='line'>正在生成..\out\docs\allclasses-frame.html...
</span><span class='line'>正在生成..\out\docs\allclasses-noframe.html...
</span><span class='line'>正在生成..\out\docs\index.html...
</span><span class='line'>正在生成..\out\docs\overview-summary.html...
</span><span class='line'>正在生成..\out\docs\help-doc.html...
</span><span class='line'>29 个警告
</span><span class='line'>已复制         1 个文件。
</span><span class='line'>已复制         1 个文件。
</span><span class='line'>已复制         1 个文件。
</span><span class='line'>已复制         1 个文件。
</span><span class='line'>已复制         1 个文件。
</span><span class='line'>已复制         1 个文件。
</span><span class='line'>F:\wv\src\java\tests\detailed\BrowserFrame.java -&gt; F:\wv\src\binary_distrib\win64\bin\tests\detailed\BrowserFrame.java
</span><span class='line'>F:\wv\src\java\tests\detailed\MainFrame.java -&gt; F:\wv\src\binary_distrib\win64\bin\tests\detailed\MainFrame.java
</span><span class='line'>。。。
</span><span class='line'>F:\wv\src\java\tests\detailed\ui\StatusPanel.java -&gt; F:\wv\src\binary_distrib\win64\bin\tests\detailed\ui\StatusPanel.java
</span><span class='line'>F:\wv\src\java\tests\simple\MainFrame.java -&gt; F:\wv\src\binary_distrib\win64\bin\tests\simple\MainFrame.java
</span><span class='line'>复制了 34 个文件
</span><span class='line'>已复制         1 个文件。
</span><span class='line'>已复制         1 个文件。
</span><span class='line'>已复制         1 个文件。
</span><span class='line'>系统找不到指定的文件。
</span><span class='line'>已复制         1 个文件。
</span><span class='line'>已复制         1 个文件。
</span><span class='line'>已复制         1 个文件。
</span><span class='line'>已复制         1 个文件。
</span><span class='line'>已复制         1 个文件。
</span><span class='line'>已复制         1 个文件。
</span><span class='line'>已复制         1 个文件。
</span><span class='line'>已复制         1 个文件。
</span><span class='line'>已复制         1 个文件。
</span><span class='line'>F:\wv\src\jcef_build\native\Release\cef.pak -&gt; F:\wv\src\binary_distrib\win64\bin\lib\win64\cef.pak
</span><span class='line'>F:\wv\src\jcef_build\native\Release\cef_100_percent.pak -&gt; F:\wv\src\binary_distrib\win64\bin\lib\win64\cef_100_percent.pak
</span><span class='line'>。。。
</span><span class='line'>F:\wv\src\jcef_build\native\Release\locales\zh-CN.pak -&gt; F:\wv\src\binary_distrib\win64\bin\lib\win64\locales\zh-CN.pak
</span><span class='line'>F:\wv\src\jcef_build\native\Release\locales\zh-TW.pak -&gt; F:\wv\src\binary_distrib\win64\bin\lib\win64\locales\zh-TW.pak
</span><span class='line'>复制了 58 个文件
</span><span class='line'>F:\wv\src\jcef_build\native\Release\swiftshader\libEGL.dll -&gt; F:\wv\src\binary_distrib\win64\bin\lib\win64\swiftshader\libEGL.dll
</span><span class='line'>F:\wv\src\jcef_build\native\Release\swiftshader\libGLESv2.dll -&gt; F:\wv\src\binary_distrib\win64\bin\lib\win64\swiftshader\libGLESv2.dll
</span><span class='line'>复制了 2 个文件
</span><span class='line'>F:\wv\src\out\docs\allclasses-frame.html -&gt; F:\wv\src\binary_distrib\win64\docs\allclasses-frame.html
</span><span class='line'>F:\wv\src\out\docs\allclasses-noframe.html -&gt; F:\wv\src\binary_distrib\win64\docs\allclasses-noframe.html
</span><span class='line'>。。。
</span><span class='line'>F:\wv\src\out\docs\org\cef\network\package-summary.html -&gt; F:\wv\src\binary_distrib\win64\docs\org\cef\network\package-summary.html
</span><span class='line'>F:\wv\src\out\docs\org\cef\network\package-tree.html -&gt; F:\wv\src\binary_distrib\win64\docs\org\cef\network\package-tree.html
</span><span class='line'>复制了 151 个文件
</span><span class='line'>Creating README.TXT file.
</span><span class='line'>已复制         1 个文件。
</span><span class='line'>F:\wv\src\third_party\jogamp\gluegen.LICENSE.txt -&gt; F:\wv\src\binary_distrib\win64\gluegen.LICENSE.txt
</span><span class='line'>F:\wv\src\third_party\jogamp\jogl.LICENSE.txt -&gt; F:\wv\src\binary_distrib\win64\jogl.LICENSE.txt
</span><span class='line'>复制了 2 个文件
</span><span class='line'>F:\wv\src\tools\distrib\win64\compile.bat -&gt; F:\wv\src\binary_distrib\win64\compile.bat
</span><span class='line'>F:\wv\src\tools\distrib\win64\run.bat -&gt; F:\wv\src\binary_distrib\win64\run.bat
</span><span class='line'>复制了 2 个文件
</span><span class='line'>
</span><span class='line'>F:\wv\src\tools&gt;</span></code></pre></td></tr></table></div></figure>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[视频自动翻译]]></title>
    <link href="http://winseliu.com/blog/2018/08/25/video-auto-translate/"/>
    <updated>2018-08-25T21:27:54+08:00</updated>
    <id>http://winseliu.com/blog/2018/08/25/video-auto-translate</id>
    <content type="html"><![CDATA[<p>现在语音翻译应用越来越广泛了。其实视频内的音频应该也可以通过语音的处理方式，来达到添加字幕以及翻译的效果。</p>

<p>google翻译页面已有语音输入的按钮，只是需要我们把电脑的声音转换作为 <strong>电脑输入</strong> 就行了。</p>

<h2>语音识别翻译</h2>

<p><a href="https://speechlogger.appspot.com/zh/">https://speechlogger.appspot.com/zh/</a></p>

<p>翻译</p>

<ul>
<li><a href="https://translate.google.cn">https://translate.google.cn</a></li>
<li><a href="https://www.google.com/intl/en/chrome/demos/speech.html">https://www.google.com/intl/en/chrome/demos/speech.html</a></li>
</ul>


<h2>处理方法</h2>

<h4>转换的工具</h4>

<p>第一种（推荐）: 使用 <a href="https://www.vb-audio.com/Voicemeeter/index.htm">VoiceMeeter</a></p>

<ul>
<li><a href="https://www.youtube.com/watch?v=91acHQfYj48">Speechlogger可以边看国外视频边翻译，如果无法识别音频怎么办？</a></li>
</ul>


<p>第二种：使用 <a href="https://software.muzychenko.net/eng/vac.htm#download">virtual audio cable sofeware</a></p>

<ul>
<li><a href="https://www.youtube.com/watch?v=CleLvQWy8-c">How to convert audio to text (mp3 to text)</a></li>
</ul>


<h4>步骤：</h4>

<ol>
<li>安装（任意一种）转换工具</li>
<li>设置 <strong>播放设备</strong></li>
<li>在浏览器中点击录音按钮后，点击浏览器地址栏的右侧麦克风按钮，设置 <strong>麦克风</strong> 的设备</li>
<li>（可选）如果要翻译同时自己也听到，打开 Voicemeeter 软件就行了，程序会自动输出选择一个输出。</li>
</ol>


<p>记住，不能静音，同时要打开麦克风！！</p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[斐讯K2刷机记录]]></title>
    <link href="http://winseliu.com/blog/2018/06/20/k2-reburn/"/>
    <updated>2018-06-20T23:08:28+08:00</updated>
    <id>http://winseliu.com/blog/2018/06/20/k2-reburn</id>
    <content type="html"><![CDATA[<p>很久以前就在JD弄了一个K2，当时没有啥需求，所以也没有折腾 。最近尝试DDNS域名绑定到动态的IP，想在家有一个能提供SSH访问的机器。原来的树莓派被弄坏了，就想着折腾折腾刷刷K2，在上面安装一个SSH。</p>

<p>同时也把官网提供的系统净化净化。</p>

<h2>原K2的详细信息</h2>

<p><a href="https://item.jd.com/2615810.html">斐讯K2 1200M智能双频无线路由器 WIFI穿墙 PSG1218</a></p>

<h2>了解刷机流程</h2>

<ul>
<li>官方版本可能存在的问题：</li>
</ul>


<p><a href="http://www.right.com.cn/forum/thread-208302-1-1.html">http://www.right.com.cn/forum/thread-208302-1-1.html</a></p>

<ul>
<li>刷机直接参考</li>
</ul>


<p><a href="http://www.right.com.cn/forum/thread-208753-1-1.html">【2017-12-01】斐讯K2 V22.5.9.163官方固件定制版,集成breed,支持官版直刷【V1.8】</a></p>

<h2>详细步骤</h2>

<ol>
<li><p>更新版本到 V22.5.9.163</p>

<p>查看官网提供的<a href="http://www.phicomm.com/cn/support.php/Soho/software_support/t/sm.html">软件</a>， 下载<a href="http://www.phicomm.com/cn/support.php/Soho/search_support/col/6/keys/k2.html">对应的版本</a></p>

<ul>
<li>K2_A2_V21.4.6.12.bin</li>
<li>K2_V22.5.9.163.bin</li>
</ul>
</li>
<li><p>刷净化版（带Bread）k2_163_v18_breed.rar</p>

<ul>
<li><p><a href="http://woo.iytc.net/?dir=uploads/K2">下载地址</a></p></li>
<li><p><a href="http://www.qqgzs.com/archives/k2-shuaji.html">breed刷入第三方固件</a></p>

<p> 进入Bread方法，这个了解下就行，这里不刷第三方的。</p>

<p> 拔除K2上Wan口的网线，路由器断电，持续按住路由器上的reset按钮，接通路由器电源，3秒后松开reset按钮。
 在浏览器地址栏输入 <a href="http://192.168.1.1">http://192.168.1.1</a> 访问Breed Web。</p></li>
</ul>
</li>
<li><p>启动telnet/手动安装SSH</p>

<ul>
<li><a href="http://iytc.net/wordpress/?p=1624">http://iytc.net/wordpress/?p=1624</a></li>
</ul>
</li>
</ol>


<p>3.1. 启动telnet</p>

<p>用 高级设置 - 系统设置 - WebShell 执行命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/www/cgi-bin# /usr/sbin/telnetd -l /bin/login.sh</span></code></pre></td></tr></table></div></figure>


<p>直接连，不用密码！！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>winse@DESKTOP-ADH7K1Q:~$ telnet 192.168.2.1</span></code></pre></td></tr></table></div></figure>


<p>同时修改下密码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 更改root密码为 admin
</span><span class='line'>echo -e 'admin\nadmin' | passwd root</span></code></pre></td></tr></table></div></figure>


<p>3.2. 安装SSH</p>

<p>这个版本没有带opkg，需要首先把opkg安装好。</p>

<ul>
<li><a href="https://www.ywlib.com/archives/102.html">小米路由3安装opkg</a></li>
<li><a href="https://www.ywlib.com/archives/101.html">解压OpenWRT固件bin文档提取文件</a></li>
</ul>


<p>直接下载 <a href="http://www.ywlib.com/usr/uploads/2017/05/387250260.zip">opkg.zip</a> 然后本地起一个 httpserver 提供一个下载的服务。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>winse@DESKTOP-ADH7K1Q:/mnt/e/SOFTWARE/k2$ python -m SimpleHTTPServer
</span><span class='line'>Serving HTTP on 0.0.0.0 port 8000 ...</span></code></pre></td></tr></table></div></figure>


<p>在telnet窗口执行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@K2:/www/cgi-bin# cd /bin
</span><span class='line'>root@K2:/bin# wget http://192.168.2.160:8000/opkg
</span><span class='line'>--2018-06-20 22:50:18--  http://192.168.2.160:8000/opkg
</span><span class='line'>Connecting to 192.168.2.160:8000... connected.
</span><span class='line'>HTTP request sent, awaiting response... 200 OK
</span><span class='line'>Length: 130247 (127K) [application/octet-stream]
</span><span class='line'>Saving to: 'opkg'
</span><span class='line'>
</span><span class='line'>opkg                                  100%[=========================================================================&gt;] 127.19K   176KB/s   in 0.7s
</span><span class='line'>
</span><span class='line'>2018-06-20 22:50:18 (176 KB/s) - 'opkg' saved [130247/130247]
</span><span class='line'>
</span><span class='line'>root@K2:/bin# chmod +x opkg</span></code></pre></td></tr></table></div></figure>


<pre><code>注意：用完后就删掉吧 `rm -rf /bin/opkg` ，空间不够！！查看[安装了那些软件](https://unix.stackexchange.com/questions/157097/how-to-know-disk-space-occupied-by-packages-in-openwrt)

```
rm -rf /bin/opkg

root@K2:/overlay# du -sh */*/*
root@K2:/overlay# rm -rf usr/lib/opkg
```
</code></pre>

<p>然后安装ssh：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>opkg install http://downloads.openwrt.org/barrier_breaker/14.07/ramips/mt7620a/packages/base/dropbear_2014.63-2_ramips_24kec.ipk
</span><span class='line'># 开机自启
</span><span class='line'>/etc/init.d/dropbear enable
</span><span class='line'>
</span><span class='line'># https://openwrt.org/docs/guide-user/base-system/ssh_configuration
</span><span class='line'># https://wiki.openwrt.org/doc/uci/dropbear
</span><span class='line'>vi /etc/config/dropbear
</span><span class='line'>        option GatewayPorts '1'
</span><span class='line'>        
</span><span class='line'># 启动
</span><span class='line'>/etc/init.d/dropbear start
</span><span class='line'>
</span><span class='line'>uci show dropbear
</span><span class='line'>
</span><span class='line'># 如果需要放开防火墙
</span><span class='line'>iptables -I INPUT 1 -p tcp -m tcp --dport 22 -j ACCEPT
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>vi /etc/firewall.user
</span><span class='line'># 删除无用文件
</span><span class='line'>rm -rf /etc/dropbear/dropbear_dss_host_key</span></code></pre></td></tr></table></div></figure>


<p>注意：需要持久化的话，把这句开放22端口的指令写到 /etc/firewall.user 。</p>

<p>客户端登录：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>winse@DESKTOP-ADH7K1Q:~$ ssh root@192.168.2.1
</span><span class='line'>The authenticity of host '192.168.2.1 (192.168.2.1)' can't be established.
</span><span class='line'>RSA key fingerprint is SHA256:vuAY65qk3Us4MyjYT8KPT8lYsTSTqru6W4e7My6CRkk.
</span><span class='line'>Are you sure you want to continue connecting (yes/no)? yes
</span><span class='line'>Warning: Permanently added '192.168.2.1' (RSA) to the list of known hosts.
</span><span class='line'>root@192.168.2.1's password:
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>BusyBox v1.22.1 (2017-02-15 13:52:46 CST) built-in shell (ash)
</span><span class='line'>Enter 'help' for a list of built-in commands.
</span><span class='line'>
</span><span class='line'>    ___  __ _______________  __  _____  ___  ________  ___
</span><span class='line'>   / _ \/ // /  _/ ___/ __ \/  |/  /  |/  / / __/ __ \/ _ \
</span><span class='line'>  / ___/ _  // // /__/ /_/ / /|_/ / /|_/ / _\ \/ /_/ / ___/
</span><span class='line'> /_/  /_//_/___/\___/\____/_/  /_/_/  /_/ /___/\____/_/
</span><span class='line'> ----------------------------------------------------------
</span><span class='line'> Barrier Breaker, unknown
</span><span class='line'> ----------------------------------------------------------
</span><span class='line'> PID=K2
</span><span class='line'> BUILD_TYPE=release
</span><span class='line'> BUILD_NUMBER=163
</span><span class='line'> BUILD_TIME=20170215-134532
</span><span class='line'> ----------------------------------------------------------
</span><span class='line'> MTK OpenWrt SDK V3.4
</span><span class='line'> revision : adab2180
</span><span class='line'> benchmark : APSoC SDK 5.0.1.0
</span><span class='line'> kernel : 144992
</span><span class='line'> ----------------------------------------------------------
</span><span class='line'>root@K2:~#</span></code></pre></td></tr></table></div></figure>


<p>不推荐用密码，最好使用公钥的方式来处理。<del>但公钥访问有点问题，.ssh的目录权限是个麻烦事</del> （其实文件的位置不对！！）。</p>

<p>参考： <a href="https://wiki.openwrt.org/doc/howto/dropbear.public-key.auth">Dropbear public-key authentication HowTo</a></p>

<blockquote><p>ssh <a href="&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#114;&#x6f;&#111;&#x74;&#64;&#49;&#x39;&#50;&#46;&#49;&#54;&#56;&#x2e;&#x31;&#46;&#49;">&#x72;&#x6f;&#x6f;&#116;&#64;&#49;&#57;&#50;&#46;&#49;&#54;&#56;&#46;&#x31;&#x2e;&#x31;</a> &ldquo;tee -a /etc/dropbear/authorized_keys&rdquo; &lt; ~/.ssh/id_rsa.pub</p></blockquote>

<p>把 authorized_keys 文件移到 /etc/dropbear 下面就可以了！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@K2:~/.ssh# ls -la
</span><span class='line'>drwx------    2 root     root             0 Jun 21 10:35 .
</span><span class='line'>drwx------    1 root     root             0 Jun 21 08:57 ..
</span><span class='line'>-rw-------    1 root     root           397 Jun 21 10:35 authorized_keys
</span><span class='line'>root@K2:~/.ssh# mv authorized_keys /etc/dropbear/
</span></code></pre></td></tr></table></div></figure>


<h2>其他拓展</h2>

<h3>增加空间，挂载windows共享目录</h3>

<p><a href="https://blog.vircloud.net/linux/openwrt-psg1218.html">https://blog.vircloud.net/linux/openwrt-psg1218.html</a></p>

<p>K2 官方版式不带 USB，因此就限制了很多可玩的东西，但是我们可以通过 SMB 挂载的方式来增加存储空间，需要注意的是老毛子挂载 SMB 的方式与其他 OpenWRT 不同，使用 mount 命令是挂载不成功的，正确的方法是：</p>

<p>位置：高级设置 - 自定义设置 - 脚本 - 在路由器启动后执行
配置如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>### SMB资源挂载(局域网共享映射，无USB也能挂载储存空间)
</span><span class='line'>### 说明：共享路径填写时，【\】要写成【\\】。
</span><span class='line'>sleep 10
</span><span class='line'>modprobe des_generic
</span><span class='line'>modprobe cifs CIFSMaxBufSize=64512
</span><span class='line'>#mkdir -p /media/cifs
</span><span class='line'>#mount -t cifs \\\\{host}\\{share} /media/cifs -o username={user},password={pass}
</span><span class='line'>mount -t cifs \\\\192.168.31.100\\移动磁盘-C /mnt -o username=guest,password=guest
</span><span class='line'>
</span><span class='line'>sleep 10
</span><span class='line'>mdev -s
</span><span class='line'>sleep 5
</span><span class='line'>stop_ftpsamba
</span><span class='line'>sleep 2
</span><span class='line'>run_ftpsamba
</span><span class='line'>sleep 5
</span></code></pre></td></tr></table></div></figure>


<h3>Breed进入方式</h3>

<ol>
<li>将要刷的第三方固件准备好。</li>
<li>断电按着reset键不松手，然后通电5秒后再松开reset键。</li>
<li>打开浏览器输入<a href="http://192.168.1.1%E5%8D%B3%E5%8F%AFBreed">http://192.168.1.1%E5%8D%B3%E5%8F%AFBreed</a> Web恢复控制台（记得先在Breed Web恢复控制台中的固件备份里备份下EEPROM和编程器固件，以后可能用得着）。</li>
<li>恢复固件之前最好在Breed Web恢复控制台恢复一下出厂设置，固件类型：Config区（公版）</li>
</ol>


<p>参考：</p>

<ul>
<li><a href="https://github.com/moonjoin/k2-firmware">https://github.com/moonjoin/k2-firmware</a></li>
<li><a href="http://www.right.com.cn/forum/thread-161324-1-1.html">http://www.right.com.cn/forum/thread-161324-1-1.html</a></li>
<li><a href="https://www.c7cc.com/shuaji-chaiji/k1-k2-v21-4-6-10-telnet-ssh.html">https://www.c7cc.com/shuaji-chaiji/k1-k2-v21-4-6-10-telnet-ssh.html</a></li>
<li><a href="http://www.mm126.cc/319.html">http://www.mm126.cc/319.html</a></li>
<li><a href="http://www.qqgzs.com/archives/k2-22-6-503.html">http://www.qqgzs.com/archives/k2-22-6-503.html</a></li>
</ul>


<h2>其他参考</h2>

<ul>
<li><a href="https://www.jianshu.com/p/6be3639ff9e3">https://www.jianshu.com/p/6be3639ff9e3</a></li>
<li><a href="http://www.right.com.cn/forum/thread-184338-1-1.html">http://www.right.com.cn/forum/thread-184338-1-1.html</a></li>
<li><a href="http://www.cnblogs.com/lanye/p/6149242.html">http://www.cnblogs.com/lanye/p/6149242.html</a> 刷入 breed 和 ssh</li>
<li><a href="http://www.right.com.cn/forum/thread-189593-1-2.html">http://www.right.com.cn/forum/thread-189593-1-2.html</a> 安装SSH也是有多种方法</li>
<li><a href="https://www.cnblogs.com/xuliangxing/p/6486560.html">https://www.cnblogs.com/xuliangxing/p/6486560.html</a></li>
<li><a href="https://www.jianshu.com/p/275217976492">https://www.jianshu.com/p/275217976492</a> LEDE 是一个从 OpenWrt 中衍生出来的产品</li>
<li><a href="https://downloads.lede-project.org/releases/17.01.4/targets/ramips/mt7620/">https://downloads.lede-project.org/releases/17.01.4/targets/ramips/mt7620/</a></li>
<li><a href="https://bitbucket.org/stevengan/padavan/downloads/">https://bitbucket.org/stevengan/padavan/downloads/</a></li>
<li><a href="https://blog.aofall.com/archives/14.html">https://blog.aofall.com/archives/14.html</a></li>
<li><a href="http://www.hopol.cn/2017/05/853/">http://www.hopol.cn/2017/05/853/</a> 斐讯K2 163版配置文件加密破解过程。学学c++是怎么反编译的！！！！</li>
</ul>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用VMWare安装Mac OS X]]></title>
    <link href="http://winseliu.com/blog/2018/06/19/install-macosx-on-vmware/"/>
    <updated>2018-06-19T23:05:55+08:00</updated>
    <id>http://winseliu.com/blog/2018/06/19/install-macosx-on-vmware</id>
    <content type="html"><![CDATA[<p>参考：</p>

<ul>
<li><a href="http://www.yhy0.com/ios_20160413_269.html">VMware Workstation 12 Pro如何安装Mac OS X 10.11.1</a></li>
<li><a href="https://blog.csdn.net/yongh701/article/details/70597982">【iOS】VMWare中MAC OS X的安装，VMWare tools的配置与iOS的Helloworld</a></li>
</ul>


<p>实际操作：</p>

<ul>
<li>安装 VMware-workstation-full-12.5.7-5813279 。</li>
<li>下载 unlocker208.zip 并使用管理员权限安装 win-install.cmd 。</li>
<li>添加虚拟机，选择 Apple Mac OS X(M) - OS X 10.9；然后修改vmx配置，在 <code>smc.present = "TRUE"</code> 后面添加 <code>smc.version = "0"</code></li>
<li>然后光盘选择 Mavericks_Install_13A603.cdr 安装系统。磁盘格式化：<code>实用工具 - 磁盘工具</code> 。</li>
<li>安装VMWare Tools。光盘选择 darwiniso.zip 压缩包里面的 darwin6.0.3.iso 。</li>
<li>配置共享文件夹。进入系统后，<code>Finder - 偏好设置 -  已连接的服务器</code> 。</li>
</ul>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用注解生成代码]]></title>
    <link href="http://winseliu.com/blog/2018/06/10/java-source-annotation-processor/"/>
    <updated>2018-06-10T12:51:39+08:00</updated>
    <id>http://winseliu.com/blog/2018/06/10/java-source-annotation-processor</id>
    <content type="html"><![CDATA[<p>Java里面随处可见annotation（注解），RetentionPolicy 指示了注解使用的情况：</p>

<ul>
<li>SOURCE，比如 @Override, @SuppressWarnings</li>
<li>RUNTIME，最熟悉的莫过于Spring Bean中使用的 @Controller, @Service 一般和反射同时使用。</li>
<li>CLASS</li>
</ul>


<p>而 CLASS 则是用于 compile 编译阶段的注解。一个注解的处理器，以Java代码（或编译过的字节码）作为输入，生成Java文件。这些生成的Java文件，会同其他普通的手动编写的Java源代码一样被javac编译。</p>

<p>可以自己实现一些类似groovy语法糖的功能（lombok框架修改bytecode为类生成新方法getter/setter、或者使用生成新的辅助类等）；减少机械的、冗余代码的管理，使得代码更简洁便于阅读。</p>

<h2>代码生成</h2>

<p>先来了解下整个过程，javac 从 ServiceLoader 获取一个 Processor 标注处理类，判断是否为符合条件的标注，再收集类的相关信息，然后使用 Filer 创建新的类。<a href="http://www.baeldung.com/java-annotation-processing-builder">Java Annotation Processing and Creating a Builder</a> ，<a href="https://liuzhengyang.github.io/2017/10/20/annotation-processing/">java annotation processor</a> 主要涉及到如下三部分：</p>

<ul>
<li>Annotation: @BuilderProperty</li>
<li>Processor: BuilderProcessor</li>
<li><p>Service:</p>

<p>通过google的auto-service来注册服务，最终会在 META-INF/services/ 生成名称为 javax.annotation.processing.Processor 的文件，内容为当前被标注的类名。</p></li>
</ul>


<p>项目的目录结构如下：</p>

<p><img src="http://winseliu.com/images/blogs/annotation-processor-projects.png" alt="" /></p>

<h3>具体实现：</h3>

<ul>
<li>BuilderProperty 注解</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.github.winse.annotation;
</span><span class='line'>
</span><span class='line'>import java.lang.annotation.ElementType;
</span><span class='line'>import java.lang.annotation.Retention;
</span><span class='line'>import java.lang.annotation.RetentionPolicy;
</span><span class='line'>import java.lang.annotation.Target;
</span><span class='line'>
</span><span class='line'>@Target(ElementType.METHOD)
</span><span class='line'>@Retention(RetentionPolicy.SOURCE)
</span><span class='line'>public @interface BuilderProperty {
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>BuilderProcessor</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.github.winse.processor;
</span><span class='line'>
</span><span class='line'>import com.github.winse.annotation.BuilderProperty;
</span><span class='line'>import com.google.auto.service.AutoService;
</span><span class='line'>
</span><span class='line'>import javax.annotation.processing.*;
</span><span class='line'>import javax.lang.model.SourceVersion;
</span><span class='line'>import javax.lang.model.element.Element;
</span><span class='line'>import javax.lang.model.element.TypeElement;
</span><span class='line'>import javax.lang.model.type.ExecutableType;
</span><span class='line'>import javax.tools.Diagnostic;
</span><span class='line'>import javax.tools.JavaFileObject;
</span><span class='line'>import java.io.IOException;
</span><span class='line'>import java.io.PrintWriter;
</span><span class='line'>import java.util.List;
</span><span class='line'>import java.util.Map;
</span><span class='line'>import java.util.Set;
</span><span class='line'>import java.util.stream.Collectors;
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * @see BuilderProperty
</span><span class='line'> */
</span><span class='line'>@SupportedAnnotationTypes("com.github.winse.annotation.BuilderProperty")
</span><span class='line'>@SupportedSourceVersion(SourceVersion.RELEASE_8)
</span><span class='line'>@AutoService(Processor.class)
</span><span class='line'>public class BuilderProcessor extends AbstractProcessor {
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    public boolean process(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv) {
</span><span class='line'>        for (TypeElement annotation : annotations) {
</span><span class='line'>            Set&lt;? extends Element&gt; annotationElements = roundEnv.getElementsAnnotatedWith(annotation);
</span><span class='line'>
</span><span class='line'>            Map&lt;Boolean, List&lt;Element&gt;&gt; annotationMethods = annotationElements.stream()
</span><span class='line'>                    .collect(Collectors.partitioningBy(element -&gt; ((ExecutableType) element.asType()).getParameterTypes().size() == 1 && element.getSimpleName().toString().startsWith("set")));
</span><span class='line'>
</span><span class='line'>            List&lt;Element&gt; setters = annotationMethods.get(true);
</span><span class='line'>            List&lt;Element&gt; otherMethods = annotationMethods.get(false);
</span><span class='line'>
</span><span class='line'>            otherMethods.forEach(element -&gt; processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, "@BuildProperty must be applied to a setXxx method with a single argument", element));
</span><span class='line'>
</span><span class='line'>            if (setters.isEmpty()) {
</span><span class='line'>                continue;
</span><span class='line'>            }
</span><span class='line'>
</span><span class='line'>            String className = ((TypeElement) setters.get(0).getEnclosingElement()).getQualifiedName().toString();
</span><span class='line'>
</span><span class='line'>            Map&lt;String, String&gt; setterMap = setters.stream().collect(Collectors.toMap(
</span><span class='line'>                    setter -&gt; setter.getSimpleName().toString(),
</span><span class='line'>                    setter -&gt; ((ExecutableType) setter.asType()).getParameterTypes().get(0).toString()
</span><span class='line'>            ));
</span><span class='line'>
</span><span class='line'>            try {
</span><span class='line'>                writeBuilderType(className, setterMap);
</span><span class='line'>            } catch (IOException e) {
</span><span class='line'>                processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, e.getMessage());
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>        return true;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    private void writeBuilderType(String className, Map&lt;String, String&gt; setterMap) throws IOException {
</span><span class='line'>        String packageName = null;
</span><span class='line'>        int lastDot = className.lastIndexOf(".");
</span><span class='line'>        if (lastDot &gt; 0) {
</span><span class='line'>            packageName = className.substring(0, lastDot);
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        String simpleClassName = className.substring(lastDot + 1);
</span><span class='line'>        String builderClassName = className + "Builder";
</span><span class='line'>        String builderSimpleClassName = builderClassName.substring(lastDot + 1);
</span><span class='line'>
</span><span class='line'>        JavaFileObject builderFile = processingEnv.getFiler().createSourceFile(builderClassName);
</span><span class='line'>        try (PrintWriter out = new PrintWriter(builderFile.openWriter())) {
</span><span class='line'>            if (packageName != null) {
</span><span class='line'>                out.printf("package %s;\n", packageName);
</span><span class='line'>                out.println();
</span><span class='line'>            }
</span><span class='line'>
</span><span class='line'>            out.printf("public class %s {\n", builderSimpleClassName);
</span><span class='line'>            out.println();
</span><span class='line'>            out.printf("  private %s object = new %s();\n", simpleClassName, simpleClassName);
</span><span class='line'>            out.println();
</span><span class='line'>            out.printf("  public %s build() {\n", simpleClassName);
</span><span class='line'>            out.printf("    return object;\n");
</span><span class='line'>            out.printf("  }\n");
</span><span class='line'>            out.println();
</span><span class='line'>
</span><span class='line'>            setterMap.entrySet().forEach(setter -&gt; {
</span><span class='line'>                String methodName = setter.getKey();
</span><span class='line'>                String argumentType = setter.getValue();
</span><span class='line'>
</span><span class='line'>                out.printf("  public %s %s(%s value){\n", builderSimpleClassName, methodName, argumentType);
</span><span class='line'>                out.printf("    object.%s(value);\n", methodName);
</span><span class='line'>                out.printf("    return this;\n");
</span><span class='line'>                out.printf("  }\n");
</span><span class='line'>                out.println();
</span><span class='line'>            });
</span><span class='line'>
</span><span class='line'>            out.printf("}\n");
</span><span class='line'>
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>测试使用：</h3>

<ul>
<li>build.gradle</li>
</ul>


<p>我使用的是4.7的版本，4.7及以上版本可以直接使用 annotationProcessor 来添加标注处理器。（其他版本可以使用 apt 来处理）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>plugins {
</span><span class='line'>    id "net.ltgt.apt" version "0.10"
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>sourceSets.main.java.srcDirs += ['build/generated/source/apt/main']
</span><span class='line'>
</span><span class='line'>dependencies {
</span><span class='line'>    compile rootProject
</span><span class='line'>    annotationProcessor project(':compiler')
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Person</li>
</ul>


<p>这是一个POJO类，BuilderProcessor处理器会根据BuilderProperty注解来生成PersonBuilder类。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.github.winse.example;
</span><span class='line'>
</span><span class='line'>import com.github.winse.annotation.BuilderProperty;
</span><span class='line'>
</span><span class='line'>public class Person {
</span><span class='line'>    private int age;
</span><span class='line'>    private String name;
</span><span class='line'>
</span><span class='line'>    @BuilderProperty
</span><span class='line'>    public void setAge(int age) {
</span><span class='line'>        this.age = age;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @BuilderProperty
</span><span class='line'>    public void setName(String name) {
</span><span class='line'>        this.name = name;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public int getAge() {
</span><span class='line'>        return age;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public String getName() {
</span><span class='line'>        return name;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>生成代码效果</h3>

<p>在 gradle 面板中选择子项目 <code>:example</code> ，然后选择 Tasks 下的 build 任务进行构建。构建完后在 <code>example/build/generated/source/apt</code> 目录下生成了对应的 Builder 代码。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.github.winse.example;
</span><span class='line'>
</span><span class='line'>public class PersonBuilder {
</span><span class='line'>
</span><span class='line'>  private Person object = new Person();
</span><span class='line'>
</span><span class='line'>  public Person build() {
</span><span class='line'>    return object;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public PersonBuilder setName(java.lang.String value){
</span><span class='line'>    object.setName(value);
</span><span class='line'>    return this;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public PersonBuilder setAge(int value){
</span><span class='line'>    object.setAge(value);
</span><span class='line'>    return this;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h2>注解处理器调试</h2>

<p>不会调试说明还没有真正的入门。并且没有调试的情况下，解决异常、错误也是一件异常痛苦的事情。注解处理器生成代码是在编译阶段来生成代码的，所以调试的选项配置添加到 javac 。而 gradle 提供了一种相对简单的方式来进行。</p>

<p>参考</p>

<ul>
<li><a href="https://stackoverflow.com/questions/8587096/how-do-you-debug-java-annotation-processors-using-intellij">how do you debug java annotation processors using intellij?
</a></li>
<li><a href="https://discuss.gradle.org/t/how-do-you-attach-a-debugger-to-gradle-so-that-i-can-debug-it-running-a-task/7526/5">How do you attach a debugger to gradle so that I can debug it running a task?</a></li>
</ul>


<p>具体步骤如下：</p>

<ol>
<li><p>在命令行运行构建</p>

<p>添加调试参数后，gradle 会 <strong>暂停等待远程调试</strong> ，相当于添加了 JVM 调试参数。<a href="https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_configuration_properties">Gradle properties</a></p>

<pre><code>hello-annotation-processor\example&gt;gradle clean build --no-daemon -Dorg.gradle.debug=true
或者
hello-annotation-processor&gt;gradle example:clean example:compileJava --no-daemon -Dorg.gradle.debug=true
</code></pre>

<p>注： &ndash;no-daemon 不加也是可以的，但是运行该次构建后不会停止。</p>

<p><img src="http://winseliu.com/images/blogs/annotation-processor-debug-s1.png" alt="" /></p></li>
<li><p>远程调试</p>

<p><img src="http://winseliu.com/images/blogs/annotation-processor-debug-s2.png" alt="" /></p></li>
</ol>


<h3>其他调试配置方式</h3>

<ul>
<li><p>通过环境变量</p>

<pre><code>example&gt;set GRADLE_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005

example&gt;gradle clean build
Listening for transport dt_socket at address: 5005
</code></pre></li>
<li><p>修改 ~/.gradle/gradle.properties</p>

<p>这种方式不推荐，因为它是全局的。</p>

<pre><code>org.gradle.daemon=false
org.gradle.debug=true
</code></pre>

<p>或者</p>

<pre><code>org.gradle.daemon=true
org.gradle.jvmargs=-XX:MaxPermSize=4g -XX:+HeapDumpOnOutOfMemoryError -Xmx4g -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5006

$ gradle --daemon
</code></pre>

<p>Then attach your debugger client to port 5006, set your breakpoint, then run your test.</p>

<p>注：该配置放到项目目录下没用。</p></li>
</ul>


<h2>其他</h2>

<ul>
<li>Gradle参数优化 <a href="https://stackoverflow.com/questions/16775197/building-and-running-app-via-gradle-and-android-studio-is-slower-than-via-eclips/19500539#19500539">Building and running app via Gradle and Android Studio is slower than via Eclipse</a></li>
</ul>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[科学上网（续）]]></title>
    <link href="http://winseliu.com/blog/2018/06/09/reasonable-way-to-access-the-internet/"/>
    <updated>2018-06-09T14:03:11+08:00</updated>
    <id>http://winseliu.com/blog/2018/06/09/reasonable-way-to-access-the-internet</id>
    <content type="html"><![CDATA[<p>到新的环境就会遇到新的问题，需要不断的学习更新来适应新的环境。上网也是一样，工作地点和家里存在了一道鸿沟。过去断断续续的有一些解决的方式，但是总是有点间接。</p>

<ul>
<li><a href="http://www.winseliu.com/blog/2017/11/04/teamviewer-vpn-on-windows/">使用TeamviewerVPN访问公司内网</a></li>
<li><a href="http://www.winseliu.com/blog/2017/02/04/privoxy-http-proxy-for-shadowsocks/">使用Privoxy把shadowsocks转换为Http代理</a></li>
<li><a href="http://www.winseliu.com/blog/2016/03/11/install-and-config-openvpn/">安装配置OpenVPN</a></li>
<li><a href="http://www.winseliu.com/blog/2015/11/22/gfw-ladder/">搭梯笔记</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html">SSH原理与运用（二）：远程操作与端口转发</a></li>
<li><a href="http://www.winseliu.com/blog/2015/09/06/squid-http-proxy-server-install/">安装http代理服务器squid</a></li>
<li><a href="http://www.winseliu.com/blog/2017/10/30/windows-run-ubuntu/">Windows Run Ubuntu</a></li>
</ul>


<p>上周和同事讨论到在家访问公司服务器的方式时，可以通过花生壳的DDNS来实现域名动态绑定，相当于了把家里的宽带看做一个公网IP，花生壳实时的把域名解析更新为最新的IP。</p>

<p>有了公网IP后，就可以在公司访问自己的域名（绑定到了家里的IP），然后 反向代理 就可以直接访问公司环境了。</p>

<p>但是查了下对于花生壳的口碑都不咋的，其实只要能自动的更新绑定域名和宽带的IP，和花生壳的效果是一样。然后在 github 查到了    <code>aliyun-ddns</code> 定时检测和更新阿里云上的域名解析。</p>

<p>首先通过域名映射到家里电信宽带的公网IP，ddns用来适配电信的IP是动态分配的；然后在家里的局域网机器开一个SSH的服务；再在路由上做端口转发到家里局域网的ssh。这样就可以在公司通过 <code>ssh my-domain</code> 连回家了。</p>

<h2>DDNS配置：映射域名到自己的公网IP</h2>

<p><a href="https://github.com/yyqian/aliyun-ddns">aliyun-ddns</a> 老版本有些复杂，我在此基础上一个<a href="https://github.com/winse/aliyun-ddns">本地命令行的版本</a> ，直接运行一个脚本就可以更新域名解析了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./client.sh myhome.winseliu.com</span></code></pre></td></tr></table></div></figure>


<p><img src="http://winseliu.com/images/blogs/aliyun-dns.png" alt="" /></p>

<p>注：默认电信宽带给你分配的内网IP的，你可以打10000号要他们给你分配改成公网IP。</p>

<h2>本地环境配置</h2>

<ul>
<li>本地SSHD配置</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>winse@DESKTOP-ADH7K1Q:~$ sudo dpkg-reconfigure openssh-server
</span><span class='line'>winse@DESKTOP-ADH7K1Q:~$ sudo service ssh start</span></code></pre></td></tr></table></div></figure>


<ul>
<li>无秘密登录配置</li>
</ul>


<p>为了安全，通过公网的SSH访问最好通过秘钥登录，把使用SSH的密码登录关掉。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>winse@DESKTOP-ADH7K1Q:~/.ssh$ cat /business/server/id_rsa.pub &gt;&gt;authorized_keys</span></code></pre></td></tr></table></div></figure>


<ul>
<li>本机防火墙开放22端口</li>
</ul>


<p>参考 <a href="https://blog.csdn.net/zzq900503/article/details/11936379">开放windows服务器端口&mdash;&ndash;以打开端口8080为例</a></p>

<p><img src="http://winseliu.com/images/blogs/ddns-local-firewall.png" alt="" /></p>

<ul>
<li>路由器端口映射配置</li>
</ul>


<p><img src="http://winseliu.com/images/blogs/ddns-route-portforwarding.png" alt="" /></p>

<h2>穿透：配置反向代理</h2>

<p>在公司服务器访问自己域名，使用 -R 参数在家里电脑本地创建一个5432的端口，数据转发到服务器的5432端口。当你在家连本地的 127.0.0.1:5432 就相当于连接服务器的 5432 端口。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/bin/autossh -M 0 -o ServerAliveInterval=30 -o ServerAliveCountMax=3 -o StrictHostKeyChecking=no -NR 5432:localhost:5432 autossh@myhome.winseliu.com -i ~/.ssh/id_rsa</span></code></pre></td></tr></table></div></figure>


<p>当连接太慢、SSH提示信息一直不出来，你完全有理由怀疑本地端口被占用了！！查看本地端口状态：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C:\Users\winse&gt;netstat /?
</span><span class='line'>
</span><span class='line'>C:\Users\winse&gt;netstat -ano |findstr 10022</span></code></pre></td></tr></table></div></figure>


<p>如果端口被占用了，需要去任务管理器中关掉对应的PID的程序。</p>

<h2>小结</h2>

<p>速度比 teamviewer vpn 的方式快狠多狠多！！这个10000号值得打，这个ddns值得一试。</p>

<h2>后记</h2>

<h3>说说 VS Code调试</h3>

<p>使用Ubuntu中安装的Node：</p>

<ul>
<li><a href="https://blogs.msdn.microsoft.com/commandline/2017/10/27/running-node-js-on-wsl-from-visual-studio-code/">Running Node.js on WSL from Visual Studio Code</a></li>
<li><a href="https://stackoverflow.com/a/47495710/5697508">Using Visual Studio Code on Windows with Ubuntu-Bash and NodeJS</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"useWSL": true</span></code></pre></td></tr></table></div></figure>


<p><a href="https://code.visualstudio.com/docs/nodejs/nodejs-debugging">https://code.visualstudio.com/docs/nodejs/nodejs-debugging</a></p>

<p>注意：这种外部启动的方式，会通过bash.sh运行node，所以就算停止调试后，Node进程还是一直存在的！！！需要通过任务管理器关闭。</p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解读百度的Heatmap]]></title>
    <link href="http://winseliu.com/blog/2018/05/01/heatmap-base-on-baidu/"/>
    <updated>2018-05-01T12:26:43+08:00</updated>
    <id>http://winseliu.com/blog/2018/05/01/heatmap-base-on-baidu</id>
    <content type="html"><![CDATA[<p>前面通过Map的学习，了解到了瓦片的一些知识点。地图里面热图是一个比较典型的功能。通过对聚集数据不同颜色显示，直观形象的洞察数据的规律，比如说高危区等的热点分析，有点类似于arcgis的核密度。接下来结合百度里面的热图分析下它的实现。</p>

<ul>
<li><a href="http://lbsyun.baidu.com/jsdemo/demo/c1_15.htm">热力图功能示例</a></li>
<li><a href="http://desktop.arcgis.com/zh-cn/arcmap/10.3/tools/spatial-analyst-toolbox/differences-between-point-line-and-kernel-density.htm">点密度分析、线密度分析与核密度分析之间的区别</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var points =[
</span><span class='line'>{"lng":116.418261,"lat":39.921984,"count":50},
</span><span class='line'>...
</span><span class='line'>]
</span><span class='line'>
</span><span class='line'>//详细的参数,可以查看heatmap.js的文档 https://github.com/pa7/heatmap.js/blob/master/README.md
</span><span class='line'>heatmapOverlay = new BMapLib.HeatmapOverlay({"radius":20});
</span><span class='line'>map.addOverlay(heatmapOverlay);
</span><span class='line'>heatmapOverlay.setDataSet({data:points,max:100});</span></code></pre></td></tr></table></div></figure>


<h2>setDataSet</h2>

<p>把经纬度数据先转成界面的坐标(不在界面bounds内的点会被忽略掉)，然后调用setData</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HeatmapOverlay.prototype.setDataSet = function(data) {
</span><span class='line'>    this.data = data;
</span><span class='line'>    ...
</span><span class='line'>    var currentBounds = this._map.getBounds();
</span><span class='line'>    var mapdata = {
</span><span class='line'>        max: data.max,
</span><span class='line'>        data: []
</span><span class='line'>    };
</span><span class='line'>    var d = data.data,
</span><span class='line'>        dlen = d.length;
</span><span class='line'>        
</span><span class='line'>    while (dlen--) {
</span><span class='line'>        ...
</span><span class='line'>        if (!currentBounds.containsPoint(latlng)) {
</span><span class='line'>            continue;
</span><span class='line'>        }            
</span><span class='line'>        ...
</span><span class='line'>        mapdata.data.push({
</span><span class='line'>            x: point.x,
</span><span class='line'>            y: point.y,
</span><span class='line'>            count: d[dlen].count
</span><span class='line'>        });
</span><span class='line'>    }
</span><span class='line'>    this.heatmap.setData(mapdata);
</span><span class='line'>}
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h2>setData</h2>

<p>计算最大最小，合并（对同一坐标的对应的count值求和），其中 _organiseData 根据坐标构建一个稀疏矩阵，最后emit给renderall</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>setData: function(data) {
</span><span class='line'>  var dataPoints = data.data;
</span><span class='line'>  var pointsLen = dataPoints.length;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  // reset data arrays
</span><span class='line'>  this._data = [];
</span><span class='line'>  this._radi = [];
</span><span class='line'>
</span><span class='line'>  for(var i = 0; i &lt; pointsLen; i++) {
</span><span class='line'>    this._organiseData(dataPoints[i], false);
</span><span class='line'>  }
</span><span class='line'>  this._max = data.max;
</span><span class='line'>  this._min = data.min || 0;
</span><span class='line'>  
</span><span class='line'>  this._onExtremaChange();
</span><span class='line'>  this._coordinator.emit('renderall', this._getInternalData());
</span><span class='line'>  return this;
</span><span class='line'>},
</span><span class='line'>
</span><span class='line'>_organiseData: function(dataPoint, forceRender) {
</span><span class='line'>    var x = dataPoint[this._xField];
</span><span class='line'>    var y = dataPoint[this._yField];
</span><span class='line'>    var radi = this._radi;
</span><span class='line'>    var store = this._data;
</span><span class='line'>    var max = this._max;
</span><span class='line'>    var min = this._min;
</span><span class='line'>    var value = dataPoint[this._valueField] || 1;
</span><span class='line'>    var radius = dataPoint.radius || this._cfgRadius || defaultRadius;
</span><span class='line'>    
</span><span class='line'>    ...
</span><span class='line'>    
</span><span class='line'>    if (!store[x][y]) {
</span><span class='line'>      store[x][y] = value;
</span><span class='line'>      radi[x][y] = radius;
</span><span class='line'>    } else {
</span><span class='line'>      store[x][y] += value;
</span><span class='line'>    }
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>_getInternalData: function() {
</span><span class='line'>  return { 
</span><span class='line'>    max: this._max,
</span><span class='line'>    min: this._min, 
</span><span class='line'>    data: this._data,
</span><span class='line'>    radi: this._radi 
</span><span class='line'>  };
</span><span class='line'>},</span></code></pre></td></tr></table></div></figure>


<h2>renderall 渲染</h2>

<p>这个是重点，下面一个步骤一个步骤的讲。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>renderAll: function(data) {
</span><span class='line'>  // reset render boundaries
</span><span class='line'>  this._clear();
</span><span class='line'>  this._drawAlpha(_prepareData(data));
</span><span class='line'>  this._colorize();
</span><span class='line'>},</span></code></pre></td></tr></table></div></figure>


<h3>_prepareData</h3>

<p>把上面合并数据创建的稀疏矩阵，再转回成对象 <code>{ x: ,y: ,value: , radius: }</code> ，然后交给 _drawAlpha 进行画图。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  var _prepareData = function(data) {
</span><span class='line'>    var renderData = [];
</span><span class='line'>    var min = data.min;
</span><span class='line'>    var max = data.max;
</span><span class='line'>    var radi = data.radi;
</span><span class='line'>    var data = data.data;
</span><span class='line'>    
</span><span class='line'>    var xValues = Object.keys(data);
</span><span class='line'>    var xValuesLen = xValues.length;
</span><span class='line'>
</span><span class='line'>    while(xValuesLen--) {
</span><span class='line'>      var xValue = xValues[xValuesLen];
</span><span class='line'>      var yValues = Object.keys(data[xValue]);
</span><span class='line'>      var yValuesLen = yValues.length;
</span><span class='line'>      while(yValuesLen--) {
</span><span class='line'>        var yValue = yValues[yValuesLen];
</span><span class='line'>        var value = data[xValue][yValue];
</span><span class='line'>        var radius = radi[xValue][yValue];
</span><span class='line'>        renderData.push({
</span><span class='line'>          x: xValue,
</span><span class='line'>          y: yValue,
</span><span class='line'>          value: value,
</span><span class='line'>          radius: radius
</span><span class='line'>        });
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    return {
</span><span class='line'>      min: min,
</span><span class='line'>      max: max,
</span><span class='line'>      data: renderData
</span><span class='line'>    };
</span><span class='line'>  };</span></code></pre></td></tr></table></div></figure>


<h3>_drawAlpha</h3>

<p>然后根据处理整合后的数据画alpha的圆（由于透明度可以进行叠加处理，shadowCtx.globalAlpha = (value-min)/(max-min); ），同时统计会有数据的最大边界rect。</p>

<p>特定半径的密度衰减圆通过 _getPointTemplate  获得，每个数据以其x,y的坐标为圆心，根据count的百分比叠加模板密度圆的透明度进行绘制。由于透明度的叠加，起到 被影响的点 密度相加的效果。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>_drawAlpha: function(data) {
</span><span class='line'>  var min = this._min = data.min;
</span><span class='line'>  var max = this._max = data.max;
</span><span class='line'>  var data = data.data || [];
</span><span class='line'>  var dataLen = data.length;
</span><span class='line'>  // on a point basis?
</span><span class='line'>  var blur = 1 - this._blur;
</span><span class='line'>
</span><span class='line'>  while(dataLen--) {
</span><span class='line'>
</span><span class='line'>    var point = data[dataLen];
</span><span class='line'>
</span><span class='line'>    var x = point.x;
</span><span class='line'>    var y = point.y;
</span><span class='line'>    var radius = point.radius;
</span><span class='line'>    // if value is bigger than max
</span><span class='line'>    // use max as value
</span><span class='line'>    var value = Math.min(point.value, max);
</span><span class='line'>    var rectX = x - radius;
</span><span class='line'>    var rectY = y - radius;
</span><span class='line'>    var shadowCtx = this.shadowCtx;
</span><span class='line'>
</span><span class='line'>    var tpl;
</span><span class='line'>    if (!this._templates[radius]) {
</span><span class='line'>      this._templates[radius] = tpl = _getPointTemplate(radius, blur);
</span><span class='line'>    } else {
</span><span class='line'>      tpl = this._templates[radius];
</span><span class='line'>    }
</span><span class='line'>    // value from minimum / value range
</span><span class='line'>    // =&gt; [0, 1]
</span><span class='line'>    shadowCtx.globalAlpha = (value-min)/(max-min);
</span><span class='line'>
</span><span class='line'>    shadowCtx.drawImage(tpl, rectX, rectY);
</span><span class='line'>
</span><span class='line'>    // update renderBoundaries
</span><span class='line'>    if (rectX &lt; this._renderBoundaries[0]) {
</span><span class='line'>        this._renderBoundaries[0] = rectX;
</span><span class='line'>      } 
</span><span class='line'>      if (rectY &lt; this._renderBoundaries[1]) {
</span><span class='line'>        this._renderBoundaries[1] = rectY;
</span><span class='line'>      }
</span><span class='line'>      if (rectX + 2*radius &gt; this._renderBoundaries[2]) {
</span><span class='line'>        this._renderBoundaries[2] = rectX + 2*radius;
</span><span class='line'>      }
</span><span class='line'>      if (rectY + 2*radius &gt; this._renderBoundaries[3]) {
</span><span class='line'>        this._renderBoundaries[3] = rectY + 2*radius;
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>  }
</span><span class='line'>},
</span></code></pre></td></tr></table></div></figure>


<h3>_colorize</h3>

<p>最后根据rect的边界范围，然后结合palette的颜色条进行染色（palette 是一个 256 * 4（rgba） 的数组）。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>_colorize: function() {
</span><span class='line'>  var x = this._renderBoundaries[0];
</span><span class='line'>  var y = this._renderBoundaries[1];
</span><span class='line'>  var width = this._renderBoundaries[2] - x;
</span><span class='line'>  var height = this._renderBoundaries[3] - y;
</span><span class='line'>  var maxWidth = this._width;
</span><span class='line'>  var maxHeight = this._height;
</span><span class='line'>  var opacity = this._opacity;
</span><span class='line'>  var maxOpacity = this._maxOpacity;
</span><span class='line'>  var minOpacity = this._minOpacity;
</span><span class='line'>  var useGradientOpacity = this._useGradientOpacity;
</span><span class='line'>
</span><span class='line'>  if (x &lt; 0) {
</span><span class='line'>    x = 0;
</span><span class='line'>  }
</span><span class='line'>  if (y &lt; 0) {
</span><span class='line'>    y = 0;
</span><span class='line'>  }
</span><span class='line'>  if (x + width &gt; maxWidth) {
</span><span class='line'>    width = maxWidth - x;
</span><span class='line'>  }
</span><span class='line'>  if (y + height &gt; maxHeight) {
</span><span class='line'>    height = maxHeight - y;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  var img = this.shadowCtx.getImageData(x, y, width, height);
</span><span class='line'>  var imgData = img.data;
</span><span class='line'>  var len = imgData.length;
</span><span class='line'>  var palette = this._palette;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  for (var i = 3; i &lt; len; i+= 4) {
</span><span class='line'>    var alpha = imgData[i];
</span><span class='line'>    var offset = alpha * 4;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    if (!offset) {
</span><span class='line'>      continue;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    var finalAlpha;
</span><span class='line'>    if (opacity &gt; 0) {
</span><span class='line'>      finalAlpha = opacity;
</span><span class='line'>    } else {
</span><span class='line'>      if (alpha &lt; maxOpacity) {
</span><span class='line'>        if (alpha &lt; minOpacity) {
</span><span class='line'>          finalAlpha = minOpacity;
</span><span class='line'>        } else {
</span><span class='line'>          finalAlpha = alpha;
</span><span class='line'>        }
</span><span class='line'>      } else {
</span><span class='line'>        finalAlpha = maxOpacity;
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    imgData[i-3] = palette[offset];
</span><span class='line'>    imgData[i-2] = palette[offset + 1];
</span><span class='line'>    imgData[i-1] = palette[offset + 2];
</span><span class='line'>    imgData[i] = useGradientOpacity ? palette[offset + 3] : finalAlpha;
</span><span class='line'>
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  img.data = imgData;
</span><span class='line'>  this.ctx.putImageData(img, x, y);
</span><span class='line'>
</span><span class='line'>  this._renderBoundaries = [1000, 1000, 0, 0];
</span><span class='line'>
</span><span class='line'>},</span></code></pre></td></tr></table></div></figure>


<p>最终绘制到canvas上，呈现热图效果。</p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebStart的使用以及如何结合JVMTI]]></title>
    <link href="http://winseliu.com/blog/2018/04/07/java-webstart-jnlp-with-jvmti/"/>
    <updated>2018-04-07T00:36:47+08:00</updated>
    <id>http://winseliu.com/blog/2018/04/07/java-webstart-jnlp-with-jvmti</id>
    <content type="html"><![CDATA[<p>当新技术叠加老功能时总能把人折磨一番，新仇加旧恨，原本的老功能也不是熟到透，然后还得去结合新功能，真的简直要人命。</p>

<p>最近有上新功能，把Swing客户端的代码通过webstart的方式发布给客户用，这样用户只需要点击网页上的链接，就可以使用Swing客户端了。感觉体验上还是厉害不少的，只是感觉啊！现实往往更残酷，我们先避开不谈。</p>

<p>首先简单的介绍下webstart、jnlp的一些知识，然后讲讲怎么结合jvmti、以及过程中遇到问题时定位查找解决的一些小知识点。</p>

<h2>JNLP</h2>

<p>为了便于借鉴参考，我这里用的是 <code>jre1.8.0_162</code></p>

<ul>
<li>docs <a href="https://docs.oracle.com/javase/tutorial/deployment/webstart/developing.html">https://docs.oracle.com/javase/tutorial/deployment/webstart/developing.html</a></li>
<li>example <a href="https://docs.oracle.com/javase/tutorial/deployment/webstart/running.html">https://docs.oracle.com/javase/tutorial/deployment/webstart/running.html</a></li>
<li>syntax <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/javaws/developersguide/syntax.html">https://docs.oracle.com/javase/8/docs/technotes/guides/javaws/developersguide/syntax.html</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/opensource/os-ecl-rcpws/index.html">使用 WebStart 发布 RCP 应用程序</a></li>
<li><a href="http://javatechniques.com/blog/launching-java-webstart-from-the-command-line/">Launching Java WebStart from the Command Line</a></li>
</ul>


<p><strong> 签名： </strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jarsigner.exe -keystore Keystore application.jar alias</span></code></pre></td></tr></table></div></figure>


<p><strong> 说说调试： </strong></p>

<ul>
<li>首先你得安装jre，不然Windows的控制面板没有Java这一项！</li>
<li>然后打开 <code>Java控制面板 - 高级 - 调试</code> 的选项。刚开始调试可以同时把 <code>Java控制台</code> 也显示出来</li>
<li>远程调试 选项在 <code>Java控制面板 - Java - Java运行时环境设置 - 运行时参数</code> 添加！</li>
</ul>


<p>参考</p>

<ul>
<li><a href="https://stackoverflow.com/questions/26668723/remote-debugging-java-web-start-under-jvm-1-8">Remote debugging java web start under JVM 1.8</a></li>
<li>Development Tips <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/plugin004.html">https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/plugin004.html</a></li>
<li>Configuration Problems <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/plugin001.html">https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/plugin001.html</a></li>
<li><a href="https://docs.oracle.com/javase/1.5.0/docs/guide/javaws/developersguide/troubleshooting.03.06.html">https://docs.oracle.com/javase/1.5.0/docs/guide/javaws/developersguide/troubleshooting.03.06.html</a></li>
<li><a href="https://stackoverflow.com/questions/686061/how-can-i-debug-applications-under-java-web-start-jnlp">How can I debug applications under Java Web Start (JNLP)?</a></li>
<li><a href="https://blackboard.secure.force.com/publickbarticleview?id=kA770000000CbHX">Java - Associating JNLP files on Windows without using the Control Panel</a></li>
</ul>


<p><strong> 缓冲： </strong></p>

<p>目录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C:\Users\winse\AppData\LocalLow\Sun\Java\Deployment</span></code></pre></td></tr></table></div></figure>


<p>调出 <em>Java高速缓冲查看器</em> 界面</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>javaws -viewer</span></code></pre></td></tr></table></div></figure>


<p><strong> 证书： </strong></p>

<p>证书是用jre对应目录下的： jre1.8.0_162\lib\security\cacerts</p>

<ul>
<li><a href="https://blogs.oracle.com/jtc/installing-trusted-certificates-into-a-java-keystore">Installing Trusted Certificates into a Java Keystore</a></li>
<li><a href="https://stackoverflow.com/questions/10077714/adding-certificate-to-keystore-using-java-code">Adding certificate to keystore using java code</a></li>
<li><a href="https://stackoverflow.com/questions/4325263/how-to-import-a-cer-certificate-into-a-java-keystore">How to import a .cer certificate into a java keystore?</a></li>
<li><a href="https://web.archive.org/web/20130319003303/http://dzone.com/snippets/ssl-download-certificate-chain">SSL : Download Certificate Chain From A Remote Host And Add The Certificates To A Local Keystore</a></li>
</ul>


<h2>结合JVMTI（仇恨点）</h2>

<p>既然都是agent，那么加载时机也同样有<strong>两种</strong>：启动时（Agent_OnLoad）和运行时Attach（Agent_OnAttach）。</p>

<ul>
<li><a href="http://www.fanyilun.me/2017/07/18/%E8%B0%88%E8%B0%88Java%20Intrumentation%E5%92%8C%E7%9B%B8%E5%85%B3%E5%BA%94%E7%94%A8/">谈谈Java Intrumentation和相关应用</a></li>
<li><a href="http://www.cnblogs.com/lancao008/archive/2012/03/29/2423469.html">基于jvmti方式加密java</a></li>
<li><a href="https://blog.csdn.net/ooppookid/article/details/51809545">Java千百问<em>08JDK详解（013）</em>JVMTI是什么</a></li>
<li><a href="http://www.cnblogs.com/princessd8251/articles/5177698.html">动态替换目标进程的Java类</a></li>
</ul>


<p><strong> 动态loadAgent </strong></p>

<ul>
<li><a href="https://liuzhengyang.github.io/2017/10/21/dynamic-attach-jvm/">dynamic-attach-jvm</a></li>
</ul>


<p><strong> 修改加载 动态链接库dll 的方式： </strong></p>

<p>默认是不能在程序里面动态修改加载库地址的 <a href="https://bugs.java.com/bugdatabase/view_bug.do?bug_id=4280189">JDK-4280189 : loadLibrary() fails to load a shared lib whose path is in java.library.path</a> 。</p>

<ol>
<li>修改环境变量PATH，-Djava.library.path</li>
<li>运行时动态修改java.library.path：usr_paths/sys_paths</li>
<li>把dll拷贝到环境变量PATH的一个路径下面</li>
</ol>


<p>参考</p>

<ul>
<li><a href="https://dzone.com/articles/jni-java-web-start-applet">JNI in Java Web Start / Applet environment</a></li>
<li><a href="https://www.chilkatsoft.com/java-loadlibrary-windows.asp">How to Load a Java Native/Dynamic Library (DLL)</a></li>
<li><a href="http://www.cnblogs.com/princessd8251/articles/5177698.html">动态替换目标进程的Java类</a></li>
</ul>


<p><strong> 解决 DLL依赖 问题的终极完美方法： </strong></p>

<ul>
<li><a href="https://msdn.microsoft.com/en-us/library/7d83bc18.aspx">Search Path Used by Windows to Locate a DLL</a></li>
</ul>


<blockquote><ol>
<li>The directory where the executable module for the current process is located.</li>
<li>The current directory.</li>
<li>The Windows system directory. The GetSystemDirectory function retrieves the path of this directory.</li>
<li>The Windows directory. The GetWindowsDirectory function retrieves the path of this directory.</li>
<li>The directories listed in the PATH environment variable.</li>
</ol>
</blockquote>

<ul>
<li><a href="https://stackoverflow.com/questions/518228/is-it-possible-to-add-a-directory-to-dll-search-path-from-a-batch-file-or-cmd-sc">Is it possible to add a directory to DLL search path from a batch file or cmd script?</a></li>
<li><a href="https://rgrzywinski.wordpress.com/2006/03/27/cant-find-dependent-libraries/">Can’t find dependent libraries</a></li>
</ul>


<blockquote><p>You might need to use something such as Dependency Walker to trace the set of DLL dependencies.</p></blockquote>

<p>把所有的库全部按依赖顺序执行一遍 System.loadLibrary ！！</p>

<p><strong> com.sun.tools.attach.AttachNotSupportedException: no providers installed </strong></p>

<ul>
<li><a href="http://www.chenjianjx.com/myblog/entry/com-sun-tools-attach-attachnotsupportedexception">http://www.chenjianjx.com/myblog/entry/com-sun-tools-attach-attachnotsupportedexception</a></li>
</ul>


<blockquote><ol>
<li>你没有使用sun jdk</li>
<li>你使用了sun jdk，并且JAVA_HOME指向了这个jdk，但是你的path下的&#8221;java&#8221;命令不是这个jdk里面的java，而是操作系统给你默认安装的jre下的，如c:\Program Files\java..</li>
</ol>
</blockquote>

<h2>小结</h2>

<p>最傻瓜式的点击就能运行是最佳体验，我们暂时不能通过控制面板添加 <code>-agentlib:lib</code> 的方式来初始化JVMTI。最终通过以上添加tools.jar的VirtualMachine.loadAgentLibrary运行时attach方式来实现。</p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Map入门指南]]></title>
    <link href="http://winseliu.com/blog/2018/01/30/map-started-guide/"/>
    <updated>2018-01-30T13:37:51+08:00</updated>
    <id>http://winseliu.com/blog/2018/01/30/map-started-guide</id>
    <content type="html"><![CDATA[<p>最近了解了一些Map地图相关的知识点，把学习的资料罗列一下：</p>

<h2>坐标体系</h2>

<ul>
<li><a href="http://lbsyun.baidu.com/index.php?title=coordinate">坐标系</a></li>
<li><a href="http://outdoor.farig.net/help/livemapset.php">http://outdoor.farig.net/help/livemapset.php</a></li>
</ul>


<p>说明：</p>

<ul>
<li>WGS84：为一种大地坐标系，也是目前广泛使用的GPS全球卫星定位系统使用的坐标系。标准的Web墨卡托投影坐标系。</li>
<li>GCJ02：又称火星坐标系，是由中国国家测绘局制定的地理坐标系统，是由WGS84加密后得到的坐标系。指中国国家测绘局制订的加偏Web墨卡托投影，正式名称为GCJ-02，国内可用的地图多数属于这种坐标系。</li>
<li>BD09：为百度坐标系，在GCJ02坐标系基础上再次加密。其中bd09ll表示百度经纬度坐标，bd09mc表示百度墨卡托米制坐标。</li>
</ul>


<h4>地图API</h4>

<p>百度</p>

<ul>
<li><a href="http://api.map.baidu.com/lbsapi/getpoint/index.html">拾取坐标系统</a></li>
<li><a href="http://developer.51cto.com/art/201110/298662.htm">百度地图API开发指南</a></li>
<li><a href="http://developer.baidu.com/map/jsdemo.htm#i8_1">浏览器定位</a></li>
<li><a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a6b0">API v2.0 TileLayer</a></li>
<li><a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a0b0">API v2.0 Map</a></li>
</ul>


<p>腾讯</p>

<ul>
<li><a href="http://lbs.qq.com/tool/getpoint/index.html">坐标拾取器</a></li>
<li><a href="http://lbs.qq.com/javascript_v2/guide-start.html">http://lbs.qq.com/javascript_v2/guide-start.html</a></li>
<li><a href="http://lbs.qq.com/javascript_v2/demo.html">http://lbs.qq.com/javascript_v2/demo.html</a></li>
<li><a href="http://lbs.qq.com/webservice_v1/guide-gcoder.html">API 逆地址解析(坐标位置描述)</a></li>
<li><a href="http://lbs.qq.com/static_v2/guide-getImage.html">http://lbs.qq.com/static_v2/guide-getImage.html</a></li>
<li><a href="http://lbs.qq.com/javascript_v2/case-run.html#sample-geocoding-reverse">地址反查（坐标查位置）：逆地址解析</a></li>
<li><a href="http://lbs.qq.com/javascript_v2/case-run.html#sample-event-latlng">鼠标移动显示地图坐标信息</a></li>
<li><a href="http://lbs.qq.com/javascript_v2/case-run.html#sample-event-center">拖动地图显示地图中心坐标信息</a></li>
<li><a href="http://lbs.qq.com/javascript_v2/case-run.html#sample-search-circlebounds">周边（圆形区域）检索</a></li>
<li><a href="http://lbs.qq.com/javascript_v2/sample/sample-search-circlebounds.html">http://lbs.qq.com/javascript_v2/sample/sample-search-circlebounds.html</a></li>
<li><a href="http://lbs.qq.com/javascript_v2/doc/maptype.html">http://lbs.qq.com/javascript_v2/doc/maptype.html</a></li>
<li><a href="http://lbs.qq.com/javascript_v2/doc/projection.html">http://lbs.qq.com/javascript_v2/doc/projection.html</a></li>
</ul>


<p>高德</p>

<ul>
<li><a href="http://lbs.amap.com/console/show/picker">坐标获取</a></li>
<li><a href="http://lbs.amap.com/api">http://lbs.amap.com/api</a></li>
<li><a href="https://lbs.amap.com/api/javascript-api/example/geocoder/regeocoding?demo">逆向地理编码（坐标-地址）</a></li>
</ul>


<p>国内其他</p>

<ul>
<li><a href="http://lbs.tianditu.com/server/search.html">http://lbs.tianditu.com/server/search.html</a></li>
</ul>


<p>Google</p>

<ul>
<li><a href="https://www.google.com/maps">获取地理位置的经纬度</a>直接搜就行了</li>
<li><a href="https://support.google.com/maps/answer/18539?co=GENIE.Platform%3DDesktop&amp;hl=zh-Hans">https://support.google.com/maps/answer/18539?co=GENIE.Platform%3DDesktop&amp;hl=zh-Hans</a></li>
<li><a href="https://developers.google.cn/maps/documentation/geocoding/intro?hl=zh-cn#GeocodingResponses">地理编码转换</a></li>
</ul>


<p>NOTE: Google的在Java里面用需要指定证书和代理：</p>

<ul>
<li><a href="https://stackoverflow.com/questions/120797/how-do-i-set-the-proxy-to-be-used-by-the-jvm">https://stackoverflow.com/questions/120797/how-do-i-set-the-proxy-to-be-used-by-the-jvm</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html">https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html</a></li>
</ul>


<p>网页访问一次，把geo的CA证书保存到本地，然后导入到本地的证书库，加入到应用得启动参数里面：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keytool -import -rfc -v -alias geo_ca -keystore truststore -file geo.cer
</span><span class='line'>
</span><span class='line'>java -Djava.net.useSystemProxies=true -Djavax.net.ssl.trustStore=.\security\truststore </span></code></pre></td></tr></table></div></figure>


<h4>各坐标系间的转换</h4>

<p>Example:</p>

<ul>
<li><a href="http://developer.baidu.com/map/jsdemo.htm#a5_1">google坐标转成百度坐标</a></li>
<li><a href="http://developer.baidu.com/map/jsdemo.htm#a5_2">原始坐标转成百度坐标</a></li>
<li><a href="http://lbs.qq.com/javascript_v2/case-run.html#sample-convertor-library">转换百度坐标为腾讯坐标</a></li>
</ul>


<p>坐标转换代码：</p>

<ul>
<li><a href="https://github.com/wandergis/coordtransform">https://github.com/wandergis/coordtransform</a></li>
</ul>


<h4>比例尺</h4>

<p>百度</p>

<ul>
<li><a href="http://lbsyun.baidu.com/index.php?title=jspopular/guide/widget">http://lbsyun.baidu.com/index.php?title=jspopular/guide/widget</a></li>
<li><a href="http://developer.baidu.com/map/jsdemo.htm#f0_4">http://developer.baidu.com/map/jsdemo.htm#f0_4</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>map.addControl(new BMap.ScaleControl());
</span><span class='line'>map.enableScrollWheelZoom();   //启用滚轮放大缩小，默认禁用
</span><span class='line'>map.enableContinuousZoom();    //启用地图惯性拖拽，默认禁用</span></code></pre></td></tr></table></div></figure>


<p>左下角标注的尺寸包括一个数字加一条线段，就是地图上与<strong>那条线等长的距离</strong>的实际距离为数字表示的长度。假设长度为一厘米，那就是说那一厘米在地图上同等长度实际是20m的距离，比例为1:2000。</p>

<p>在百度地图API中，平面坐标是以最大级别18级为基准的。就是说在<strong>18级平面坐标的一个单位就代表了屏幕上的1个像素</strong> （详细的内容后面讲，可以参考<a href="https://my.oschina.net/bv10000/blog/644520">百度地图API详解之地图坐标系统</a>）。</p>

<p>Android里面计算百度比例尺的方式：取两个点获取它们的经纬度，然后算两个点之间的距离。</p>

<ul>
<li><a href="http://blog.csdn.net/mnorst/article/details/12975413">百度地图和谷歌地图的比例尺和分辨率</a></li>
<li><a href="http://blog.csdn.net/mad1989/article/details/9361983">百度、google、高德 地图比例尺功能实现</a></li>
</ul>


<p>NOTE: 百度地图SDK还提供了标注工具(PushpinTool)，测距工具(DistanceTool)。</p>

<p>Google</p>

<ul>
<li>通过手动算出各级的比例尺 <a href="http://www.360doc.com/content/15/0319/13/9009195_456410364.shtml">http://www.360doc.com/content/15/0319/13/9009195_456410364.shtml</a></li>
</ul>


<p>Bing</p>

<ul>
<li><a href="https://msdn.microsoft.com/en-us/library/aa940990.aspx">https://msdn.microsoft.com/en-us/library/aa940990.aspx</a></li>
<li><a href="https://blogs.bing.com/maps/2006/02/25/map-control-zoom-levels-gt-resolution">https://blogs.bing.com/maps/2006/02/25/map-control-zoom-levels-gt-resolution</a></li>
</ul>


<h2>深入了解地图 - 瓦片</h2>

<ul>
<li><a href="https://my.oschina.net/bv10000/blog/644520">百度地图API详解之地图坐标系统</a> <a href="http://www.jiazhengblog.com/blog/2011/07/02/289/">##</a></li>
<li><a href="https://segmentfault.com/a/1190000011276788">瓦片地图原理</a></li>
<li><a href="https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames">Mercator projection</a></li>
<li><a href="http://cntchen.github.io/2016/05/09/%E5%9B%BD%E5%86%85%E4%B8%BB%E8%A6%81%E5%9C%B0%E5%9B%BE%E7%93%A6%E7%89%87%E5%9D%90%E6%A0%87%E7%B3%BB%E5%AE%9A%E4%B9%89%E5%8F%8A%E8%AE%A1%E7%AE%97%E5%8E%9F%E7%90%86/">国内主要地图瓦片坐标系定义及计算原理</a></li>
<li><a href="http://blog.csdn.net/evkj2013/article/details/12855889">OpenStreetMap/Google/百度/Bing瓦片地图服务(TMS) </a></li>
<li><a href="http://blog.csdn.net/mygisforum/article/details/7582449">Google 地图切片URL地址解析 </a></li>
<li><a href="http://blog.csdn.net/mygisforum/article/details/8162751">Tiles à la Google Maps: Coordinates, Tile Bounds and Projection</a></li>
<li><a href="http://blog.csdn.net/mygisforum/article/details/22997879">腾讯与百度地图瓦片规则分析</a></li>
<li><a href="http://cntchen.github.io/2016/05/09/%E7%99%BE%E5%BA%A6JavaScirpt%20%20API%E4%B8%AD%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%9D%90%E6%A0%87%E8%BD%AC%E7%93%A6%E7%89%87%E5%9D%90%E6%A0%87bug/">百度JavaScript API中经纬度坐标转瓦片坐标bug</a></li>
<li><a href="http://blog.csdn.net/fredricen/article/details/77189453">2017版高德地图瓦片分析</a></li>
</ul>


<p>各种tile的地址路径</p>

<ul>
<li><a href="https://github.com/CntChen/tile-lnglat-transform">https://github.com/CntChen/tile-lnglat-transform</a></li>
<li>各种tile的地址路径 <a href="https://github.com/brandonxiang/MapViewer/blob/master/app.js">https://github.com/brandonxiang/MapViewer/blob/master/app.js</a></li>
<li><a href="https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Java">https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Java</a></li>
</ul>


<p><a href="http://apis.map.qq.com/jsapi?qt=translate&amp;type=3&amp;points=113.338191,23.138992&amp;output=jsonp&amp;pf=jsapi&amp;ref=jsapi&amp;cb=qq.maps._svcb3.cbjcznrony1">腾讯&#8221;矢量&#8221;地图 - 通过JSON传数据画Canvas</a></p>

<h2>国内百度腾讯网页端的实现</h2>

<p>现在的地图基本都是使用瓦片技术，计算步骤如下:</p>

<ul>
<li>首先，根据投影（墨卡托投影）把 经纬度（度） 转成 平面坐标（m）；</li>
<li>然后，更具比例尺把 平面坐标 转成 像素坐标；</li>
<li>最后，根据坐标的平移把窗口内的瓦片从服务端下载并进行展示。</li>
</ul>


<p>通过JS代码了解地图的实现：</p>

<h4>百度</h4>

<p>打开一个百度的应用 <a href="http://api.map.baidu.com/lbsapi/getpoint/index.html">http://api.map.baidu.com/lbsapi/getpoint/index.html</a> 然后在调试窗口运行转换经纬度的代码，然后进到对应的代码，打断点，然后艰辛进行与混淆的代码死磕！</p>

<p><img src="http://winseliu.com/images/blogs/baidu-map-debug.png" alt="" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var projection =new BMap.MercatorProjection();
</span><span class='line'>var point = projection.lngLatToPoint(new BMap.Point(113.338191,23.138992));
</span><span class='line'>point
</span><span class='line'>Q {x: 12616886.99, y: 2631894}
</span><span class='line'>
</span><span class='line'>var projection =new BMap.MercatorProjection();
</span><span class='line'>var point = projection.pointToLngLat(new BMap.Pixel(12616886.99,2631894));
</span><span class='line'>point
</span><span class='line'>H {lng: 113.338191, lat: 23.138992}
</span></code></pre></td></tr></table></div></figure>


<p>从代码上看还是不难的，但是里面有一堆魔法数字完全不懂。</p>

<p>如果仅仅获取瓦片 <a href="https://github.com/CntChen/tile-lnglat-transform/">https://github.com/CntChen/tile-lnglat-transform/</a> 推荐使用这个项目。</p>

<p>这里仅仅是经纬度转换为平面坐标(m)的过程。我们在源码中查找 getTilesUrl 在5901行打个断点，然后在回到网页，移动一下地图。接下来，就可以调试整个过程了。</p>

<p><img src="http://winseliu.com/images/blogs/baidu-map-getTilesUrl.png" alt="" /></p>

<p>注意标识的两处，是进行层级缩放、计算出瓦片编号的代码。</p>

<h4>腾讯</h4>

<p>看过了百度的，再看腾讯的。然鹅并没有觉得轻松啊，两种不同的坐标系，做法差别还是挺大的。不过从命名上看腾讯算学术派的了。</p>

<ul>
<li>Projection 对象规范 <a href="http://lbs.qq.com/javascript_v2/doc/projection.html">http://lbs.qq.com/javascript_v2/doc/projection.html</a></li>
<li><a href="http://lbs.qq.com/javascript_v2/doc/maptype.html">http://lbs.qq.com/javascript_v2/doc/maptype.html</a></li>
</ul>


<p>打开 <a href="http://lbs.qq.com/javascript_v2/case-run.html#sample-geocoding-reverse">http://lbs.qq.com/javascript_v2/case-run.html#sample-geocoding-reverse</a> ，在 map.qq.com/js/v2.js 的 apiLoad 处打断点进行到真正的map的js文件。</p>

<p><img src="http://winseliu.com/images/blogs/tencent-debug-apiLoad.png" alt="" /></p>

<p>然后查找 fromLatLngToPoint ，再在界面动一下，就可以调试整个过程：</p>

<p><img src="http://winseliu.com/images/blogs/tencent-debug-fromLatLngToPoint.png" alt="" /></p>

<ul>
<li>fromLatLngToPoint</li>
<li>fromPointToLatLng</li>
</ul>


<p>调式的时刻可以顺便看看整个调用链，会发现：</p>

<p><img src="http://winseliu.com/images/blogs/tencent-debug-fromDivPixelToLatLng.png" alt="" /></p>

<ul>
<li>fromDivPixelToLatLng</li>
<li>fromLatLngToDivPixel</li>
</ul>


<p>fromDivPixelToLatLng的条用链，以及数据的传递如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fromDivPixelToLatLng 
</span><span class='line'>=&gt;
</span><span class='line'>
</span><span class='line'>-&gt;Rh 转成相对位置转成绝对坐标后，传入到Mc
</span><span class='line'>[
</span><span class='line'>a
</span><span class='line'>P {x: 930, y: -471}
</span><span class='line'>c
</span><span class='line'>ia {width: 1725872.4160540444, height: 794188.9248479041}
</span><span class='line'>b
</span><span class='line'>true
</span><span class='line'>]
</span><span class='line'>
</span><span class='line'>-&gt;Mc(g, a, h, f)  &lt;-&gt;  Gf 缩放后，调用fromPointToLatLng
</span><span class='line'>[
</span><span class='line'>g
</span><span class='line'>Sh {a: P, b: 0.7111111111111111, c: 40.74366543152521, d: true}
</span><span class='line'>a
</span><span class='line'>P {x: 1726802, y: 793718}
</span><span class='line'>h
</span><span class='line'>13
</span><span class='line'>f
</span><span class='line'>true
</span><span class='line'>]
</span><span class='line'>
</span><span class='line'>-&gt;fromPointToLatLng(Ad, e)
</span><span class='line'>[
</span><span class='line'>Ad
</span><span class='line'>P {x: 210.791259765625, y: 96.889404296875}
</span><span class='line'>e
</span><span class='line'>true
</span><span class='line'>]
</span><span class='line'>
</span><span class='line'>-&gt; Return value : u
</span><span class='line'>    lat:40.02892889530204
</span><span class='line'>    lng:116.42520904541016
</span></code></pre></td></tr></table></div></figure>


<p>从 坐标计算 经纬度 反过来了：</p>

<p><img src="http://winseliu.com/images/blogs/tencent-debug-fromPointToLatLng.png" alt="" /></p>

<p>腾讯的计算过程直接把 <strong>转平面坐标和转像素坐标</strong> 两个过程合并了。<strong>通过 fromLatLngToPoint 得到就是一个 像素坐标 的值</strong>，然后通过缩放就可以得到<strong>当前层级级别</strong>的 <strong>像素坐标</strong> 。</p>

<p>查找瓦片地址的代码，直接在代码里面查找 <code>x=</code> 在37823处代码都打断点，刷新重新加载瓦片就会进到断点。</p>

<p>然后查看调用链，</p>

<p><img src="http://winseliu.com/images/blogs/tencent-debug-tile.png" alt="" /></p>

<p>详细跟踪的话，会发现，每次加载都会计算左上角和右下角两个点的像素坐标 （窗口的bounds）。计算要加载的瓦片时，直接用最大减最小除以256（每个瓦片的像素），就得到要加载瓦片的编号了。</p>

<p>用了几天比较肤浅的跟了下QQ地图的功能，如果没有混淆应该看起来会爽很多。。。没有很深层次的东西，仅仅是一个源码调试过程的记载，一些理论原理的知识请查完文章中的链接。</p>

<h2>其他</h2>

<ul>
<li><a href="http://www.gpsspg.com/bs/sql.htm">http://www.gpsspg.com/bs/sql.htm</a> 基站数据</li>
<li><a href="http://greatmaps.codeplex.com/">http://greatmaps.codeplex.com/</a></li>
<li><a href="https://my.oschina.net/zhajiang/blog/424157">Leaflet调用腾讯地图</a></li>
</ul>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java中使用代理-基于Shandowsocks]]></title>
    <link href="http://winseliu.com/blog/2018/01/26/proxy-on-java-via-shandowsocks/"/>
    <updated>2018-01-26T20:50:05+08:00</updated>
    <id>http://winseliu.com/blog/2018/01/26/proxy-on-java-via-shandowsocks</id>
    <content type="html"><![CDATA[<p>在开发过程中，时不时需要要代理一下，来访问我们需要的资源，比方说：DEBUG生产<strong>集群</strong>的应用、还有在Java中翻墙等等。解决了全局的代理能完成我们访问到资源的时刻，又有新的要求，比方说：只有特定的资源走代理等等。</p>

<p>下面把要点简单罗列下，以供参考：</p>

<ul>
<li><a href="https://stackoverflow.com/questions/1432961/how-do-i-make-httpurlconnection-use-a-proxy">https://stackoverflow.com/questions/1432961/how-do-i-make-httpurlconnection-use-a-proxy</a></li>
<li><a href="http://www.aneasystone.com/archives/2015/12/java-and-http-using-proxy.html">http://www.aneasystone.com/archives/2015/12/java-and-http-using-proxy.html</a></li>
<li><a href="https://stackoverflow.com/questions/120797/how-do-i-set-the-proxy-to-be-used-by-the-jvm">https://stackoverflow.com/questions/120797/how-do-i-set-the-proxy-to-be-used-by-the-jvm</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html">https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html</a></li>
</ul>


<p>JDK官网的都全部包括了，其他的辅助，看看人家的具体需求。</p>

<h2>Java全应用代理（全局）</h2>

<ul>
<li>走HTTP</li>
</ul>


<p>Shandowsocks转HTTP，前面Docker翻墙安装Kubernate有弄过，参考：<a href="http://winseliu.com/blog/2017/02/04/privoxy-http-proxy-for-shadowsocks/">Privoxy</a> 。</p>

<p>也可以直接用Shandowsocks提供的 <code>启用系统代理 -&gt; 系统代理模式 -&gt; 全局模式</code> 来转换，启用HTTP代理功能。（开全局模式，本地会把socks代理转成为一个http的代理）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-Dhttp.proxyHost=127.0.0.1
</span><span class='line'>-Dhttp.proxyPort=7070
</span><span class='line'>-Dhttps.proxyHost=127.0.0.1
</span><span class='line'>-Dhttps.proxyPort=7070
</span><span class='line'>-Dhttp.nonProxyHosts="localhost|127.0.0.1|192.168.*"</span></code></pre></td></tr></table></div></figure>


<blockquote><ul>
<li>http.proxyHost: the host name of the proxy server</li>
<li>http.proxyPort: the port number, the default value being 80.</li>
<li>http.nonProxyHosts:a list of hosts that should be reached directly, bypassing the proxy. This is a list of patterns separated by &lsquo;|&rsquo;. The patterns may start or end with a &lsquo;*&rsquo; for wildcards. Any host matching one of these patterns will be reached through a direct connection instead of through a proxy.</li>
</ul>
</blockquote>

<ul>
<li>走Socks</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-DsocksProxyHost=127.0.0.1 -DsocksProxyPort=7070</span></code></pre></td></tr></table></div></figure>


<ul>
<li>使用系统代理</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-Djava.net.useSystemProxies=true</span></code></pre></td></tr></table></div></figure>


<h2>部分（自动切换）</h2>

<ul>
<li>应用内通过 setProperty <strong>临时</strong> 设置</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>System.setProperty("http.proxyHost", proxyHost);
</span><span class='line'>System.setProperty("http.proxyPort", proxyPort);
</span><span class='line'>System.setProperty("https.proxyHost", proxyHost);
</span><span class='line'>System.setProperty("https.proxyPort", proxyPort);</span></code></pre></td></tr></table></div></figure>


<p>用完之后，取消设置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>System.clearProperty("http.proxyHost");
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<ul>
<li>请求时指定代理：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SocketAddress addr = new InetSocketAddress("webcache.example.com", 8080);
</span><span class='line'>Proxy proxy = new Proxy(Proxy.Type.HTTP, addr);
</span><span class='line'>
</span><span class='line'>URL url = new URL("http://java.example.org/");
</span><span class='line'>URLConnection conn = url.openConnection(proxy);</span></code></pre></td></tr></table></div></figure>


<ul>
<li>（选择性的）配置哪些访问走代理：ProxySelector</li>
</ul>


<p>任何请求访问网络之前，会被ProxySelector拦截。根据规则获取一个符合的Proxy（或者Proxy.NO_PROXY），然后通过这个代理去访问网络。</p>

<blockquote><p>As you can see, with Java SE 5.0, the developer gains quite a bit of control and flexibility when it comes to proxies. Still, there are situations where one would like to decide which proxy to use dynamically, for instance to do some load balancing between proxies, or depending on the destination, in which case the API described so far would be quite cumbersome. That&rsquo;s where the ProxySelector comes into play.</p>

<p>The best thing about the ProxySelector is that it is plugable! Which means that if you have needs that are not covered by the default one, you can write a replacement for it and plug it in!</p></blockquote>

<p>基本上看JDK官网的内容就好了，也参考下 <a href="http://archive.oreilly.com/pub/a/onjava/excerpt/jvntwkprg_3e/index.html?page=3#javanp3-CHP-7-SECT-4">URLs and URIs, Proxies and Passwords</a></p>

<p>注册自定义的Selector：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public static void main(String[] args) {
</span><span class='line'>    MyProxySelector ps = new MyProxySelector(ProxySelector.getDefault());
</span><span class='line'>    ProxySelector.setDefault(ps);
</span><span class='line'>    // rest of the application
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Selector实现：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class MyProxySelector extends ProxySelector {
</span><span class='line'>    // Keep a reference on the previous default
</span><span class='line'>    ProxySelector defsel = null;
</span><span class='line'>    
</span><span class='line'>    /*
</span><span class='line'>     * Inner class representing a Proxy and a few extra data
</span><span class='line'>     */
</span><span class='line'>    class InnerProxy {
</span><span class='line'>        Proxy proxy;
</span><span class='line'>        SocketAddress addr;
</span><span class='line'>        // How many times did we fail to reach this proxy?
</span><span class='line'>        int failedCount = 0;
</span><span class='line'>        
</span><span class='line'>        InnerProxy(InetSocketAddress a) {
</span><span class='line'>            this(a, Proxy.Type.HTTP);
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        InnerProxy(InetSocketAddress a, Proxy.Type type) {
</span><span class='line'>            addr = a;
</span><span class='line'>            proxy = new Proxy(type, a);
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        SocketAddress address() {
</span><span class='line'>            return addr;
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        Proxy toProxy() {
</span><span class='line'>            return proxy;
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        int failed() {
</span><span class='line'>            return ++failedCount;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    /*
</span><span class='line'>     * A list of proxies, indexed by their address.
</span><span class='line'>     */
</span><span class='line'>    HashMap&lt;SocketAddress, InnerProxy&gt; proxies = new HashMap&lt;SocketAddress, InnerProxy&gt;();
</span><span class='line'>
</span><span class='line'>    MyProxySelector(ProxySelector def) {
</span><span class='line'>        // Save the previous default
</span><span class='line'>        defsel = def;
</span><span class='line'>        
</span><span class='line'>        // Populate the HashMap (List of proxies)
</span><span class='line'>        InnerProxy i = new InnerProxy(new InetSocketAddress("webcache1.example.com", 8080));
</span><span class='line'>        proxies.put(i.address(), i);
</span><span class='line'>        i = new InnerProxy(new InetSocketAddress("webcache2.example.com", 8080));
</span><span class='line'>        proxies.put(i.address(), i);
</span><span class='line'>        i = new InnerProxy(new InetSocketAddress("webcache3.example.com", 8080));
</span><span class='line'>        proxies.put(i.address(), i);
</span><span class='line'>    }
</span><span class='line'>        
</span><span class='line'>    /*
</span><span class='line'>     * This is the method that the handlers will call.
</span><span class='line'>     * Returns a List of proxy.
</span><span class='line'>     */
</span><span class='line'>    public java.util.List&lt;Proxy&gt; select(URI uri) {
</span><span class='line'>        // Let's stick to the specs. 
</span><span class='line'>        if (uri == null) {
</span><span class='line'>            throw new IllegalArgumentException("URI can't be null.");
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        /* 这里可以指定你自己的规则/配置
</span><span class='line'>         * If it's a http (or https) URL, then we use our own list.
</span><span class='line'>         */
</span><span class='line'>        String protocol = uri.getScheme();
</span><span class='line'>        if ("http".equalsIgnoreCase(protocol) ||
</span><span class='line'>                "https".equalsIgnoreCase(protocol)) {
</span><span class='line'>            ArrayList&lt;Proxy&gt; l = new ArrayList&lt;Proxy&gt;();
</span><span class='line'>            for (InnerProxy p : proxies.values()) {
</span><span class='line'>                l.add(p.toProxy());
</span><span class='line'>            }
</span><span class='line'>            return l;
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        /*
</span><span class='line'>         * Not HTTP or HTTPS (could be SOCKS or FTP)
</span><span class='line'>         * defer to the default selector.
</span><span class='line'>         */
</span><span class='line'>        if (defsel != null) {
</span><span class='line'>            return defsel.select(uri);
</span><span class='line'>        } else {
</span><span class='line'>            ArrayList&lt;Proxy&gt; l = new ArrayList&lt;Proxy&gt;();
</span><span class='line'>            l.add(Proxy.NO_PROXY);
</span><span class='line'>            return l;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    /*
</span><span class='line'>     * Method called by the handlers when it failed to connect
</span><span class='line'>     * to one of the proxies returned by select().
</span><span class='line'>     */
</span><span class='line'>    public void connectFailed(URI uri, SocketAddress sa, IOException ioe) {
</span><span class='line'>        // Let's stick to the specs again.
</span><span class='line'>        if (uri == null || sa == null || ioe == null) {
</span><span class='line'>            throw new IllegalArgumentException("Arguments can't be null.");
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        /*
</span><span class='line'>         * Let's lookup for the proxy 
</span><span class='line'>         */
</span><span class='line'>        InnerProxy p = proxies.get(sa); 
</span><span class='line'>        if (p != null) {
</span><span class='line'>            /*
</span><span class='line'>             * It's one of ours, if it failed more than 3 times
</span><span class='line'>             * let's remove it from the list.
</span><span class='line'>             */
</span><span class='line'>            if (p.failed() &gt;= 3)
</span><span class='line'>                    proxies.remove(sa);
</span><span class='line'>        } else {
</span><span class='line'>            /*
</span><span class='line'>             * Not one of ours, let's delegate to the default.
</span><span class='line'>             */
</span><span class='line'>            if (defsel != null)
</span><span class='line'>              defsel.connectFailed(uri, sa, ioe);
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logstash采集网站的访问日志]]></title>
    <link href="http://winseliu.com/blog/2018/01/20/logstash-monitor-myself-blog-accesslog/"/>
    <updated>2018-01-20T18:14:03+08:00</updated>
    <id>http://winseliu.com/blog/2018/01/20/logstash-monitor-myself-blog-accesslog</id>
    <content type="html"><![CDATA[<p>最近又重新接触了一下elasticsearch、logstash、kibana，蛮好用的一个日志框架。</p>

<p>同时好久没有更新网站内容、也没怎么关注，虽然有cnzz（umeng）的日志统计功能，但是毕竟是很小一段时间的。要是能够把日志都导出来，就可以用ELK来分析一下自己网站一年来文章的访问情况。</p>

<p>嗯，前阵子买了阿里云的一个VPN服务器，正好可以利用利用。把访问的日志情况通过http发送给logstash，然后存储下来，等过一段时间我们再回来分析分析这些日志。^^</p>

<h2>启动Logstash收集服务</h2>

<ul>
<li><a href="https://www.elastic.co/blog/introducing-logstash-input-http-plugin">https://www.elastic.co/blog/introducing-logstash-input-http-plugin</a></li>
<li><a href="https://discuss.elastic.co/t/post-data-to-logstash-using-http-input/69166/8">https://discuss.elastic.co/t/post-data-to-logstash-using-http-input/69166/8</a></li>
<li><a href="https://www.elastic.co/guide/en/logstash/current/plugins-filters-json.html">https://www.elastic.co/guide/en/logstash/current/plugins-filters-json.html</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~/logstash-6.1.2/bin/logstash -e '
</span><span class='line'>input { 
</span><span class='line'>  http { 
</span><span class='line'>    port =&gt; 20000 
</span><span class='line'>    response_headers =&gt; {
</span><span class='line'>      "Access-Control-Allow-Origin" =&gt; "*"
</span><span class='line'>      "Content-Type" =&gt; "application/json"
</span><span class='line'>      "Access-Control-Allow-Headers" =&gt; "Origin, X-Requested-With, Content-Type, Accept"
</span><span class='line'>    }
</span><span class='line'>  } 
</span><span class='line'>} 
</span><span class='line'>filter {
</span><span class='line'>  if [message] =~ /^\s*$/ {
</span><span class='line'>    drop { }
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  json {
</span><span class='line'>    source =&gt; "message"
</span><span class='line'>  }
</span><span class='line'>  json {
</span><span class='line'>    source =&gt; "location"
</span><span class='line'>    target =&gt; "location"
</span><span class='line'>  }
</span><span class='line'>  mutate {
</span><span class='line'>    remove_field =&gt; [ "headers" ]
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>output { 
</span><span class='line'>  file { 
</span><span class='line'>    path =&gt; "winse-accesslog-%{+YYYY-MM-dd}.log"
</span><span class='line'>    codec =&gt; json_lines 
</span><span class='line'>  } 
</span><span class='line'>} 
</span><span class='line'>'</span></code></pre></td></tr></table></div></figure>


<h2>页面发送访问日志记录</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$.ajax({
</span><span class='line'>  type: "POST",
</span><span class='line'>  url: "http://SERVER:PORT",
</span><span class='line'>  data: JSON.stringify({
</span><span class='line'>    title: document.title,
</span><span class='line'>    location: JSON.stringify(location),
</span><span class='line'>    referrer: document.referrer,
</span><span class='line'>    userAgent: navigator.userAgent
</span><span class='line'>  }),
</span><span class='line'>  contentType: "application/json; charset=utf-8",
</span><span class='line'>  dataType: "json"
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitalk on Octopress]]></title>
    <link href="http://winseliu.com/blog/2018/01/20/gitalk-on-octopress/"/>
    <updated>2018-01-20T15:41:00+08:00</updated>
    <id>http://winseliu.com/blog/2018/01/20/gitalk-on-octopress</id>
    <content type="html"><![CDATA[<p>以前有添加过 多说 ，步骤都类似的。其实就是调用一个第三方的服务，把评论的数据存储在第三方。</p>

<p>可以先看看 <a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md">gitalk 的文档</a> ，分四步：</p>

<ul>
<li>注册一个github 的 <a href="https://github.com/settings/developers">OAuth Apps</a></li>
<li>添加div容器</li>
<li>加入css，js依赖</li>
<li>调用javascript显示</li>
</ul>


<h2>配置</h2>

<h4>注册一个github应用</h4>

<ul>
<li><a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md#%E4%BD%BF%E7%94%A8">使用</a></li>
<li><a href="https://github.com/settings/applications/new">https://github.com/settings/applications/new</a></li>
</ul>


<h4>在 <code>_layouts/post.html</code> 的 Comments 下添加一个 gitalk-container 的节点：</h4>

<p>（粘贴后把大括号和百分号之间的空格去掉）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ % if site.disqus_short_name and page.comments == true % }
</span><span class='line'>  &lt;section&gt;
</span><span class='line'>    &lt;h1&gt;Comments&lt;/h1&gt;
</span><span class='line'>&lt;!-- gitalk评论 start --&gt;
</span><span class='line'>    &lt;div id="gitalk-container"&gt;&lt;/div&gt; 
</span><span class='line'>&lt;!-- gitalk评论 end --&gt;
</span><span class='line'>  &lt;/section&gt;
</span><span class='line'>{ % endif % }</span></code></pre></td></tr></table></div></figure>


<h4>在 <code>_includes</code> 目录下增加一个 gitalk.html 的页面，添加依赖并添加初始化代码：</h4>

<p>这里clientID，clientSecret对应第一步注册应用的id和secret。</p>

<p>在官网文档给的例子上调整了一下: id， body, createIssueManually。代码里面是通过 <code>labels + id</code> 来查询对应的issue：<a href="https://github.com/gitalk/gitalk/blob/9a2c6e94281a628a8e0f1ccbdceebd5d17bc1756/src/gitalk.jsx#L174">查询Issue源码</a></p>

<p>（粘贴后把大括号和百分号之间的空格去掉）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ % if site.disqus_short_name and page.comments != false % }
</span><span class='line'>
</span><span class='line'>&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css"&gt;
</span><span class='line'>&lt;script src="https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js"&gt;&lt;/script&gt;
</span><span class='line'>
</span><span class='line'>&lt;script&gt;
</span><span class='line'>
</span><span class='line'>var gitalk = new Gitalk({
</span><span class='line'>  clientID: 'c14f68eac6330d15d984',
</span><span class='line'>  clientSecret: '73b7c1fffa98e299ff0cdd332821201933858e6e',
</span><span class='line'>  repo: 'winse.github.com',
</span><span class='line'>  owner: 'winse',
</span><span class='line'>  admin: ['winse'],
</span><span class='line'>  id: location.pathname,
</span><span class='line'>  labels: ['Gitalk'],
</span><span class='line'>  body: "http://winseliu.com" + location.pathname,
</span><span class='line'>  createIssueManually: true,
</span><span class='line'>  
</span><span class='line'>  // facebook-like distraction free mode
</span><span class='line'>  distractionFreeMode: false
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>gitalk.render('gitalk-container')
</span><span class='line'>
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>
</span><span class='line'>{ % endif % }</span></code></pre></td></tr></table></div></figure>


<p>然后在同一级目录的 after_footer.html 新增一条 这个新页面一个引用（粘贴后把大括号和百分号之间的空格去掉）:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ % include gitalk.html % }</span></code></pre></td></tr></table></div></figure>


<h2>初始化</h2>

<ul>
<li><a href="https://github.com/gitalk/gitalk/wiki/%E8%AF%84%E8%AE%BA%E5%88%9D%E5%A7%8B%E5%8C%96">https://github.com/gitalk/gitalk/wiki/%E8%AF%84%E8%AE%BA%E5%88%9D%E5%A7%8B%E5%8C%96</a></li>
<li><a href="https://draveness.me/git-comments-initialize">https://draveness.me/git-comments-initialize</a></li>
<li><a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a></li>
</ul>


<p>其实就是在对应的repo下面建一个repo，注意下 <strong>labels</strong> 规则就行了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>username = "winse" # GitHub 用户名
</span><span class='line'>
</span><span class='line'># https://github.com/settings/tokens
</span><span class='line'>new_token = ""  # GitHub Token
</span><span class='line'>repo_name = "winse.github.com" # 存放 issues
</span><span class='line'>
</span><span class='line'>sitemap_url = "sitemap.xml" # sitemap
</span><span class='line'>kind = "Gitalk"
</span><span class='line'>
</span><span class='line'># 可以结合git的状态，added的调用命令创建一个issue
</span><span class='line'>
</span><span class='line'># 除了使用Token，也可以手动输入密码
</span><span class='line'>curl -H "Accept: application/json" -X POST -d '{"body": "http://winseliu.com/blog/2017/11/20/sed-debug-sedsed/", "labels": ["Gitalk", "/blog/2017/11/20/sed-debug-sedsed/"], "title": "gitalk 测试" }' -u $username https://api.github.com/repos/$username/$repo_name/issues
</span><span class='line'>Enter host password for user 'winse':
</span><span class='line'>
</span><span class='line'>OR
</span><span class='line'>
</span><span class='line'># https://developer.github.com/v3/auth/#basic-authentication
</span><span class='line'>curl -u username:token https://api.github.com/user
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="http://qiubaiying.top/2017/12/19/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0-Gitalk-%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/">为博客添加 Gitalk 评论插件</a></li>
</ul>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sed Debug: Sedsed]]></title>
    <link href="http://winseliu.com/blog/2017/11/20/sed-debug-sedsed/"/>
    <updated>2017-11-20T23:54:11+08:00</updated>
    <id>http://winseliu.com/blog/2017/11/20/sed-debug-sedsed</id>
    <content type="html"><![CDATA[<p>上一篇把html转成rst，但是页面之间的链接都断了。需要在标题前加上一个TAG，最终效果如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>.. _Creating Objects in New Mappings:
</span><span class='line'>
</span><span class='line'>Creating Objects in New Mappings
</span><span class='line'>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
</span><span class='line'>
</span><span class='line'>+ :ref:`Creating Objects in New Mappings`
</span></code></pre></td></tr></table></div></figure>


<p>想使用sed来实现这个功能，需要利用一些sed的高级功能，但默认sed是不能调试。这里使用sedsed来查看每一个操作的模式空间和缓冲空间，有点类似print调试。对于理解 sed 很有帮助，特别是对理解缓冲区和模式区数据的处理。</p>

<h4>安装 sedsed</h4>

<ul>
<li><a href="http://aurelio.net/projects/sedsed/#usage">官网文档</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /opt/
</span><span class='line'>git clone https://github.com/aureliojargas/sedsed</span></code></pre></td></tr></table></div></figure>


<p>看看实际的调试输出：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@ansible sedsed]# echo -e "one\ntwo\nthree\nfour" | ./sedsed.py -d -f test/scripts/sort.gnu.sed 
</span><span class='line'>PATT:one$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM:H
</span><span class='line'>PATT:one$
</span><span class='line'>HOLD:\none$
</span><span class='line'>COMM:$ !d
</span><span class='line'>PATT:two$
</span><span class='line'>HOLD:\none$
</span><span class='line'>COMM:H
</span><span class='line'>PATT:two$
</span><span class='line'>HOLD:\none\ntwo$
</span><span class='line'>COMM:$ !d
</span><span class='line'>PATT:three$
</span><span class='line'>HOLD:\none\ntwo$
</span><span class='line'>COMM:H
</span><span class='line'>PATT:three$
</span><span class='line'>HOLD:\none\ntwo\nthree$
</span><span class='line'>COMM:$ !d
</span><span class='line'>PATT:four$
</span><span class='line'>HOLD:\none\ntwo\nthree$
</span><span class='line'>COMM:H
</span><span class='line'>PATT:four$
</span><span class='line'>HOLD:\none\ntwo\nthree\nfour$
</span><span class='line'>COMM:$ !d
</span><span class='line'>PATT:four$
</span><span class='line'>HOLD:\none\ntwo\nthree\nfour$
</span><span class='line'>COMM:g
</span><span class='line'>PATT:\none\ntwo\nthree\nfour$
</span><span class='line'>HOLD:\none\ntwo\nthree\nfour$
</span><span class='line'>COMM:s/.//
</span><span class='line'>PATT:one\ntwo\nthree\nfour$
</span><span class='line'>HOLD:\none\ntwo\nthree\nfour$
</span><span class='line'>COMM:s/\n/&L&l/g
</span><span class='line'>PATT:one\nL\nltwo\nL\nlthree\nL\nlfour$
</span><span class='line'>HOLD:\none\ntwo\nthree\nfour$
</span><span class='line'>COMM:s/^/\\Na/
</span><span class='line'>PATT:\naone\nL\nltwo\nL\nlthree\nL\nlfour$
</span><span class='line'>HOLD:\none\ntwo\nthree\nfour$
</span><span class='line'>COMM:s/\nL/\\NA/
</span><span class='line'>PATT:\naone\nA\nltwo\nL\nlthree\nL\nlfour$
</span><span class='line'>HOLD:\none\ntwo\nthree\nfour$
</span><span class='line'>COMM:s/$/\\NL/
</span><span class='line'>PATT:\naone\nA\nltwo\nL\nlthree\nL\nlfour\nL$
</span><span class='line'>HOLD:\none\ntwo\nthree\nfour$
</span><span class='line'>COMM:b start
</span><span class='line'>COMM:/\nA$/ b exit
</span><span class='line'>COMM:s/\nb/\\Nl/
</span><span class='line'>PATT:\naone\nA\nltwo\nL\nlthree\nL\nlfour\nL$
</span><span class='line'>HOLD:\none\ntwo\nthree\nfour$
</span><span class='line'>COMM:s/\nB/\\NL/
</span><span class='line'>PATT:\naone\nA\nltwo\nL\nlthree\nL\nlfour\nL$
</span><span class='line'>HOLD:\none\ntwo\nthree\nfour$
</span><span class='line'>COMM:s/\(\na.*\nA\)\nl\([^\n]*\)\nL/\1\\Nb\2\\NB/
</span><span class='line'>PATT:\naone\nA\nbtwo\nB\nlthree\nL\nlfour\nL$
</span><span class='line'>HOLD:\none\ntwo\nthree\nfour$
</span><span class='line'>COMM::sort
</span><span class='line'>COMM:h
</span><span class='line'>......
</span><span class='line'>
</span><span class='line'>[root@ansible sedsed]# (date +'%w %d' ; date +'%-m %Y') | ./sedsed.py -d -f test/scripts/cal.sed
</span><span class='line'>......
</span></code></pre></td></tr></table></div></figure>


<h4>网上的一案例</h4>

<p>看到一个<a href="http://bbs.chinaunix.net/forum.php?mod=viewthread&amp;tid=3775201&amp;page=1#pid22315115">论坛帖子</a>上用sed实现 <strong>删除匹配的前两行和后三行</strong> ，看的不是很明白，帖子仅注意介绍流程，至于数据到底是怎么样的没有讲。如果知道 sedsed 这工具的话，运行一遍就全部清楚了：</p>

<p>sedsed.py 处理 <code>+</code> 加号有点问题，所以这里就处理匹配的前两行，看看具体的数据是怎么流转的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@ansible sedsed]# echo -e "1\n2\n3\n4\n5\n6\n7\n8\n9\n10" | ./sedsed.py -d '/5/d;:go;1,2!{P;N;D};N;bgo' 
</span><span class='line'>PATT:1$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM:/5/ d
</span><span class='line'>PATT:1$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM::go
</span><span class='line'>COMM:1,2 !{
</span><span class='line'>COMM:N
</span><span class='line'>PATT:1\n2$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM:b go
</span><span class='line'>COMM:1,2 !{
</span><span class='line'>COMM:N
</span><span class='line'>PATT:1\n2\n3$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM:b go
</span><span class='line'>COMM:1,2 !{
</span><span class='line'>COMM:P
</span><span class='line'>1
</span><span class='line'>PATT:1\n2\n3$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM:N
</span><span class='line'>PATT:1\n2\n3\n4$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM:D
</span><span class='line'>PATT:2\n3\n4$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM:/5/ d
</span><span class='line'>PATT:2\n3\n4$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM::go
</span><span class='line'>COMM:1,2 !{
</span><span class='line'>COMM:P
</span><span class='line'>2
</span><span class='line'>PATT:2\n3\n4$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM:N
</span><span class='line'>PATT:2\n3\n4\n5$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM:D
</span><span class='line'>PATT:3\n4\n5$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM:/5/ d
</span><span class='line'>PATT:6$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM:/5/ d
</span><span class='line'>PATT:6$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM::go
</span><span class='line'>COMM:1,2 !{
</span><span class='line'>COMM:P
</span><span class='line'>6
</span><span class='line'>PATT:6$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM:N
</span><span class='line'>PATT:6\n7$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM:D
</span><span class='line'>PATT:7$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM:/5/ d
</span><span class='line'>PATT:7$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM::go
</span><span class='line'>COMM:1,2 !{
</span><span class='line'>COMM:P
</span><span class='line'>7
</span><span class='line'>PATT:7$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM:N
</span><span class='line'>PATT:7\n8$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM:D
</span><span class='line'>PATT:8$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM:/5/ d
</span><span class='line'>PATT:8$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM::go
</span><span class='line'>COMM:1,2 !{
</span><span class='line'>COMM:P
</span><span class='line'>8
</span><span class='line'>PATT:8$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM:N
</span><span class='line'>PATT:8\n9$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM:D
</span><span class='line'>PATT:9$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM:/5/ d
</span><span class='line'>PATT:9$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM::go
</span><span class='line'>COMM:1,2 !{
</span><span class='line'>COMM:P
</span><span class='line'>9
</span><span class='line'>PATT:9$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM:N
</span><span class='line'>PATT:9\n10$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM:D
</span><span class='line'>PATT:10$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM:/5/ d
</span><span class='line'>PATT:10$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM::go
</span><span class='line'>COMM:1,2 !{
</span><span class='line'>COMM:P
</span><span class='line'>10
</span><span class='line'>PATT:10$
</span><span class='line'>HOLD:$
</span><span class='line'>COMM:N
</span><span class='line'>10</span></code></pre></td></tr></table></div></figure>


<p>可以看到 <strong>PATT</strong> 模式空间把前面两行连到一起了，匹配到 <strong>5</strong> 的时刻其实模式空间的内容为 <strong>3\n4\n5</strong>，然后执行 <strong>d</strong> 这就相当于删除前两行了。</p>

<p>该命令会多输出最后一行：由于到最后一行，N 又读取了一次下一行（读到结束符），直接就返回没有执行 D 了。sed 文档中的描述如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  `D'
</span><span class='line'>      If pattern space contains no newline, start a normal new cycle as
</span><span class='line'>      if the `d' command was issued.  Otherwise, delete text in the
</span><span class='line'>      pattern space up to the first newline, and restart cycle with the
</span><span class='line'>      resultant pattern space, without reading a new line of input.
</span><span class='line'>  
</span><span class='line'>  `N'
</span><span class='line'>      Add a newline to the pattern space, then append the next line of
</span><span class='line'>      input to the pattern space.  If there is no more input then `sed'
</span><span class='line'>      exits without processing any more commands.</span></code></pre></td></tr></table></div></figure>


<p>修复就是：读到最后一行的时刻就不读下一行了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@ansible sedsed]# echo -e "1\n2\n3\n4\n5\n6\n7\n8\n9\n10" | sed '/5/,+3d;:go;1,2!{P;$!N;D};N;bgo' </span></code></pre></td></tr></table></div></figure>


<h4>加标签</h4>

<p>Sphinx可以通过 <strong>ref</strong> 来访问整个文档中定义的标签。所以只需要在每个标题前加上TAG，然后把链接引用修改成 <strong>ref</strong> 的方式即可。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 文档加TAG：
</span><span class='line'>sed -i ' h;N; /\n=\+$/{ x;s/.*/.. _&:\n/;p; x };  P;D ' $(find . -name '*.rst')
</span><span class='line'>sed -i ' h;N; /\n-\+$/{ x;s/.*/.. _&:\n/;p; x };  P;D ' $(find . -name '*.rst')
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># 修改链接引用：
</span><span class='line'>sed 's/\(`[[:alnum:] ]*`\)_/:ref:\1/ ' $(find . -name '*.rst')
</span></code></pre></td></tr></table></div></figure>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitlab on Docker]]></title>
    <link href="http://winseliu.com/blog/2017/11/20/gitlab-on-docker/"/>
    <updated>2017-11-20T21:38:21+08:00</updated>
    <id>http://winseliu.com/blog/2017/11/20/gitlab-on-docker</id>
    <content type="html"><![CDATA[<ul>
<li><a href="https://github.com/sameersbn/docker-gitlab">https://github.com/sameersbn/docker-gitlab</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./docker-download-mirror.sh sameersbn/redis sameersbn/gitlab:10.1.4 sameersbn/postgresql:9.6-2
</span><span class='line'>
</span><span class='line'># 如果有其他的compose项目，最好每个 docker-compose.yml 放 *不同名称* 的目录下！！
</span><span class='line'>mkdir gitlab
</span><span class='line'>cd !*
</span><span class='line'>
</span><span class='line'>wget https://raw.githubusercontent.com/sameersbn/docker-gitlab/master/docker-compose.yml
</span><span class='line'>sed -i '/GITLAB_HOST/s/.*/    - GITLAB_HOST=192.168.193.8/' docker-compose.yml 
</span><span class='line'>
</span><span class='line'>docker-compose up -d
</span><span class='line'>
</span><span class='line'>firewall-cmd --zone=public --add-port=80/tcp --permanent
</span><span class='line'>firewall-cmd --reload
</span></code></pre></td></tr></table></div></figure>


<p>browser <a href="http://localhost:10080">http://localhost:10080</a></p>

<p>UPDATE: 2018-10-10</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@redmine gitlab]# wget https://raw.githubusercontent.com/sameersbn/docker-gitlab/master/docker-compose.yml
</span><span class='line'>
</span><span class='line'>把postgres的版本改成 image: sameersbn/postgresql:9.6-2 （和redmine使用同一个版本）
</span><span class='line'>
</span><span class='line'>[root@redmine ~]# ./docker-download-mirror.sh sameersbn/redis:4.0.9-1 sameersbn/gitlab:11.3.4 
</span><span class='line'>
</span><span class='line'>修改 GITLAB_HOST GITLAB_PORT 
</span><span class='line'>[root@redmine gitlab]# docker-compose up -d
</span><span class='line'>
</span><span class='line'>然后加入到nginx进行统一访问。git.winseliu.com。。。</span></code></pre></td></tr></table></div></figure>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Sphinx生成/管理文档]]></title>
    <link href="http://winseliu.com/blog/2017/11/16/sphinx-generate-docs/"/>
    <updated>2017-11-16T23:23:23+08:00</updated>
    <id>http://winseliu.com/blog/2017/11/16/sphinx-generate-docs</id>
    <content type="html"><![CDATA[<p>很多开源的软件都使用Sphinx来进行文档的管理，其中Ansible就是其中一个。</p>

<p>Sphinx使用 类MarkDown的reStructuredText格式 来进行内容的编写，然后使用 sphinx-build 命令来生成html文件。</p>

<h2>安装、入门</h2>

<ul>
<li><a href="http://www.sphinx-doc.org/en/stable/tutorial.html">http://www.sphinx-doc.org/en/stable/tutorial.html</a></li>
<li><a href="http://www.sphinx-doc.org/en/stable/rest.html">reStructuredText</a></li>
<li><a href="http://zh-sphinx-doc.readthedocs.io/en/latest/rest.html">reStructuredText 简介</a></li>
<li><a href="http://www.sphinx-doc.org/en/stable/markup/index.html">Sphinx Markup Constructs</a></li>
<li><a href="http://rest-sphinx-memo.readthedocs.io/en/latest/ReST.html">ReST – reStructuredText</a> GOOD!</li>
<li><a href="http://www.bijishequ.com/detail/261642">reStructuredText(rst)快速入门语法说明</a></li>
<li><a href="http://sphinx-doc.readthedocs.io/zh_CN/latest/rest.html#id9">章节</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install python-pip
</span><span class='line'>sudo pip install Sphinx
</span><span class='line'>
</span><span class='line'>sphinx-quickstart
</span></code></pre></td></tr></table></div></figure>


<p>引用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>*重点(emphasis)通常显示为斜体*
</span><span class='line'>`解释文字(interpreted text)通常显示为斜体`
</span><span class='line'>
</span><span class='line'>**重点强调(strong emphasis)通常显示为粗体**
</span><span class='line'>
</span><span class='line'>``行内文本(inline literal)通常显示为等宽文本，空格可以保留，但是换行不可以。``
</span><span class='line'>
</span><span class='line'>章节头部由下线(也可有上线)和包含标点的标题 组合创建, 其中下线要至少等于标准文本的长度。
</span><span class='line'>可以表示标题的符号有 =、-、`、:、'、"、~、^、_ 、* 、+、 #、&lt;、&gt; 。
</span><span class='line'>对于相同的符号，有上标是一级标题，没有上标是二级标题。
</span><span class='line'>标题最多分六级，可以自由组合使用。
</span><span class='line'>
</span><span class='line'># with overline, for parts
</span><span class='line'>* with overline, for chapters
</span><span class='line'>=, for sections
</span><span class='line'>-, for subsections
</span><span class='line'>^, for subsubsections
</span><span class='line'>", for paragraphs
</span></code></pre></td></tr></table></div></figure>


<h2>主题</h2>

<ul>
<li><a href="http://www.sphinx-doc.org/en/stable/theming.html">http://www.sphinx-doc.org/en/stable/theming.html</a></li>
<li><a href="https://pypi.python.org/pypi/sphinx_rtd_theme">https://pypi.python.org/pypi/sphinx_rtd_theme</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo pip install sphinx_rtd_theme
</span><span class='line'>
</span><span class='line'>sed -i "/html_theme/s/.*/html_theme = 'sphinx_rtd_theme'/" conf.py
</span></code></pre></td></tr></table></div></figure>


<h2>管理历史文档</h2>

<ul>
<li><a href="http://zh-sphinx-doc.readthedocs.io/en/latest/intro.html#id2">不同文档系统的转换</a></li>
<li><a href="https://pypi.python.org/pypi/html2rest">https://pypi.python.org/pypi/html2rest</a></li>
</ul>


<p>先使用 html2rest 把html转成reStructuredText格式。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo pip install html2rest
</span><span class='line'>
</span><span class='line'>#JSON：原始文档层次结构
</span><span class='line'>  [
</span><span class='line'>  { "id": "a16", "pId": "a", "name": "Administration", "file": "output/AdministrativeDocumentation.html" }, 
</span><span class='line'>  { "id": "a1617", "pId": "a16", "name": "Basic Configuration Guide" },
</span><span class='line'>  { "id": "a161718", "pId": "a1617", "name": "Configuring Deployments", "file": "output/ConfiguringDeployments.html" }
</span><span class='line'>  ]
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>name=administration
</span><span class='line'>cat $name.json | jq '.[].file' | sed 's/"//g' | while read line ; do cp "$line" $name.origin/  ; done
</span><span class='line'>cd $name.origin
</span><span class='line'>ls | while read f ; do html2rest $f &gt;"../$name.rst/${f%%.*}.rst" ; done
</span></code></pre></td></tr></table></div></figure>


<p>这仅仅是把html转换成了reStructuredText格式，当然我们还可以做多一些的操作：把文件结构也创建出来。</p>

<p>docs-gen.sh脚本内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>JSON_FILE=~/administration.json
</span><span class='line'>
</span><span class='line'>function children(){
</span><span class='line'>local id=$1
</span><span class='line'>
</span><span class='line'>local name="$( cat "$JSON_FILE" | jq '.[] | select(.id=="'$id'")' | jq '.name' | sed 's/"//g' )"
</span><span class='line'>echo "id: $id, name: $name"
</span><span class='line'>
</span><span class='line'>local filename="$( echo $name | sed 's/[^[:alnum:]]//g' )"
</span><span class='line'>
</span><span class='line'>if [ ! -f "$filename.rst" ] ; then
</span><span class='line'>cat &gt; "$filename.rst" &lt;&lt;EOF
</span><span class='line'>$name
</span><span class='line'>======================================
</span><span class='line'>
</span><span class='line'>EOF
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>local nodes="$( cat "$JSON_FILE" | jq '.[] | select(.pId=="'$id'")' )"
</span><span class='line'>
</span><span class='line'>if [ "x$nodes" == "x" ] ; then 
</span><span class='line'>  return 1
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'># if have children, create folder and toc
</span><span class='line'>local foldername="$( echo $name | sed 's/[^[:alnum:]]//g' )"
</span><span class='line'>local names="$( echo "$nodes" | jq ".name" | sed 's/[^[:alnum:]]//g' )"
</span><span class='line'>local ids="$( echo "$nodes" | jq ".id" | sed 's/[^[:alnum:]]//g' )"
</span><span class='line'>
</span><span class='line'>if ! grep '.. toctree::' "$foldername.rst" ; then
</span><span class='line'>cat &gt;&gt;"$foldername.rst" &lt;&lt;EOF
</span><span class='line'>
</span><span class='line'>Contents:
</span><span class='line'>
</span><span class='line'>.. toctree::
</span><span class='line'>   :maxdepth: 3
</span><span class='line'>   :titlesonly:
</span><span class='line'>   :hidden:
</span><span class='line'>   :glob:
</span><span class='line'>   
</span><span class='line'>$( echo "$names" | sed "s#^#   $foldername/#" ) 
</span><span class='line'>
</span><span class='line'>EOF
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>mkdir -p "$foldername"
</span><span class='line'>pushd "$foldername"
</span><span class='line'>
</span><span class='line'>while read cid
</span><span class='line'>do 
</span><span class='line'>  children $cid
</span><span class='line'>done &lt; &lt;(echo "$ids")
</span><span class='line'>
</span><span class='line'>popd
</span><span class='line'>
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>children a
</span></code></pre></td></tr></table></div></figure>


<p>然后执行该命令，把目录、目录索引、临时文件创建好：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/administration
</span><span class='line'>./docs-gen.sh</span></code></pre></td></tr></table></div></figure>


<p>然后就是把最开始转换的rst文件拷贝过来：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ../administration.rst
</span><span class='line'>
</span><span class='line'>ls | while read f ; do 
</span><span class='line'>filename="$(echo $f | sed 's/.rst$//' | sed 's/[^[:alnum:]]//g' ).rst" ; 
</span><span class='line'>find ../administration/ -name "$filename" -exec /bin/cp -f $f {} \;  ;  
</span><span class='line'>done
</span><span class='line'>
</span><span class='line'>#再执行一遍docs-gen.sh，把目录的索引再（确认）添加一次文件末尾
</span><span class='line'>cd ../administration
</span><span class='line'>./docs-gen.sh
</span></code></pre></td></tr></table></div></figure>


<p>完后生成 <code>make html</code> ，直接打开 <strong>_build/html/index.html</strong> 查看下内容。</p>

<p>最后就是根据具体情况，做一些细微的调整了。</p>

<ul>
<li>处理图片，修改 /usr/local/lib/python2.7/dist-packages/html2rest.py</li>
<li>处理文档内互相引用的链接</li>
<li>给标题添加TAG</li>
</ul>


<h2>生成PDF</h2>

<p>除了生成html外，还可以直接编译成PDF，方便携带和查看。（官网是推荐使用latexpdf，但这得安装latex&hellip;）</p>

<ul>
<li><a href="https://www.quora.com/How-to-create-a-PDF-out-of-Sphinx-documentation-tool">https://www.quora.com/How-to-create-a-PDF-out-of-Sphinx-documentation-tool</a></li>
<li>Config value &lsquo;math_number_all&rsquo; already present <a href="https://github.com/sphinx-doc/sphinx/issues/2499">https://github.com/sphinx-doc/sphinx/issues/2499</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@ansible workspace]# pip install rst2pdf
</span><span class='line'>
</span><span class='line'>[root@ansible workspace]# vi conf.py 
</span><span class='line'>...
</span><span class='line'>#extensions = ['sphinx.ext.doctest', 'sphinx.ext.todo', 'sphinx.ext.pngmath']
</span><span class='line'>extensions = ['sphinx.ext.doctest', 'sphinx.ext.todo', 'rst2pdf.pdfbuilder']
</span><span class='line'>
</span><span class='line'>pdf_documents = [('index', u'Workspace', u'Workspace Doc', u'winse'),]
</span><span class='line'>
</span><span class='line'>[root@ansible workspace]# sphinx-build -b pdf . _build/pdf
</span></code></pre></td></tr></table></div></figure>


<p>或者用 singlehtml 临时代替下也行。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make singlehtml</span></code></pre></td></tr></table></div></figure>


<h2>MISC</h2>

<ul>
<li><a href="http://www.sphinx-doc.org/en/latest/markup/inline.html">Inline markup</a></li>
<li><a href="http://zh-sphinx-doc.readthedocs.io/en/latest/markup/inline.html">文档引用</a></li>
<li><a href="http://rest-sphinx-memo.readthedocs.io/en/latest/Sphinx.html#sphinx-inline-markup">Sphinx inline markup</a></li>
<li><a href="http://rest-sphinx-memo.readthedocs.io/en/latest/ReST.html#tables">表格</a> GOOD!</li>
<li><a href="http://openalea.gforge.inria.fr/doc/openalea/doc/_build/html/source/sphinx/rest_syntax.html#tables">table</a></li>
<li><a href="http://www.tablesgenerator.com/text_tables#">tablesgenerator</a> <a href="https://stackoverflow.com/questions/26609816/some-online-tool-or-automation-plugin-for-sublimetext-for-generating-sphinx-rst">&lt;-</a></li>
</ul>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用TeamviewerVPN访问公司内网]]></title>
    <link href="http://winseliu.com/blog/2017/11/04/teamviewer-vpn-on-windows/"/>
    <updated>2017-11-04T22:26:50+08:00</updated>
    <id>http://winseliu.com/blog/2017/11/04/teamviewer-vpn-on-windows</id>
    <content type="html"><![CDATA[<p>一直以来都只是用Teamviewer的图形界面，如果仅仅针对单台机器操作还是蛮OK的。但是如果想要访问远程的整个集群，那就为难了。</p>

<p>以前通过 <strong> 公司的跳板机 </strong>，然后连接 <strong> 内网搭建的VPN </strong> 来实现 <strong> 透明 </strong> 的访问公司的环境。也折腾过自己买一台aliyun的机器搞一个外网IP，然后通过SSH的反向代理来间接的跳转访问公司内网，但成本都还是比较高的。</p>

<p>既然Teamviewer提供了一种远程访问的方式，那么能不能通过Teamviewer来实现代理，继而类似VPN的方式在家访问公司内网呢？</p>

<p>备注：一般都是双保险啊，Teamviewer和Anydesk都放一个！！！</p>

<h2>安装</h2>

<p>Teamviewer是提供了VPN的访问方式，需要在安装的时刻 选择【显示高级设置】，在下一步中选择【使用Teamviewer VPN】。连接的 <strong> 两台主机都需要安装Teamviewer VPN </strong> 的功能！！！</p>

<p><img src="http://winseliu.com/images/teamviewer-vpn-install.png" alt="" /></p>

<h2>使用VPN</h2>

<p><img src="http://winseliu.com/images/teamviewer-vpn-connect.png" alt="" /></p>

<h2>访问内网</h2>

<p>如果是Linux的话，可以在iptables上面配置SNAT，但是Linux Teamviewer暂时不支持VPN功能。
并且公司运行Teamviewer的机器是WIN7，不能通过运行nat命令（server版本才有）来设置转发。最后功夫不负有心人，找到了在win7下可以设置NAT的方法：</p>

<ul>
<li><a href="https://social.technet.microsoft.com/Forums/windows/en-US/30c1affa-cc6b-4eeb-9377-7600cc3f333a/nat-in-windows7?forum=w7itpronetworking">NAT in windows7</a></li>
<li><a href="https://www.onlinekosten.de/forum/showthread.php?p=2278439">AW: mit Teamviewer VPN ins interne Netzwerk?</a></li>
</ul>


<h4>转发配置</h4>

<ol>
<li>连接的两台机器都启动 <strong> Routing an Remote Access </strong> 系统服务。（修改注册表IPEnableRouter的，不弄也行）</li>
<li>在公司Teamviwer机器上，下载并安装 <a href="http://www.nat32.com/download2/nat32v2.zip">NAT</a> ，<a href="https://www.ntkernel.com/downloads/winpkflt_rtl.zip">配置工具</a></li>
<li>在公司Teamviwer机器上，打开配置工具 <strong> WinpkFilter - Internet Gateway </strong>，配置 本地连接 为Provider， Teamviewer VPN 为Client，然后启动 Start NAT。</li>
</ol>


<p><img src="http://winseliu.com/images/teamviewer-vpn-nat-config.png" alt="" /></p>

<ol>
<li>在本地机器上，添加route，把访问 公司内网IP 的数据转到公司Teamviewer VPN，这样我们就可以透明的访问公司的所有机器了。</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#网关填公司Teamviewer端的IP地址！！！
</span><span class='line'>C:\Windows\system32&gt;route add 192.168.193.0 mask 255.255.255.0 7.138.125.65 metric 1
</span><span class='line'>
</span><span class='line'>C:\Windows\system32&gt;ping 192.168.193.110
</span><span class='line'>
</span><span class='line'>正在 Ping 192.168.193.110 具有 32 字节的数据:
</span><span class='line'>来自 192.168.193.110 的回复: 字节=32 时间=22ms TTL=63
</span><span class='line'>来自 192.168.193.110 的回复: 字节=32 时间=21ms TTL=63
</span><span class='line'>来自 192.168.193.110 的回复: 字节=32 时间=21ms TTL=63
</span><span class='line'>
</span><span class='line'>192.168.193.110 的 Ping 统计信息:
</span><span class='line'>    数据包: 已发送 = 3，已接收 = 3，丢失 = 0 (0% 丢失)，
</span><span class='line'>往返行程的估计时间(以毫秒为单位):
</span><span class='line'>    最短 = 21ms，最长 = 22ms，平均 = 21ms</span></code></pre></td></tr></table></div></figure>


<p>完美，所有的事情Teamviewer都帮想到了并且实现了。</p>

<p>把上面的全部操作写到一个脚本，以后直接使用管理员权限运行即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>winse@DESKTOP-ADH7K1Q:~/bigendian$ cat VPN-Route.bat
</span><span class='line'>@setlocal enableextensions enabledelayedexpansion
</span><span class='line'>@echo on
</span><span class='line'>
</span><span class='line'>rem https://community.teamviewer.com/t5/Knowledge-Base/Are-there-parameters-to-start-TeamViewer/ta-p/4135
</span><span class='line'>rem teamviewer.exe -i &lt;ID&gt; -P &lt;Password&gt; [-m fileTransfer/vpn]
</span><span class='line'>start "teamviewer" "C:\Program Files (x86)\TeamViewer\TeamViewer.exe"
</span><span class='line'>
</span><span class='line'>set teamvpnipaddr=7.138.125.65
</span><span class='line'>
</span><span class='line'>:loop
</span><span class='line'>ping -n 1 !teamvpnipaddr! | find "TTL"
</span><span class='line'>if not errorlevel 1 goto :run
</span><span class='line'>if errorlevel 1 goto :endloop
</span><span class='line'>:endloop
</span><span class='line'>ping -n 2 127.0.0.1 &gt;nul: 2&gt;nul:
</span><span class='line'>cls
</span><span class='line'>goto :loop
</span><span class='line'>
</span><span class='line'>:run
</span><span class='line'>route delete 192.168.193.0
</span><span class='line'>route add 192.168.193.0 mask 255.255.255.0 !teamvpnipaddr! metric 1
</span><span class='line'>
</span><span class='line'>endlocal
</span><span class='line'>
</span><span class='line'>pause
</span></code></pre></td></tr></table></div></figure>


<h2>参考的原文：</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>Hello everybody, I investigated a lot for this issue.
</span><span class='line'>Establish a VPN session with TeamViewer to my home pc (remote side) and try to get access to this local network from my working place (local side).
</span><span class='line'>I found an solution i never read anywhere before. Since Windows 7 has removed NAT option using netsh it is difficult to solve it with windows on board tools only.
</span><span class='line'>- Install TeamViewer incl. VPN driver on both sides, activate unattended access on the remote side (my home pc). Use the button Show advanced options, and go to Advanced network options … Install VPN driver
</span><span class='line'>- Install WinPkFilter Device Driver on remote side (my home pc) and restart (http://www.nat32.com/v2/install.htm Download installer: http://www.ntkernel.com/downloads/winpkflt_rtl.zip . NAT32 you don't need. This WinPkFilter package contains a simple GUI to configure the NAT between the VPN interface (client) and the remote side LAN interface (provider). see following hints ...
</span><span class='line'>- Windows: Start RemoteAccess - service 'Routing an Remote Access'  and set to automatic (local/remote side).
</span><span class='line'>- Optional: On the remote side (my home pc), the registry has to be modified. Start the registry editor for example by Regedt32, and browse to HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters Set the parameter IPEnableRouter to “1”. Using console or batch as admin: reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters" /v "IPEnableRouter" /t REG_DWORD /d "1". On my system it worked without this option, but according internet forums it seems to be recommended.
</span><span class='line'>- Now create a remote desktop session to your home pc and start also the VPN connection within this TeamViewer session (Menu / Extras / VPN). I created a free TeamViewer account and added all pc's to my computers to make the access to my machines easier.
</span><span class='line'>- On remode side (my home pc) where WinPkFilter is installed start the Internet Gateway GUI of WinPkFilter: Start / Programms / WinpkFilter / Internet Gateway. Select (double click) the ethernet adapter of your local privat lan and set NAT Status to 'Provider'. Select the TeamViewer VPN adapter and set NAT Status to 'client'. Press 'Start NAT'
</span><span class='line'> - On local side (my working place) Add a route to the local side (my working place) to give access to several devices that have the same subnet, add the route like this:
</span><span class='line'>
</span><span class='line'>route add &lt;base IP of remote devices&gt; mask 255.255.255.0 &lt;IP of Teamviewer VPN on remote PC&gt; 
</span><span class='line'>metric 1
</span><span class='line'>
</span><span class='line'>Example (home lan ip range: 192.168.2.x / TeamViewer VPN IP in home pc (remote side) 7.37.88.245
</span><span class='line'>route add 192.168.2.0 mask 255.255.255.0 7.37.88.245 metric 1 &lt;ENTER&gt;
</span><span class='line'>route add 192.168.2.0 mask 255.255.255.0 7.37.88.245 metric 1 -p &lt;ENTER&gt; (if persistent)
</span><span class='line'>Do delete the route route delete 192.168.2.0
</span><span class='line'>Now you should have access to your private home network. Good luck and have fun.
</span></code></pre></td></tr></table></div></figure>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows Run Ubuntu]]></title>
    <link href="http://winseliu.com/blog/2017/10/30/windows-run-ubuntu/"/>
    <updated>2017-10-30T07:17:53+08:00</updated>
    <id>http://winseliu.com/blog/2017/10/30/windows-run-ubuntu</id>
    <content type="html"><![CDATA[<p>最新版的Windows已经可以安装ubuntu了，算是微软开源后的一个阶段性的成果了。</p>

<p>功能和windows兼容性很强（不像cygwin），软链接、文件权限都是和系统一致的。并且基本所有ubuntu的功能都可以使用，安装jekyll、docker都很顺利。同时打开系统的程序也很方便。非常赞和值得程序员去尝试！！</p>

<p>本文后面会逐渐增加使用过程中的一些操作，今天先更新系统安装、octopress安装、docker安装。</p>

<h2>系统安装</h2>

<p>直接去微软的官网下载最新版系统ISO，然后安装系统 <strong> 专业版 </strong>（教育版比较干净一些，但是网上没有破解方式啊）。</p>

<h2>Ubuntu</h2>

<ul>
<li><a href="https://docs.microsoft.com/en-us/windows/wsl/about">Windows Subsystem for Linux Documentation</a></li>
</ul>


<blockquote><p>The Windows Subsystem for Linux lets developers run Linux environments &ndash; including most command-line tools, utilities, and applications &ndash; directly on Windows, unmodified, without the overhead of a virtual machine.</p></blockquote>

<h4>安装Ubuntu</h4>

<p>最新版的Ubuntu已经进入到稳定版。直接打开商店，搜索Ubuntu，然后安装即可。大概200M的样子，很快就安装了。然后Launch会初始化创建用户。</p>

<p>相关的一些有用的文档：</p>

<ul>
<li><a href="https://msdn.microsoft.com/zh-cn/commandline/wsl/user-support">https://msdn.microsoft.com/zh-cn/commandline/wsl/user-support</a></li>
<li>权限相关 <a href="https://github.com/Microsoft/WSL/issues/81">https://github.com/Microsoft/WSL/issues/81</a></li>
</ul>


<h4>安装mintty</h4>

<ul>
<li><a href="https://superuser.com/questions/1110045/windows-10-bash-and-mintty">https://superuser.com/questions/1110045/windows-10-bash-and-mintty</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/22033219">https://zhuanlan.zhihu.com/p/22033219</a></li>
</ul>


<p>CMD方式操作Ubuntu太难受了，mintty操作就像SecurtCRT一样，简单方便。安装 <a href="https://github.com/mintty/wsltty">wsltty-1.8.0-install</a> ，使用mintty来运行ubuntu。</p>

<p>默认mintty的配置放在 <code>%APPDATA%\wsltty</code>。在子目录theme下可以 <a href="http://ciembor.github.io/4bit/">http://ciembor.github.io/4bit/</a> 下载一个主题放到该目录下，然后在mintty配置页面选择该主题。</p>

<h4>系统文件</h4>

<ul>
<li><a href="https://github.com/Microsoft/WSL/issues/402">https://github.com/Microsoft/WSL/issues/402</a></li>
</ul>


<p>root挂载点：<code>C:\Users\&lt;user&gt;\AppData\Local\lxss</code> or <code>C:\Users\&lt;username&gt;\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState</code></p>

<h2>安装Jekyll</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># https://superuser.com/questions/116625/recursively-change-owner-windows-7
</span><span class='line'>#takeown /f "C:\path\to\folder" /r
</span><span class='line'>#icacls "C:\path\to\folder" /reset /T
</span><span class='line'>用powershell管理员权限 "提"权
</span><span class='line'>PS E:\winsegit\octopress&gt; takeown /F . /R
</span><span class='line'>修改就旧系统的文件属性：
</span><span class='line'>PS E:\winsegit\octopress&gt; cacls *.* /T /G Everyone:F
</span><span class='line'>
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install ruby-bundler
</span><span class='line'>sudo apt-get install ruby-dev
</span><span class='line'>sudo apt-get install make
</span><span class='line'>sudo apt-get install gcc
</span><span class='line'>bundle install
</span><span class='line'>
</span><span class='line'>sudo gem update
</span><span class='line'>sudo gem uninstall rake
</span><span class='line'>sudo gem install rake -v 10.5.0
</span><span class='line'>sudo apt-get install nodejs
</span><span class='line'>   
</span><span class='line'>rake preview
</span><span class='line'>
</span><span class='line'>winse@DESKTOP-ADH7K1Q:~/winsegit/octopress$ rake preview
</span><span class='line'>/usr/lib/ruby/vendor_ruby/bundler/shared_helpers.rb:78: warning: Insecure world writable dir /mnt/c/Windows/System32 in PATH, mode 040777
</span><span class='line'>Starting to watch source with Jekyll and Compass. Starting Rack on port 4000
</span><span class='line'>/usr/lib/ruby/vendor_ruby/bundler/shared_helpers.rb:78: warning: Insecure world writable dir /mnt/c/Windows/System32 in PATH, mode 040777
</span><span class='line'>/usr/lib/ruby/vendor_ruby/bundler/shared_helpers.rb:78: warning: Insecure world writable dir /mnt/c/Windows/System32 in PATH, mode 040777
</span><span class='line'>/var/lib/gems/2.3.0/gems/liquid-2.6.1/lib/liquid/htmltags.rb:43: warning: key "index0" is duplicated and overwritten on line 46
</span><span class='line'>[2017-10-29 22:48:09] INFO  WEBrick 1.3.1
</span><span class='line'>[2017-10-29 22:48:09] INFO  ruby 2.3.1 (2016-04-26) [x86_64-linux-gnu]
</span><span class='line'>[2017-10-29 22:48:09] INFO  WEBrick::HTTPServer#start: pid=39 port=4000
</span><span class='line'>Configuration file: /mnt/e/winsegit/octopress/_config.yml
</span><span class='line'>            Source: source
</span><span class='line'>       Destination: public
</span><span class='line'>      Generating...
</span><span class='line'>                    done.
</span><span class='line'>                  </span></code></pre></td></tr></table></div></figure>


<p>上面warning提示也有对应的Issue，但也没所谓暂时不理： <a href="https://github.com/Microsoft/WSL/issues/1426">https://github.com/Microsoft/WSL/issues/1426</a></p>

<h2>安装docker</h2>

<ul>
<li><a href="https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/#install-docker-ce-1">https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/#install-docker-ce-1</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>winse@DESKTOP-ADH7K1Q:~$ uname -r
</span><span class='line'>4.4.0-43-Microsoft
</span><span class='line'>winse@DESKTOP-ADH7K1Q:~$ uname -a
</span><span class='line'>Linux DESKTOP-ADH7K1Q 4.4.0-43-Microsoft #1-Microsoft Wed Dec 31 14:42:53 PST 2014 x86_64 x86_64 x86_64 GNU/Linux
</span><span class='line'>
</span><span class='line'>winse@DESKTOP-ADH7K1Q:~$  sudo apt-get install \
</span><span class='line'>     apt-transport-https \
</span><span class='line'>     ca-certificates \
</span><span class='line'>     curl \
</span><span class='line'>     software-properties-common
</span><span class='line'>
</span><span class='line'>winse@DESKTOP-ADH7K1Q:~$ lsb_release -cs
</span><span class='line'>xenial
</span><span class='line'>winse@DESKTOP-ADH7K1Q:~$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
</span><span class='line'>OK
</span><span class='line'>winse@DESKTOP-ADH7K1Q:~$ sudo add-apt-repository \
</span><span class='line'>   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
</span><span class='line'>   $(lsb_release -cs) \
</span><span class='line'>   stable"
</span><span class='line'>
</span><span class='line'>winse@DESKTOP-ADH7K1Q:~$ sudo apt-get update
</span><span class='line'>
</span><span class='line'>winse@DESKTOP-ADH7K1Q:~$ sudo apt-get install docker-ce
</span><span class='line'>
</span><span class='line'>winse@DESKTOP-ADH7K1Q:~$ sudo service docker start
</span><span class='line'> * Starting Docker: docker                                                                                                                     [ OK ]
</span><span class='line'>winse@DESKTOP-ADH7K1Q:~$ sudo docker images
</span><span class='line'>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
</span><span class='line'>winse@DESKTOP-ADH7K1Q:~$ sudo docker ps
</span><span class='line'>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
</span><span class='line'>winse@DESKTOP-ADH7K1Q:~$
</span></code></pre></td></tr></table></div></figure>


<h2>运行windows系统应用</h2>

<ul>
<li><a href="https://www.howtogeek.com/285082/how-to-run-windows-programs-from-windows-10s-bash-shell/">https://www.howtogeek.com/285082/how-to-run-windows-programs-from-windows-10s-bash-shell/</a></li>
<li><a href="https://github.com/Microsoft/WSL/issues/333">https://github.com/Microsoft/WSL/issues/333</a></li>
<li><a href="https://msdn.microsoft.com/en-us/commandline/wsl/interop">https://msdn.microsoft.com/en-us/commandline/wsl/interop</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>winse@DESKTOP-ADH7K1Q:~$ ln -s /mnt/e/local/usr/share/npp/notepad++.exe text
</span><span class='line'>
</span><span class='line'>winse@DESKTOP-ADH7K1Q:~$ cp -r ../winse-cygwin/new_post.sh ./
</span><span class='line'>winse@DESKTOP-ADH7K1Q:~$ cat new_post.sh
</span><span class='line'>cd ~/winsegit/octopress/
</span><span class='line'>rake new_post["$1"] | tail -1 | awk -F: '{print $2}' | while read line
</span><span class='line'>do
</span><span class='line'>name=${line#source/_posts/}
</span><span class='line'>newpath=source/_stash/$name
</span><span class='line'>mv $line $newpath
</span><span class='line'>
</span><span class='line'>echo -e "\n\n--END" &gt;&gt;$newpath
</span><span class='line'>
</span><span class='line'>~/text $newpath &
</span><span class='line'>done
</span><span class='line'>
</span><span class='line'>winse@DESKTOP-ADH7K1Q:~$ ./new_post.sh "windows run ubuntu"
</span><span class='line'>/usr/lib/ruby/vendor_ruby/bundler/shared_helpers.rb:78: warning: Insecure world writable dir /mnt/c in PATH, mode 040777
</span><span class='line'>mkdir -p source/_posts
</span></code></pre></td></tr></table></div></figure>


<h2>重新配置git</h2>

<p>用powershell修改原来的权限后，然后用shell来进行设置。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#powershell
</span><span class='line'>takeown /F . /R
</span><span class='line'>cacls *.* /T /G Everyone:F
</span><span class='line'>
</span><span class='line'>#ubuntu shell
</span><span class='line'>winse@DESKTOP-ADH7K1Q:~$ cp -r ../winse-cygwin/.ssh ./
</span><span class='line'>
</span><span class='line'>winse@DESKTOP-ADH7K1Q:~$ cd .ssh
</span><span class='line'>winse@DESKTOP-ADH7K1Q:~/.ssh$ chmod 600 id_rsa authorized_keys
</span><span class='line'>winse@DESKTOP-ADH7K1Q:~/.ssh$ chmod 644 id_rsa.pub config
</span><span class='line'>
</span><span class='line'>winse@DESKTOP-ADH7K1Q:~/winsegit/octopress/_deploy$ rm -rf *
</span><span class='line'>winse@DESKTOP-ADH7K1Q:~/winsegit/octopress/_deploy$ git clone git@github.com:winse/winse.github.com.git ./
</span><span class='line'>
</span><span class='line'>winse@DESKTOP-ADH7K1Q:~/winsegit/octopress$ git config --global user.email winseliu@qq.com
</span><span class='line'>winse@DESKTOP-ADH7K1Q:~/winsegit/octopress$ git config --global user.name winse
</span><span class='line'>
</span><span class='line'>winse@DESKTOP-ADH7K1Q:~/winsegit/octopress$ rake preview
</span><span class='line'>winse@DESKTOP-ADH7K1Q:~/winsegit/octopress$ sh public.git.sh
</span></code></pre></td></tr></table></div></figure>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Cenots7双击运行程序]]></title>
    <link href="http://winseliu.com/blog/2017/10/28/application-run-do-double-click-on-centos7/"/>
    <updated>2017-10-28T22:58:20+08:00</updated>
    <id>http://winseliu.com/blog/2017/10/28/application-run-do-double-click-on-centos7</id>
    <content type="html"><![CDATA[<p>Linux本来就是作为服务器来运行的，双击运行程序的需求比较少。但是还是有一些，同时也没有Windows桌面快捷方式那么的方便。</p>

<p>在Centos7中建立&#8221;快捷方式&#8221;双击运行，需要建立一个desktop类型的文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@k8s ~] cat ~/Desktop/Cassandra.desktop
</span><span class='line'>[Desktop Entry]
</span><span class='line'>Name=Cassandra
</span><span class='line'>Comment=Launch Cassandra
</span><span class='line'>Exec=su - hadoop /home/hadoop/apache-cassandra-2.2.10/bin/cassandra -f
</span><span class='line'>Terminal=true
</span><span class='line'>Type=Application
</span></code></pre></td></tr></table></div></figure>


<p>右键创建快捷的方式，在Centos7上面没有找到。</p>

<blockquote><p>In Gnome :
- right click on the desktop and &lsquo;create launcher&rsquo;
- browse to the script location and give a name</p></blockquote>

<h2>参考</h2>

<ul>
<li><a href="https://unix.stackexchange.com/questions/189777/how-to-launch-shell-script-with-double-click-in-centos-7">https://unix.stackexchange.com/questions/189777/how-to-launch-shell-script-with-double-click-in-centos-7</a></li>
<li><a href="https://askubuntu.com/questions/138908/how-to-execute-a-script-just-by-double-clicking-like-exe-files-in-windows">https://askubuntu.com/questions/138908/how-to-execute-a-script-just-by-double-clicking-like-exe-files-in-windows</a></li>
</ul>


<p>&ndash;END</p>
]]></content>
  </entry>
  
</feed>
