<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: #nagios | Winse Blog]]></title>
  <link href="http://winse.github.io/blog/categories/nagios/atom.xml" rel="self"/>
  <link href="http://winse.github.io/"/>
  <updated>2024-01-14T00:30:01+08:00</updated>
  <id>http://winse.github.io/</id>
  <author>
    <name><![CDATA[Winse Liu]]></name>
    <email><![CDATA[winseliu@foxmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cacti批量添加配置]]></title>
    <link href="http://winse.github.io/blog/2015/10/13/cacti-batch-adding-configurations/"/>
    <updated>2015-10-13T08:35:50+08:00</updated>
    <id>http://winse.github.io/blog/2015/10/13/cacti-batch-adding-configurations</id>
    <content type="html"><![CDATA[<h2>所有机器SNMP配置同步</h2>

<pre><code>for h in `cat /etc/hosts| grep hadoop|awk '{print $2}'` ; do scp -r /etc/snmp/snmpd.conf $h:/etc/snmp/ ; done

for h in `cat /etc/hosts| grep hadoop|awk '{print $2}'` ; do ssh $h "service snmpd start" ; done
</code></pre>

<h2>Cacti批量添加配置</h2>

<pre><code>批量添加device。ip也可以为hostname；template为机器模板；version为SNMP的版本
[root@cu-omc1 cacti]# for h in `cat /etc/hosts | grep hadoop | awk '{print $2}'` ; do php cli/add_device.php --description="$h" --ip="$h" --template=9 --version=2 ; done

了解参数
[root@cu-omc1 cacti]# php cli/add_graphs.php --list-hosts

[root@cu-omc1 cacti]# php cli/add_graphs.php --list-graph-templates --host-template-id=9
Known Graph Templates:(id, name)
29      Host MIB - Processes
35      ucd/net - Users Logged On
36      ucd/net - TCP Current Established
37      ucd/net - Uptime
38      ucd/net - TCP Counters
39      ucd/net - Memory Usage (enhanced)
40      ucd/net - Load Average (enhanced)
41      ucd/net - CPU Usage (enhanced)

[root@cu-omc1 cacti]# php cli/add_graphs.php --list-snmp-queries
Known SNMP Queries:(id, name)
1       SNMP - Interface Statistics
2       ucd/net -  Get Monitored Partitions
3       Karlnet - Wireless Bridge Statistics
4       Netware - Get Available Volumes
6       Unix - Get Mounted Partitions
7       Netware - Get Processor Information
8       SNMP - Get Mounted Partitions
9       SNMP - Get Processor Information

[root@cu-omc1 cacti]# php cli/add_graphs.php --list-snmp-fields --host-id=2 --snmp-query-id=1
Known SNMP Fields for host-id 2: (name)
ifAlias
ifDescr
ifHighSpeed
ifHwAddr
ifIndex
ifIP
ifName
ifOperStatus
ifSpeed
ifType

[root@cu-omc1 cacti]# php cli/add_graphs.php --list-snmp-values --host-id=2 --snmp-query-id=1 --snmp-field=ifIP
Known values for ifIP for host 2: (name)
127.0.0.1
192.168.20.11

[root@cu-omc1 cacti]# php cli/add_graphs.php  --list-graph-templates 
Known Graph Templates:(id, name)
2       Interface - Traffic (bits/sec)
3       ucd/net - Available Disk Space
4       ucd/net - CPU Usage
5       Karlnet - Wireless Levels
6       Karlnet - Wireless Transmissions
7       Unix - Ping Latency
8       Unix - Processes
9       Unix - Load Average
10      Unix - Logged in Users
11      ucd/net - Load Average
12      Linux - Memory Usage
13      ucd/net - Memory Usage
14      Netware - File System Cache
15      Netware - CPU Utilization
16      Netware - File System Activity
17      Netware - Logged In Users
18      Cisco - CPU Usage
19      Netware - Volume Information
20      Netware - Directory Information
21      Unix - Available Disk Space
22      Interface - Errors/Discards
23      Interface - Unicast Packets
24      Interface - Non-Unicast Packets
25      Interface - Traffic (bytes/sec)
26      Host MIB - Available Disk Space
27      Host MIB - CPU Utilization
28      Host MIB - Logged in Users
29      Host MIB - Processes
30      Netware - Open Files
31      Interface - Traffic (bits/sec, 95th Percentile)
32      Interface - Traffic (bits/sec, Total Bandwidth)
33      Interface - Traffic (bytes/sec, Total Bandwidth)
34      SNMP - Generic OID Template
35      ucd/net - Users Logged On
36      ucd/net - TCP Current Established
37      ucd/net - Uptime
38      ucd/net - TCP Counters
39      ucd/net - Memory Usage (enhanced)
40      ucd/net - Load Average (enhanced)
41      ucd/net - CPU Usage (enhanced)

[root@cu-omc1 cacti]# php cli/add_graphs.php  --list-query-types  --snmp-query-id=1
Known SNMP Query Types: (id, name)
2       In/Out Errors/Discarded Packets
3       In/Out Non-Unicast Packets
4       In/Out Unicast Packets
9       In/Out Bytes (64-bit Counters)
13      In/Out Bits
14      In/Out Bits (64-bit Counters)
16      In/Out Bytes
20      In/Out Bits with 95th Percentile
21      In/Out Bits with Total Bandwidth
22      In/Out Bytes with Total Bandwidth

先测试单机添加，对应到Device页面点击`Create Graphs for this Host`添加图像的操作
[root@cu-omc1 cacti]# php cli/add_graphs.php --host-id=2 --graph-type=cg --graph-template-id=40
Graph Added - graph-id: (5) - data-source-ids: (8, 9, 10)
[root@cu-omc1 cacti]# php cli/add_graphs.php --host-id=2 --graph-type=cg --graph-template-id=41
Graph Added - graph-id: (6) - data-source-ids: (11, 12, 13, 14)
[root@cu-omc1 cacti]# php cli/add_graphs.php --host-id=2 --graph-type=cg --graph-template-id=39
Graph Added - graph-id: (7) - data-source-ids: (15, 16, 17, 18, 19)
[root@cu-omc1 cacti]# php cli/add_graphs.php --host-id=2 --graph-type=cg --graph-template-id=38

[root@cu-omc1 cacti]# php cli/add_graphs.php --host-id="2" --graph-type=ds  --graph-template-id=2 --snmp-query-id=1 --snmp-query-type-id=16 --snmp-field=ifIP --snmp-value="192.168.20.11"
Graph Added - graph-id: (9) - data-source-ids: (24, 24)

批量操作
添加Graph Templates
[root@cu-omc1 cacti]# php cli/add_graphs.php --list-hosts | awk '{print $1}' | while read line ; do 
&gt;  php cli/add_graphs.php --host-id=$line --graph-type=cg --graph-template-id=41
&gt;  php cli/add_graphs.php --host-id=$line --graph-type=cg --graph-template-id=40
&gt;  php cli/add_graphs.php --host-id=$line --graph-type=cg --graph-template-id=39
&gt;  php cli/add_graphs.php --host-id=$line --graph-type=cg --graph-template-id=38
&gt; done

添加Data Query。比较复杂点，需要查询匹配
php cli/add_graphs.php --list-hosts | awk '{print $1}' | while read line ; do 
  php cli/add_graphs.php --host-id=$line --graph-type=ds  --graph-template-id=2 --snmp-query-id=1 --snmp-query-type-id=16 --snmp-field=ifIP --snmp-value=$(grep "`php cli/add_graphs.php --list-hosts | grep "^$line\s" | awk '{print $2}'`\s" /etc/hosts | awk '{print $1}')
done
</code></pre>

<h2>其他命令</h2>

<pre><code>
dmesg |grep eth0

iftop –i eth0 –B

sar -n DEV 1 100 

ethtool eth0

[omc@cu-omc1 ~]$ sort -k 2 /tmp/cacti.list &gt; /tmp/cacti.sort.list
[omc@cu-omc1 ~]$ grep hadoop /etc/hosts | sort -k 2 | join -j 2 - /tmp/cacti.sort.list 
</code></pre>

<h2>参考</h2>

<ul>
<li><a href="http://www.educity.cn/net/1619986.html">http://www.educity.cn/net/1619986.html</a></li>
</ul>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nagios监控主机]]></title>
    <link href="http://winse.github.io/blog/2015/09/25/nagios-start-guide/"/>
    <updated>2015-09-25T17:40:58+08:00</updated>
    <id>http://winse.github.io/blog/2015/09/25/nagios-start-guide</id>
    <content type="html"><![CDATA[<h2>更新</h2>

<ul>
<li>2016-1-20</li>
<li>2016-4-20 nrpe编译好后，在编译目录有 init-script 服务脚本。</li>
</ul>


<h2>正文</h2>

<p>和Cacti查看时间序列图形不同，Nagios更多的是状态的预警。</p>

<ul>
<li>下载应用</li>
</ul>


<p>到<a href="http://sourceforge.net/projects/nagios/files/?source=navbar">sourceforge</a>下面最新版的应用。</p>

<pre><code>[root@cu2 nagios]# cat /etc/redhat-release 
CentOS release 6.6 (Final)
[root@cu2 nagios]# ll
-rw-r--r--  1 root root 11206656 Sep 23 12:47 nagios-4.1.1.tar.gz
-rw-r--r--  1 root root  2677352 Sep 23 12:47 nagios-plugins-2.1.1.tar.gz
-rw-r--r--  1 root root   419695 Sep 23 15:18 nrpe-2.15.tar.gz
</code></pre>

<ul>
<li>新增nagios用户</li>
</ul>


<pre><code>[root@cu2 nagios]# useradd nagios
[root@cu2 nagios]# groupadd nagcmd
[root@cu2 nagios]# usermod -G nagcmd nagios
[root@cu2 nagios]# usermod -G nagcmd apache 
# 如果已经安装了httpd，查看下是哪个用户进程，把该用户加入到nagcmd组。修改后需要重启httpd
</code></pre>

<ul>
<li>编译Nagios服务端</li>
</ul>


<p>由于前面安装Cacti已经把依赖都安装了，如gcc、gd、httpd、php php-devel php-mysql php-pear php-common php-gd php-mbstring php-cli。</p>

<pre><code>[root@cu2 nagios]# cd nagios-4.1.1/
[root@cu2 nagios-4.1.1]# ./configure --with-command-group=nagcmd
...
Creating sample config files in sample-config/ ...


*** Configuration summary for nagios 4.1.1 08-19-2015 ***:

 General Options:
 -------------------------
        Nagios executable:  nagios
        Nagios user/group:  nagios,nagios
       Command user/group:  nagios,nagcmd
             Event Broker:  yes
        Install ${prefix}:  /usr/local/nagios
    Install ${includedir}:  /usr/local/nagios/include/nagios
                Lock file:  ${prefix}/var/nagios.lock
   Check result directory:  ${prefix}/var/spool/checkresults
           Init directory:  /etc/rc.d/init.d
  Apache conf.d directory:  /etc/httpd/conf.d
             Mail program:  /bin/mail
                  Host OS:  linux-gnu
          IOBroker Method:  epoll

 Web Interface Options:
 ------------------------
                 HTML URL:  http://localhost/nagios/
                  CGI URL:  http://localhost/nagios/cgi-bin/
 Traceroute (used by WAP):  


Review the options above for accuracy.  If they look okay,
type 'make all' to compile the main program and CGIs.


# 编译
[root@cu2 nagios-4.1.1]# make all
...

*** Compile finished ***

If the main program and CGIs compiled without any errors, you
can continue with installing Nagios as follows (type 'make'
without any arguments for a list of all possible options):

  make install
     - This installs the main program, CGIs, and HTML files

  make install-init
     - This installs the init script in /etc/rc.d/init.d

  make install-commandmode
     - This installs and configures permissions on the
       directory for holding the external command file

  make install-config
     - This installs *SAMPLE* config files in /usr/local/nagios/etc
       You'll have to modify these sample files before you can
       use Nagios.  Read the HTML documentation for more info
       on doing this.  Pay particular attention to the docs on
       object configuration files, as they determine what/how
       things get monitored!

  make install-webconf
     - This installs the Apache config file for the Nagios
       web interface

  make install-exfoliation
     - This installs the Exfoliation theme for the Nagios
       web interface

  make install-classicui
     - This installs the classic theme for the Nagios
       web interface


*** Support Notes *******************************************

If you have questions about configuring or running Nagios,
please make sure that you:

     - Look at the sample config files
     - Read the documentation on the Nagios Library at:
           https://library.nagios.com

before you post a question to one of the mailing lists.
Also make sure to include pertinent information that could
help others help you.  This might include:

     - What version of Nagios you are using
     - What version of the plugins you are using
     - Relevant snippets from your config files
     - Relevant error messages from the Nagios log file

For more information on obtaining support for Nagios, visit:

       https://support.nagios.com

*************************************************************

Enjoy.


# 安装
[root@cu2 nagios-4.1.1]# make install
...

*** Main program, CGIs and HTML files installed ***

You can continue with installing Nagios as follows (type 'make'
without any arguments for a list of all possible options):

  make install-init
     - This installs the init script in /etc/rc.d/init.d

  make install-commandmode
     - This installs and configures permissions on the
       directory for holding the external command file

  make install-config
     - This installs sample config files in /usr/local/nagios/etc

make[1]: Leaving directory `/data/nagios/nagios-4.1.1'


# 初始化
[root@cu2 nagios-4.1.1]# make install-init
/usr/bin/install -c -m 755 -d -o root -g root /etc/rc.d/init.d
/usr/bin/install -c -m 755 -o root -g root daemon-init /etc/rc.d/init.d/nagios

*** Init script installed ***


# 安装/初始化配置
[root@cu2 nagios-4.1.1]# make install-config
...

*** Config files installed ***

Remember, these are *SAMPLE* config files.  You'll need to read
the documentation for more information on how to actually define
services, hosts, etc. to fit your particular needs.


# 修改权限
[root@cu2 nagios-4.1.1]# make install-commandmode
/usr/bin/install -c -m 775 -o nagios -g nagcmd -d /usr/local/nagios/var/rw
chmod g+s /usr/local/nagios/var/rw

*** External command directory configured ***


# 配置
[root@cu2 nagios-4.1.1]# vi /usr/local/nagios/etc/objects/contacts.cfg 
...修改define contact定义中的mail为你邮件。
define contact{
        contact_name                    nagiosadmin             ; Short name of user
        use                             generic-contact         ; Inherit default values from generic-contact template (defined above)
        alias                           Nagios Admin            ; Full name of user

        email                           1234@XXX.cn      ; &lt;&lt;***** CHANGE THIS TO YOUR EMAIL ADDRESS ******
        }


# httpd配置
[root@cu2 nagios-4.1.1]# make install-webconf
/usr/bin/install -c -m 644 sample-config/httpd.conf /etc/httpd/conf.d/nagios.conf

*** Nagios/Apache conf file installed ***


# 权限/密码
[root@cu2 nagios-4.1.1]# htpasswd -c /usr/local/nagios/etc/htpasswd.users nagiosadmin
New password: 
Re-type new password: 
Adding password for user nagiosadmin
[root@cu-omc1 nagios-4.1.1]# chmod 644 /usr/local/nagios/etc/htpasswd.users 


# 重启HTTPD（应该可以不用重启）
[root@cu2 nagios-4.1.1]# service httpd restart
Stopping httpd:                                            [  OK  ]
Starting httpd: httpd: Could not reliably determine the server's fully qualified domain name, using 192.168.0.214 for ServerName
                                                           [  OK  ]
</code></pre>

<ul>
<li>编译nagios-plugin</li>
</ul>


<pre><code>如果configure没有mysql和ssl，先安装依赖
yum -y install mysql-devel openssl

[root@cu2 nagios]# cd nagios-plugins-2.1.1/
[root@cu2 nagios-plugins-2.1.1]# ./configure --with-nagios-user=nagios --with-nagios-group=nagios
...
            --with-apt-get-command: 
              --with-ping6-command: /bin/ping6 -n -U -w %d -c %d %s
               --with-ping-command: /bin/ping -n -U -w %d -c %d %s
                       --with-ipv6: yes
                      --with-mysql: /usr/bin/mysql_config
                    --with-openssl: yes
                     --with-gnutls: no
               --enable-extra-opts: yes
                       --with-perl: /usr/bin/perl
             --enable-perl-modules: no
                     --with-cgiurl: /nagios/cgi-bin
               --with-trusted-path: /usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
                   --enable-libtap: no
[root@cu2 nagios-plugins-2.1.1]# make 
[root@cu2 nagios-plugins-2.1.1]# make install
</code></pre>

<p>打开浏览器，使用nagiosadmin和刚刚用htpasswd设置的密码登录就可以localhost的状态了。</p>

<p>手动制造一点异常，如登录用户超过50个。然后看刚刚设置的提醒邮箱是否收到告警。</p>

<pre><code>[root@cu2 nagios]# service nagios status
nagios (pid 53764) is running...
[root@cu2 nagios]# lsof -p 53764
nagios  53764 nagios    4u   REG                8,3    12715   280762 /usr/local/nagios/var/nagios.log


# 日志目录，看看是否有错误，然后做相应的处理
[root@cu2 nagios]# less /usr/local/nagios/var/nagios.log

# 如，机器可能没有安装mail等
[root@cu2 nagios]# yum install mail -y
</code></pre>

<ul>
<li>被监控机器安装nrpe</li>
</ul>


<p>程序编译都在cu2上面操作，编译完后，把编译安装的程序直接scp到其他机器就可以了。被监控机器需要nagios-plugin和nrpe。</p>

<p>编译之前可以先看看nrpe-2.15/docs/NRPE.pdf，讲的很详细和清楚。</p>

<pre><code>[root@cu2 nagios-plugins-2.1.1]# cd ../nrpe-2.15
[root@cu2 nrpe-2.15]# ./configure 
...

*** Configuration summary for nrpe 2.15 09-06-2013 ***:

 General Options:
 -------------------------
 NRPE port:    5666
 NRPE user:    nagios
 NRPE group:   nagios
 Nagios user:  nagios
 Nagios group: nagios


Review the options above for accuracy.  If they look okay,
type 'make all' to compile the NRPE daemon and client.

[root@cu2 nrpe-2.15]# make all
cd ./src/; make ; cd ..
make[1]: Entering directory `/data/nagios/nrpe-2.15/src'
gcc -g -O2 -I/usr/include/openssl -I/usr/include -DHAVE_CONFIG_H -I ../include -I ./../include -o nrpe ./nrpe.c ./utils.c ./acl.c -L/usr/lib64  -lssl -lcrypto -lnsl -lwrap  
gcc -g -O2 -I/usr/include/openssl -I/usr/include -DHAVE_CONFIG_H -I ../include -I ./../include -o check_nrpe ./check_nrpe.c ./utils.c -L/usr/lib64  -lssl -lcrypto -lnsl 
make[1]: Leaving directory `/data/nagios/nrpe-2.15/src'

*** Compile finished ***

If the NRPE daemon and client compiled without any errors, you
can continue with the installation or upgrade process.

Read the PDF documentation (NRPE.pdf) for information on the next
steps you should take to complete the installation or upgrade.

[root@cu2 nrpe-2.15]# make install-plugin
cd ./src/ &amp;&amp; make install-plugin
make[1]: Entering directory `/data/nagios/nrpe-2.15/src'
/usr/bin/install -c -m 775 -o nagios -g nagios -d /usr/local/nagios/libexec
/usr/bin/install -c -m 775 -o nagios -g nagios check_nrpe /usr/local/nagios/libexec
make[1]: Leaving directory `/data/nagios/nrpe-2.15/src'

[root@cu2 nrpe-2.15]# make install-daemon
cd ./src/ &amp;&amp; make install-daemon
make[1]: Entering directory `/data/nagios/nrpe-2.15/src'
/usr/bin/install -c -m 775 -o nagios -g nagios -d /usr/local/nagios/bin
/usr/bin/install -c -m 775 -o nagios -g nagios nrpe /usr/local/nagios/bin
make[1]: Leaving directory `/data/nagios/nrpe-2.15/src'

[root@cu2 nrpe-2.15]# make install-daemon-config
/usr/bin/install -c -m 775 -o nagios -g nagios -d /usr/local/nagios/etc
/usr/bin/install -c -m 644 -o nagios -g nagios sample-config/nrpe.cfg /usr/local/nagios/etc

# 启动nrpe服务
[root@cu2 nrpe-2.15]#  /usr/local/nagios/bin/nrpe -c /usr/local/nagios/etc/nrpe.cfg -d

[root@cu2 nrpe-2.15]# /usr/local/nagios/libexec/check_nrpe -H localhost
CHECK_NRPE: Error - Could not complete SSL handshake.
[root@cu2 nrpe-2.15]# /usr/local/nagios/libexec/check_nrpe -H 127.0.0.1
NRPE v2.15
</code></pre>

<p>注意： 如果需要启用传递参数功能需要添加参数<code>--enable-command-args</code>，同时修改配置<code>dont_blame_nrpe=1</code>。<a href="http://www.cppblog.com/fwxjj/archive/2011/10/28/159262.aspx">http://www.cppblog.com/fwxjj/archive/2011/10/28/159262.aspx</a></p>

<p>~~更新201604：（2016-4-20 13:10:02）</p>

<p>编译好nrpe后，在编译目录下面有 init-script 脚本，直接把脚本拷贝到 /etc/init.d 目录就可以把 nrpe 作为服务来管理了。
<code>
[root@cu2 nrpe-2.15]# cp init-script /etc/init.d/nrpe
[root@cu2 nrpe-2.15]# chmod +x /etc/init.d/nrpe
[root@cu2 nrpe-2.15]# service nrpe start
Starting nrpe:                                             [  OK  ]
[root@cu2 nrpe-2.15]# service nrpe status
nrpe (pid  30791) is running...
</code></p>

<p>其实管理nrpe的启动。同步到其他机器，就可以用 service nrpe start 来代替启动命令了。</p>

<p>~~更新201604END</p>

<p>拷贝程序到其他机器：</p>

<pre><code>[root@cu2 local]# scp -r nagios cu3:/usr/local/

[root@cu3 ~]# cd /usr/local/nagios/
[root@cu3 nagios]# bin/nrpe -c etc/nrpe.cfg -d
[root@cu3 nagios]# 
[root@cu3 nagios]# libexec/check_nrpe -H 127.0.0.1
NRPE v2.15
</code></pre>

<p>修改配置，添加可以访问nrpe的白名单：</p>

<pre><code>[root@cu3 nagios]# vi etc/nrpe.cfg 
...修改
allowed_hosts=127.0.0.1,192.168.0.0/24
...查看
command[check_users]=/usr/local/nagios/libexec/check_users -w 5 -c 10
command[check_load]=/usr/local/nagios/libexec/check_load -w 15,10,5 -c 30,25,20
command[check_hda1]=/usr/local/nagios/libexec/check_disk -w 20% -c 10% -p /dev/hda1
command[check_zombie_procs]=/usr/local/nagios/libexec/check_procs -w 5 -c 10 -s Z
command[check_total_procs]=/usr/local/nagios/libexec/check_procs -w 150 -c 200 

nrpe.cfg最下面是nrpe的command，nagios配置中会用到

[root@cu3 nagios]# pkill nrpe
[root@cu3 nagios]# bin/nrpe -c etc/nrpe.cfg -d
</code></pre>

<p>注意：如果你用xinetd的话: <strong> only_from       = 127.0.0.1 192.168.0.0/16 </strong></p>

<p>再回到cu2，把cu3加入nagios管理列表中：</p>

<p>首先，nagios的配置入口为etc/nagios.cfg。其他配置文件都是通过cfg_file去定位的。</p>

<pre><code>[root@cu2 nagios]# vi etc/nagios.cfg 
...添加
cfg_file=/usr/local/nagios/etc/objects/hosts.cfg
cfg_file=/usr/local/nagios/etc/objects/localhost.cfg
cfg_file=/usr/local/nagios/etc/objects/cu3.cfg


[root@cu2 nagios]# vi etc/objects/commands.cfg 
...添加
# 'check_nrpe' command definition
define command{
        command_name check_nrpe
        command_line $USER1$/check_nrpe -H $HOSTADDRESS$ -c $ARG1$
}

[root@cu2 nagios]# vi etc/objects/cu3.cfg 
...新增

define host{
        use                     linux-server            ; Name of host template to use
                                                        ; This host definition will inherit all variables that are defined
                                                        ; in (or inherited by) the linux-server host template definition.
        host_name               cu3
        alias                   cu3
        address                 192.168.0.148
        }

define service{
        use                             generic-service         ; Name of service template to use
        host_name                       cu3
        service_description             PING
        check_command                   check_ping!100.0,20%!500.0,60%
        }

define service{
        use                             generic-service         ; Name of service template to use
        host_name                       cu3
        service_description             Root Partition
        check_command                   check_nrpe!check_hda1
        }

define service{
        use                             generic-service         ; Name of service template to use
        host_name                       cu3
        service_description             Current Users
        check_command                   check_nrpe!check_users
        }

define service{
        use                             generic-service         ; Name of service template to use
        host_name                       cu3
        service_description             Total Processes
        check_command                   check_nrpe!check_total_procs
        }


define service{
        use                             generic-service         ; Name of service template to use
        host_name                       cu3
        service_description             Current Load
        check_command                   check_nrpe!check_load
        }

[root@cu2 nagios]# vi etc/objects/hosts.cfg 
... 新增
define hostgroup{
        hostgroup_name  linux-servers ; The name of the hostgroup
        alias           Linux Servers ; Long name of the group
        members         localhost,cu3,cu4,cu5,cu1     ; Comma separated list of hosts that belong to this group
        }
</code></pre>

<p>配置完后，校验配置，然后重启nagios。然后就可以打开浏览器查看cu3状态。</p>

<pre><code>[root@cu2 nagios]# bin/nagios -v etc/nagios.cfg 

Nagios Core 4.1.1
Copyright (c) 2009-present Nagios Core Development Team and Community Contributors
Copyright (c) 1999-2009 Ethan Galstad
Last Modified: 08-19-2015
License: GPL

Website: https://www.nagios.org
Reading configuration data...
   Read main config file okay...
   Read object config files okay...

Running pre-flight check on configuration data...

Checking objects...
        Checked 23 services.
        Checked 4 hosts.
        Checked 1 host groups.
        Checked 0 service groups.
        Checked 1 contacts.
        Checked 1 contact groups.
        Checked 25 commands.
        Checked 5 time periods.
        Checked 0 host escalations.
        Checked 0 service escalations.
Checking for circular paths...
        Checked 4 hosts
        Checked 0 service dependencies
        Checked 0 host dependencies
        Checked 5 timeperiods
Checking global event handlers...
Checking obsessive compulsive processor commands...
Checking misc settings...

Total Warnings: 0
Total Errors:   0

Things look okay - No serious problems were detected during the pre-flight check
[root@cu2 nagios]# service nagios restart
Running configuration check...
Stopping nagios: done.
Starting nagios: done.
</code></pre>

<h2>后记</h2>

<p>技巧：配置服务的时刻，制定host_name可以使用正则表达式，一个服务通吃。对于功能类似的机器，可以减少很多工作量：</p>

<pre><code>vi etc/nagios.cfg 
... 修改
use_regexp_matching=1
use_true_regexp_matching=1

vi cu.cfg
... 
define service{
        use                             generic-service         ; Name of service template to use
        host_name                       cu.*
        service_description             Current Load
        check_command                   check_nrpe!check_load
        }
</code></pre>

<p>基本功能就算配置好了，如果出现异常就能得到邮件提醒。</p>

<h2>后后后记(2015-12-7 21:42:03)</h2>

<pre><code>tar zxvf nagios-plugins-2.1.1.tar.gz 
tar zxvf nrpe-2.15.tar.gz 

ps axu|grep httpd
useradd nagios
groupadd nagcmd
usermod -G nagcmd nagios
usermod -G nagcmd apache 


yum -y install mysql-devel openssl
cd nagios-plugins-2.1.1/
./configure --with-nagios-user=nagios --with-nagios-group=nagios
make &amp;&amp; make install

cd ../nrpe-2.15
./configure 
make all
make install-plugin
make install-daemon
make install-daemon-config

cd /usr/local/
for h in `cat /etc/hosts | grep hadoop | awk '{print $2}'` ; do rsync -vaz nagios root@$h:/usr/local/  ; done 

rsync --dry-run -vaz nagios nagios-client &gt; nagios-client.list
rsync --dry-run --include-from=nagios-client.list --exclude=* -vaz nagios nagios-clint

for h in `cat /etc/hosts | grep "-" | grep -v omc1 | awk '{print $2}'` ; do 
    rsync  --include-from=nagios-client.list --exclude=* -vaz nagios $h:/usr/local/  ;
    ssh $h "pkill nrpe; cd /usr/local/nagios ; bin/nrpe -c etc/nrpe.cfg -d"  ; 
    echo $h; ssh $h "if ! ps aux|grep nrpe | grep -v grep  | grep nrpe ; then cd /usr/local/nagios ; bin/nrpe -c etc/nrpe.cfg -d ; fi"   ;
done

# nrpe下面有init-script，拷贝到/etc/init.d/下面就可以用service来进行启动了。
cp init-script /etc/init.d/nrpe
chmod +x /etc/init.d/nrpe
service nrpe start
chkconfig --add nrpe

--

umask 0022
cd 
tar zxvf nagios-4.1.1.tar.gz 
cd nagios-4.1.1
./configure --with-command-group=nagcmd
make all
make install
 make install-init
make install-config
make install-commandmode
make install-webconf
htpasswd -c /usr/local/nagios/etc/htpasswd.users nagiosadmin
chmod 644 /usr/local/nagios/etc/htpasswd.users 
service httpd restart
service nagios start

##======================================================================

修改 vi nagios.cfg

    cfg_file=/usr/local/nagios/etc/objects/hosts.cfg
    cfg_file=/usr/local/nagios/etc/objects/cu.cfg

    use_regexp_matching=1

添加 for h in `cat /etc/hosts | grep "-" | grep -v omc1 | awk '{print $2}'` ; do echo "
&gt; define host {
&gt; use linux-server
&gt; host_name HN-${h#*-}
&gt; alias HN-${h#*-}
&gt; address $h
&gt; }
&gt; " ; done &gt;hosts.cfg

define hostgroup{
        hostgroup_name  cu servers
        alias           cu servers
        members         HN-omc*, HN-uc*, HN-ud*, HN-db*
        }

define hostgroup{
        hostgroup_name  hadoop slavers
        alias           hadoop slavers
        members         HN-slaver*, HN-master*
        }

添加 vi commands.cfg  

# 'check_nrpe' command definition
define command{
        command_name check_nrpe
        command_line $USER1$/check_nrpe -H $HOSTADDRESS$ -c $ARG1$
}


编辑 vi /etc/mail.rc 

set from=esw_notify@189.cn
set smtp=smtp.189.cn
set smtp-auth-user=XXX
set smtp-auth-password=XXX
set smtp-auth=login

echo test  | /bin/mail -s "** Service Alert **" XXX@189.cn

##-----------------------------------
[root@dr01 ~]# umount /root/.gvfs

command_line  /usr/lib/nagios/plugins/check_disk -w $ARG1$ -c $ARG2$  -u GB -A -i .gvfs
</code></pre>

<p></p>

<h2>参考</h2>

<ul>
<li><a href="http://nagios-cn.sourceforge.net/nagios-cn/beginning.html#quickstart-fedora">http://nagios-cn.sourceforge.net/nagios-cn/beginning.html#quickstart-fedora</a></li>
<li><a href="http://skypegnu1.blog.51cto.com/8991766/1532948">http://skypegnu1.blog.51cto.com/8991766/1532948</a></li>
<li><a href="http://nagios-cn.sourceforge.net/nagios-cn/beginning.html#monitoring-linux">http://nagios-cn.sourceforge.net/nagios-cn/beginning.html#monitoring-linux</a></li>
</ul>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cacti监控主机]]></title>
    <link href="http://winse.github.io/blog/2015/09/22/cacti-start-guide/"/>
    <updated>2015-09-22T14:33:36+08:00</updated>
    <id>http://winse.github.io/blog/2015/09/22/cacti-start-guide</id>
    <content type="html"><![CDATA[<p>其实通过yum好依赖的php、rrdtool、snmp后，安装配置Cacti其实很简单。</p>

<h2>环境说明</h2>

<p>五台机器：cu1~cu5(centos6.6)， 其中仅cu2作为cacti服务器，所有服务器都安装snmp服务。</p>

<pre><code>cu1     192.168.0.37 
cu2     192.168.0.214 
cu3     192.168.0.148 
cu4     192.168.0.30 
cu5     192.168.0.174 
</code></pre>

<h2>软件安装</h2>

<p>版本信息在贴的内容中体现。PHP不会，仅仅作为一个工具来使用。</p>

<h3>Cacti服务器机器安装</h3>

<p>mysql数据库5.1</p>

<pre><code>[root@cu2 ~]# rpm -q mysql 
mysql-5.1.73-5.el6_6.x86_64
</code></pre>

<p>首先用yum安装依赖软件php，httpd，snmp和<strong>rrdtool</strong>。</p>

<pre><code>[root@cu2 ~]# yum install epel-release

[root@cu2 ~]# yum install httpd php php-devel php-mysql php-pear php-common php-gd php-mbstring php-cli php-snmp net-snmp net-snmp-utils net-snmp-libs rrdtool 
...

Installed:
  net-snmp-libs.x86_64 1:5.5-54.el6_7.1 net-snmp-utils.x86_64 1:5.5-54.el6_7.1 php.x86_64 0:5.3.3-46.el6_6          php-cli.x86_64 0:5.3.3-46.el6_6   php-common.x86_64 0:5.3.3-46.el6_6
  php-devel.x86_64 0:5.3.3-46.el6_6     php-gd.x86_64 0:5.3.3-46.el6_6         php-mbstring.x86_64 0:5.3.3-46.el6_6 php-mysql.x86_64 0:5.3.3-46.el6_6 php-pear.noarch 1:1.9.4-4.el6     
  php-snmp.x86_64 0:5.3.3-46.el6_6      rrdtool.x86_64 0:1.3.8-7.el6          

Dependency Installed:
  autoconf.noarch 0:2.63-5.1.el6               automake.noarch 0:1.11.1-4.el6                  dejavu-fonts-common.noarch 0:2.33-1.el6   dejavu-lgc-sans-mono-fonts.noarch 0:2.33-1.el6  
  dejavu-sans-mono-fonts.noarch 0:2.33-1.el6   fontpackages-filesystem.noarch 0:1.41-1.1.el6   lm_sensors-libs.x86_64 0:3.1.1-17.el6     net-snmp.x86_64 1:5.5-54.el6_7.1                
  php-pdo.x86_64 0:5.3.3-46.el6_6             

Updated:
  httpd.x86_64 0:2.2.15-47.el6.centos                                                                                                                                                       

Dependency Updated:
  httpd-tools.x86_64 0:2.2.15-47.el6.centos                                                                                                                                                 

Complete!

[root@cu2 ~]# service httpd start
Starting httpd: httpd: Could not reliably determine the server's fully qualified domain name, using 192.168.0.214 for ServerName
                                                           [  OK  ]
[root@cu2 ~]# service snmpd start
Starting snmpd:                                            [  OK  ]

[root@cu2 ~]# vi /etc/snmp/snmpd.conf 
     41 #com2sec notConfigUser  default       public
     42 com2sec notConfigUser  192.168.0.214       public
     ...
     63 #access  notConfigGroup ""      any       noauth    exact  systemview none none
     64 access  notConfigGroup ""      any       noauth    exact  all none none
     ...
     86 ##           incl/excl subtree                          mask
     87 view all    included  .1                               80    

[root@cu2 ~]# service snmpd restart

# 使用snmpwalk可以得到数据
[root@cu2 ~]# snmpwalk -Os -c public -v 1 cu2 system
[root@cu2 ~]# snmpwalk -v 1 -c public localhost IP-MIB::ipAdEntIfIndex
</code></pre>

<p>然后，把Cacti应用解压到httpd默认目录下/var/www/html。同时配置cacti连接到数据库。</p>

<pre><code>[root@cu2 ~]# cd /var/www/html/
[root@cu2 html]# tar zxvf cacti-0.8.8f.tar.gz 

[root@cu2 html]# ln -s cacti-0.8.8f cacti

[root@cu2 html]$ mysql -u root -p -h 127.0.0.1
Enter password: 
mysql&gt; 
mysql&gt; create database cacti character set UTF8;
mysql&gt; grant all on cacti.* to cacti@'%' identified by 'cacti';
mysql&gt; flush privileges;
mysql&gt; source /var/www/html/cacti/cacti.sql;

[root@cu2 html]# vi cacti/include/config.php 
$database_type = "mysql";
$database_default = "cacti";
$database_hostname = "127.0.0.1";
$database_username = "cacti";
$database_password = "cacti";
$database_port = "3306";

[root@cu2 html]$ vi /etc/php.ini 
date.timezone = "Asia/Shanghai"

# 重启httpd服务

[root@cu2 cacti]# php poller.php 

[root@cu2 cacti]# crontab -e
* * * * * php /var/www/html/cacti/poller.php &gt; /var/www/html/cacti/log/cron.log 2&gt;&amp;1
</code></pre>

<p>打开浏览器访问：<a href="http://cu2/cacti/">http://cu2/cacti/</a> 首先会进入到install步骤，按照提示一步下一步，最后输入admin/admin登录。点击右上角的Preview View就可以看到图了。</p>

<p>如果启动错误，查看日志文件看日志：</p>

<pre><code>[root@cu2 cacti]# less /var/log/httpd/error_log 
[root@cu2 cacti]# less log/cacti.log 
</code></pre>

<h3>添加插件</h3>

<p>（网上很多文章都要打补丁，我这里的版本是最新的，同时plugin的补丁没有对应的版本，这里直接安装插件）</p>

<p>从<a href="http://docs.cacti.net/plugins">http://docs.cacti.net/plugins</a>下载<a href="http://docs.cacti.net/plugin:monitor">monitor</a>。把下载文件解压到plugins目录下：</p>

<pre><code>[root@cu2 plugins]# pwd
/var/www/html/cacti/plugins
[root@cu2 plugins]# ll
-rw-r--r-- 1 1000 users   44 Jul 20 21:42 index.php
drwxr-xr-x 4 root root  4096 Oct  6  2011 monitor
</code></pre>

<p>然后进入Plugin Management页面<a href="http://cu2/cacti/plugins.php">http://cu2/cacti/plugins.php</a>，就能看到Monitor插件。点击表格Actions列的<strong>安装和启用</strong>图标（按钮），启用后，最上面页签会增加新的页签项monitor。</p>

<p>点击monitor页签，可以查看机器存活的状态。</p>

<p>同时Settings页面多了Misc选项卡，可以配置修改monitor属性。</p>

<p>注意：网上版本资料都有配置config.php添加plugins变量。我这里没进行这个操作也是ok的，安装-启用成功后会把monitor下面的sql更新到数据库，不需要手动执行。</p>

<h3>安装spine</h3>

<pre><code>注意：设置下umask避免不需要的麻烦： umask 0022
[root@cu2 ~] tar zxvf cacti-spine-0.8.8f.tar.gz

[root@cu2 cacti-spine-0.8.8f]# yum install -y mysql-devel net-snmp-devel

[root@cu2 cacti-spine-0.8.8f]# ./configure --prefix=/usr/local/cacti-spine
[root@cu2 cacti-spine-0.8.8f]# make &amp;&amp; make install
# 如果make缺少报了错，需要重新configuration一遍

[root@cu2 cacti-spine-0.8.8f]# cd /usr/local/cacti-spine/etc
[root@cu2 etc]# mv spine.conf.dist spine.conf
[root@cu2 etc]# vi spine.conf 
DB_Host         127.0.0.1
DB_Database     cacti
DB_User         cacti
DB_Pass         cacti
DB_Port         3306
</code></pre>

<ul>
<li>然后修改<a href="http://hadoop-master2/cacti/settings.php">Cacti</a>使用spine来获取信息。</li>
</ul>


<p>在[Settings]-[Paths]添加Spine Poller File Path为<code>/usr/local/cacti-spine/bin/spine</code>。在[Poller]选项卡，[Poller Type]修改为spine，[Poller Interval]和[Cron Interval]修改为一分钟即Every Minute。</p>

<ul>
<li>添加“每分钟”流量视图:</li>
</ul>


<p>点击Console -> Data Templates -> [Interface -> Traffic ] 添加“每分钟”流量视图，将轮询时间设置为60秒，Heartbeat时间设置为120秒(traffic_in/traffic_out里面的Heartbeat时间也设置为120秒)</p>

<h2>被监控机器配置</h2>

<p>被监控的机器，仅仅需要安装snmp即可。然后配置snpmd.conf即可。</p>

<pre><code>[root@cu5 ~]# yum install  net-snmp net-snmp-utils net-snmp-libs -y
[root@cu5 ~]# vi /etc/snmp/snmpd.conf 
     41 #com2sec notConfigUser  default       public
     42 com2sec notConfigUser  192.168.0.214       public
     ...
     63 #access  notConfigGroup ""      any       noauth    exact  systemview none none
     64 access  notConfigGroup ""      any       noauth    exact  all none none
     ...
     86 ##           incl/excl subtree                          mask
     87 view all    included  .1                               80    

[root@cu2 ~]# service snmpd restart
</code></pre>

<p>然后在Cacti的web页面添加Device(主机)：</p>

<ul>
<li>点击Console->Devices，打开设备管理页面。</li>
<li>点击右上角的add，添加一个新的机器</li>
<li>当主机的信息填好之后，点击Create

<ul>
<li>Host Template就是一个模板，会事先建立一些Associated Graph Templates和Associated Data Queries的数据，如Load Average，Memory Uages等。如果不确定直接选None即可。</li>
<li>SNMP Version选<code>Version 2</code>，SNMP Community与snmpd.conf中对应，如果安装上面操作，默认即可。</li>
</ul>
</li>
<li>此时你的页面左上角应该显示：Save Successful，并且已经显示出了主机信息和SNMP信息，如果SNMP信息显示 SNMP error，请查看最后的问题综述。</li>
<li>这时我们就可以添加相应的监控项了，在页面最下方的Associated Graph Templates中添加图形模板，在Associated Data Queries中添加数据模板。</li>
<li>保存，点击右上角的Create Graphs for this Host，来为刚才通过模板所获得到的数据进行画图。</li>
<li>选择好需要画图的项目后，点击右下角的Create，左上角会出现被创建出来的画图项。</li>
</ul>


<p>总结就是添加设备，然后生成图形，最后等待生成画图查看。</p>

<p>在Graphs界面左边显示树新添加主机。</p>

<ul>
<li>在Cacti界面Graph Trees中，选择进入节点(或者系统默认的Default Tree)。</li>
<li>添加一个新的显示项，在Tree Item Type中选择Host，然后在下面的Host中选择我们刚才创建的主机。点击Create。</li>
</ul>


<p><a href="http://docs.cacti.net/templates">http://docs.cacti.net/templates</a></p>

<h2>进阶</h2>

<p><a href="http://skypegnu1.blog.51cto.com/8991766/1537374">http://skypegnu1.blog.51cto.com/8991766/1537374</a></p>

<blockquote><p>cacti是如何获取数据呢？  <br/>
    其实cacti获取数据的方式是多样化的，通过周期性的执行某个脚本，或者使用snmp，更或者是ssh，这些都是根据实际需要以及方便性来抉择。cacti需要周期性的驱动这些获取数据的脚本执行，并把取得的数据保存至相应的rrd数据库中。
cacti是如何保存数据（创建rrd，并更新数据）呢？
    这就是数据模板的功能。
cacti是如何展示数据（绘图）呢？
    这就是图形模板的功能。</p></blockquote>

<p><a href="http://skypegnu1.blog.51cto.com/8991766/1537615">http://skypegnu1.blog.51cto.com/8991766/1537615</a>
<a href="http://skypegnu1.blog.51cto.com/8991766/1538459">http://skypegnu1.blog.51cto.com/8991766/1538459</a>
<a href="http://skypegnu1.blog.51cto.com/8991766/1547029">http://skypegnu1.blog.51cto.com/8991766/1547029</a></p>

<h2>资料</h2>

<p>入门的文档不错，可以到<a href="http://vdisk.weibo.com/u/1554831624">微盘</a>下载。</p>

<pre><code>Cacti.0.8_Beginner.Guide.pdf

Cacti实战指南--备份还原.pdf
Cacti实战指南-完美部署.pdf
Cacti实战指南-巧设轮询.pdf
Cacti实战指南-插件安装.pdf
Cacti实战指南-用户权限.pdf
Cacti实战指南-邮件预警.pdf
Cacti实战指南-阀值预警.pdf
</code></pre>

<h2>参考</h2>

<ul>
<li><p>先看这个文档 <a href="http://blog.chinaunix.net/attachment/attach/21/08/97/212108972176206e1112f29600926449bdeedb3970.pdf">http://blog.chinaunix.net/attachment/attach/21/08/97/212108972176206e1112f29600926449bdeedb3970.pdf</a></p></li>
<li><p><a href="http://blog.csdn.net/chen3888015/article/details/8233125">http://blog.csdn.net/chen3888015/article/details/8233125</a></p></li>
<li><p><a href="http://www.cacti.net/downloads/docs/pdf/manual.pdf">http://www.cacti.net/downloads/docs/pdf/manual.pdf</a></p></li>
<li><p><a href="http://wenku.baidu.com/view/57aa69487fd5360cba1adb40.html?re=view">http://wenku.baidu.com/view/57aa69487fd5360cba1adb40.html?re=view</a></p></li>
<li><p><a href="http://wenku.baidu.com/view/b2d1f6c689eb172ded63b7f9.html?re=view">http://wenku.baidu.com/view/b2d1f6c689eb172ded63b7f9.html?re=view</a></p></li>
<li><p><a href="http://www.ehowstuff.com/how-to-install-and-configure-epel-repository-on-centos-6-2/">http://www.ehowstuff.com/how-to-install-and-configure-epel-repository-on-centos-6-2/</a></p></li>
<li><a href="http://www.ehowstuff.com/how-to-install-cacti-on-centos-6-2-using-epel-repository/">http://www.ehowstuff.com/how-to-install-cacti-on-centos-6-2-using-epel-repository/</a></li>
<li><a href="http://www.ehowstuff.com/how-to-setup-and-configure-cacti-on-centos-6-2/">http://www.ehowstuff.com/how-to-setup-and-configure-cacti-on-centos-6-2/</a></li>
</ul>


<p>&ndash;END</p>
]]></content>
  </entry>
  
</feed>
