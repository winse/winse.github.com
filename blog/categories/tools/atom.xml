<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tools | Winse Blog]]></title>
  <link href="http://winseliu.com/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://winseliu.com/"/>
  <updated>2017-01-19T19:50:56+08:00</updated>
  <id>http://winseliu.com/</id>
  <author>
    <name><![CDATA[Winse Liu]]></name>
    <email><![CDATA[winseliu@foxmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nginx配置https]]></title>
    <link href="http://winseliu.com/blog/2017/01/19/nginx-https/"/>
    <updated>2017-01-19T15:53:45+08:00</updated>
    <id>http://winseliu.com/blog/2017/01/19/nginx-https</id>
    <content type="html"><![CDATA[<p>很早前弄过https，当时只是玩玩实际工作中并没有用到。现在业务需要得配置https。欠的债总是要还的，使用puppet的时刻默认全部信任不走证书认证。这里为了安装tomcat的https还是绕不过去。硬着头皮整吧。</p>

<h2>编译</h2>

<pre><code>[... nginx-1.10.2]$ tar zxvf zlib-1.2.8.tar.gz 
[... nginx-1.10.2]$ tar zxvf pcre-8.36.tar.gz 

[... nginx-1.10.2]$ mv zlib-1.2.8 src/zlib
[... nginx-1.10.2]$ mv pcre-8.36 src/pcre

[... nginx-1.10.2]$ ./configure --prefix=/home/hadoop/nginx --with-http_ssl_module --with-pcre=src/pcre --with-zlib=src/zlib
[... nginx-1.10.2]$ make &amp;&amp; make install
</code></pre>

<h2>生成证书</h2>

<p>先整一个能访问的https，再通过本地CA来进行授权（本地浏览器安装这个CA），最后处理chrome sha-1的问题。</p>

<ul>
<li>自己签发（无CA）</li>
</ul>


<pre><code># RSA密钥
[hadoop@cu1 conf]$ openssl genrsa -des3 -out server.key 1024
Generating RSA private key, 1024 bit long modulus
...........++++++
................++++++
e is 65537 (0x10001)
Enter pass phrase for server.key:
Verifying - Enter pass phrase for server.key:
# 拷贝一个不需要输入密码的密钥文件
[hadoop@cu1 conf]$ cp server.key server.key.org
[hadoop@cu1 conf]$ openssl rsa -in server.key.org -out server.key
Enter pass phrase for server.key.org:
writing RSA key

# 需要提交给 SSL 认证机构(生成一个证书请求)
[hadoop@cu1 conf]$ openssl req -new -key server.key -out server.csr
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:CN
State or Province Name (full name) []:GD
Locality Name (eg, city) [Default City]:GZ
Organization Name (eg, company) [Default Company Ltd]:Eshore
Organizational Unit Name (eg, section) []:CU
Common Name (eg, your name or your server's hostname) []:cu.eshore.cn
Email Address []:ca@eshore.cn

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:

# 认证机构颁发(自己签发证书)
[hadoop@cu1 conf]$ openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
Signature ok
subject=/C=CN/ST=Guangdong/L=Guangzhou/O=Eshore/OU=CU/CN=cu1
Getting Private key
</code></pre>

<ul>
<li>本地CA授权 &amp; SHA2(推荐)</li>
</ul>


<pre><code>[root@cu1 apache-tomcat-8.0.38]# ll /etc/pki/CA
total 16
drwxr-xr-x. 2 root root 4096 Mar  1  2016 certs 存放CA签署（颁发）过的数字证书（证书备份目录）
drwxr-xr-x. 2 root root 4096 Mar  1  2016 crl 吊销的证书
drwxr-xr-x. 2 root root 4096 Mar  1  2016 newcerts
drwx------. 2 root root 4096 Mar  1  2016 private 用于存放CA的私钥
[root@cu1 apache-tomcat-8.0.38]# ll /etc/pki/tls/
total 24
lrwxrwxrwx  1 root root    19 May 22  2015 cert.pem -&gt; certs/ca-bundle.crt
drwxr-xr-x. 2 root root  4096 Mar 22  2016 certs
drwxr-xr-x. 2 root root  4096 Mar 22  2016 misc
-rw-r--r--  1 root root 10906 Feb 24  2016 openssl.cnf openssl的CA主配置文件
drwxr-xr-x. 2 root root  4096 Mar  1  2016 private 证书密钥存放目录

# 修改配置(一部分为默认值，一部分与sha2有关)
[root@cu1 pki]# pwd
/etc/pki
[root@cu1 pki]# vi tls/openssl.cnf 
[root@cu1 pki]# diff /home/hadoop/openssl.cnf tls/openssl.cnf 
50c50
&lt; certificate   = $dir/cacert.pem       # The CA certificate
---
&gt; certificate   = $dir/ca.crt   # The CA certificate
55c55
&lt; private_key   = $dir/private/cakey.pem# The private key
---
&gt; private_key   = $dir/private/ca.key # The private key
74c74
&lt; default_crl_days= 30                  # how long before next CRL
---
&gt; default_crl_days= 365                 # how long before next CRL
86,87c86,87
&lt; stateOrProvinceName   = match
&lt; organizationName      = match
---
&gt; stateOrProvinceName   = optional
&gt; organizationName      = optional
107c107
&lt; default_md            = sha1
---
&gt; default_md            = sha256
126c126
&lt; # req_extensions = v3_req # The extensions to add to a certificate request
---
&gt; req_extensions = v3_req # The extensions to add to a certificate request
130c130
&lt; countryName_default           = XX
---
&gt; countryName_default           = CN
135c135
&lt; #stateOrProvinceName_default  = Default Province
---
&gt; #stateOrProvinceName_default  = GD

# CA证书
清理原来的旧文件
[root@cu1 pki]# cd CA
[root@cu1 CA]# rm -rf index.txt* serial*
[root@cu1 CA]# rm cacert.pem private/cakey.pem 
初始化
[root@cu1 CA]# touch index.txt serial
[root@cu1 CA]# echo 01 &gt; serial 

[root@cu1 CA]# openssl genrsa -out private/ca.key 2048
Generating RSA private key, 2048 bit long modulus
.........................................................................+++
...........................+++
e is 65537 (0x10001)

[root@cu1 CA]# chmod 600 private/ca.key 

[root@cu1 CA]# openssl req -new -x509 -key private/ca.key -out ca.crt
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:CN
State or Province Name (full name) []:GD
Locality Name (eg, city) [Default City]:GZ
Organization Name (eg, company) [Default Company Ltd]:Eshore
Organizational Unit Name (eg, section) []:CU   
Common Name (eg, your name or your server's hostname) []:eshore.cn
Email Address []:ca@eshore.cn

# 应用的证书
[root@cu1 conf]# openssl genrsa -out nginx.key 2048
Generating RSA private key, 2048 bit long modulus
...................................................................+++
.....+++
e is 65537 (0x10001)
[root@cu1 conf]# 

[root@cu1 conf]# openssl req -new -key nginx.key -out nginx.csr
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:CN
State or Province Name (full name) []:GD
Locality Name (eg, city) [Default City]:GZ
Organization Name (eg, company) [Default Company Ltd]:Eshore
Organizational Unit Name (eg, section) []:Cu
Common Name (eg, your name or your server's hostname) []:cu.eshore.cn
Email Address []:cu@eshore.cn

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:

查看是否为sha-2
[root@cu1 conf]# openssl req -in nginx.csr -text | grep sha256

# 应用证书颁发方式二选一
* 默认的方式，但不是sha-2。把生成的证书请求csr文件发到CA服务器上，在CA上执行：
签发过程其实默认使用配置中的ca.crt和ca.key这两个文件.
[root@cu1 conf]# openssl ca -in nginx.csr -out nginx.crt
Using configuration from /etc/pki/tls/openssl.cnf
Check that the request matches the signature
Signature ok
Certificate Details:
        Serial Number: 1 (0x1)
        Validity
            Not Before: Jan 19 07:24:24 2017 GMT
            Not After : Jan 19 07:24:24 2018 GMT
        Subject:
            countryName               = CN
            stateOrProvinceName       = GD
            organizationName          = Eshore
            organizationalUnitName    = Cu
            commonName                = cu.eshore.cn
            emailAddress              = cu@eshore.cn
        X509v3 extensions:
            X509v3 Basic Constraints: 
                CA:FALSE
            Netscape Comment: 
                OpenSSL Generated Certificate
            X509v3 Subject Key Identifier: 
                7B:3D:E8:18:D9:77:20:8F:A2:76:7F:6C:F2:01:65:49:3F:92:1A:7F
            X509v3 Authority Key Identifier: 
                keyid:5F:8C:1E:3D:F7:A1:86:82:22:F5:88:12:36:16:82:49:B6:9C:84:F1

Certificate is to be certified until Jan 19 07:24:24 2018 GMT (365 days)
Sign the certificate? [y/n]:y


1 out of 1 certificate requests certified, commit? [y/n]y
Write out database with 1 new entries
Data Base Updated
[root@cu1 conf]# 

* sha-2签名算法
http://www.ibm.com/support/knowledgecenter/zh/SSPMR3_9.0.0/com.ibm.tivoli.tem.doc_9.0/SUA_9.0/com.ibm.license.mgmt.doc/security/t_generate_certificate_CA.html
[root@cu1 conf]# openssl x509 -req -days 365 -in nginx.csr -CA /etc/pki/CA/ca.crt -CAkey /etc/pki/CA/private/ca.key -CAserial /etc/pki/CA/serial -sha256 -out nginx.crt 
Signature ok
subject=/C=CN/ST=GD/L=GZ/O=Eshore/OU=Cu/CN=cu.eshore.cn/emailAddress=cu@eshore.cn
Getting CA Private Key
</code></pre>

<p>生成key和csr请求可以一条命令搞定：</p>

<pre><code>https://www.digicert.com/easy-csr/openssl.htm

openssl req -new -newkey rsa:2048 -nodes -out star_winse_com.csr -keyout star_winse_com.key -subj "/C=CN/ST=GD/L=GZ/O=winse/CN=*.winse.com"
</code></pre>

<h2>nginx配置</h2>

<pre><code>    server {
        listen       14443 ssl;
        server_name  cu.eshore.cn;

        ssl on;
        ssl_certificate      nginx.crt;
        ssl_certificate_key  nginx.key;

        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;

        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;

        location / {
            root   html;
            index  index.html index.htm;
        }

        location /omc {
            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        Host $http_host;

            proxy_pass http://localhost:9000;
        }

    }
</code></pre>

<p>MAKR</p>

<blockquote><p>同时，为了统一，你可以把这三个文件都移动到 /etc/ssl/private/ 目录。
然后可以修改 Nginx 配置文件
server { <br/>
    listen 80;
    listen [::]:80 ssl ipv6only=on;<br/>
    listen 443 ssl;
    listen [::]:443 ssl ipv6only=on;
    server_name example.com;
    ssl on;
    ssl_certificate /etc/ssl/private/example_com.crt;
    ssl_certificate_key /etc/ssl/private/example_com.key;
}</p>

<p>server_names barretlee.com *.barretlee.com
ssl on;
ssl_certificate /etc/nginx/ssl/barretlee.com.crt;
ssl_certificate_key /etc/nginx/ssl/barretlee.com.key;
ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_ciphers &ldquo;EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4EECDH EDH+aRSA RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !MEDIUM&rdquo;;</p>

<h1>Add perfect forward secrecy</h1>

<p>ssl_prefer_server_ciphers on;
add_header Strict-Transport-Security &ldquo;max-age=31536000; includeSubdomains&rdquo;;</p>

<p>同时，如果是全站 HTTPS 并且不考虑 HTTP 的话，可以加入 HSTS 告诉你的浏览器本
网站全站加密，并且强制用 HTTPS 访问
        add_header Strict-Transport-Security max-age=63072000;
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
同时也可以单独开一个 Nginx 配置，把 HTTP 的访问请求都用 301 跳转到 HTTPS</p>

<p>浏览器访问HTTP的请求重定向到HTTPS
If they come here using HTTP, bounce them to the correct scheme
error_page 497 <a href="https://$host:$server_port$request_uri;">https://$host:$server_port$request_uri;</a></p></blockquote>

<p>curl访问(把CA证书内容加入到ca-bundle.crt)：</p>

<pre><code>[root@hadoop-master2 nginx]# curl https://www.winse.com
curl: (60) Peer certificate cannot be authenticated with known CA certificates
More details here: http://curl.haxx.se/docs/sslcerts.html

curl performs SSL certificate verification by default, using a "bundle"
 of Certificate Authority (CA) public keys (CA certs). If the default
 bundle file isn't adequate, you can specify an alternate file
 using the --cacert option.
If this HTTPS server uses a certificate signed by a CA represented in
 the bundle, the certificate verification probably failed due to a
 problem with the certificate (it might be expired, or the name might
 not match the domain name in the URL).
If you'd like to turn off curl's verification of the certificate, use
 the -k (or --insecure) option.

[root@hadoop-master2 CA]# cp /etc/pki/tls/certs/ca-bundle.crt{,.bak}
[root@hadoop-master2 CA]# cat /etc/pki/CA/ca.crt &gt;&gt; /etc/pki/tls/certs/ca-bundle.crt
[root@hadoop-master2 CA]# 
[root@hadoop-master2 CA]# curl https://www.winse.com
curl: (51) SSL: certificate subject name 'winse.com' does not match target host name 'www.winse.com'
[root@hadoop-master2 CA]# curl https://winse.com
...
</code></pre>

<h2>tomcat配置</h2>

<p>直接使用nginx的key和crt，需要安装APR.</p>

<ul>
<li><a href="http://stackoverflow.com/questions/8716259/what-does-the-apr-based-apache-tomcat-native-library-was-not-found-mean">http://stackoverflow.com/questions/8716259/what-does-the-apr-based-apache-tomcat-native-library-was-not-found-mean</a></li>
<li><a href="http://stackoverflow.com/questions/4278047/apr-based-apache-tomcat-native-library-was-not-found-on-the-java-library-path">http://stackoverflow.com/questions/4278047/apr-based-apache-tomcat-native-library-was-not-found-on-the-java-library-path</a></li>
<li><a href="http://jmchung.github.io/blog/2013/09/06/centos-installing-apache-portable-runtime-apr-for-tomcat/">http://jmchung.github.io/blog/2013/09/06/centos-installing-apache-portable-runtime-apr-for-tomcat/</a></li>
<li><a href="https://tomcat.apache.org/native-doc/">https://tomcat.apache.org/native-doc/</a></li>
</ul>


<pre><code>[root@cu1 apache-tomcat-8.0.38]# yum install tomcat-native
[root@cu1 apache-tomcat-8.0.38]# less conf/server.xml 
&lt;Connector
           protocol="org.apache.coyote.http11.Http11AprProtocol"
           port="9443" maxThreads="200"
           scheme="https" secure="true" SSLEnabled="true"
           SSLCertificateFile="/home/cu/tools/apache-tomcat-8.0.38/conf/nginx.crt"
           SSLCertificateKeyFile="/home/cu/tools/apache-tomcat-8.0.38/conf/nginx.key"
           SSLVerifyClient="optional" SSLProtocol="TLSv1+TLSv1.1+TLSv1.2"/&gt;
</code></pre>

<h2>本地访问</h2>

<p>把/etc/pki/CA目录下的ca.crt拷贝本地，安装到<strong>受信任的根证书颁发机构</strong>目录下面。然后https访问即可。</p>

<h2>参考</h2>

<ul>
<li>V<a href="http://seanlook.com/2015/01/18/openssl-self-sign-ca/">基于OpenSSL自建CA和颁发SSL证书</a></li>
<li><p>V<a href="http://blog.csdn.net/napolunyishi/article/details/42425827">CentOS6.5下openssl加密解密及CA自签颁发证书详解</a></p></li>
<li><p><a href="http://fengwan.blog.51cto.com/508652/1869743">OpenSSL生成自签名的sha256泛域名证书</a></p></li>
<li><p><a href="http://blog.csdn.net/kent7306/article/details/50547388">tomcat配置https单向认证笔记</a></p></li>
<li><a href="https://tomcat.apache.org/tomcat-7.0-doc/ssl-howto.html">SSL/TLS Configuration HOW-TO</a></li>
<li><p><a href="https://www.oschina.net/question/12_23148">5分钟内搞定 Tomcat 的 SSL 配置</a></p></li>
<li><p><a href="http://www.freehao123.com/startssl-ssl/">StartSSL免费SSL证书</a></p></li>
<li><a href="http://nginx.org/en/docs/http/configuring_https_servers.html#single_http_https_server">http://nginx.org/en/docs/http/configuring_https_servers.html#single_http_https_server</a></li>
<li>Redirect http to https in nginx <a href="http://serverfault.com/questions/338700/redirect-http-mydomain-com12345-to-https-mydomain-com12345-in-nginx">http://serverfault.com/questions/338700/redirect-http-mydomain-com12345-to-https-mydomain-com12345-in-nginx</a></li>
</ul>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jasperreports使用小结]]></title>
    <link href="http://winseliu.com/blog/2016/12/01/jasperreports-brief-summary/"/>
    <updated>2016-12-01T12:04:32+08:00</updated>
    <id>http://winseliu.com/blog/2016/12/01/jasperreports-brief-summary</id>
    <content type="html"><![CDATA[<p>最近接了一个报表的任务，原来也有接触过，但是仅限于了解没有真正的动手画过。这里把从选型到最后成型一路下来遇到的问题整理下。</p>

<h2>选择Jasperreports</h2>

<p>知道的有Birts、Pentaho、FineReport感觉其实都差不多，大家各自都取长补当更多。由于一穷二白的，没有弄过。网上找了和SpringMVC结合的都是Jasperreport的文章，就这么草率的定下来了。</p>

<p>基本的操作都类似，报表HelloWorld还是比较简单的。下载<a href="http://community.jaspersoft.com/project/jaspersoft-studio">jaspersoftstudio</a>最新版，然后了解各个区域的作用。</p>

<ul>
<li><a href="http://www.lai18.com/content/9047924.html">JasperReport入门</a></li>
<li><a href="http://blog.csdn.net/bryanliu1982/article/details/598176">JasperReport Tutorial（翻译）</a></li>
</ul>


<blockquote><p>一个完全的报表模板包括如下几个区域：title, pageHeader, columnHeader, groupHeader, detail, groupFooter, columnFoter, pageFooter, summary</p></blockquote>

<h2>整合SpringMVC</h2>

<p>原来做报表的同时都是直接连数据库的，过程中遇到各种问题。很多没法维护的事情发生：改个字段，数据库测试/生产链接等等。我这里直接选择通过JavaBean来传递数据。</p>

<ul>
<li>*<a href="http://blog.csdn.net/hwt_211/article/details/19904333">SpringMVC整合jasperreport做报表</a></li>
<li><a href="http://www.javacoder.cn/?p=188">Spring MVC中使用JasperReport</a></li>
<li><a href="http://zzc1684.iteye.com/blog/2189000">SpringMVC与iReport(JasperReports) 5.6整合开发实例</a></li>
</ul>


<p>贴代码之前先说PDF报表字体的问题，本来报表是加粗的，但是服务器生成浏览的时刻没有效果。发现还需要单独添加字体的包：<a href="http://stackoverflow.com/questions/25977427/bold-not-working-in-jaspersoft-studio-for-fonts-other-than-sans-serif">pdf - Bold not working in Jaspersoft Studio for fonts other than sans serif</a></p>

<pre><code>#maven
&lt;properties&gt;
        &lt;spring.version&gt;4.2.5.RELEASE&lt;/spring.version&gt;
...
        &lt;dependency&gt;
            &lt;groupId&gt;net.sf.jasperreports&lt;/groupId&gt;
            &lt;artifactId&gt;jasperreports&lt;/artifactId&gt;
            &lt;version&gt;6.3.1&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;net.sf.jasperreports&lt;/groupId&gt;
            &lt;artifactId&gt;jasperreports-fonts&lt;/artifactId&gt;
            &lt;version&gt;6.0.0&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.itextpdf&lt;/groupId&gt;
            &lt;artifactId&gt;itextpdf&lt;/artifactId&gt;
            &lt;version&gt;5.5.10&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.itextpdf&lt;/groupId&gt;
            &lt;artifactId&gt;itext-asian&lt;/artifactId&gt;
            &lt;version&gt;5.2.0&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.codehaus.groovy&lt;/groupId&gt;
            &lt;artifactId&gt;groovy-all&lt;/artifactId&gt;
            &lt;version&gt;2.4.7&lt;/version&gt;
        &lt;/dependency&gt;

# spring mvc xml
    &lt;bean id="viewResolver" class="org.springframework.web.servlet.view.ResourceBundleViewResolver"&gt;
        &lt;property name="order" value="0"&gt;&lt;/property&gt;
        &lt;property name="basename" value="views"&gt;&lt;/property&gt;
    &lt;/bean&gt;
    &lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
        &lt;property name="order" value="1"&gt;&lt;/property&gt;
        &lt;property name="viewClass"&gt;
            &lt;value&gt;org.springframework.web.servlet.view.JstlView&lt;/value&gt;
        &lt;/property&gt;
...

# views.properties
HELLO.(class)=org.springframework.web.servlet.view.jasperreports.JasperReportsPdfView 
HELLO.url=/WEB-INF/report/helloworld.jasper
HELLO.reportDataKey=datasource

# java Controller
@Controller
@RequestMapping("/report")
public class HelloReportController {

    @RequestMapping("/hello.pdf")
    public ModelAndView printExpress() {
        ModelAndView mv = new ModelAndView("HELLO");

        // 如果直接传对象bean不行，需要使用list传值
        List&lt;HelloWorldData&gt; list = new ArrayList&lt;&gt;();
        list.add(new HelloWorldData("jarperreport", "Hi"));

        mv.addObject("datasource", list);
        return mv;
    }
</code></pre>

<p>最后通过浏览器就能查看报表的PDF文件了。</p>

<p>前端所有的页面都是通过ajax来获取展示的，这里通过jquery-media.js来进行展示（生成内嵌的iframe），这也是上面的地址加上pdf后缀的原因。</p>

<p>```</p>

<h1>html</h1>

<div class="modal-body" style="max-height: 900px; padding: 10px;">
    <a class="media" href="${contextPath}${url}"></a>
</div>


<h1>jquery</h1>

<p>$(&lsquo;a.media&rsquo;, $modal).media({width:&ldquo;100%&rdquo;, height:600});
```</p>

<h2>子报表</h2>

<p>有一个结账的报表，既要展示汇总信息，还得把详情列表也输出出来。一开始的JavaBean：</p>

<pre><code>public class InvoiceData {
  private String roomNo;
  private List&lt;InvoiceDetailData&gt; details;
  ...
}
public class InvoiceDetailData {
  private String date;
  private String amount;
  ...
}
</code></pre>

<p>但是简单报表是一维的，不能展示list里面的内容。网上一堆资料都是简单的案例，涉及多维度的就Table、Crosstable、Subreport这几个控件。Table的样式调起来麻烦，数据也不知道怎么搞。子报表至少看起来合乎逻辑，操作起来也简单。画好图标以及把对应的字段对应好后，子报表的Datasource直接填 <code>$F{details}</code> 。</p>

<p>修改views.properties，写好controller后，启动竟然报<strong>找不到details子报表</strong>路径。根据文章修改如下：</p>

<ul>
<li>*<a href="http://docs.spring.io/autorepo/docs/spring-framework/3.0.0.M3/reference/html/ch17s07.html">Working with Sub-Reports</a></li>
<li><a href="https://www.tutorialspoint.com/jasper_reports/jasper_create_subreports.htm">Create SubReports</a></li>
<li>*<a href="http://it.zhaozhao.info/archives/5581">在 Spring MVC 3.1.2.RELEASE 产出 JasperReports 4.7.1 子报表（Subreport）</a></li>
</ul>


<pre><code># 主报表
# 类型必须加哦！
    &lt;parameter name="DetailSubReport" class="net.sf.jasperreports.engine.JasperReport"/&gt;
    ...
    &lt;subreport&gt;
        &lt;reportElement stretchType="RelativeToBandHeight" x="0" y="0" width="520" height="167" uuid="8d69d85b-4fcf-482a-836c-c1698ce42dcd"/&gt;
        &lt;dataSourceExpression&gt;&lt;![CDATA[$F{details}]]&gt;&lt;/dataSourceExpression&gt;
        &lt;subreportExpression&gt;&lt;![CDATA[$P{DetailSubReport}]]&gt;&lt;/subreportExpression&gt;
    &lt;/subreport&gt;

# views.properties
Invoice.(class)=org.springframework.web.servlet.view.jasperreports.JasperReportsPdfView 
Invoice.url=/WEB-INF/report/invoice.jasper
Invoice.reportDataKey=datasource
Invoice.subReportUrls=DetailSubReport=/WEB-INF/report/InvoiceDetail.jasper
</code></pre>

<p>罗马建成非一日之功，再次编译启动后，再次报错，这次的是<strong>类型错误</strong>。感觉正在慢慢向成功靠近。修改类型后最后启动展示搞定。</p>

<pre><code># javabean
public class InvoiceData {
    private JRDataSource details;

    public void setDetails(JRDataSource details) {
        this.details = details;
    }

    public void setDetails(List&lt;InvoiceDetailData&gt; details) {
        this.details = new JRBeanCollectionDataSource(details);
    }

# 主报表
    &lt;field name="details" class="net.sf.jasperreports.engine.JRDataSource"&gt;
        &lt;fieldDescription&gt;&lt;![CDATA[details]]&gt;&lt;/fieldDescription&gt;
    &lt;/field&gt;
</code></pre>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play2开发环境搭建]]></title>
    <link href="http://winseliu.com/blog/2016/11/10/play2-development-environment-with-eclipse/"/>
    <updated>2016-11-10T11:56:07+08:00</updated>
    <id>http://winseliu.com/blog/2016/11/10/play2-development-environment-with-eclipse</id>
    <content type="html"><![CDATA[<p>用惯了MAVEN后，在用SBT真有种生不如死的感觉。Maven更沉稳成熟些，SBT感觉首先不熟（入门也没maven简单）并且随性。</p>

<p>好了抱怨了这么多。入题，主要碰到的就是两个问题：</p>

<ol>
<li>Play2的HelloWorld主要卡在网络（也就是sbt的配置）；</li>
<li>导入Eclipse。由于有Maven缺各种插件的体验，这里直接用官网的生成好.class/.project再导入已经存在的项目。</li>
</ol>


<p>接下来一步步的介绍环境的搭建。</p>

<h4>下载Play2和SBT</h4>

<p>下载官网的<a href="https://playframework.com/download">Offline Distribution</a> ,解压后把 <code>activator-dist-1.3.12/repository</code> 的所有文件拷贝到 <code>~/.ivy2/cache</code> 。反正都会下载到这个目录，拷贝更快。</p>

<p>下载<a href="http://www.scala-sbt.org/download.html">SBT</a> ,下载zip就好。</p>

<h4>配置</h4>

<ol>
<li>在 activator-dist-1.3.12 创建 conf/sbtconfig.txt 。同时在 sbt/conf/sbtconfig.txt 加上同样的语句：</li>
</ol>


<pre><code>-Dsbt.override.build.repos=true
</code></pre>

<ol>
<li>添加获取jar的repo地址，新建 ~/.sbt/repositories 文件</li>
</ol>


<pre><code>[repositories]
  local
  local-maven: file:///D:/maven/.m2/repository/
  cu: http://cu1:8081/nexus/content/groups/public/
  #oschina: http://maven.oschina.net/content/groups/public/
  jcenter: https://jcenter.bintray.com/
  typesafe-ivy-releases: https://repo.typesafe.com/typesafe/ivy-releases/, [organization]/[module]/[revision]/[type]s/[artifact](-[classifier]).[ext], bootOnly
  maven-central
  ivy-typesafe: http://dl.bintray.com/typesafe/ivy-releases, [organization]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext]
  ivy-sbt-plugin: http://dl.bintray.com/sbt/sbt-plugin-releases/, [organization]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext]
</code></pre>

<p>配置相关参考：</p>

<ul>
<li><a href="http://9leg.com/scala/2015/10/17/scala-play-setting.html">http://9leg.com/scala/2015/10/17/scala-play-setting.html</a></li>
<li><a href="https://afoo.me/posts/2014-11-05-how-make-sbt-jump-over-GFW.html">https://afoo.me/posts/2014-11-05-how-make-sbt-jump-over-GFW.html</a></li>
<li><a href="https://www.jfrog.com/confluence/display/RTF/SBT+Repositories">https://www.jfrog.com/confluence/display/RTF/SBT+Repositories</a> +</li>
<li><a href="http://www.scala-sbt.org/0.13/docs/zh-cn/Library-Dependencies.html">http://www.scala-sbt.org/0.13/docs/zh-cn/Library-Dependencies.html</a></li>
<li><a href="http://www.scala-sbt.org/0.13/docs/Proxy-Repositories.html">http://www.scala-sbt.org/0.13/docs/Proxy-Repositories.html</a></li>
</ul>


<h4>创建新项目</h4>

<ul>
<li><a href="https://playframework.com/documentation/2.5.x/Tutorials">https://playframework.com/documentation/2.5.x/Tutorials</a></li>
</ul>


<p>添加环境变量自己主动点，activator和sbt都加一下。然后运行 activator new 根据模板创建项目。也可以参考官网的直接写build.sbt。</p>

<pre><code>R:\&gt;activator new helloworld play-java
ACTIVATOR_HOME=E:\local\usr\share\activator-dist-1.3.12

Fetching the latest list of templates...

OK, application "helloworld" is being created using the "play-java" template.

To run "helloworld" from the command line, "cd helloworld" then:
R:\\helloworld/activator run

To run the test for "helloworld" from the command line, "cd helloworld" then:
R:\\helloworld/activator test

To run the Activator UI for "helloworld" from the command line, "cd helloworld" then:
R:\\helloworld/activator ui
</code></pre>

<p>创建好项目后，运行 activator run 看看效果：</p>

<pre><code>R:\helloworld&gt;activator run
ACTIVATOR_HOME=E:\local\usr\share\activator-dist-1.3.12
[info] Loading project definition from R:\helloworld\project
[info] Updating {file:/R:/helloworld/project/}helloworld-build...
[info] Resolving org.fusesource.jansi#jansi;1.4 ...
[info] Done updating.
[info] Set current project to helloworld (in build file:/R:/helloworld/)
[info] Updating {file:/R:/helloworld/}root...
[info] Resolving jline#jline;2.12.1 ...
[info] Done updating.

--- (Running the application, auto-reloading is enabled) ---

[info] p.c.s.NettyServer - Listening for HTTP on /0:0:0:0:0:0:0:0:9000

(Server started, use Ctrl+D to stop and go back to the console...)
</code></pre>

<p>打开浏览器访问 <a href="http://localhost:9000">http://localhost:9000</a> ,访问的时刻可能会实时的编译会等一段时间。</p>

<h4>导入eclipse</h4>

<p>前面已经把helloworld跑起来了，接下来是把功能导入eclipse。直接导入或者手动加classpath挺麻烦的，play的一些配置会最终会编译class的。</p>

<p>这里使用 sbteclipse 来生成 eclipse 项目需要的文件。</p>

<ul>
<li><a href="https://www.playframework.com/documentation/2.5.x/IDE">https://www.playframework.com/documentation/2.5.x/IDE</a></li>
<li><a href="https://github.com/typesafehub/sbteclipse">https://github.com/typesafehub/sbteclipse</a></li>
<li><a href="https://github.com/typesafehub/sbteclipse/wiki/Using-sbteclipse">https://github.com/typesafehub/sbteclipse/wiki/Using-sbteclipse</a></li>
</ul>


<p>需要配置二个文件，先添加插件、然后修改配置。</p>

<p>在 helloworld/project/plugins.sbt 最后添加 sbteclipse 插件：</p>

<pre><code>addSbtPlugin("com.typesafe.sbteclipse" % "sbteclipse-plugin" % "5.0.1")
</code></pre>

<p>在 helloworld/build.sbt 最后添加配置：</p>

<pre><code>import com.typesafe.sbteclipse.plugin.EclipsePlugin.EclipseKeys
// Compile the project before generating Eclipse files, so that generated .scala or .class files for views and routes are present
EclipseKeys.preTasks := Seq(compile in Compile)
EclipseKeys.projectFlavor := EclipseProjectFlavor.Java           // Java project. Don't expect Scala IDE
EclipseKeys.createSrc := EclipseCreateSrc.Default + EclipseCreateSrc.ManagedClasses // Use .class files instead of generated .scala files for views and routes
EclipseKeys.withSource := false
EclipseKeys.withJavadoc := false
</code></pre>

<p>然后用 sbt eclipse 生成IDE项目所需文件：</p>

<pre><code>R:\helloworld&gt;sbt
Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8
[info] Loading project definition from R:\helloworld\project
[info] Updating {file:/R:/helloworld/project/}helloworld-build...
[info] Resolving org.fusesource.jansi#jansi;1.4 ...
[info] Done updating.
[info] Set current project to helloworld (in build file:/R:/helloworld/)

[helloworld] $ eclipse
[info] About to create Eclipse project files for your project(s).
[info] Updating {file:/R:/helloworld/}root...
[info] Resolving jline#jline;2.12.1 ...
[info] Done updating.
[info] Compiling 6 Scala sources and 10 Java sources to R:\helloworld\target\scala-2.11\classes...
[info] Successfully created Eclipse project files for project(s):
[info] helloworld

[helloworld] $ compile
[success] Total time: 3 s, completed 2016-11-10 13:11:49

[helloworld] $ eclipse
[info] About to create Eclipse project files for your project(s).
[info] Successfully created Eclipse project files for project(s):
[info] helloworld
[helloworld] $
</code></pre>

<p>我这是专门重新弄的一个工程，依赖是原来已经下载好了的（下载需要等一段时间）。</p>

<p>然后导入已经存在的项目即可。看最终效果图：</p>

<p><img src="/images/blogs/play2-dev.jpg" alt="" /></p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[红帽6升级SSH]]></title>
    <link href="http://winseliu.com/blog/2016/10/20/ssh-upgrade-on-centos6/"/>
    <updated>2016-10-20T19:29:50+08:00</updated>
    <id>http://winseliu.com/blog/2016/10/20/ssh-upgrade-on-centos6</id>
    <content type="html"><![CDATA[<p>安全检查报告SSH版本太低存在漏洞需要进行升级，但是红帽没有现成的高版本打包好SSH的rpm。自己动手丰衣足食，没有网上一些朋友遇到那么多的问题，但是也是这纠结过程。</p>

<p>搞一台身边的机器测试安装，如果远程机器搞不好就连不上了！！先手动编译安装一遍，把编译需要的依赖都安装好，然后再rpmbuild就会比较顺利。</p>

<h2>运维同事编译安装的步骤</h2>

<pre><code>加载光盘的packages
# mount -o loop disk1.iso /mnt/disk
# vi /etc/yum.repo.d/local.repo

[root@localhost SOURCES]# ll *.tar.gz
-rw-r--r--. 1 root   root   1499808 3月  10 2016 openssh-7.2p2.tar.gz
-rw-r--r--. 1 root   root   5489494 10月 20 16:41 openssl-1.0.2j.tar.gz
-rw-r--r--. 1 root   root     29229 6月  26 2004 x11-ssh-askpass-1.2.4.1.tar.gz

一、升级 Zlib
1、下载最新版本 Zlib
# ./configure --prefix=/usr/local/zlib
本次遇到GCC未安装
yum -y install gcc
./configure --prefix=/usr/local/zlib
# make
# make install
这样，就把 zlib 编译安装在 /usr/local/zilib 中了。
二、升级 OpenSSL
1、下载最新版本 OpenSSL
which openssl    查看到当前是在/usr/bin/openssl
# ./config --prefix=/usr --shared
本次遇到系统时间不对的，修改好系统时间后config正常。
# make
# make test （这一步很重要哦！是进行 SSL 加密协议的完整测试，如果出现错误就要一定先找出哪里的原因，否则一味继续可能导致最终 SSH 不能使用，后果很严重哦！）
# make install
三、升级 OpenSSH
1、下载最新版本 OpenSSH
#  ./configure --prefix=/usr --sysconfdir=/etc/ssh --with-pam --with-zlib=/usr/local/zlib --with-ssl-dir=/usr/bin/openssl --with-md5-passwords 
（注意，如果 configure 时提示 PAM 有错误，那一般是因为系统中没有安装 pam-devel RPM 包，找到安装光盘，安装 pam-devel 就可以解决啦）如果是sshkeygen提示错误，需要make  clean再重新编译
本次安装过程提示了pam问题,cd /opt/cdrom-mirror/Packages
rpm -ivh pam-devel-1.1.1-10.el6_2.1.x86_64.rpm
./configure --prefix=/usr --sysconfdir=/etc/ssh --with-pam --with-zlib=/usr/local/zlib --with-ssl-dir=/usr/bin/openssl --with-md5-passwords 
# make
# make install
ssh -V 
</code></pre>

<h2>编译RPM包</h2>

<p>机器太多，不太可能一台台的编译安装。首先用rpmbuild打包，然后用createrepo制作本地私有仓库。主要是openssl打包比较纠结！OpenSSH完全依赖OpenSSL的，所以OpenSSL的版本一定要先编译安装好，然后再编译OpenSSH。相应的包下面都有对应的spec文件。</p>

<p>实际操作过程是先打包OpenSSH的：</p>

<pre><code> cd
 mkdir rpmbuild
 cd rpmbuild/
 mkdir -pv {BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}

 cd SOURCES/
 cd ../SPECS/
 cp ~/updatessh/openssh-7.2p2/contrib/redhat/openssh.spec ./
 cd ..
 cd SOURCES/
 vi /etc/resolv.conf
 wget http://pkgs.fedoraproject.org/repo/pkgs/openssh/x11-ssh-askpass-1.2.4.1.tar.gz/8f2e41f3f7eaa8543a2440454637f3c3/x11-ssh-askpass-1.2.4.1.tar.gz
 wget http://pkgs.fedoraproject.org/repo/pkgs/openssh/openssh-7.2p2.tar.gz/13009a9156510d8f27e752659075cced/openssh-7.2p2.tar.gz
 cd ..
 yum groupinstall "X Window System" "Desktop" "Desktop Platform" "General Purpose Desktop"
 yum -y install libX11-devel
 yum install imake
 yum provides \*/Intrinsic.h
 yum install libXt-devel
 yum search gtk
 yum install gtk2 gtk2-devel
 vi SPECS/openssh.spec
 rpmbuild -bb SPECS/openssh.spec
</code></pre>

<p>然后坑就摆在那里了：重启sshd失败。</p>

<pre><code># 在rpmbuild\RPMS\x86_64目录下面创建createrepo私有仓库
# /etc/yum.repo.d/local.repo增加节点

# yum install openssh 

# 重启
[root@localhost ~]# service sshd restart
然后启动了[失败]（具体错没记下来）
</code></pre>

<p>感觉是OpenSSL的问题了。然后打包好OpenSSL后安装竟然报错：找不到libssl的动态链接库</p>

<pre><code>Error: Package: wget-1.12-1.4.el6.x86_64 (@anaconda-RedHatEnterpriseLinux-201206132210.x86_64/6.3)
           Requires: libcrypto.so.10()(64bit)
           Removing: openssl-1.0.0-20.el6_2.5.x86_64 (@cdrom)
               libcrypto.so.10()(64bit)
           Updated By: openssl-1.0.2j-1.x86_64 (upgrade)
               Not found
Error: Package: 1:wpa_supplicant-0.7.3-3.el6.x86_64 (@cdrom)
           Requires: libssl.so.10()(64bit)
           Removing: openssl-1.0.0-20.el6_2.5.x86_64 (@cdrom)
               libssl.so.10()(64bit)
           Updated By: openssl-1.0.2j-1.x86_64 (upgrade)
               Not found
</code></pre>

<p>官方的出的spec打包的rpm安装后竟然会少东西。百思不得其解，通过查看cdrom openssl-1.0.0-20.el6_2.5.x86_64.rpm与rpmbuild openssl-1.0.2j-1.x86_64.rpm的确还不同：</p>

<pre><code>[root@localhost ~]# rpm -qlp /opt/cdrom/Packages/openssl-1.0.0-20.el6_2.5.x86_64.rpm | grep libssl
...
/usr/lib64/libssl.so.1.0.0
/usr/lib64/libssl.so.10

[root@localhost ~]# rpm -qlp /opt/cdrom/Packages/openssl-1.0.0-20.el6_2.5.x86_64.rpm | grep libssl
...
/usr/lib64/libssl.so.1.0.0
</code></pre>

<p>在spec里面增加libssl.so.10软链接也没用。rpm并没有提供libssl.so.10的 <strong> provide </strong> 服务（可以通过<a href="http://stackoverflow.com/questions/25638461/how-can-i-make-rpm-tell-what-libraries-are-provided-inside-it">rpm -qip &ndash;provides RPM</a>查看）。</p>

<p>实在想不出办法了，只能先看下官网怎么打包的。最后通过查看 openssl-1.0.0-20.el6_2.5.src.rpm 的打包spec是进行定制了的，把原来编译生成的动态链接库so.$(SHLIB_MAJOR).$(SHLIB_MINOR)文件名改成so.$(SHLIB_SONAMEVER)。主要的两个patch为：</p>

<ul>
<li>openssl-1.0.0-beta3-soversion.patch</li>
<li>openssl-1.0.0-beta4-redhat.patch</li>
</ul>


<p>参考修改如下：</p>

<pre><code>修改Makefile
diff -u openssl-1.0.2j/Makefile.org rpmbuild/SOURCES/openssl-1.0.2j/Makefile.org
--- openssl-1.0.2j/Makefile.org 2016-09-26 17:49:07.000000000 +0800
+++ rpmbuild/SOURCES/openssl-1.0.2j/Makefile.org        2016-10-20 15:28:32.000000000 +0800
@@ -10,6 +10,7 @@
 SHLIB_MAJOR=
 SHLIB_MINOR=
 SHLIB_EXT=
+SHLIB_SONAMEVER=10
 PLATFORM=dist
 OPTIONS=
 CONFIGURE_ARGS=
@@ -342,10 +343,9 @@
 link-shared:
        @ set -e; for i in $(SHLIBDIRS); do \
                $(MAKE) -f $(HERE)/Makefile.shared -e $(BUILDENV) \
-                       LIBNAME=$$i LIBVERSION=$(SHLIB_MAJOR).$(SHLIB_MINOR) \
+                       LIBNAME=$$i LIBVERSION=$(SHLIB_SONAMEVER) \
                        LIBCOMPATVERSIONS=";$(SHLIB_VERSION_HISTORY)" \
                        symlink.$(SHLIB_TARGET); \
-               libs="$$libs -l$$i"; \
        done

 build-shared: do_$(SHLIB_TARGET) link-shared
@@ -356,7 +356,7 @@
                        libs="$(LIBKRB5) $$libs"; \
                fi; \
                $(CLEARENV) &amp;&amp; $(MAKE) -f Makefile.shared -e $(BUILDENV) \
-                       LIBNAME=$$i LIBVERSION=$(SHLIB_MAJOR).$(SHLIB_MINOR) \
+                       LIBNAME=$$i LIBVERSION=$(SHLIB_SONAMEVER) \
                        LIBCOMPATVERSIONS=";$(SHLIB_VERSION_HISTORY)" \
                        LIBDEPS="$$libs $(EX_LIBS)" \
                        link_a.$(SHLIB_TARGET); \

修改Configure1
diff -u openssl-1.0.2j/Configure rpmbuild/SOURCES/openssl-1.0.2j/Configure
--- openssl-1.0.2j/Configure    2016-09-26 17:49:07.000000000 +0800
+++ rpmbuild/SOURCES/openssl-1.0.2j/Configure   2016-10-20 16:40:33.000000000 +0800
@@ -1781,7 +1781,7 @@
        elsif ($shared_extension ne "" &amp;&amp; $shared_extension =~ /^\.s([ol])\.[^\.]*\.[^\.]*$/)
                {
                my $sotmp = $1;
-               s/^SHARED_LIBS_LINK_EXTS=.*/SHARED_LIBS_LINK_EXTS=.s$sotmp.\$(SHLIB_MAJOR) .s$sotmp/;
+               s/^SHARED_LIBS_LINK_EXTS=.*/SHARED_LIBS_LINK_EXTS=.s$sotmp.\$(SHLIB_SONAMEVER) .s$sotmp/;
                }
        elsif ($shared_extension ne "" &amp;&amp; $shared_extension =~ /^\.[^\.]*\.[^\.]*\.dylib$/)
                {

修改Configure2
rpmbuild/SOURCES/openssl-1.0.2j/Configure 文件中 so.\$(SHLIB_MAJOR).\$(SHLIB_MINOR) 替换成 so.\$(SHLIB_SONAMEVER)

修改spec
[root@localhost ~]# diff openssl-1.0.2j/openssl.spec rpmbuild/SPECS/openssl.spec
110a111,121
&gt; version=%{version}
&gt; soversion=10
&gt; rename so.${soversion} so.${version} $RPM_BUILD_ROOT%{_libdir}/*.so.${soversion}
&gt; for lib in $RPM_BUILD_ROOT/usr/lib64/*.so.${version} ; do
&gt;         chmod 755 ${lib}
&gt;         ln -s -f `basename ${lib}` $RPM_BUILD_ROOT/usr/lib64/`basename ${lib} .${version}`
&gt;         ln -s -f `basename ${lib}` $RPM_BUILD_ROOT/usr/lib64/`basename ${lib} .${version}`.${soversion}
&gt; 
&gt; done
&gt; 
</code></pre>

<p>然后打包OpenSSL，用Yum更新OpenSSL；再打包OpenSSH，最后再用Yum安装OpenSSH。</p>

<h2>配置</h2>

<p>打包好完成后完成大半的任务了，但是重启过程出现了一些问题：</p>

<ol>
<li>error while loading shared libraries: libcrypto.so.10: cannot enable executable stack as shared object requires: Permission denied</li>
</ol>


<p>运行： <code>execstack -c libcrypto.so.10</code> 解决。 <a href="http://www.linuxquestions.org/questions/linux-kernel-70/longterm-and-grsec-on-slackware-13-0-a-903612/">http://www.linuxquestions.org/questions/linux-kernel-70/longterm-and-grsec-on-slackware-13-0-a-903612/</a></p>

<ol>
<li>重启后远程密码登录上不，但是机器重启是可以登录的，而且su通过密码也是可以切换的。</li>
</ol>


<p>由于su切换没问题，应该不是加解密的问题。最后经常是selinux的问题： <code>setenforce 0 ; vi /etc/selinux/config</code> 完成配置。</p>

<p>到此纠结的SSH升级告一段落。后面上百台机器通过puppet就可以搞定了。</p>

<p>最后分享一个牛逼到不能再牛逼升级配置的文章： <a href="http://www.tsingfun.com/html/2016/env_0330/1332.html">http://www.tsingfun.com/html/2016/env_0330/1332.html</a> 包括了升级过程中你遇到和没遇到的所有问题了。</p>

<h2>再记</h2>

<p>在测试机上面搞的都是默认的配置啊，安全级别本来就不高。但是到生产就不同了，本来加了防护的。需要特别注意！</p>

<pre><code>#centos6.8
#直接用openssl-1.0.1e-48.el6
[root@localhost yum.repos.d]# mount -o loop CentOS-6.8-x86_64-bin-DVD1.iso /opt/cdrom
[root@localhost yum.repos.d]# vi local.repo

[root@localhost rpmbuild]#  yum groupinstall "X Window System" "Desktop" "Desktop Platform" "General Purpose Desktop"

[root@localhost yum.repos.d]# yum install -y libX11-devel imake libXt-devel gtk2 gtk2-devel 

[root@localhost rpmbuild]# yum install -y rpm-build
[root@localhost rpmbuild]# yum install -y openssl-devel   krb5-devel pam-devel 

[root@localhost rpmbuild]# yum install gcc

[root@localhost rpmbuild]# rpmbuild -bb SPEC/openssh.spec

自己做的repo：

[root@hadoop-master1 ssh]# ll
total 6192
-rw-r--r-- 1 root root  439708 Oct 21 17:53 openssh-7.2p2-1.x86_64.rpm
-rw-r--r-- 1 root root   41752 Oct 21 17:53 openssh-askpass-7.2p2-1.x86_64.rpm
-rw-r--r-- 1 root root   22684 Oct 21 17:53 openssh-askpass-gnome-7.2p2-1.x86_64.rpm
-rw-r--r-- 1 root root  581836 Oct 21 17:53 openssh-clients-7.2p2-1.x86_64.rpm
-rw-r--r-- 1 root root   16948 Oct 21 17:53 openssh-debuginfo-7.2p2-1.x86_64.rpm
-rw-r--r-- 1 root root  391544 Oct 21 17:53 openssh-server-7.2p2-1.x86_64.rpm
-rw-r--r-- 1 root root 3226970 Oct 21 17:23 openssl-1.0.1e-48.el6.src.rpm
-rw-r--r-- 1 root root 1595916 May 12 18:49 openssl-1.0.1e-48.el6.x86_64.rpm
drwxr-xr-x 2 root root    4096 Oct 21 18:47 repodata

注意点：

1 selinux关掉

2 开个telnet以防万一

yum install telnet-server
chkconfig telnet on
service xinetd restart

3 PAM
vi /etc/ssh/sshd_config
UsePAM no（反正要确认pam，或者看看/etc/pam.d/sshd是否满足要求）
</code></pre>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven创建自己的Archetype]]></title>
    <link href="http://winseliu.com/blog/2016/10/12/maven-create-ourself-archetype/"/>
    <updated>2016-10-12T12:06:53+08:00</updated>
    <id>http://winseliu.com/blog/2016/10/12/maven-create-ourself-archetype</id>
    <content type="html"><![CDATA[<p>最近经常用到scala，创建的小工程也挺多的。每次都的复制一些properties和plugins挺繁琐的。准备自己搞一个archetype，以后直接用archetype生成一步到位（相当于一个模板）。</p>

<ul>
<li><a href="https://my.oschina.net/wangrikui/blog/498807">https://my.oschina.net/wangrikui/blog/498807</a></li>
<li><a href="http://www.cnblogs.com/whitewolf/p/3606034.html">http://www.cnblogs.com/whitewolf/p/3606034.html</a></li>
</ul>


<h2>首先创建一个模板工程</h2>

<p>把需要修改的属性和插件，以及一些常用到的文件都放置好，如log4j.properties等。</p>

<h2>使用命令创建archetype工程</h2>

<pre><code>mvn clean archetype:create-from-project
</code></pre>

<p><strong> 注意：</strong> maven-archetype-plugin插件需要定位mvn.bat，而我的maven-3.3.9的命令名称为mvn.cmd，需要简单暴力的复制一个。</p>

<p>生成后，在 <strong> target\generated-sources\archetype </strong> 目录即为创建archetype工程。</p>

<h2>清理IDE相关文件</h2>

<p>target\generated-sources\archetype\src\main\resources\META-INF\maven 下面的 archetype-metadata.xml 为Archetype的元数据（真正包括那些文件的配置）。可以根据实际情况进行编辑</p>

<p>文件夹 target\generated-sources\archetype\src\main\resources\archetype-resources 下包括所有（新建时）需要拷贝的文件，但同时目录下面也包括了IDE相关文件，可以把这些文件<strong> 删掉 </strong> 。</p>

<h2>本地安装</h2>

<p>清理完文件后，回到 target\generated-sources\archetype 执行 <code>mvn install</code> 把这个原型(Archetype)安装到本地。</p>

<h2>使用</h2>

<ul>
<li><a href="https://my.oschina.net/u/225373/blog/468035">https://my.oschina.net/u/225373/blog/468035</a></li>
</ul>


<pre><code>mvn archetype:generate -B \
-DarchetypeGroupId=com.example -DarchetypeArtifactId=scala-simple-archetype -DarchetypeVersion=1.0 \
-DarchetypeCatalog=local \
-DgroupId=com.github.winse -DartifactId=Hello
</code></pre>

<p>注意 <strong> archetypeCatalog </strong> 属性，如果不配置为本地（local/internal ）的话要等很久（可以用-X输出调试信息查看操作停在哪）。对于intellij idea可以在 Default Settings - Build,Exection,Deployment - Build Tools - Maven - Runner 加上 VM Options 参数。</p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
</feed>
