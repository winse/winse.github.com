<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tools | Winse Blog]]></title>
  <link href="http://winseliu.com/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://winseliu.com/"/>
  <updated>2019-07-27T09:14:21+08:00</updated>
  <id>http://winseliu.com/</id>
  <author>
    <name><![CDATA[Winse Liu]]></name>
    <email><![CDATA[winseliu@foxmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Linux via Termux]]></title>
    <link href="http://winseliu.com/blog/2019/07/26/android-linux-via-termux/"/>
    <updated>2019-07-26T19:16:14+08:00</updated>
    <id>http://winseliu.com/blog/2019/07/26/android-linux-via-termux</id>
    <content type="html"><![CDATA[<ul>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzI4NjAxNjY4Nw==&amp;mid=2650221561&amp;idx=1&amp;sn=e2324a27de64196b090b70bfd21528eb&amp;chksm=f3e0de39c497572f485c48216dcb9b8bd868019a2b74aa31debbc4f1d1ca5a83bf04db78ed13&amp;scene=0&amp;xtrack=1&amp;key=1a2eded5d1d2d5f751cec6c74b3ca5f846f5657737434cb78e95d89659b035da268bdff3daf7c1bd5396cd439bf8aebb2202a7c3225e6f8e421914c62d12153f8fbd018b0dbb278d04db60691a0a22b1&amp;ascene=1&amp;uin=NTEwMjEwNDU%3D&amp;devicetype=Windows+10&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=u2Vi82ueadP4KQOaznpjv9qNE4IBVZl622AaPRxh5DE%3D">Termux 入门教程：架设手机 Server 下载文件</a></li>
<li><a href="https://www.sqlsec.com/2018/05/termux.html">Termux 高级终端安装使用配置教程</a></li>
<li><a href="https://www.sqlsec.com/2018/05/termux.html#toc-heading-24">信息安全</a></li>
<li><a href="http://blackwolfsec.cc/2016/12/10/termux/">基于Termux打造Android手机渗透神器</a></li>
</ul>


<p>牛逼的都在上面的链接，请点击查阅。</p>

<hr/>


<h1>简单摘录</h1>

<h2>安装</h2>

<ul>
<li>Termux is an Android terminal app and Linux environment.</li>
<li>Android下的Linux环境和Shell终端程序，无须root，可使用apt包管理工具安装大部分Linux软件。</li>
<li>国内下载通过<a href="https://termux.com/">官网</a>的 <a href="https://f-droid.org/packages/com.termux/">F-Droid</a> ，该网站安装包的各个版本描述下一个 <del>下载APK</del> 的链接。<a href="https://f-droid.org/repo/com.termux_72.apk">版本 0.72 </a></li>
<li>Android源码：<a href="https://github.com/termux/termux-app">termux-app</a></li>
</ul>


<h2>使用</h2>

<ul>
<li>一些按键
```
长按（more&hellip; - keep screen on）</li>
</ul>


<p>从左往右滑（导航栏）</p>

<p>长按导航栏左下角的KEYBOARD
音量+ - Q</p>

<p>Ctrl+A -> 将光标移动到行首
Ctrl+E -> 将光标移动到行尾
Ctrl+K -> 从光标删除到行尾
Ctrl+L -> 清除终端
Ctrl+C -> 中止当前进程
Ctrl+D -> 注销终端会话
&ndash; 可使用音量减小按钮来模拟Ctrl键</p>

<p>Ctrl+Z -> 挂起（发送SIGTSTP到）当前进程
bg</p>

<p>音量加+W -> 向上箭头键
音量加+A -> 向左箭头键
音量加+S -> 向下箭头键
音量加+D -> 向右箭头键
（按太麻烦，可以通过 额外的按键视图 添加修改）</p>

<p>音量加+1 -> F1（和音量增加+ 2→F2等）
音量加+0 -> F10
<code>
* otg USB键盘
* sshd远程连接
</code>
apt update
apt upgrade</p>

<p>export EDITOR=vi</p>

<p>apt edit-sources
deb <a href="http://mirrors.tuna.tsinghua.edu.cn/termux">http://mirrors.tuna.tsinghua.edu.cn/termux</a> stable main</p>

<h1>or direct edit</h1>

<h1>vi  $PREFIX/etc/apt/sources.list</h1>

<p>apt update</p>

<p>pkg install vim curl wget net-tools git less tar unzip unrar tree
pkg install openssh</p>

<p>ssh-keygen
cd .ssh
cat id_rsa.pub >> authorized_keys
```</p>

<p>再安装个http-server，可以下载手机上的私钥（懒得接数据线）：</p>

<pre><code>apt install nodejs
npm install -g http-server
http-server
</code></pre>

<p>下载id_rsa，最后远程连接</p>

<pre><code>uname -a
cat /proc/version
ifconfig wlan0
whoami
#u0_a144

sshd

netstat -anp|grep sshd
#8022
</code></pre>

<p>客户端访问</p>

<pre><code>ssh -i id_rsa -p 8022 u0_a144@192.168.2.241

$ which sshd
/data/data/com.termux/files/usr/bin/sshd
$ pwd
/data/data/com.termux/files/home
</code></pre>

<p>所有文件都放在 <code>/data/data/com.termux/files</code> 操作起来很不方便，没了Linux感觉。
可以通过chroot来切换根目录，安装proot：</p>

<pre><code>$ pkg install proot
$ termux-chroot
$ vi /etc/ssh/sshd_config
Port 22

pkg install tsu
tsudo sshd # 手机已经root了的
tsudo ps aux|grep sshd
</code></pre>

<p><strong>用22端口启动了。用了tsudo启动后，原来的u0_a144登录不了，好像只能谁启动就用谁登陆！</strong></p>

<p>注：伤心，chroot后，nodejs安装的http-server用不了了&hellip;暂时不用chroot吧！加 $PREFIX 访问！</p>

<p>如果SecureCRT不兼容手机端生成的公私钥，可以生成一个，使用ssh复制然后写入authorized_keys：</p>

<pre><code>scp -i id_rsa -P 8022 ~/.ssh/id_rsa.pub u0_a144@192.168.2.241:~/
</code></pre>

<p>注意：PC路径下必须两个key都存在，不能只有一个id_rsa.pub ，还要有一个id_rsa，尽管好象securtCRT没用到它。</p>

<ul>
<li>安装配置zsh</li>
</ul>


<p><a href="https://www.sqlsec.com/2018/05/termux.html#toc-heading-17">终端配色</a> <br/>
<a href="https://github.com/powerline/fonts.git">字体fonts-powerline</a>   <br/>
<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes">Themes</a></p>

<pre><code>sh -c "$(curl -fsSL https://github.com/Cabbagec/termux-ohmyzsh/raw/master/install.sh)"
想要继续更改挑选配色的话,继续运行脚本来再次筛选:
$ ~/termux-ohmyzsh/install.sh
exit重启sessions会话生效配置

Enter a number, leave blank to not to change: 14
Enter a number, leave blank to not to change: 6

vi .zshrc
ZSH_THEME="cloud"
</code></pre>

<p>以下是zsh的一些使用技巧，因为都很常用：</p>

<pre><code>连按两次Tab会列出所有的补全列表并直接开始选择，补全项可以使用 ctrl+n/p/f/b上下左右切换
命令选项补全。在zsh中只需要键入 tar -&lt;tab&gt; 就会列出所有的选项和帮助说明
命令参数补全。键入 kill &lt;tab&gt; 就会列出所有的进程名和对应的进程号
更智能的历史命令。在用或者方向上键查找历史命令时，zsh支持限制查找。比如，输入ls,然后再按方向上键，则只会查找用过的ls命令。而此时使用则会仍然按之前的方式查找，忽略 ls
智能跳转，安装了 autojump 之后，zsh 会自动记录你访问过的目录，通过 j 目录名 可以直接进行目录跳转，而且目录名支持模糊匹配和自动补全，例如你访问过 hadoop-1.0.0 目录，输入j hado 即可正确跳转。j --stat 可以看你的历史路径库。
目录浏览和跳转：输入 d，即可列出你在这个会话里访问的目录列表，输入列表前的序号，即可直接跳转。
在当前目录下输入 .. 或 ... ，或直接输入当前目录名都可以跳转，你甚至不再需要输入 cd 命令了。在你知道路径的情况下，比如 /usr/local/bin 你可以输入 cd /u/l/b 然后按进行补全快速输入
通配符搜索：ls -l **/*.sh，可以递归显示当前目录下的 shell 文件，文件少时可以代替 find。使用 **/ 来递归搜索
扩展环境变量，输入环境变量然后按 就可以转换成表达的值
</code></pre>

<p>切回shell</p>

<pre><code>chsh -s bash
</code></pre>

<ul>
<li>nginx</li>
</ul>


<pre><code>pkg install php nginx php-fpm mariadb

nginx
netstat -an |grep 8080

fuse -k 8080/tcp
nginx -s reload

termux-chroot
vim /etc/php-fpm.d/www.conf
listen = /data/data/com.termux/files/usr/var/run/php-fpm.sock
-&gt;
listen = 127.0.0.1:9000

vim /etc/nginx/nginx.conf
worker_processes  1;
events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    server {

        listen       8080;
        server_name  localhost;
        root   /data/data/com.termux/files/usr/share/nginx/html;
        index  index.html index.htm;

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /data/data/com.termux/files/usr/share/nginx/html;
        }

        location ~ \.php$ {
            root           html;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  /usr/share/nginx/html$fastcgi_script_name;
            include        fastcgi_params;
        }
    }

}

## -- wordpress

/data/data/com.termux/files/home/wordpress

vim /etc/nginx/nginx.conf
server {

listen 8080;
server_name localhost;
root /data/data/com.termux/files/home/wordpress;
index index.html index.htm index.php;
location ~ \.php$ {
root html;
fastcgi_pass 127.0.0.1:9000;
fastcgi_index index.php;
fastcgi_param SCRIPT_FILENAME  /data/data/com.termux/files/home/wordpress$fastcgi_script_name;
include fastcgi_params;
}

}
</code></pre>

<p>启动php-fpm和nginx</p>

<blockquote><p>在proot环境下面分别启动php-fpm和nginx，这里的nginx不在proot环境下启动后会出一些问题。</p></blockquote>

<pre><code>php-fpm
nginx
</code></pre>

<ul>
<li>tmux</li>
</ul>


<p>Tmux是一个优秀的终端复用软件，类似GNU Screen</p>

<pre><code>pkg install tmux
tmux new -s mysql
</code></pre>

<p>让会话后台运行
使用快捷键组合Ctrl+ b + d，三次按键就可以断开当前会话。tmux默认的前置操作是CTRL+b，下面所有的prefix均代表CTRL+b</p>

<pre><code>查看/切换session  prefix s
离开Session prefix d
重命名当前Session  prefix $

新建窗口  prefix c
切换到上一个活动的窗口    prefix space
关闭一个窗口    prefix &amp;
使用窗口号切换   prefix 窗口号

切换到下一个窗格  prefix o
查看所有窗格的编号 prefix q
垂直拆分出一个新窗格    prefix “
水平拆分出一个新窗格    prefix %
暂时把一个窗体放到最大   prefix z
</code></pre>

<h2>其他</h2>

<ul>
<li>额外的按键视图</li>
</ul>


<p>termux也有一个额外的按键视图。它允许您使用ESC，CTRL，ALT，TAB，- ，/ 等等等键扩展当前的键盘。</p>

<pre><code>vi ~/.termux/termux.properties
extra-keys = [['ESC','/','-','HOME','UP','END','PGUP'],['TAB','CTRL','ALT','LEFT','DOWN','RIGHT','PGDN']] 
</code></pre>

<ul>
<li>实现操作手机底层
```
termux-setup-storage</li>
</ul>


<p>pkg install termux-api</p>

<p>termux-battery-status
termux-camera-info
termux-clipboard-get
termux-clipboard-set PHP是世界上最好的语言
termux-contact-list
termux-sms-inbox
termux-sms-send -n 10001 cxll
termux-telephony-call 10001
termux-wifi-connectioninfo
termux-wifi-scaninfo
```</p>

<p>直接操作调动系统底层的话,可以通过编程来实现自动定时短信发送,语音播报等。提供无限的想想空间。</p>

<ul>
<li><p>下载工具
<code>
you-get
BaiduPCS-Go
</code></p></li>
<li><p>Linux
<code>
wget http://funs.ml/file/atilo
</code></p></li>
<li><p>资源</p></li>
</ul>


<p>youtube termux</p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编译JCEF - Win64]]></title>
    <link href="http://winseliu.com/blog/2018/10/20/jcef-build-on-win64/"/>
    <updated>2018-10-20T10:47:59+08:00</updated>
    <id>http://winseliu.com/blog/2018/10/20/jcef-build-on-win64</id>
    <content type="html"><![CDATA[<h2>参考</h2>

<ul>
<li><a href="https://bitbucket.org/chromiumembedded/java-cef/wiki/BranchesAndBuilding">https://bitbucket.org/chromiumembedded/java-cef/wiki/BranchesAndBuilding</a></li>
<li><a href="https://bitbucket.org/Johness/java-cef/wiki/%E7%BC%96%E8%AF%91V49%E4%B8%BAWindows%E5%B9%B3%E5%8F%B0">编译V49为Windows平台</a> gif图片，过程很清晰。就是有点旧！</li>
<li><a href="https://my.oschina.net/penngo/blog/1538071">https://my.oschina.net/penngo/blog/1538071</a> 先下载 chromium-clang-format，最后创建项目的目录结构和添加DLL库路径</li>
<li><a href="http://wzdark.github.io/personalInfo/2015/12/02/jcef.html">http://wzdark.github.io/personalInfo/2015/12/02/jcef.html</a></li>
<li><a href="https://medium.com/@daniel.bischoff/integrating-chromium-as-a-web-renderer-in-a-java-application-with-jcef-72f67a677db6">https://medium.com/@daniel.bischoff/integrating-chromium-as-a-web-renderer-in-a-java-application-with-jcef-72f67a677db6</a> 创建项目，以及一些参数</li>
</ul>


<h2>简单过程摘录</h2>

<p>注意点：</p>

<ol>
<li>依赖：git/python2.7/java8/cmake3/visual studio 2017（这是我编译的环境，具体的版本要求请查看官网文档）</li>
<li>需要用git下载源码</li>
<li>先把 <a href="https://storage.googleapis.com/chromium-clang-format/6ddedd571c56b8c184f30a3c1fc36984e8c10ccd">chromium-clang-format</a> 下载放到 tools 目录下面</li>
</ol>


<p>步骤：</p>

<ol>
<li>cmake-3.12.3-win64-x64.zip，配置环境变量PATH</li>
<li>安装版python-2.7.15.amd64.msi、同时配置把python.exe加入到PATH</li>
<li>把 PortableGit 加入PATH： <code>set PATH=D:\PortableGit\bin;%PATH%</code></li>
<li>使用 VS 的命令行运行</li>
<li>命令：</li>
</ol>


<pre><code>F:\wv&gt;git clone https://bitbucket.org/chromiumembedded/java-cef.git src

F:\wv\src&gt;mkdir jcef_build &amp;&amp; cd jcef_build

F:\wv\src\jcef_build&gt;cmake -G "Visual Studio 14 Win64" ..
用vs编译本地代码：
# Open jcef.sln in Visual Studio
# - Select Build &gt; Configuration Manager and change the "Active solution configuration" to "Release"
# - Select Build &gt; Build Solution.

cd ..\tools
compile.bat win64

run.bat win64 Release detailed

F:\wv\src\tools&gt;make_distrib.bat win64
</code></pre>

<p>生成的运行包放在 binary_distrib 目录下。查看下 <code>binary_distrib/win64/run.bat</code> 了解运行配置，同时参考上面文章中提到的项目的创建方法。</p>

<pre><code>java -cp "./bin;./bin/*" -Djava.library.path=./bin/lib/win64 tests.detailed.MainFrame
</code></pre>

<p>过程截图：</p>

<p><img src="/images/blogs/jcef/vs-cmd.png" alt="" /></p>

<pre><code>**********************************************************************
** Visual Studio 2017 Developer Command Prompt v15.7.4
** Copyright (c) 2017 Microsoft Corporation
**********************************************************************
[vcvarsall.bat] Environment initialized for: 'x64'

C:\Program Files (x86)\Microsoft Visual Studio\2017\Community&gt;F:

F:\&gt;cd wv
F:\wv&gt;set PATH=D:\PortableGit\bin;%PATH%
F:\wv&gt;git clone https://bitbucket.org/chromiumembedded/java-cef.git src

F:\wv\src&gt;mkdir jcef_build &amp;&amp; cd jcef_build

F:\wv\src\jcef_build&gt;cmake -G "Visual Studio 14 Win64" ..
-- Selecting Windows SDK version  to target Windows 10.0.16299.
-- The C compiler identification is MSVC 19.0.24234.1
-- The CXX compiler identification is MSVC 19.0.24234.1
-- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/x86_amd64/cl.exe
-- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/x86_amd64/cl.exe -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/x86_amd64/cl.exe
-- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/x86_amd64/cl.exe -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Downloading F:/wv/src/third_party/cef/cef_binary_3.3497.1831.g461fa1f_windows64.tar.bz2.sha1...
-- Downloading F:/wv/src/third_party/cef/cef_binary_3.3497.1831.g461fa1f_windows64.tar.bz2...
-- [download 0% complete]
-- [download 1% complete]
。。。
-- [download 98% complete]
-- [download 99% complete]
-- [download 100% complete]
-- Extracting F:/wv/src/third_party/cef/cef_binary_3.3497.1831.g461fa1f_windows64.tar.bz2...
CMake Warning (dev) at CMakeLists.txt:153 (find_package):
  Policy CMP0074 is not set: find_package uses &lt;PackageName&gt;_ROOT variables.
  Run "cmake --help-policy CMP0074" for policy details.  Use the cmake_policy
  command to set the policy and suppress this warning.

  CMake variable CEF_ROOT is set to:

    F:/wv/src/third_party/cef/cef_binary_3.3497.1831.g461fa1f_windows64

  For compatibility, CMake is ignoring the variable.
This warning is for project developers.  Use -Wno-dev to suppress it.

-- Found PythonInterp: C:/Python27/python.exe (found version "2.7.15")
-- Found JNI: C:/Java/jdk/lib/jawt.lib (Required is at least version "1.7")
-- Generating native/jcef_version.h file...
File native/jcef_version.h updated.
-- Downloading clang-format from Google Storage...
0&gt; Failed to fetch file gs://chromium-clang-format/6ddedd571c56b8c184f30a3c1fc36984e8c10ccd for tools/buildtools/win/clang-format.exe, skipping. [Err: F:\wv\src\tools\buildtools\external_bin\gsutil\gsutil_4.15\gsutil\third_party\boto\boto\pyami\config.py:71: UserWarning: Unable to load AWS_CREDENTIAL_FILE ()
  warnings.warn('Unable to load AWS_CREDENTIAL_FILE (%s)' % full_path)
Failure: Unable to find the server at www.googleapis.com.
]
Downloading 1 files took 3153.963000 second(s)
Failed to fetch file gs://chromium-clang-format/6ddedd571c56b8c184f30a3c1fc36984e8c10ccd for tools/buildtools/win/clang-format.exe. [Err: F:\wv\src\tools\buildtools\external_bin\gsutil\gsutil_4.15\gsutil\third_party\boto\boto\pyami\config.py:71: UserWarning: Unable to load AWS_CREDENTIAL_FILE ()
  warnings.warn('Unable to load AWS_CREDENTIAL_FILE (%s)' % full_path)
Failure: Unable to find the server at www.googleapis.com.
]
CMake Error at CMakeLists.txt:265 (message):
  Execution failed with unexpected result: 1


-- Configuring incomplete, errors occurred!
See also "F:/wv/src/jcef_build/CMakeFiles/CMakeOutput.log".

&lt;&lt;== https://my.oschina.net/penngo/blog/1538071
&lt;&lt;&lt;&lt;----https://storage.googleapis.com/chromium-clang-format/6ddedd571c56b8c184f30a3c1fc36984e8c10ccd
~~~~~~

F:\wv\src\jcef_build&gt;cmake -G "Visual Studio 14 Win64" ..
-- Selecting Windows SDK version  to target Windows 10.0.16299.
CMake Warning (dev) at CMakeLists.txt:153 (find_package):
  Policy CMP0074 is not set: find_package uses &lt;PackageName&gt;_ROOT variables.
  Run "cmake --help-policy CMP0074" for policy details.  Use the cmake_policy
  command to set the policy and suppress this warning.

  CMake variable CEF_ROOT is set to:

    F:/wv/src/third_party/cef/cef_binary_3.3497.1831.g461fa1f_windows64

  For compatibility, CMake is ignoring the variable.
This warning is for project developers.  Use -Wno-dev to suppress it.

-- Generating native/jcef_version.h file...
File native/jcef_version.h is already up to date.
-- Downloading clang-format from Google Storage...
0&gt; File tools/buildtools/win/clang-format.exe exists and SHA1 matches. Skipping.
Success!
Downloading 1 files took 0.006000 second(s)
-- *** CEF CONFIGURATION SETTINGS ***
-- Generator:                    Visual Studio 14 2015 Win64
-- Platform:                     Windows
-- Project architecture:         x86_64
-- Binary distribution root:     F:/wv/src/third_party/cef/cef_binary_3.3497.1831.g461fa1f_windows64
-- CEF Windows sandbox:          ON
-- Visual Studio ATL support:    ON
-- Standard libraries:           comctl32.lib;rpcrt4.lib;shlwapi.lib;ws2_32.lib;dbghelp.lib;psapi.lib;version.lib;winmm.lib
-- Compile defines:              __STDC_CONSTANT_MACROS;__STDC_FORMAT_MACROS;WIN32;_WIN32;_WINDOWS;UNICODE;_UNICODE;WINVER=0x0601;_WIN32_WINNT=0x601;NOMINMAX;WIN32_LEAN_AND_MEAN;_HAS_EXCEPTIONS=0;PSAPI_VERSION=1;CEF_USE_SANDBOX;CEF_USE_ATL
-- Compile defines (Debug):
-- Compile defines (Release):    NDEBUG;_NDEBUG
-- C compile flags:              /MP;/Gy;/GR-;/W4;/WX;/wd4100;/wd4127;/wd4244;/wd4481;/wd4512;/wd4701;/wd4702;/wd4996;/Zi
-- C compile flags (Debug):      /MTd;/RTC1;/Od
-- C compile flags (Release):    /MT;/O2;/Ob2;/GF
-- C++ compile flags:            /MP;/Gy;/GR-;/W4;/WX;/wd4100;/wd4127;/wd4244;/wd4481;/wd4512;/wd4701;/wd4702;/wd4996;/Zi
-- C++ compile flags (Debug):    /MTd;/RTC1;/Od
-- C++ compile flags (Release):  /MT;/O2;/Ob2;/GF
-- Exe link flags:                /MANIFEST:NO;/LARGEADDRESSAWARE
-- Exe link flags (Debug):       /DEBUG
-- Exe link flags (Release):
-- Shared link flags:
-- Shared link flags (Debug):    /DEBUG
-- Shared link flags (Release):
-- CEF Binary files:             chrome_elf.dll;d3dcompiler_43.dll;d3dcompiler_47.dll;libcef.dll;libEGL.dll;libGLESv2.dll;natives_blob.bin;snapshot_blob.bin;v8_context_snapshot.bin;swiftshader
-- CEF Resource files:           cef.pak;cef_100_percent.pak;cef_200_percent.pak;cef_extensions.pak;devtools_resources.pak;icudtl.dat;locales
-- *** JCEF CONFIGURATION SETTINGS ***
-- Python executable:            C:/Python27/python.exe
-- Java directory:               C:/Java/jdk
-- JNI libraries:                C:/Java/jdk/lib/jawt.lib;C:/Java/jdk/lib/jvm.lib
-- JNI include directories:      C:/Java/jdk/include;C:/Java/jdk/include/win32;C:/Java/jdk/include
-- Configuring done
-- Generating done
-- Build files have been written to: F:/wv/src/jcef_build

F:\wv\src\jcef_build&gt;
</code></pre>

<p><img src="/images/blogs/jcef/vs2017.png" alt="" /></p>

<p><img src="/images/blogs/jcef/compile.png" alt="" /></p>

<p><img src="/images/blogs/jcef/run.png" alt="" /></p>

<p><img src="/images/blogs/jcef/run-windows.png" alt="" /></p>

<pre><code>F:\wv\src\tools&gt;make_distrib.bat win64
正在加载程序包org.cef.browser的源文件...
正在加载程序包org.cef.browser.mac的源文件...
正在加载程序包org.cef.callback的源文件...
正在加载程序包org.cef的源文件...
正在加载程序包org.cef.handler的源文件...
正在加载程序包org.cef.misc的源文件...
正在加载程序包org.cef.network的源文件...
正在构造 Javadoc 信息...
.\org\cef\browser\CefRenderer.java:11: 错误: 程序包com.jogamp.opengl不存在
import com.jogamp.opengl.GL2;
                        ^
.\org\cef\browser\CefRenderer.java:15: 错误: 找不到符号
    private GL2 initialized_context_ = null;
            ^
  符号:   类 GL2
  位置: 类 CefRenderer
.\org\cef\browser\CefRenderer.java:34: 错误: 找不到符号
    protected void initialize(GL2 gl2) {
                              ^
  符号:   类 GL2
  位置: 类 CefRenderer
.\org\cef\browser\CefRenderer.java:64: 错误: 找不到符号
    protected void cleanup(GL2 gl2) {
                           ^
  符号:   类 GL2
  位置: 类 CefRenderer
.\org\cef\browser\CefRenderer.java:69: 错误: 找不到符号
    protected void render(GL2 gl2) {
                          ^
  符号:   类 GL2
  位置: 类 CefRenderer
.\org\cef\browser\CefRenderer.java:161: 错误: 找不到符号
    protected void onPaint(GL2 gl2, boolean popup, Rectangle[] dirtyRects, ByteBuffer buffer,
                           ^
  符号:   类 GL2
  位置: 类 CefRenderer
.\org\cef\browser\CefBrowserOsr.java:23: 错误: 程序包com.jogamp.nativewindow不存在
import com.jogamp.nativewindow.NativeSurface;
                              ^
.\org\cef\browser\CefBrowserOsr.java:24: 错误: 程序包com.jogamp.opengl.awt不存在
import com.jogamp.opengl.awt.GLCanvas;
                            ^
.\org\cef\browser\CefBrowserOsr.java:25: 错误: 程序包com.jogamp.opengl不存在
import com.jogamp.opengl.GLAutoDrawable;
                        ^
.\org\cef\browser\CefBrowserOsr.java:26: 错误: 程序包com.jogamp.opengl不存在
import com.jogamp.opengl.GLEventListener;
                        ^
.\org\cef\browser\CefBrowserOsr.java:27: 错误: 程序包com.jogamp.opengl不存在
import com.jogamp.opengl.GLProfile;
                        ^
.\org\cef\browser\CefBrowserOsr.java:28: 错误: 程序包com.jogamp.opengl不存在
import com.jogamp.opengl.GLCapabilities;
                        ^
.\org\cef\browser\CefBrowserOsr.java:44: 错误: 找不到符号
    private GLCanvas canvas_;
            ^
  符号:   类 GLCanvas
  位置: 类 CefBrowserOsr
.\org\cef\browser\mac\CefBrowserWindowMac.java:9: 错误: 程序包sun.lwawt不存在
import sun.lwawt.LWComponentPeer;
                ^
.\org\cef\browser\mac\CefBrowserWindowMac.java:10: 错误: 程序包sun.lwawt不存在
import sun.lwawt.PlatformWindow;
                ^
.\org\cef\browser\mac\CefBrowserWindowMac.java:11: 错误: 程序包sun.lwawt.macosx不存在
import sun.lwawt.macosx.CFRetainedResource;
                       ^
.\org\cef\browser\mac\CefBrowserWindowMac.java:12: 错误: 程序包sun.lwawt.macosx不存在
import sun.lwawt.macosx.CPlatformWindow;
                       ^
标准 Doclet 版本 1.8.0_181
正在构建所有程序包和类的树...
正在生成..\out\docs\org\cef\browser\CefBrowser.html...
正在生成..\out\docs\org\cef\browser\CefBrowserFactory.html...
正在生成..\out\docs\org\cef\browser\CefBrowserWindow.html...
正在生成..\out\docs\org\cef\browser\CefFrame.html...
正在生成..\out\docs\org\cef\browser\CefMessageRouter.html...
.\org\cef\browser\CefMessageRouter.java:185: 警告 - @return 标记没有参数。
.\org\cef\browser\CefMessageRouter.java:185: 警告 - @param argument "config" 不是参数名称。
正在生成..\out\docs\org\cef\browser\CefMessageRouter.CefMessageRouterConfig.html...
正在生成..\out\docs\org\cef\browser\CefRequestContext.html...
。。。
正在生成..\out\docs\constant-values.html...
正在构建所有程序包和类的索引...
正在生成..\out\docs\overview-tree.html...
正在生成..\out\docs\index-all.html...
正在构建所有类的索引...
正在生成..\out\docs\allclasses-frame.html...
正在生成..\out\docs\allclasses-noframe.html...
正在生成..\out\docs\index.html...
正在生成..\out\docs\overview-summary.html...
正在生成..\out\docs\help-doc.html...
29 个警告
已复制         1 个文件。
已复制         1 个文件。
已复制         1 个文件。
已复制         1 个文件。
已复制         1 个文件。
已复制         1 个文件。
F:\wv\src\java\tests\detailed\BrowserFrame.java -&gt; F:\wv\src\binary_distrib\win64\bin\tests\detailed\BrowserFrame.java
F:\wv\src\java\tests\detailed\MainFrame.java -&gt; F:\wv\src\binary_distrib\win64\bin\tests\detailed\MainFrame.java
。。。
F:\wv\src\java\tests\detailed\ui\StatusPanel.java -&gt; F:\wv\src\binary_distrib\win64\bin\tests\detailed\ui\StatusPanel.java
F:\wv\src\java\tests\simple\MainFrame.java -&gt; F:\wv\src\binary_distrib\win64\bin\tests\simple\MainFrame.java
复制了 34 个文件
已复制         1 个文件。
已复制         1 个文件。
已复制         1 个文件。
系统找不到指定的文件。
已复制         1 个文件。
已复制         1 个文件。
已复制         1 个文件。
已复制         1 个文件。
已复制         1 个文件。
已复制         1 个文件。
已复制         1 个文件。
已复制         1 个文件。
已复制         1 个文件。
F:\wv\src\jcef_build\native\Release\cef.pak -&gt; F:\wv\src\binary_distrib\win64\bin\lib\win64\cef.pak
F:\wv\src\jcef_build\native\Release\cef_100_percent.pak -&gt; F:\wv\src\binary_distrib\win64\bin\lib\win64\cef_100_percent.pak
。。。
F:\wv\src\jcef_build\native\Release\locales\zh-CN.pak -&gt; F:\wv\src\binary_distrib\win64\bin\lib\win64\locales\zh-CN.pak
F:\wv\src\jcef_build\native\Release\locales\zh-TW.pak -&gt; F:\wv\src\binary_distrib\win64\bin\lib\win64\locales\zh-TW.pak
复制了 58 个文件
F:\wv\src\jcef_build\native\Release\swiftshader\libEGL.dll -&gt; F:\wv\src\binary_distrib\win64\bin\lib\win64\swiftshader\libEGL.dll
F:\wv\src\jcef_build\native\Release\swiftshader\libGLESv2.dll -&gt; F:\wv\src\binary_distrib\win64\bin\lib\win64\swiftshader\libGLESv2.dll
复制了 2 个文件
F:\wv\src\out\docs\allclasses-frame.html -&gt; F:\wv\src\binary_distrib\win64\docs\allclasses-frame.html
F:\wv\src\out\docs\allclasses-noframe.html -&gt; F:\wv\src\binary_distrib\win64\docs\allclasses-noframe.html
。。。
F:\wv\src\out\docs\org\cef\network\package-summary.html -&gt; F:\wv\src\binary_distrib\win64\docs\org\cef\network\package-summary.html
F:\wv\src\out\docs\org\cef\network\package-tree.html -&gt; F:\wv\src\binary_distrib\win64\docs\org\cef\network\package-tree.html
复制了 151 个文件
Creating README.TXT file.
已复制         1 个文件。
F:\wv\src\third_party\jogamp\gluegen.LICENSE.txt -&gt; F:\wv\src\binary_distrib\win64\gluegen.LICENSE.txt
F:\wv\src\third_party\jogamp\jogl.LICENSE.txt -&gt; F:\wv\src\binary_distrib\win64\jogl.LICENSE.txt
复制了 2 个文件
F:\wv\src\tools\distrib\win64\compile.bat -&gt; F:\wv\src\binary_distrib\win64\compile.bat
F:\wv\src\tools\distrib\win64\run.bat -&gt; F:\wv\src\binary_distrib\win64\run.bat
复制了 2 个文件

F:\wv\src\tools&gt;
</code></pre>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[斐讯K2刷机记录]]></title>
    <link href="http://winseliu.com/blog/2018/06/20/k2-reburn/"/>
    <updated>2018-06-20T23:08:28+08:00</updated>
    <id>http://winseliu.com/blog/2018/06/20/k2-reburn</id>
    <content type="html"><![CDATA[<p>很久以前就在JD弄了一个K2，当时没有啥需求，所以也没有折腾 。最近尝试DDNS域名绑定到动态的IP，想在家有一个能提供SSH访问的机器。原来的树莓派被弄坏了，就想着折腾折腾刷刷K2，在上面安装一个SSH。</p>

<p>同时也把官网提供的系统净化净化。</p>

<h2>原K2的详细信息</h2>

<p><a href="https://item.jd.com/2615810.html">斐讯K2 1200M智能双频无线路由器 WIFI穿墙 PSG1218</a></p>

<h2>了解刷机流程</h2>

<ul>
<li>官方版本可能存在的问题：</li>
</ul>


<p><a href="http://www.right.com.cn/forum/thread-208302-1-1.html">http://www.right.com.cn/forum/thread-208302-1-1.html</a></p>

<ul>
<li>刷机直接参考</li>
</ul>


<p><a href="http://www.right.com.cn/forum/thread-208753-1-1.html">【2017-12-01】斐讯K2 V22.5.9.163官方固件定制版,集成breed,支持官版直刷【V1.8】</a></p>

<h2>详细步骤</h2>

<ol>
<li><p>更新版本到 V22.5.9.163</p>

<p>查看官网提供的<a href="http://www.phicomm.com/cn/support.php/Soho/software_support/t/sm.html">软件</a>， 下载<a href="http://www.phicomm.com/cn/support.php/Soho/search_support/col/6/keys/k2.html">对应的版本</a></p>

<ul>
<li>K2_A2_V21.4.6.12.bin</li>
<li>K2_V22.5.9.163.bin</li>
</ul>
</li>
<li><p>刷净化版（带Bread）k2_163_v18_breed.rar</p>

<ul>
<li><p><a href="http://woo.iytc.net/?dir=uploads/K2">下载地址</a></p></li>
<li><p><a href="http://www.qqgzs.com/archives/k2-shuaji.html">breed刷入第三方固件</a></p>

<p> 进入Bread方法，这个了解下就行，这里不刷第三方的。</p>

<p> 拔除K2上Wan口的网线，路由器断电，持续按住路由器上的reset按钮，接通路由器电源，3秒后松开reset按钮。
 在浏览器地址栏输入 <a href="http://192.168.1.1">http://192.168.1.1</a> 访问Breed Web。</p></li>
</ul>
</li>
<li><p>启动telnet/手动安装SSH</p>

<ul>
<li><a href="http://iytc.net/wordpress/?p=1624">http://iytc.net/wordpress/?p=1624</a></li>
</ul>
</li>
</ol>


<p>3.1. 启动telnet</p>

<p>用 高级设置 - 系统设置 - WebShell 执行命令</p>

<pre><code>/www/cgi-bin# /usr/sbin/telnetd -l /bin/login.sh
</code></pre>

<p>直接连，不用密码！！</p>

<pre><code>winse@DESKTOP-ADH7K1Q:~$ telnet 192.168.2.1
</code></pre>

<p>同时修改下密码：</p>

<pre><code># 更改root密码为 admin
echo -e 'admin\nadmin' | passwd root
</code></pre>

<p></p>

<p>3.2. 安装SSH</p>

<p>这个版本没有带opkg，需要首先把opkg安装好。</p>

<ul>
<li><a href="https://www.ywlib.com/archives/102.html">小米路由3安装opkg</a></li>
<li><a href="https://www.ywlib.com/archives/101.html">解压OpenWRT固件bin文档提取文件</a></li>
</ul>


<p>直接下载 <a href="http://www.ywlib.com/usr/uploads/2017/05/387250260.zip">opkg.zip</a> 然后本地起一个 httpserver 提供一个下载的服务。</p>

<pre><code>winse@DESKTOP-ADH7K1Q:/mnt/e/SOFTWARE/k2$ python -m SimpleHTTPServer
Serving HTTP on 0.0.0.0 port 8000 ...
</code></pre>

<p>在telnet窗口执行：</p>

<pre><code>root@K2:/www/cgi-bin# cd /bin
root@K2:/bin# wget http://192.168.2.160:8000/opkg
--2018-06-20 22:50:18--  http://192.168.2.160:8000/opkg
Connecting to 192.168.2.160:8000... connected.
HTTP request sent, awaiting response... 200 OK
Length: 130247 (127K) [application/octet-stream]
Saving to: 'opkg'

opkg                                  100%[=========================================================================&gt;] 127.19K   176KB/s   in 0.7s

2018-06-20 22:50:18 (176 KB/s) - 'opkg' saved [130247/130247]

root@K2:/bin# chmod +x opkg
</code></pre>

<pre><code>注意：用完后就删掉吧 `rm -rf /bin/opkg` ，空间不够！！查看[安装了那些软件](https://unix.stackexchange.com/questions/157097/how-to-know-disk-space-occupied-by-packages-in-openwrt)

```
rm -rf /bin/opkg

root@K2:/overlay# du -sh */*/*
root@K2:/overlay# rm -rf usr/lib/opkg
```
</code></pre>

<p></p>

<p>然后安装ssh：</p>

<pre><code>opkg install http://downloads.openwrt.org/barrier_breaker/14.07/ramips/mt7620a/packages/base/dropbear_2014.63-2_ramips_24kec.ipk
# 开机自启
/etc/init.d/dropbear enable

# https://openwrt.org/docs/guide-user/base-system/ssh_configuration
# https://wiki.openwrt.org/doc/uci/dropbear
vi /etc/config/dropbear
        option GatewayPorts '1'

# 启动
/etc/init.d/dropbear start

uci show dropbear

# 如果需要放开防火墙
iptables -I INPUT 1 -p tcp -m tcp --dport 22 -j ACCEPT


vi /etc/firewall.user
# 删除无用文件
rm -rf /etc/dropbear/dropbear_dss_host_key
</code></pre>

<p>注意：需要持久化的话，把这句开放22端口的指令写到 /etc/firewall.user 。</p>

<p></p>

<p>客户端登录：</p>

<pre><code>winse@DESKTOP-ADH7K1Q:~$ ssh root@192.168.2.1
The authenticity of host '192.168.2.1 (192.168.2.1)' can't be established.
RSA key fingerprint is SHA256:vuAY65qk3Us4MyjYT8KPT8lYsTSTqru6W4e7My6CRkk.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '192.168.2.1' (RSA) to the list of known hosts.
root@192.168.2.1's password:


BusyBox v1.22.1 (2017-02-15 13:52:46 CST) built-in shell (ash)
Enter 'help' for a list of built-in commands.

    ___  __ _______________  __  _____  ___  ________  ___
   / _ \/ // /  _/ ___/ __ \/  |/  /  |/  / / __/ __ \/ _ \
  / ___/ _  // // /__/ /_/ / /|_/ / /|_/ / _\ \/ /_/ / ___/
 /_/  /_//_/___/\___/\____/_/  /_/_/  /_/ /___/\____/_/
 ----------------------------------------------------------
 Barrier Breaker, unknown
 ----------------------------------------------------------
 PID=K2
 BUILD_TYPE=release
 BUILD_NUMBER=163
 BUILD_TIME=20170215-134532
 ----------------------------------------------------------
 MTK OpenWrt SDK V3.4
 revision : adab2180
 benchmark : APSoC SDK 5.0.1.0
 kernel : 144992
 ----------------------------------------------------------
root@K2:~#
</code></pre>

<p>不推荐用密码，最好使用公钥的方式来处理。<del>但公钥访问有点问题，.ssh的目录权限是个麻烦事</del> （其实文件的位置不对！！）。</p>

<p>参考： <a href="https://wiki.openwrt.org/doc/howto/dropbear.public-key.auth">Dropbear public-key authentication HowTo</a></p>

<blockquote><p>ssh <a href="&#109;&#97;&#105;&#108;&#x74;&#x6f;&#58;&#114;&#x6f;&#111;&#x74;&#64;&#x31;&#57;&#x32;&#x2e;&#x31;&#x36;&#56;&#46;&#x31;&#46;&#x31;">&#x72;&#x6f;&#x6f;&#116;&#64;&#x31;&#57;&#50;&#x2e;&#x31;&#54;&#x38;&#46;&#x31;&#x2e;&#49;</a> &ldquo;tee -a /etc/dropbear/authorized_keys&rdquo; &lt; ~/.ssh/id_rsa.pub</p></blockquote>

<p>把 authorized_keys 文件移到 /etc/dropbear 下面就可以了！</p>

<pre><code>root@K2:~/.ssh# ls -la
drwx------    2 root     root             0 Jun 21 10:35 .
drwx------    1 root     root             0 Jun 21 08:57 ..
-rw-------    1 root     root           397 Jun 21 10:35 authorized_keys
root@K2:~/.ssh# mv authorized_keys /etc/dropbear/
</code></pre>

<p></p>

<h2>其他拓展</h2>

<h3>增加空间，挂载windows共享目录</h3>

<p><a href="https://blog.vircloud.net/linux/openwrt-psg1218.html">https://blog.vircloud.net/linux/openwrt-psg1218.html</a></p>

<p>K2 官方版式不带 USB，因此就限制了很多可玩的东西，但是我们可以通过 SMB 挂载的方式来增加存储空间，需要注意的是老毛子挂载 SMB 的方式与其他 OpenWRT 不同，使用 mount 命令是挂载不成功的，正确的方法是：</p>

<p>位置：高级设置 - 自定义设置 - 脚本 - 在路由器启动后执行
配置如下：</p>

<pre><code>### SMB资源挂载(局域网共享映射，无USB也能挂载储存空间)
### 说明：共享路径填写时，【\】要写成【\\】。
sleep 10
modprobe des_generic
modprobe cifs CIFSMaxBufSize=64512
#mkdir -p /media/cifs
#mount -t cifs \\\\{host}\\{share} /media/cifs -o username={user},password={pass}
mount -t cifs \\\\192.168.31.100\\移动磁盘-C /mnt -o username=guest,password=guest

sleep 10
mdev -s
sleep 5
stop_ftpsamba
sleep 2
run_ftpsamba
sleep 5
</code></pre>

<h3>Breed进入方式</h3>

<ol>
<li>将要刷的第三方固件准备好。</li>
<li>断电按着reset键不松手，然后通电5秒后再松开reset键。</li>
<li>打开浏览器输入<a href="http://192.168.1.1%E5%8D%B3%E5%8F%AFBreed">http://192.168.1.1%E5%8D%B3%E5%8F%AFBreed</a> Web恢复控制台（记得先在Breed Web恢复控制台中的固件备份里备份下EEPROM和编程器固件，以后可能用得着）。</li>
<li>恢复固件之前最好在Breed Web恢复控制台恢复一下出厂设置，固件类型：Config区（公版）</li>
</ol>


<p>参考：</p>

<ul>
<li><a href="https://github.com/moonjoin/k2-firmware">https://github.com/moonjoin/k2-firmware</a></li>
<li><a href="http://www.right.com.cn/forum/thread-161324-1-1.html">http://www.right.com.cn/forum/thread-161324-1-1.html</a></li>
<li><a href="https://www.c7cc.com/shuaji-chaiji/k1-k2-v21-4-6-10-telnet-ssh.html">https://www.c7cc.com/shuaji-chaiji/k1-k2-v21-4-6-10-telnet-ssh.html</a></li>
<li><a href="http://www.mm126.cc/319.html">http://www.mm126.cc/319.html</a></li>
<li><a href="http://www.qqgzs.com/archives/k2-22-6-503.html">http://www.qqgzs.com/archives/k2-22-6-503.html</a></li>
</ul>


<h2>其他参考</h2>

<ul>
<li><a href="https://www.jianshu.com/p/6be3639ff9e3">https://www.jianshu.com/p/6be3639ff9e3</a></li>
<li><a href="http://www.right.com.cn/forum/thread-184338-1-1.html">http://www.right.com.cn/forum/thread-184338-1-1.html</a></li>
<li><a href="http://www.cnblogs.com/lanye/p/6149242.html">http://www.cnblogs.com/lanye/p/6149242.html</a> 刷入 breed 和 ssh</li>
<li><a href="http://www.right.com.cn/forum/thread-189593-1-2.html">http://www.right.com.cn/forum/thread-189593-1-2.html</a> 安装SSH也是有多种方法</li>
<li><a href="https://www.cnblogs.com/xuliangxing/p/6486560.html">https://www.cnblogs.com/xuliangxing/p/6486560.html</a></li>
<li><a href="https://www.jianshu.com/p/275217976492">https://www.jianshu.com/p/275217976492</a> LEDE 是一个从 OpenWrt 中衍生出来的产品</li>
<li><a href="https://downloads.lede-project.org/releases/17.01.4/targets/ramips/mt7620/">https://downloads.lede-project.org/releases/17.01.4/targets/ramips/mt7620/</a></li>
<li><a href="https://bitbucket.org/stevengan/padavan/downloads/">https://bitbucket.org/stevengan/padavan/downloads/</a></li>
<li><a href="https://blog.aofall.com/archives/14.html">https://blog.aofall.com/archives/14.html</a></li>
<li><a href="http://www.hopol.cn/2017/05/853/">http://www.hopol.cn/2017/05/853/</a> 斐讯K2 163版配置文件加密破解过程。学学c++是怎么反编译的！！！！</li>
</ul>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用VMWare安装Mac OS X]]></title>
    <link href="http://winseliu.com/blog/2018/06/19/install-macosx-on-vmware/"/>
    <updated>2018-06-19T23:05:55+08:00</updated>
    <id>http://winseliu.com/blog/2018/06/19/install-macosx-on-vmware</id>
    <content type="html"><![CDATA[<p>参考：</p>

<ul>
<li><a href="http://www.yhy0.com/ios_20160413_269.html">VMware Workstation 12 Pro如何安装Mac OS X 10.11.1</a></li>
<li><a href="https://blog.csdn.net/yongh701/article/details/70597982">【iOS】VMWare中MAC OS X的安装，VMWare tools的配置与iOS的Helloworld</a></li>
</ul>


<p>实际操作：</p>

<ul>
<li>安装 VMware-workstation-full-12.5.7-5813279 。</li>
<li>下载 unlocker208.zip 并使用管理员权限安装 win-install.cmd 。</li>
<li>添加虚拟机，选择 Apple Mac OS X(M) - OS X 10.9；然后修改vmx配置，在 <code>smc.present = "TRUE"</code> 后面添加 <code>smc.version = "0"</code></li>
<li>然后光盘选择 Mavericks_Install_13A603.cdr 安装系统。磁盘格式化：<code>实用工具 - 磁盘工具</code> 。</li>
<li>安装VMWare Tools。光盘选择 darwiniso.zip 压缩包里面的 darwin6.0.3.iso 。</li>
<li>配置共享文件夹。进入系统后，<code>Finder - 偏好设置 -  已连接的服务器</code> 。</li>
</ul>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[科学上网（续）]]></title>
    <link href="http://winseliu.com/blog/2018/06/09/reasonable-way-to-access-the-internet/"/>
    <updated>2018-06-09T14:03:11+08:00</updated>
    <id>http://winseliu.com/blog/2018/06/09/reasonable-way-to-access-the-internet</id>
    <content type="html"><![CDATA[<p>到新的环境就会遇到新的问题，需要不断的学习更新来适应新的环境。上网也是一样，工作地点和家里存在了一道鸿沟。过去断断续续的有一些解决的方式，但是总是有点间接。</p>

<ul>
<li><a href="http://www.winseliu.com/blog/2017/11/04/teamviewer-vpn-on-windows/">使用TeamviewerVPN访问公司内网</a></li>
<li><a href="http://www.winseliu.com/blog/2017/02/04/privoxy-http-proxy-for-shadowsocks/">使用Privoxy把shadowsocks转换为Http代理</a></li>
<li><a href="http://www.winseliu.com/blog/2016/03/11/install-and-config-openvpn/">安装配置OpenVPN</a></li>
<li><a href="http://www.winseliu.com/blog/2015/11/22/gfw-ladder/">搭梯笔记</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html">SSH原理与运用（二）：远程操作与端口转发</a></li>
<li><a href="http://www.winseliu.com/blog/2015/09/06/squid-http-proxy-server-install/">安装http代理服务器squid</a></li>
<li><a href="http://www.winseliu.com/blog/2017/10/30/windows-run-ubuntu/">Windows Run Ubuntu</a></li>
</ul>


<p>上周和同事讨论到在家访问公司服务器的方式时，可以通过花生壳的DDNS来实现域名动态绑定，相当于了把家里的宽带看做一个公网IP，花生壳实时的把域名解析更新为最新的IP。</p>

<p>有了公网IP后，就可以在公司访问自己的域名（绑定到了家里的IP），然后 反向代理 就可以直接访问公司环境了。</p>

<p>但是查了下对于花生壳的口碑都不咋的，其实只要能自动的更新绑定域名和宽带的IP，和花生壳的效果是一样。然后在 github 查到了    <code>aliyun-ddns</code> 定时检测和更新阿里云上的域名解析。</p>

<p>首先通过域名映射到家里电信宽带的公网IP，ddns用来适配电信的IP是动态分配的；然后在家里的局域网机器开一个SSH的服务；再在路由上做端口转发到家里局域网的ssh。这样就可以在公司通过 <code>ssh my-domain</code> 连回家了。</p>

<h2>DDNS配置：映射域名到自己的公网IP</h2>

<p><a href="https://github.com/yyqian/aliyun-ddns">aliyun-ddns</a> 老版本有些复杂，我在此基础上一个<a href="https://github.com/winse/aliyun-ddns">本地命令行的版本</a> ，直接运行一个脚本就可以更新域名解析了：</p>

<pre><code>./client.sh myhome.winseliu.com
</code></pre>

<p><img src="/images/blogs/aliyun-dns.png" alt="" /></p>

<p>注：默认电信宽带给你分配的内网IP的，你可以打10000号要他们给你分配改成公网IP。</p>

<h2>本地环境配置</h2>

<ul>
<li>本地SSHD配置</li>
</ul>


<pre><code>winse@DESKTOP-ADH7K1Q:~$ sudo dpkg-reconfigure openssh-server
winse@DESKTOP-ADH7K1Q:~$ sudo service ssh start
</code></pre>

<ul>
<li>无秘密登录配置</li>
</ul>


<p>为了安全，通过公网的SSH访问最好通过秘钥登录，把使用SSH的密码登录关掉。</p>

<pre><code>winse@DESKTOP-ADH7K1Q:~/.ssh$ cat /business/server/id_rsa.pub &gt;&gt;authorized_keys
</code></pre>

<p></p>

<ul>
<li>本机防火墙开放22端口</li>
</ul>


<p>参考 <a href="https://blog.csdn.net/zzq900503/article/details/11936379">开放windows服务器端口&mdash;&ndash;以打开端口8080为例</a></p>

<p><img src="/images/blogs/ddns-local-firewall.png" alt="" /></p>

<ul>
<li>路由器端口映射配置</li>
</ul>


<p><img src="/images/blogs/ddns-route-portforwarding.png" alt="" /></p>

<h2>穿透：配置反向代理</h2>

<p>在公司服务器访问自己域名，使用 -R 参数在家里电脑本地创建一个5432的端口，数据转发到服务器的5432端口。当你在家连本地的 127.0.0.1:5432 就相当于连接服务器的 5432 端口。</p>

<pre><code>/usr/bin/autossh -M 0 -o ServerAliveInterval=30 -o ServerAliveCountMax=3 -o StrictHostKeyChecking=no -NR 5432:localhost:5432 autossh@myhome.winseliu.com -i ~/.ssh/id_rsa
</code></pre>

<p></p>

<p>当连接太慢、SSH提示信息一直不出来，你完全有理由怀疑本地端口被占用了！！查看本地端口状态：</p>

<pre><code>C:\Users\winse&gt;netstat /?

C:\Users\winse&gt;netstat -ano |findstr 10022
</code></pre>

<p>如果端口被占用了，需要去任务管理器中关掉对应的PID的程序。</p>

<p></p>

<h2>小结</h2>

<p>速度比 teamviewer vpn 的方式快狠多狠多！！这个10000号值得打，这个ddns值得一试。</p>

<h2>后记</h2>

<h3>说说 VS Code调试</h3>

<p>使用Ubuntu中安装的Node：</p>

<ul>
<li><a href="https://blogs.msdn.microsoft.com/commandline/2017/10/27/running-node-js-on-wsl-from-visual-studio-code/">Running Node.js on WSL from Visual Studio Code</a></li>
<li><a href="https://stackoverflow.com/a/47495710/5697508">Using Visual Studio Code on Windows with Ubuntu-Bash and NodeJS</a></li>
</ul>


<pre><code>"useWSL": true
</code></pre>

<p><a href="https://code.visualstudio.com/docs/nodejs/nodejs-debugging">https://code.visualstudio.com/docs/nodejs/nodejs-debugging</a></p>

<p>注意：这种外部启动的方式，会通过bash.sh运行node，所以就算停止调试后，Node进程还是一直存在的！！！需要通过任务管理器关闭。</p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
</feed>
