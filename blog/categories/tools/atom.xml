<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tools | Winse Blog]]></title>
  <link href="http://winseliu.com/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://winseliu.com/"/>
  <updated>2016-01-09T12:08:51+08:00</updated>
  <id>http://winseliu.com/</id>
  <author>
    <name><![CDATA[Winse Liu]]></name>
    <email><![CDATA[winseliu@foxmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Postgresql入门]]></title>
    <link href="http://winseliu.com/blog/2015/12/13/postgresql-start-guide/"/>
    <updated>2015-12-13T23:19:55+08:00</updated>
    <id>http://winseliu.com/blog/2015/12/13/postgresql-start-guide</id>
    <content type="html"><![CDATA[<p>简单介绍下软件的安装，配置。同时实践下从mysql迁移到postgres。</p>

<h2>安装配置</h2>

<p>这里直接使用rpm包来安装。如果是centos6.6以下版本的系统需要更新openssl。</p>

<pre><code>[root@hadoop-master1 postgres]# ll
total 20708
-rw-r--r-- 1 root root  1593932 Dec 11 10:02 openssl-1.0.1e-42.el6.x86_64.rpm
-rw-r--r-- 1 root root  1085208 Dec 11 09:12 postgresql94-9.4.5-1PGDG.rhel6.x86_64.rpm
-rw-r--r-- 1 root root   541376 Dec 11 09:12 postgresql94-contrib-9.4.5-1PGDG.rhel6.x86_64.rpm
-rw-r--r-- 1 root root  1600736 Dec 11 09:12 postgresql94-devel-9.4.5-1PGDG.rhel6.x86_64.rpm
-rw-r--r-- 1 root root 11485008 Dec 11 09:13 postgresql94-docs-9.4.5-1PGDG.rhel6.x86_64.rpm
-rw-r--r-- 1 root root   198968 Dec 11 09:12 postgresql94-libs-9.4.5-1PGDG.rhel6.x86_64.rpm
-rw-r--r-- 1 root root    60688 Dec 11 09:12 postgresql94-plperl-9.4.5-1PGDG.rhel6.x86_64.rpm
-rw-r--r-- 1 root root    68884 Dec 11 09:12 postgresql94-plpython-9.4.5-1PGDG.rhel6.x86_64.rpm
-rw-r--r-- 1 root root  4556880 Dec 11 09:11 postgresql94-server-9.4.5-1PGDG.rhel6.x86_64.rpm
</code></pre>

<ul>
<li>安装命令：</li>
</ul>


<pre><code># yum install -y openssl-1.0.1e-42.el6.x86_64.rpm 

# useradd postgres
# rpm -i postgresql94-*
</code></pre>

<ul>
<li>配置环境变量、初始化数据库、启动数据库：</li>
</ul>


<pre><code># su - postgres
$ vi .bash_profile

export PGDATA=/var/lib/pgsql/9.4/data
PG_HOME=/usr/pgsql-9.4
PATH=$PG_HOME/bin:$PATH
export PATH

$ initdb

$ vi $PGDATA/pg_hba.conf
    host    all             all              192.168.0.0/16          md5

$ vi /var/lib/pgsql/9.4/data/postgresql.conf
    listen_addresses = '*'

# 切回root

# service postgresql-9.4 start
# chkconfig postgresql-9.4 on --level 2345
</code></pre>

<p>pg_hba.conf用来控制什么用于可以被远程访问。而postgresql.conf修改的监听的地址，默认是localhost改成*后就可以所有地址都可以访问了。</p>

<ul>
<li>建立库，创建数据库用户</li>
</ul>


<pre><code>-bash-4.1$ psql 

 create user dpi;
 create database dpi owner dpi;
 alter user dpi with password 'XXXX';
</code></pre>

<p>建表：</p>

<pre><code>CREATE TABLE t_dta_illegalweb (
...
  day varchar(10) DEFAULT NULL,
...
);

create or replace function t_dta_illegalweb_insert_trigger()
returns trigger as $$
begin
    return null;
end; 
$$ language plpgsql;

CREATE TRIGGER trigger_t_dta_illegalweb_insert
    BEFORE INSERT ON t_dta_illegalweb
    FOR EACH ROW EXECUTE PROCEDURE t_dta_illegalweb_insert_trigger();
</code></pre>

<p>后面会使用分区表，先把触发器都建好。把框框搭好，后面修改就行了。</p>

<h2>数据迁移</h2>

<ol>
<li>postgres创建表：</li>
</ol>


<pre><code>CREATE TABLE IF NOT EXISTS t_dta_illegalweb20151211 (check(day = '2015-12-11')) INHERITS (t_dta_illegalweb);
CREATE TABLE IF NOT EXISTS t_dta_illegalweb20151210 (check(day = '2015-12-10')) INHERITS (t_dta_illegalweb);
CREATE TABLE IF NOT EXISTS t_dta_illegalweb20151209 (check(day = '2015-12-09')) INHERITS (t_dta_illegalweb);
CREATE TABLE IF NOT EXISTS t_dta_illegalweb20151208 (check(day = '2015-12-08')) INHERITS (t_dta_illegalweb);
CREATE TABLE IF NOT EXISTS t_dta_illegalweb20151207 (check(day = '2015-12-07')) INHERITS (t_dta_illegalweb);
</code></pre>

<ol>
<li>mysql导出数据：</li>
</ol>


<pre><code>select * from t_dta_illegalweb where day='2015-12-09' into outfile '/tmp/etl/t_dta_illegalweb20151209.sql'  fields terminated by '|';
select * from t_dta_illegalweb where day='2015-12-08' into outfile '/tmp/etl/t_dta_illegalweb20151208.sql'  fields terminated by '|';
select * from t_dta_illegalweb where day='2015-12-07' into outfile '/tmp/etl/t_dta_illegalweb20151207.sql'  fields terminated by '|';
</code></pre>

<p>数据在mysql服务器的/tmp/etl目录下面。如果mysql和postgres不在同一台机，需要把这些文件拷贝到postgres的服务器。</p>

<ol>
<li>导入数据到postgres:</li>
</ol>


<p>用psql登录dpi，然后执行copy命令把数据导入到对应的表。</p>

<pre><code>\copy  t_dta_illegalweb20151209 from  '/tmp/etl/t_dta_illegalweb20151209.sql' using delimiters '|' ;
\copy  t_dta_illegalweb20151208 from  '/tmp/etl/t_dta_illegalweb20151208.sql' using delimiters '|' ;
\copy  t_dta_illegalweb20151207 from  '/tmp/etl/t_dta_illegalweb20151207.sql' using delimiters '|' ;
</code></pre>

<h2>程序修改</h2>

<p>程序修改是一件头痛的事情，虽然大部分都是SQL，但是MYSQL的比较宽泛，很多语句都兼容不报错也能出来想要的结果。但是这些语句在postgres下面执行是会报错的。比如说，select count(*)对所有数据count的时刻不能加order by（提示要groupby）；再比如，mysql遇到字符串字段和数字比较会统一转换成数字比较，等等这些在postgres中都需要在SQL中显示的转换的。</p>

<p>那么postgres的类型转换怎么实现呢？两种形式cast(X as TYPE) 或者 X::TYPE。</p>

<p>由于程序是用hibernate来做数据库访问的，会遇到如下的问题</p>

<ul>
<li>如果用hql的话CAST函数hibernate首先会进行转换。（转换类型与hibernate对象的类型不匹配）</li>
<li>而用X::TYPE会把:TYPE作为一个name parameter。</li>
<li>不用hql用sql的话，要自己做对象转换，这是我们不愿意去做的事情（不然用hibernate干嘛）</li>
</ul>


<p>各种尝试过后，修改PostgreSQLDialect来实现，添加一个自定义的hibernate函数，把字符串转成bigint即可。</p>

<pre><code>import java.sql.Types;

import org.hibernate.Hibernate;
import org.hibernate.dialect.function.SQLFunctionTemplate;


public class PostgreSQLDialect extends org.hibernate.dialect.PostgreSQLDialect {

    public PostgreSQLDialect() {
        super();
        registerFunction( "bigint", new SQLFunctionTemplate(Hibernate.BIG_INTEGER, "cast(?1 as bigint)") );
    }

}
</code></pre>

<p>使用如下：</p>

<pre><code>StringBuilder hql = new StringBuilder("from IllegalWebInfo where 1=1 ");
List&lt;Object&gt; params = new ArrayList&lt;&gt;();

String domain = queryBean.getDomain();
if (StringUtils.isNotBlank(domain)) {
    hql.append(" and ").append("domain=?");
    params.add(domain.toLowerCase());
}
String houseId = queryBean.getHouseId();
if (StringUtils.isNotBlank(houseId)) {
    hql.append(" and ").append("houseId=?");
    params.add(houseId);
}
String day = queryBean.getDay();
if (StringUtils.isNotBlank(day)) {
    hql.append(" and ").append("day=?");
    params.add(day);
}
int threshold = queryBean.getThreshold();
if(threshold &gt; 0){
    hql.append(" and ").append("bigint(visitsCount) &gt;= ?");
    params.add(BigInteger.valueOf(threshold)); // 注意这里的类型转换，把int装成bigint
}

Object[] paramArray = params.toArray();
String detailHQL = hql.toString(); // + " order by bigint(visitsCount) desc ";
List&lt;ActiveResourcesDomainInfo&gt; hist = activeResourcesDomainDao.findPageable(detailHQL, currentPage, pageSize, paramArray);

String countHQL = "select count(*) " + hql;
long count = (long) illegalWebDao.findByHql(countHQL, paramArray).iterator().next();
</code></pre>

<h2>定时任务，创建和更新触发器函数</h2>

<p>函数：</p>

<pre><code>create or replace function create_partition_table_everyday (t TEXT) returns timestamp as $$
declare 
    i int;
    cnt int;
    stmt text;
    select_stmt text;
    day date;
    isInherit BOOLEAN;
begin

    day := now() + interval '-1 day';
    stmt := 'CREATE TABLE IF NOT EXISTS ' || t || to_char(day, 'YYYYMMDD') || '(check(day = ''' || to_char(day, 'YYYY-MM-DD') || ''')) INHERITS (' || t || ')';
    RAISE INFO '[DEBUG] %', stmt;
    EXECUTE stmt;

    day := now() + interval '-183 day';
    stmt := 'DROP TABLE IF EXISTS ' || t || to_char(day, 'YYYYMMDD');
    RAISE INFO '[DEBUG] %', stmt;
    EXECUTE stmt;

BEGIN
    day := now() + interval '-32 day';
    stmt := 'ALTER TABLE IF EXISTS ' || t || to_char(day, 'YYYYMMDD') || ' NO INHERIT ' || t;
    RAISE INFO '[DEBUG] %', stmt;
    EXECUTE stmt;
EXCEPTION WHEN OTHERS THEN
    RAISE INFO '[WARN] % %', SQLERRM, SQLSTATE;
END;

    i := 0;
    cnt := 6; -- 用于生成触发器分发最近几天的insert功能

    day := now() + interval '-1 day';
    stmt :=         ' create or replace function ' || t || '_insert_trigger() returns trigger as $' || '$ ';
    stmt := stmt || ' begin ';
    stmt := stmt || ' if (new.day = ''' || to_char(day, 'YYYY-MM-DD') || ''') then INSERT INTO ' || t || to_char(day, 'YYYYMMDD') || ' VALUES (new.*); ';
    while i &lt; cnt 
    loop
        day := day + interval '-1 day';
        stmt := stmt || ' elsif (new.day = ''' || to_char(day, 'YYYY-MM-DD') || ''') then INSERT INTO ' || t || to_char(day, 'YYYYMMDD') || ' VALUES (new.*); ';

        i := i + 1;
    end loop;
    stmt := stmt || ' else raise exception ''DATE out of range. Fix the ' || t || '_insert_trigger() func!!''; ';
    stmt := stmt || ' end if; ';
    stmt := stmt || ' return null; ';
    stmt := stmt || ' end;  ';
    stmt := stmt || ' $' || '$ language plpgsql; ';
    RAISE INFO '[DEBUG] %', stmt;
    EXECUTE stmt;

    return now();
end;
$$ language plpgsql;
</code></pre>

<p>脚本：</p>

<pre><code>
vi update_dta_postgres.sh

#!/bin/sh

source ~/.bash_profile

psql -d dpi -c "select create_partition_table_everyday('t_dta_illegalweb')"
psql -d dpi -c "select create_partition_table_everyday('t_dta_activeresources_domain')"
psql -d dpi -c "select create_partition_table_everyday('t_dta_activeresources_ip')"

$ 
chmod +x update_dta_postgres.sh 
crontab -e


10 0 * * * sh ~/scripts/update_dta_postgres.sh &gt;~/scripts/update_dta_postgres.log 2&gt;&amp;1
</code></pre>

<h2>参考</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/22648597/linux-centos-yum-error-package-requires-libcrypto-so-10openssl-1-0-1-ec64bi">http://stackoverflow.com/questions/22648597/linux-centos-yum-error-package-requires-libcrypto-so-10openssl-1-0-1-ec64bi</a></li>
<li><a href="http://twpug.net/docs/postgresql-doc-8.0-zh_TW/functions-comparison.html">http://twpug.net/docs/postgresql-doc-8.0-zh_TW/functions-comparison.html</a></li>
<li><a href="http://stackoverflow.com/questions/7690329/check-if-table-inherits-from-other-table-in-postgresql">http://stackoverflow.com/questions/7690329/check-if-table-inherits-from-other-table-in-postgresql</a></li>
<li><a href="http://www.jaredlog.com/?p=137">http://www.jaredlog.com/?p=137</a></li>
<li><a href="http://www.anicehumble.com/2011/08/postgresql-catch-exception-rocks.html">http://www.anicehumble.com/2011/08/postgresql-catch-exception-rocks.html</a></li>
<li><a href="http://stackoverflow.com/questions/4877637/postgresql-exception-handling">http://stackoverflow.com/questions/4877637/postgresql-exception-handling</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭梯笔记]]></title>
    <link href="http://winseliu.com/blog/2015/11/22/gfw-ladder/"/>
    <updated>2015-11-22T20:51:35+08:00</updated>
    <id>http://winseliu.com/blog/2015/11/22/gfw-ladder</id>
    <content type="html"><![CDATA[<h2>准备一个SSH账号</h2>

<ul>
<li><a href="http://www.99ssh.net/">http://www.99ssh.net/</a></li>
</ul>


<h2>SSH -N -D 或者MyEnTunnel</h2>

<ul>
<li><code>ssh -N -D [PORT] [USER@IP]</code></li>
<li><a href="http://www.99ssh.net/help/newsshow.php?cid=19&amp;id=21">http://www.99ssh.net/help/newsshow.php?cid=19&amp;id=21</a></li>
</ul>


<p>使用MyEnTunel的话，设置程序为【启动软件时自动连接】，同时把程序的快捷方式加到【C:\Users\winse\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\】目录下。</p>

<h2>Chrome + SwitchyOmega + gfwlist</h2>

<ul>
<li><a href="https://github.com/FelisCatus/SwitchyOmega/releases">https://github.com/FelisCatus/SwitchyOmega/releases</a> SwitchySharp升级版本</li>
<li><a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a></li>
</ul>


<p>可以做到智能代理功能，gfwlist的才会走代理。加速访问国内网站，同时减少不必要的流量。</p>

<h2>Firefox + FoxyProxy + gfwlist</h2>

<ul>
<li><a href="http://mozilla.com.cn/thread-230260-1-1.html">http://mozilla.com.cn/thread-230260-1-1.html</a></li>
<li><a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a></li>
</ul>


<p>Chrome的版本速度快一点。配置好后，等待一段时间就智能的适配了，firefox的等的时间略长。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx再折腾---统一访问入口]]></title>
    <link href="http://winseliu.com/blog/2015/11/11/nginx-build-unified-access/"/>
    <updated>2015-11-11T11:04:04+08:00</updated>
    <id>http://winseliu.com/blog/2015/11/11/nginx-build-unified-access</id>
    <content type="html"><![CDATA[<p>快照目录文件太多，准备安装一个方式分目录。但是又要能保证原来的访问方式不变化！使用rewrite和try_files成功实现。</p>

<h2>目录结构:</h2>

<pre><code>winse@Lenovo-PC /cygdrive/f/temp
$ ls -R
.:
1.jpg  snapshot  snapshot-1  snapshot-2  snapshot-3  snapshot-4

./snapshot:
0.html

./snapshot-1:
1.html

./snapshot-2:
2.html

./snapshot-3:
3.html

./snapshot-4:
4.html
</code></pre>

<h2>Nginx配置尝试一:</h2>

<pre><code>        location /snapshot {
            root   /home/hadoop/html-snapshot;
            add_header content-type "text/html";

            rewrite ^/snapshot/.*/(.*)$  /snapshot/$1 break ;

            try_files $uri /snapshot-1/$uri /snapshot-3/$uri;
        }

        location ~ /snapshot-\d+ {
            root   /home/hadoop/html-snapshot;

            rewrite ^/(.*)/.*/(.*)$ /$1/$2 break;
        }
</code></pre>

<p>这种方式是不行的，try_files要求除最后一个配置外其他都是文件！</p>

<blockquote><p>It is possible to check directory’s existence by specifying a slash at the end of a name, e.g. “$uri/”. If none of the files were found, an internal redirect to the uri specified in the last parameter is made.  [<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#try_files">http://nginx.org/en/docs/http/ngx_http_core_module.html#try_files</a>]</p></blockquote>

<p>也就是说，中间配置路径，nginx只把他们当做本地的去看待！文件存在就返回结果，否则直接重定向到最后一个路径！！</p>

<h2>Nginx配置尝试二：</h2>

<pre><code>        location /snapshot {
            root   F:/temp;
            add_header content-type "text/html";

            rewrite ^/snapshot/.*/(.*)$  /snapshot/$1 break ;

            try_files $uri @backup;
        }

        location ~ /snapshot-\d+ {
            root   F:/temp;

            try_files $uri @backup;
        }

        location @backup {
            # 这里的顺序不能颠倒，[.*]会匹配所有的！
            rewrite ^/(.*)-3/(.*)$ /$1-4/$2 last;
            rewrite ^/(.*)-2/(.*)$ /$1-3/$2 last;
            rewrite ^/(.*)-1/(.*)$ /$1-2/$2 last;
            rewrite ^/(.*)/(.*)$ /$1-1/$2 last;
        }
</code></pre>

<p>这里使用循环的方式在backup的location中进行处理，一个个的循环查找。使用了正则表达式和一个统一rewrite的location。</p>

<h2>Nginx配置尝试三：</h2>

<p>上面发现，其实try_files都是去查找文件，其实目录结构和访问路径是匹配的，只是请求一开始就带snaphost，倒是每次都需要处理。如果请求过来的就没有带snaphost的话！</p>

<pre><code>        location / {
            root   F:/temp;
            add_header content-type "text/html";

            try_files /snapshot/$uri /snapshot-1/$uri  /snapshot-2/$uri  /snapshot-3/$uri  /snapshot-4/$uri;
        }
</code></pre>

<p>一个location配置就行了！</p>

<h2>Nginx配置完善版：</h2>

<p>转变思路后，最开始就把请求的前置snapshot去掉rewrite去掉就行了！</p>

<pre><code>        location /snapshot {
            root   F:/temp;
            add_header content-type "text/html";

            rewrite ^/snapshot/.*/(.*)$  /$1 break ;

            try_files /snapshot/$uri /snapshot-1/$uri  /snapshot-2/$uri  /snapshot-3/$uri  /snapshot-4/$uri;
        }
</code></pre>

<h2>nginx添加模块</h2>

<p>当我们启用 &ndash;with-debug 选项重新构建好调试版的 Nginx 之后，还需要同时在配置文件中通过标准的 error_log 配置指令为错误日志使用 debug 日志级别（这同时也是最低的日志级别）：</p>

<pre><code>error_log logs/error.log debug;
</code></pre>

<p>添加echo模块：</p>

<p>下载zlib、pcre、echo：</p>

<ul>
<li><a href="http://www.zlib.net/">http://www.zlib.net/</a></li>
<li><a href="http://www.pcre.org/">http://www.pcre.org/</a></li>
<li><a href="https://github.com/openresty/echo-nginx-module">https://github.com/openresty/echo-nginx-module</a></li>
</ul>


<pre><code>tar zxvf zlib-1.2.8.tar.gz 
mv zlib-1.2.8 src/zlib
tar zxvf pcre-8.36.tar.gz 
mv pcre-8.36 src/pcre

./configure --prefix=/home/hadoop/nginx --add-module=/home/hadoop/echo-nginx-module-0.58  --with-pcre=src/pcre --with-zlib=src/zlib --with-debug 
#[hadoop@cu2 nginx-1.7.10]$ ./configure --prefix=/home/hadoop/nginx --with-http_ssl_module --with-pcre=src/pcre/ --with-zlib=src/zlib/ --with-debug
make -j2
make install
</code></pre>

<p>编译成功后，就能在location里面直接echo，页面访问时就能看到echo内容了。</p>

<h2>参考</h2>

<ul>
<li><a href="http://www.cnblogs.com/cgli/archive/2011/05/16/2047920.html">http://www.cnblogs.com/cgli/archive/2011/05/16/2047920.html</a></li>
<li><a href="http://www.cnblogs.com/tohilary/archive/2012/08/24/2653904.html">http://www.cnblogs.com/tohilary/archive/2012/08/24/2653904.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[树莓派raspberrypi2简单使用]]></title>
    <link href="http://winseliu.com/blog/2015/11/04/raspberrypi-start-guide/"/>
    <updated>2015-11-04T11:52:18+08:00</updated>
    <id>http://winseliu.com/blog/2015/11/04/raspberrypi-start-guide</id>
    <content type="html"><![CDATA[<h2>买的东西地址：</h2>

<p>现在想来，其实可以多加100，买一整套的比较方便。内存卡还有外壳都在里面。</p>

<ul>
<li><p><a href="https://item.taobao.com/item.htm?id=520179324500&amp;ali_refid=a3_420434_1006:1103723226:N:%E6%A0%91%E8%8E%93%E6%B4%BE2+b%2B:fc636846d2212679077e26f5f9f14118&amp;ali_trackid=1_fc636846d2212679077e26f5f9f14118&amp;spm=a230r.1.0.0.vhiQsb&amp;qq-pf-to=pcqq.c2c">树莓派2b 树莓派raspberry Pi 2代B型四核开发板 官方正品 树莓派</a></p></li>
<li><p><a href="http://item.jd.com/679773.html">闪迪（SanDisk）至尊高速移动MicroSDHC UHS-I存储卡 TF卡 32GB Class10 读速48Mb/s</a></p></li>
<li><a href="http://item.jd.com/667570.html">迅捷（FAST）FW150US 超小型150M无线USB网卡</a></li>
<li><p><a href="https://detail.tmall.com/item.htm?_u=4jgup6l1c31&amp;id=45729451918">USB转TTL PL2303HX模块 STC单片机下载线刷机线 升级串口模块</a></p></li>
<li><p><a href="http://item.jd.com/629794.html">雷柏（Rapoo）1860 无线光学键鼠套装</a>  质量一般。临时用用，可以考虑不买！</p></li>
</ul>


<h2>安装系统</h2>

<ul>
<li>显示器： 恰好同时有HDMI的接口和显示器。如果没有，那就要考虑直接把系统写到SD卡了！！</li>
<li>无线键盘、鼠标</li>
<li>电源： 一般的手机充电器都可以，用充电宝也是OK的</li>
<li><a href="https://www.raspberrypi.org/help/noobs-setup/">NOOBS</a>

<ul>
<li>NOOBS_v1_4_2.zip</li>
<li>SDFormatterv4.zip</li>
</ul>
</li>
</ul>


<p>插上SD卡，安装系统就行了。</p>

<p><img src="/images/blogs/raspberrypi-os-install.png" alt="" /></p>

<h2>无线网卡</h2>

<p>网站上没说有linux的驱动，但是直接插上后是能检测到设备的！</p>

<pre><code>pi@raspberrypi:~$ lsusb
Bus 001 Device 004: ID 0bda:8179 Realtek Semiconductor Corp. 
Bus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp. SMSC9512/9514 Fast Ethernet Adapter
Bus 001 Device 002: ID 0424:9514 Standard Microsystems Corp. 
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
</code></pre>

<p>ifconfig也能查看到wlan0的无线网卡。接下来修改配置，添加用户密码即可。</p>

<p>配置：</p>

<pre><code>pi@raspberrypi:~$ cat /etc/network/interfaces
# Please note that this file is written to be used with dhcpcd.
# For static IP, consult /etc/dhcpcd.conf and 'man dhcpcd.conf'.

auto lo
iface lo inet loopback

auto eth0
allow-hotplug eth0
#iface eth0 inet manual
iface eth0 inet dhcp

auto wlan0
allow-hotplug wlan0
#iface wlan0 inet manual
iface wlan0 inet dhcp
wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf

auto wlan1
allow-hotplug wlan1
iface wlan1 inet manual
wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf

pi@raspberrypi:~$ sudo cat /etc/wpa_supplicant/wpa_supplicant.conf
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1


network={
ssid="winse.liu"
psk="MIMA"
}

network={
ssid="1108"
psk="MIMA"
}
</code></pre>

<h2>USB转串口使用COM控制raspberry</h2>

<p>在淘宝上面买的，我系统是win10，抱着尝试下的心态也很便宜就买了一个。买来后，安装了win7的驱动，能用。</p>

<p>配置见图：</p>

<p><img src="/images/blogs/raspberrypi-gpio.png" alt="" /></p>

<p><img src="/images/blogs/raspberrypi-usb-com-install.jpg" alt="" /></p>

<p><img src="/images/blogs/raspberrypi-usb-com-config.jpg" alt="" /></p>

<p>最终效果：</p>

<p><img src="/images/blogs/raspberrypi-finished.jpg" alt="" /></p>

<h2>用到的一些命令</h2>

<pre><code>sudo raspi-config
修改配置，默认使用图形界面登录，可以使用`Boot Options`修改为文本console模式

sudo iwlist wlan0 scan | grep ESSID
查看可用的无线

systemctl list-units

sudo apt-get install screen

sudo apt-get -y install vim
sudo apt-get install nginx
systemctl status nginx.service
sudo cp /etc/skel/.* /home/robot/
</code></pre>

<p>手机放一个热点出来，然后手机安装一个ssh的工具(JuiceSSH v2.0.2)就可以控制树莓派了。</p>

<p>网上有用手机当屏幕，然后键盘连树莓派usb，结合来控制树莓派。一开始挺新奇的，后来感觉挺扯淡的！不过学习到了screen的程序，自动登录啥的没弄成，直接输入用户密码登录也行了。在boot选项看到有自动登录，不知道有没有用。现在有无线网卡和com来控制，感觉已经够用了。</p>

<h2>参考</h2>

<ul>
<li><a href="https://www.raspberrypi.org/forums/viewtopic.php?f=91&amp;t=4751&amp;sid=661d1a59e4f85f333b40e6e46db58d32">Getting Started with the Raspberry Pi</a></li>
<li><a href="http://blog.csdn.net/c80486/article/details/8545307">树莓派(raspberry pi)学习15: 使用WIFI网卡连接无线网络</a></li>
<li><a href="http://blog.csdn.net/cugbabybear/article/details/23048741">windows下 用串行连接控制树莓派</a></li>
<li><a href="http://www.alsrobot.cn/article-141.html">【创客学堂】如何在windows系统下用串口通信完爆raspberry pi（树莓派）</a></li>
<li><a href="http://shumeipai.nxez.com/2013/10/10/raspberry-pi-pick-kindle-display.html">视频详解树莓派如何外接Kindle显示器</a></li>
<li><p><a href="http://www.ibm.com/developerworks/cn/linux/l-cn-screen/index.html">linux 技巧：使用 screen 管理你的远程会话</a></p></li>
<li><p><a href="http://www.bkjia.com/Pythonjc/818142.html">RASPBERRY PI wifi配置</a></p></li>
<li><p><a href="http://blog.sina.com.cn/s/blog_3cb6a78c0101a0fe.html">Raspberry Pi 连接无线网卡</a></p></li>
<li><p><a href="http://davidrobot.com/2014/11/raspberry_pi_model_b_plus_startup.html">开机篇 – 树莓派 Raspberry Pi Model B+ 入手折腾记 (1)</a></p></li>
<li><p><a href="http://shumeipai.nxez.com/2013/09/07/no-screen-unknow-ip-login-pi.html#more-184">没有显示器且IP未知的情况下登录树莓派</a></p></li>
<li><p><a href="http://www.pc6.com/az/104761.html">JuiceSSH v2.0.2</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cacti批量添加配置]]></title>
    <link href="http://winseliu.com/blog/2015/10/13/cacti-batch-adding-configurations/"/>
    <updated>2015-10-13T08:35:50+08:00</updated>
    <id>http://winseliu.com/blog/2015/10/13/cacti-batch-adding-configurations</id>
    <content type="html"><![CDATA[<h2>所有机器SNMP配置同步</h2>

<pre><code>for h in `cat /etc/hosts| grep hadoop|awk '{print $2}'` ; do scp -r /etc/snmp/snmpd.conf $h:/etc/snmp/ ; done

for h in `cat /etc/hosts| grep hadoop|awk '{print $2}'` ; do ssh $h "service snmpd start" ; done
</code></pre>

<h2>Cacti批量添加配置</h2>

<pre><code>批量添加device。ip也可以为hostname；template为机器模板；version为SNMP的版本
[root@cu-omc1 cacti]# for h in `cat /etc/hosts | grep hadoop | awk '{print $2}'` ; do php cli/add_device.php --description="$h" --ip="$h" --template=9 --version=2 ; done

了解参数
[root@cu-omc1 cacti]# php cli/add_graphs.php --list-hosts

[root@cu-omc1 cacti]# php cli/add_graphs.php --list-graph-templates --host-template-id=9
Known Graph Templates:(id, name)
29      Host MIB - Processes
35      ucd/net - Users Logged On
36      ucd/net - TCP Current Established
37      ucd/net - Uptime
38      ucd/net - TCP Counters
39      ucd/net - Memory Usage (enhanced)
40      ucd/net - Load Average (enhanced)
41      ucd/net - CPU Usage (enhanced)

[root@cu-omc1 cacti]# php cli/add_graphs.php --list-snmp-queries
Known SNMP Queries:(id, name)
1       SNMP - Interface Statistics
2       ucd/net -  Get Monitored Partitions
3       Karlnet - Wireless Bridge Statistics
4       Netware - Get Available Volumes
6       Unix - Get Mounted Partitions
7       Netware - Get Processor Information
8       SNMP - Get Mounted Partitions
9       SNMP - Get Processor Information

[root@cu-omc1 cacti]# php cli/add_graphs.php --list-snmp-fields --host-id=2 --snmp-query-id=1
Known SNMP Fields for host-id 2: (name)
ifAlias
ifDescr
ifHighSpeed
ifHwAddr
ifIndex
ifIP
ifName
ifOperStatus
ifSpeed
ifType

[root@cu-omc1 cacti]# php cli/add_graphs.php --list-snmp-values --host-id=2 --snmp-query-id=1 --snmp-field=ifIP
Known values for ifIP for host 2: (name)
127.0.0.1
192.168.20.11

[root@cu-omc1 cacti]# php cli/add_graphs.php  --list-graph-templates 
Known Graph Templates:(id, name)
2       Interface - Traffic (bits/sec)
3       ucd/net - Available Disk Space
4       ucd/net - CPU Usage
5       Karlnet - Wireless Levels
6       Karlnet - Wireless Transmissions
7       Unix - Ping Latency
8       Unix - Processes
9       Unix - Load Average
10      Unix - Logged in Users
11      ucd/net - Load Average
12      Linux - Memory Usage
13      ucd/net - Memory Usage
14      Netware - File System Cache
15      Netware - CPU Utilization
16      Netware - File System Activity
17      Netware - Logged In Users
18      Cisco - CPU Usage
19      Netware - Volume Information
20      Netware - Directory Information
21      Unix - Available Disk Space
22      Interface - Errors/Discards
23      Interface - Unicast Packets
24      Interface - Non-Unicast Packets
25      Interface - Traffic (bytes/sec)
26      Host MIB - Available Disk Space
27      Host MIB - CPU Utilization
28      Host MIB - Logged in Users
29      Host MIB - Processes
30      Netware - Open Files
31      Interface - Traffic (bits/sec, 95th Percentile)
32      Interface - Traffic (bits/sec, Total Bandwidth)
33      Interface - Traffic (bytes/sec, Total Bandwidth)
34      SNMP - Generic OID Template
35      ucd/net - Users Logged On
36      ucd/net - TCP Current Established
37      ucd/net - Uptime
38      ucd/net - TCP Counters
39      ucd/net - Memory Usage (enhanced)
40      ucd/net - Load Average (enhanced)
41      ucd/net - CPU Usage (enhanced)

[root@cu-omc1 cacti]# php cli/add_graphs.php  --list-query-types  --snmp-query-id=1
Known SNMP Query Types: (id, name)
2       In/Out Errors/Discarded Packets
3       In/Out Non-Unicast Packets
4       In/Out Unicast Packets
9       In/Out Bytes (64-bit Counters)
13      In/Out Bits
14      In/Out Bits (64-bit Counters)
16      In/Out Bytes
20      In/Out Bits with 95th Percentile
21      In/Out Bits with Total Bandwidth
22      In/Out Bytes with Total Bandwidth

先测试单机添加，对应到Device页面点击`Create Graphs for this Host`添加图像的操作
[root@cu-omc1 cacti]# php cli/add_graphs.php --host-id=2 --graph-type=cg --graph-template-id=40
Graph Added - graph-id: (5) - data-source-ids: (8, 9, 10)
[root@cu-omc1 cacti]# php cli/add_graphs.php --host-id=2 --graph-type=cg --graph-template-id=41
Graph Added - graph-id: (6) - data-source-ids: (11, 12, 13, 14)
[root@cu-omc1 cacti]# php cli/add_graphs.php --host-id=2 --graph-type=cg --graph-template-id=39
Graph Added - graph-id: (7) - data-source-ids: (15, 16, 17, 18, 19)
[root@cu-omc1 cacti]# php cli/add_graphs.php --host-id=2 --graph-type=cg --graph-template-id=38

[root@cu-omc1 cacti]# php cli/add_graphs.php --host-id="2" --graph-type=ds  --graph-template-id=2 --snmp-query-id=1 --snmp-query-type-id=16 --snmp-field=ifIP --snmp-value="192.168.20.11"
Graph Added - graph-id: (9) - data-source-ids: (24, 24)

批量操作
添加Graph Templates
[root@cu-omc1 cacti]# php cli/add_graphs.php --list-hosts | awk '{print $1}' | while read line ; do 
&gt;  php cli/add_graphs.php --host-id=$line --graph-type=cg --graph-template-id=41
&gt;  php cli/add_graphs.php --host-id=$line --graph-type=cg --graph-template-id=40
&gt;  php cli/add_graphs.php --host-id=$line --graph-type=cg --graph-template-id=39
&gt;  php cli/add_graphs.php --host-id=$line --graph-type=cg --graph-template-id=38
&gt; done

添加Data Query。比较复杂点，需要查询匹配
php cli/add_graphs.php --list-hosts | awk '{print $1}' | while read line ; do 
  php cli/add_graphs.php --host-id=$line --graph-type=ds  --graph-template-id=2 --snmp-query-id=1 --snmp-query-type-id=16 --snmp-field=ifIP --snmp-value=$(grep "`php cli/add_graphs.php --list-hosts | grep "^$line\s" | awk '{print $2}'`\s" /etc/hosts | awk '{print $1}')
done
</code></pre>

<h2>其他命令</h2>

<pre><code>
dmesg |grep eth0

iftop –i eth0 –B

sar -n DEV 1 100 

ethtool eth0

[omc@cu-omc1 ~]$ sort -k 2 /tmp/cacti.list &gt; /tmp/cacti.sort.list
[omc@cu-omc1 ~]$ grep hadoop /etc/hosts | sort -k 2 | join -j 2 - /tmp/cacti.sort.list 
</code></pre>

<h2>参考</h2>

<ul>
<li><a href="http://www.educity.cn/net/1619986.html">http://www.educity.cn/net/1619986.html</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
