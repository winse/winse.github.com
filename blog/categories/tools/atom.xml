<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tools | Winse Blog]]></title>
  <link href="http://winseliu.com/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://winseliu.com/"/>
  <updated>2018-06-10T16:49:37+08:00</updated>
  <id>http://winseliu.com/</id>
  <author>
    <name><![CDATA[Winse Liu]]></name>
    <email><![CDATA[winseliu@foxmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[科学上网（续）]]></title>
    <link href="http://winseliu.com/blog/2018/06/09/reasonable-way-to-access-the-internet/"/>
    <updated>2018-06-09T14:03:11+08:00</updated>
    <id>http://winseliu.com/blog/2018/06/09/reasonable-way-to-access-the-internet</id>
    <content type="html"><![CDATA[<p>到新的环境就会遇到新的问题，需要不断的学习更新来适应新的环境。上网也是一样，工作地点和家里存在了一道鸿沟。过去断断续续的有一些解决的方式，但是总是有点间接。</p>

<ul>
<li><a href="http://www.winseliu.com/blog/2017/11/04/teamviewer-vpn-on-windows/">使用TeamviewerVPN访问公司内网</a></li>
<li><a href="http://www.winseliu.com/blog/2017/02/04/privoxy-http-proxy-for-shadowsocks/">使用Privoxy把shadowsocks转换为Http代理</a></li>
<li><a href="http://www.winseliu.com/blog/2016/03/11/install-and-config-openvpn/">安装配置OpenVPN</a></li>
<li><a href="http://www.winseliu.com/blog/2015/11/22/gfw-ladder/">搭梯笔记</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html">SSH原理与运用（二）：远程操作与端口转发</a></li>
<li><a href="http://www.winseliu.com/blog/2015/09/06/squid-http-proxy-server-install/">安装http代理服务器squid</a></li>
<li><a href="http://www.winseliu.com/blog/2017/10/30/windows-run-ubuntu/">Windows Run Ubuntu</a></li>
</ul>


<p>上周和同事讨论到在家访问公司服务器的方式时，可以通过花生壳的DDNS来实现域名动态绑定，相当于了把家里的宽带看做一个公网IP，花生壳实时的把域名解析更新为最新的IP。</p>

<p>有了公网IP后，就可以在公司访问自己的域名（绑定到了家里的IP），然后 反向代理 就可以在家访问公司环境了。</p>

<p>但是查了下对于花生壳的口碑都不咋的，其实只要能自动的更新绑定域名和宽带的IP，和花生壳的效果是一样。然后在 github 查到了 <a href="https://github.com/yyqian/aliyun-ddns">aliyun-ddns</a> 定时检测和更新阿里云上的域名解析。</p>

<h2>配置公网域名</h2>

<p>我在此基础上调整了一个<a href="https://github.com/winse/aliyun-ddns">本地命令行版本</a> ，直接运行一个脚本就可以更新域名解析了：</p>

<pre><code>./client.sh myhome.winseliu.com
</code></pre>

<p><img src="/images/blogs/aliyun-dns.png" alt="" /></p>

<p>注：默认电信宽带给你分配的内网IP的，你可以打10000号要他们给你分配改成外网IP。</p>

<h2>本地环境配置</h2>

<ul>
<li>本机SSHD配置</li>
</ul>


<pre><code>winse@DESKTOP-ADH7K1Q:~$ sudo dpkg-reconfigure openssh-server
winse@DESKTOP-ADH7K1Q:~$ sudo service ssh start
</code></pre>

<p>注：启动后，wsl shell窗口不能关！！窗口关闭后，wsl的所有服务都会停掉！</p>

<ul>
<li>无秘钥登录</li>
</ul>


<p>为了安全，最好通过秘钥登录，把使用SSH的密码登录关掉。</p>

<pre><code>winse@DESKTOP-ADH7K1Q:~/.ssh$ cat /business/server/id_rsa.pub &gt;&gt;authorized_keys
</code></pre>

<p></p>

<ul>
<li>路由器配置</li>
</ul>


<p><img src="/images/blogs/ddns-route-portforwarding.png" alt="" /></p>

<ul>
<li>本机防火墙</li>
</ul>


<p>参考 <a href="https://blog.csdn.net/zzq900503/article/details/11936379">开放windows服务器端口&mdash;&ndash;以打开端口8080为例</a></p>

<p><img src="/images/blogs/ddns-local-firewall.png" alt="" /></p>

<h2>配置反向代理</h2>

<p>服务端访问自己域名，使用 -R 参数在本地创建一个10022的端口，数据转发到服务器的22端口。当你连本地的 127.0.0.1:10022 就相当于连接服务器的 22 端口。</p>

<pre><code>/usr/bin/autossh -M 0 -o ServerAliveInterval=30 -o ServerAliveCountMax=3 -o StrictHostKeyChecking=no -NR 10022:localhost:22 autossh@myhome.winseliu.com -i ~/.ssh/id_rsa
</code></pre>

<p></p>

<p>当连接太慢、SSH提示信息一直不出来，你完全有理由怀疑本地端口被占用了！！查看本地端口状态：</p>

<pre><code>C:\Users\winse&gt;netstat /?

C:\Users\winse&gt;netstat -ano |findstr 10022
</code></pre>

<p>如果端口被占用了，需要去任务管理器中关掉对应的PID的程序。</p>

<p></p>

<h2>小结</h2>

<p>速度比 teamviewer vpn 的方式快狠多狠多！！这个10000号值得打，这个ddns值得一试。</p>

<h2>后记</h2>

<h3>说说 VS Code调试</h3>

<p>使用Ubuntu中安装的Node：</p>

<ul>
<li><a href="https://blogs.msdn.microsoft.com/commandline/2017/10/27/running-node-js-on-wsl-from-visual-studio-code/">Running Node.js on WSL from Visual Studio Code</a></li>
<li><a href="https://stackoverflow.com/a/47495710/5697508">Using Visual Studio Code on Windows with Ubuntu-Bash and NodeJS</a></li>
</ul>


<pre><code>"useWSL": true
</code></pre>

<p><a href="https://code.visualstudio.com/docs/nodejs/nodejs-debugging">https://code.visualstudio.com/docs/nodejs/nodejs-debugging</a></p>

<p>注意：这种外部启动的方式，会通过bash.sh运行node，所以就算停止调试后，Node进程还是一直存在的！！！需要通过任务管理器关闭。</p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java中使用代理-基于Shandowsocks]]></title>
    <link href="http://winseliu.com/blog/2018/01/26/proxy-on-java-via-shandowsocks/"/>
    <updated>2018-01-26T20:50:05+08:00</updated>
    <id>http://winseliu.com/blog/2018/01/26/proxy-on-java-via-shandowsocks</id>
    <content type="html"><![CDATA[<p>在开发过程中，时不时需要要代理一下，来访问我们需要的资源，比方说：DEBUG生产<strong>集群</strong>的应用、还有在Java中翻墙等等。解决了全局的代理能完成我们访问到资源的时刻，又有新的要求，比方说：只有特定的资源走代理等等。</p>

<p>下面把要点简单罗列下，以供参考：</p>

<ul>
<li><a href="https://stackoverflow.com/questions/1432961/how-do-i-make-httpurlconnection-use-a-proxy">https://stackoverflow.com/questions/1432961/how-do-i-make-httpurlconnection-use-a-proxy</a></li>
<li><a href="http://www.aneasystone.com/archives/2015/12/java-and-http-using-proxy.html">http://www.aneasystone.com/archives/2015/12/java-and-http-using-proxy.html</a></li>
<li><a href="https://stackoverflow.com/questions/120797/how-do-i-set-the-proxy-to-be-used-by-the-jvm">https://stackoverflow.com/questions/120797/how-do-i-set-the-proxy-to-be-used-by-the-jvm</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html">https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html</a></li>
</ul>


<p>JDK官网的都全部包括了，其他的辅助，看看人家的具体需求。</p>

<h2>Java全应用代理（全局）</h2>

<ul>
<li>走HTTP</li>
</ul>


<p>Shandowsocks转HTTP，前面Docker翻墙安装Kubernate有弄过，参考：<a href="/blog/2017/02/04/privoxy-http-proxy-for-shadowsocks/">Privoxy</a> 。</p>

<p>也可以直接用Shandowsocks提供的 <code>启用系统代理 -&gt; 系统代理模式 -&gt; 全局模式</code> 来转换，启用HTTP代理功能。（开全局模式，本地会把socks代理转成为一个http的代理）</p>

<pre><code>-Dhttp.proxyHost=127.0.0.1
-Dhttp.proxyPort=7070
-Dhttps.proxyHost=127.0.0.1
-Dhttps.proxyPort=7070
-Dhttp.nonProxyHosts="localhost|127.0.0.1|192.168.*"
</code></pre>

<blockquote><ul>
<li>http.proxyHost: the host name of the proxy server</li>
<li>http.proxyPort: the port number, the default value being 80.</li>
<li>http.nonProxyHosts:a list of hosts that should be reached directly, bypassing the proxy. This is a list of patterns separated by &lsquo;|&rsquo;. The patterns may start or end with a &lsquo;*&rsquo; for wildcards. Any host matching one of these patterns will be reached through a direct connection instead of through a proxy.</li>
</ul>
</blockquote>

<p></p>

<ul>
<li>走Socks</li>
</ul>


<pre><code>-DsocksProxyHost=127.0.0.1 -DsocksProxyPort=7070
</code></pre>

<ul>
<li>使用系统代理</li>
</ul>


<pre><code>-Djava.net.useSystemProxies=true
</code></pre>

<h2>部分（自动切换）</h2>

<ul>
<li>应用内通过 setProperty <strong>临时</strong> 设置</li>
</ul>


<pre><code>System.setProperty("http.proxyHost", proxyHost);
System.setProperty("http.proxyPort", proxyPort);
System.setProperty("https.proxyHost", proxyHost);
System.setProperty("https.proxyPort", proxyPort);
</code></pre>

<p>用完之后，取消设置：</p>

<pre><code>System.clearProperty("http.proxyHost");
...
</code></pre>

<ul>
<li>请求时指定代理：</li>
</ul>


<pre><code>SocketAddress addr = new InetSocketAddress("webcache.example.com", 8080);
Proxy proxy = new Proxy(Proxy.Type.HTTP, addr);

URL url = new URL("http://java.example.org/");
URLConnection conn = url.openConnection(proxy);
</code></pre>

<ul>
<li>（选择性的）配置哪些访问走代理：ProxySelector</li>
</ul>


<p>任何请求访问网络之前，会被ProxySelector拦截。根据规则获取一个符合的Proxy（或者Proxy.NO_PROXY），然后通过这个代理去访问网络。</p>

<blockquote><p>As you can see, with Java SE 5.0, the developer gains quite a bit of control and flexibility when it comes to proxies. Still, there are situations where one would like to decide which proxy to use dynamically, for instance to do some load balancing between proxies, or depending on the destination, in which case the API described so far would be quite cumbersome. That&rsquo;s where the ProxySelector comes into play.</p>

<p>The best thing about the ProxySelector is that it is plugable! Which means that if you have needs that are not covered by the default one, you can write a replacement for it and plug it in!</p></blockquote>

<p>基本上看JDK官网的内容就好了，也参考下 <a href="http://archive.oreilly.com/pub/a/onjava/excerpt/jvntwkprg_3e/index.html?page=3#javanp3-CHP-7-SECT-4">URLs and URIs, Proxies and Passwords</a></p>

<p>注册自定义的Selector：</p>

<pre><code>public static void main(String[] args) {
    MyProxySelector ps = new MyProxySelector(ProxySelector.getDefault());
    ProxySelector.setDefault(ps);
    // rest of the application
}
</code></pre>

<p>Selector实现：</p>

<pre><code>public class MyProxySelector extends ProxySelector {
    // Keep a reference on the previous default
    ProxySelector defsel = null;

    /*
     * Inner class representing a Proxy and a few extra data
     */
    class InnerProxy {
        Proxy proxy;
        SocketAddress addr;
        // How many times did we fail to reach this proxy?
        int failedCount = 0;

        InnerProxy(InetSocketAddress a) {
            this(a, Proxy.Type.HTTP);
        }

        InnerProxy(InetSocketAddress a, Proxy.Type type) {
            addr = a;
            proxy = new Proxy(type, a);
        }

        SocketAddress address() {
            return addr;
        }

        Proxy toProxy() {
            return proxy;
        }

        int failed() {
            return ++failedCount;
        }
    }

    /*
     * A list of proxies, indexed by their address.
     */
    HashMap&lt;SocketAddress, InnerProxy&gt; proxies = new HashMap&lt;SocketAddress, InnerProxy&gt;();

    MyProxySelector(ProxySelector def) {
        // Save the previous default
        defsel = def;

        // Populate the HashMap (List of proxies)
        InnerProxy i = new InnerProxy(new InetSocketAddress("webcache1.example.com", 8080));
        proxies.put(i.address(), i);
        i = new InnerProxy(new InetSocketAddress("webcache2.example.com", 8080));
        proxies.put(i.address(), i);
        i = new InnerProxy(new InetSocketAddress("webcache3.example.com", 8080));
        proxies.put(i.address(), i);
    }

    /*
     * This is the method that the handlers will call.
     * Returns a List of proxy.
     */
    public java.util.List&lt;Proxy&gt; select(URI uri) {
        // Let's stick to the specs. 
        if (uri == null) {
            throw new IllegalArgumentException("URI can't be null.");
        }

        /* 这里可以指定你自己的规则/配置
         * If it's a http (or https) URL, then we use our own list.
         */
        String protocol = uri.getScheme();
        if ("http".equalsIgnoreCase(protocol) ||
                "https".equalsIgnoreCase(protocol)) {
            ArrayList&lt;Proxy&gt; l = new ArrayList&lt;Proxy&gt;();
            for (InnerProxy p : proxies.values()) {
                l.add(p.toProxy());
            }
            return l;
        }

        /*
         * Not HTTP or HTTPS (could be SOCKS or FTP)
         * defer to the default selector.
         */
        if (defsel != null) {
            return defsel.select(uri);
        } else {
            ArrayList&lt;Proxy&gt; l = new ArrayList&lt;Proxy&gt;();
            l.add(Proxy.NO_PROXY);
            return l;
        }
    }

    /*
     * Method called by the handlers when it failed to connect
     * to one of the proxies returned by select().
     */
    public void connectFailed(URI uri, SocketAddress sa, IOException ioe) {
        // Let's stick to the specs again.
        if (uri == null || sa == null || ioe == null) {
            throw new IllegalArgumentException("Arguments can't be null.");
        }

        /*
         * Let's lookup for the proxy 
         */
        InnerProxy p = proxies.get(sa); 
        if (p != null) {
            /*
             * It's one of ours, if it failed more than 3 times
             * let's remove it from the list.
             */
            if (p.failed() &gt;= 3)
                    proxies.remove(sa);
        } else {
            /*
             * Not one of ours, let's delegate to the default.
             */
            if (defsel != null)
              defsel.connectFailed(uri, sa, ioe);
        }
    }
}
</code></pre>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sed Debug: Sedsed]]></title>
    <link href="http://winseliu.com/blog/2017/11/20/sed-debug-sedsed/"/>
    <updated>2017-11-20T23:54:11+08:00</updated>
    <id>http://winseliu.com/blog/2017/11/20/sed-debug-sedsed</id>
    <content type="html"><![CDATA[<p>上一篇把html转成rst，但是页面之间的链接都断了。需要在标题前加上一个TAG，最终效果如下：</p>

<pre><code>
.. _Creating Objects in New Mappings:

Creating Objects in New Mappings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

+ :ref:`Creating Objects in New Mappings`
</code></pre>

<p>想使用sed来实现这个功能，需要利用一些sed的高级功能，但默认sed是不能调试。这里使用sedsed来查看每一个操作的模式空间和缓冲空间，有点类似print调试。对于理解 sed 很有帮助，特别是对理解缓冲区和模式区数据的处理。</p>

<h4>安装 sedsed</h4>

<ul>
<li><a href="http://aurelio.net/projects/sedsed/#usage">官网文档</a></li>
</ul>


<pre><code>cd /opt/
git clone https://github.com/aureliojargas/sedsed
</code></pre>

<p>看看实际的调试输出：</p>

<pre><code>[root@ansible sedsed]# echo -e "one\ntwo\nthree\nfour" | ./sedsed.py -d -f test/scripts/sort.gnu.sed 
PATT:one$
HOLD:$
COMM:H
PATT:one$
HOLD:\none$
COMM:$ !d
PATT:two$
HOLD:\none$
COMM:H
PATT:two$
HOLD:\none\ntwo$
COMM:$ !d
PATT:three$
HOLD:\none\ntwo$
COMM:H
PATT:three$
HOLD:\none\ntwo\nthree$
COMM:$ !d
PATT:four$
HOLD:\none\ntwo\nthree$
COMM:H
PATT:four$
HOLD:\none\ntwo\nthree\nfour$
COMM:$ !d
PATT:four$
HOLD:\none\ntwo\nthree\nfour$
COMM:g
PATT:\none\ntwo\nthree\nfour$
HOLD:\none\ntwo\nthree\nfour$
COMM:s/.//
PATT:one\ntwo\nthree\nfour$
HOLD:\none\ntwo\nthree\nfour$
COMM:s/\n/&amp;L&amp;l/g
PATT:one\nL\nltwo\nL\nlthree\nL\nlfour$
HOLD:\none\ntwo\nthree\nfour$
COMM:s/^/\\Na/
PATT:\naone\nL\nltwo\nL\nlthree\nL\nlfour$
HOLD:\none\ntwo\nthree\nfour$
COMM:s/\nL/\\NA/
PATT:\naone\nA\nltwo\nL\nlthree\nL\nlfour$
HOLD:\none\ntwo\nthree\nfour$
COMM:s/$/\\NL/
PATT:\naone\nA\nltwo\nL\nlthree\nL\nlfour\nL$
HOLD:\none\ntwo\nthree\nfour$
COMM:b start
COMM:/\nA$/ b exit
COMM:s/\nb/\\Nl/
PATT:\naone\nA\nltwo\nL\nlthree\nL\nlfour\nL$
HOLD:\none\ntwo\nthree\nfour$
COMM:s/\nB/\\NL/
PATT:\naone\nA\nltwo\nL\nlthree\nL\nlfour\nL$
HOLD:\none\ntwo\nthree\nfour$
COMM:s/\(\na.*\nA\)\nl\([^\n]*\)\nL/\1\\Nb\2\\NB/
PATT:\naone\nA\nbtwo\nB\nlthree\nL\nlfour\nL$
HOLD:\none\ntwo\nthree\nfour$
COMM::sort
COMM:h
......

[root@ansible sedsed]# (date +'%w %d' ; date +'%-m %Y') | ./sedsed.py -d -f test/scripts/cal.sed
......
</code></pre>

<h4>网上的一案例</h4>

<p>看到一个<a href="http://bbs.chinaunix.net/forum.php?mod=viewthread&amp;tid=3775201&amp;page=1#pid22315115">论坛帖子</a>上用sed实现 <strong>删除匹配的前两行和后三行</strong> ，看的不是很明白，帖子仅注意介绍流程，至于数据到底是怎么样的没有讲。如果知道 sedsed 这工具的话，运行一遍就全部清楚了：</p>

<p>sedsed.py 处理 <code>+</code> 加号有点问题，所以这里就处理匹配的前两行，看看具体的数据是怎么流转的：</p>

<pre><code>[root@ansible sedsed]# echo -e "1\n2\n3\n4\n5\n6\n7\n8\n9\n10" | ./sedsed.py -d '/5/d;:go;1,2!{P;N;D};N;bgo' 
PATT:1$
HOLD:$
COMM:/5/ d
PATT:1$
HOLD:$
COMM::go
COMM:1,2 !{
COMM:N
PATT:1\n2$
HOLD:$
COMM:b go
COMM:1,2 !{
COMM:N
PATT:1\n2\n3$
HOLD:$
COMM:b go
COMM:1,2 !{
COMM:P
1
PATT:1\n2\n3$
HOLD:$
COMM:N
PATT:1\n2\n3\n4$
HOLD:$
COMM:D
PATT:2\n3\n4$
HOLD:$
COMM:/5/ d
PATT:2\n3\n4$
HOLD:$
COMM::go
COMM:1,2 !{
COMM:P
2
PATT:2\n3\n4$
HOLD:$
COMM:N
PATT:2\n3\n4\n5$
HOLD:$
COMM:D
PATT:3\n4\n5$
HOLD:$
COMM:/5/ d
PATT:6$
HOLD:$
COMM:/5/ d
PATT:6$
HOLD:$
COMM::go
COMM:1,2 !{
COMM:P
6
PATT:6$
HOLD:$
COMM:N
PATT:6\n7$
HOLD:$
COMM:D
PATT:7$
HOLD:$
COMM:/5/ d
PATT:7$
HOLD:$
COMM::go
COMM:1,2 !{
COMM:P
7
PATT:7$
HOLD:$
COMM:N
PATT:7\n8$
HOLD:$
COMM:D
PATT:8$
HOLD:$
COMM:/5/ d
PATT:8$
HOLD:$
COMM::go
COMM:1,2 !{
COMM:P
8
PATT:8$
HOLD:$
COMM:N
PATT:8\n9$
HOLD:$
COMM:D
PATT:9$
HOLD:$
COMM:/5/ d
PATT:9$
HOLD:$
COMM::go
COMM:1,2 !{
COMM:P
9
PATT:9$
HOLD:$
COMM:N
PATT:9\n10$
HOLD:$
COMM:D
PATT:10$
HOLD:$
COMM:/5/ d
PATT:10$
HOLD:$
COMM::go
COMM:1,2 !{
COMM:P
10
PATT:10$
HOLD:$
COMM:N
10
</code></pre>

<p>可以看到 <strong>PATT</strong> 模式空间把前面两行连到一起了，匹配到 <strong>5</strong> 的时刻其实模式空间的内容为 <strong>3\n4\n5</strong>，然后执行 <strong>d</strong> 这就相当于删除前两行了。</p>

<p>该命令会多输出最后一行：由于到最后一行，N 又读取了一次下一行（读到结束符），直接就返回没有执行 D 了。sed 文档中的描述如下：</p>

<pre><code>  `D'
      If pattern space contains no newline, start a normal new cycle as
      if the `d' command was issued.  Otherwise, delete text in the
      pattern space up to the first newline, and restart cycle with the
      resultant pattern space, without reading a new line of input.

  `N'
      Add a newline to the pattern space, then append the next line of
      input to the pattern space.  If there is no more input then `sed'
      exits without processing any more commands.
</code></pre>

<p>修复就是：读到最后一行的时刻就不读下一行了：</p>

<pre><code>[root@ansible sedsed]# echo -e "1\n2\n3\n4\n5\n6\n7\n8\n9\n10" | sed '/5/,+3d;:go;1,2!{P;$!N;D};N;bgo' 
</code></pre>

<p></p>

<h4>加标签</h4>

<p>Sphinx可以通过 <strong>ref</strong> 来访问整个文档中定义的标签。所以只需要在每个标题前加上TAG，然后把链接引用修改成 <strong>ref</strong> 的方式即可。</p>

<pre><code># 文档加TAG：
sed -i ' h;N; /\n=\+$/{ x;s/.*/.. _&amp;:\n/;p; x };  P;D ' $(find . -name '*.rst')
sed -i ' h;N; /\n-\+$/{ x;s/.*/.. _&amp;:\n/;p; x };  P;D ' $(find . -name '*.rst')


# 修改链接引用：
sed 's/\(`[[:alnum:] ]*`\)_/:ref:\1/ ' $(find . -name '*.rst')
</code></pre>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitlab on Docker]]></title>
    <link href="http://winseliu.com/blog/2017/11/20/gitlab-on-docker/"/>
    <updated>2017-11-20T21:38:21+08:00</updated>
    <id>http://winseliu.com/blog/2017/11/20/gitlab-on-docker</id>
    <content type="html"><![CDATA[<ul>
<li><a href="https://github.com/sameersbn/docker-gitlab">https://github.com/sameersbn/docker-gitlab</a></li>
</ul>


<pre><code>./docker-download-mirror.sh sameersbn/redis sameersbn/gitlab:10.1.4 sameersbn/postgresql:9.6-2

# 最好，每个 docker-compose.yml 放不同的目录名称下！！
mkdir gitlab
cd !*

wget https://raw.githubusercontent.com/sameersbn/docker-gitlab/master/docker-compose.yml
sed -i '/GITLAB_HOST/s/.*/    - GITLAB_HOST=192.168.193.8/' docker-compose.yml 

docker-compose up -d

firewall-cmd --zone=public --add-port=80/tcp --permanent
firewall-cmd --reload
</code></pre>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Sphinx生成/管理文档]]></title>
    <link href="http://winseliu.com/blog/2017/11/16/sphinx-generate-docs/"/>
    <updated>2017-11-16T23:23:23+08:00</updated>
    <id>http://winseliu.com/blog/2017/11/16/sphinx-generate-docs</id>
    <content type="html"><![CDATA[<p>很多开源的软件都使用Sphinx来进行文档的管理，其中Ansible就是其中一个。</p>

<p>Sphinx使用 类MarkDown的reStructuredText格式 来进行内容的编写，然后使用 sphinx-build 命令来生成html文件。</p>

<h2>安装、入门</h2>

<ul>
<li><a href="http://www.sphinx-doc.org/en/stable/tutorial.html">http://www.sphinx-doc.org/en/stable/tutorial.html</a></li>
<li><a href="http://www.sphinx-doc.org/en/stable/rest.html">reStructuredText</a></li>
<li><a href="http://zh-sphinx-doc.readthedocs.io/en/latest/rest.html">reStructuredText 简介</a></li>
<li><a href="http://www.sphinx-doc.org/en/stable/markup/index.html">Sphinx Markup Constructs</a></li>
<li><a href="http://rest-sphinx-memo.readthedocs.io/en/latest/ReST.html">ReST – reStructuredText</a> GOOD!</li>
<li><a href="http://www.bijishequ.com/detail/261642">reStructuredText(rst)快速入门语法说明</a></li>
<li><a href="http://sphinx-doc.readthedocs.io/zh_CN/latest/rest.html#id9">章节</a></li>
</ul>


<pre><code>sudo apt-get install python-pip
sudo pip install Sphinx

sphinx-quickstart
</code></pre>

<p>引用：</p>

<pre><code>
*重点(emphasis)通常显示为斜体*
`解释文字(interpreted text)通常显示为斜体`

**重点强调(strong emphasis)通常显示为粗体**

``行内文本(inline literal)通常显示为等宽文本，空格可以保留，但是换行不可以。``

章节头部由下线(也可有上线)和包含标点的标题 组合创建, 其中下线要至少等于标准文本的长度。
可以表示标题的符号有 =、-、`、:、'、"、~、^、_ 、* 、+、 #、&lt;、&gt; 。
对于相同的符号，有上标是一级标题，没有上标是二级标题。
标题最多分六级，可以自由组合使用。

# with overline, for parts
* with overline, for chapters
=, for sections
-, for subsections
^, for subsubsections
", for paragraphs
</code></pre>

<h2>主题</h2>

<ul>
<li><a href="http://www.sphinx-doc.org/en/stable/theming.html">http://www.sphinx-doc.org/en/stable/theming.html</a></li>
<li><a href="https://pypi.python.org/pypi/sphinx_rtd_theme">https://pypi.python.org/pypi/sphinx_rtd_theme</a></li>
</ul>


<pre><code>sudo pip install sphinx_rtd_theme

sed -i "/html_theme/s/.*/html_theme = 'sphinx_rtd_theme'/" conf.py
</code></pre>

<h2>管理历史文档</h2>

<ul>
<li><a href="http://zh-sphinx-doc.readthedocs.io/en/latest/intro.html#id2">不同文档系统的转换</a></li>
<li><a href="https://pypi.python.org/pypi/html2rest">https://pypi.python.org/pypi/html2rest</a></li>
</ul>


<p>先使用 html2rest 把html转成reStructuredText格式。</p>

<pre><code>sudo pip install html2rest

#JSON：原始文档层次结构
  [
  { "id": "a16", "pId": "a", "name": "Administration", "file": "output/AdministrativeDocumentation.html" }, 
  { "id": "a1617", "pId": "a16", "name": "Basic Configuration Guide" },
  { "id": "a161718", "pId": "a1617", "name": "Configuring Deployments", "file": "output/ConfiguringDeployments.html" }
  ]


name=administration
cat $name.json | jq '.[].file' | sed 's/"//g' | while read line ; do cp "$line" $name.origin/  ; done
cd $name.origin
ls | while read f ; do html2rest $f &gt;"../$name.rst/${f%%.*}.rst" ; done
</code></pre>

<p>这仅仅是把html转换成了reStructuredText格式，当然我们还可以做多一些的操作：把文件结构也创建出来。</p>

<p>docs-gen.sh脚本内容如下：</p>

<pre><code>#!/bin/bash

JSON_FILE=~/administration.json

function children(){
local id=$1

local name="$( cat "$JSON_FILE" | jq '.[] | select(.id=="'$id'")' | jq '.name' | sed 's/"//g' )"
echo "id: $id, name: $name"

local filename="$( echo $name | sed 's/[^[:alnum:]]//g' )"

if [ ! -f "$filename.rst" ] ; then
cat &gt; "$filename.rst" &lt;&lt;EOF
$name
======================================

EOF
fi

local nodes="$( cat "$JSON_FILE" | jq '.[] | select(.pId=="'$id'")' )"

if [ "x$nodes" == "x" ] ; then 
  return 1
fi

# if have children, create folder and toc
local foldername="$( echo $name | sed 's/[^[:alnum:]]//g' )"
local names="$( echo "$nodes" | jq ".name" | sed 's/[^[:alnum:]]//g' )"
local ids="$( echo "$nodes" | jq ".id" | sed 's/[^[:alnum:]]//g' )"

if ! grep '.. toctree::' "$foldername.rst" ; then
cat &gt;&gt;"$foldername.rst" &lt;&lt;EOF

Contents:

.. toctree::
   :maxdepth: 3
   :titlesonly:
   :hidden:
   :glob:

$( echo "$names" | sed "s#^#   $foldername/#" ) 

EOF
fi

mkdir -p "$foldername"
pushd "$foldername"

while read cid
do 
  children $cid
done &lt; &lt;(echo "$ids")

popd

}


children a
</code></pre>

<p>然后执行该命令，把目录、目录索引、临时文件创建好：</p>

<pre><code>cd ~/administration
./docs-gen.sh
</code></pre>

<p>然后就是把最开始转换的rst文件拷贝过来：</p>

<pre><code>cd ../administration.rst

ls | while read f ; do 
filename="$(echo $f | sed 's/.rst$//' | sed 's/[^[:alnum:]]//g' ).rst" ; 
find ../administration/ -name "$filename" -exec /bin/cp -f $f {} \;  ;  
done

#再执行一遍docs-gen.sh，把目录的索引再（确认）添加一次文件末尾
cd ../administration
./docs-gen.sh
</code></pre>

<p>完后生成 <code>make html</code> ，直接打开 <strong>_build/html/index.html</strong> 查看下内容。</p>

<p>最后就是根据具体情况，做一些细微的调整了。</p>

<ul>
<li>处理图片，修改 /usr/local/lib/python2.7/dist-packages/html2rest.py</li>
<li>处理文档内互相引用的链接</li>
<li>给标题添加TAG</li>
</ul>


<h2>生成PDF</h2>

<p>除了生成html外，还可以直接编译成PDF，方便携带和查看。（官网是推荐使用latexpdf，但这得安装latex&hellip;）</p>

<ul>
<li><a href="https://www.quora.com/How-to-create-a-PDF-out-of-Sphinx-documentation-tool">https://www.quora.com/How-to-create-a-PDF-out-of-Sphinx-documentation-tool</a></li>
<li>Config value &lsquo;math_number_all&rsquo; already present <a href="https://github.com/sphinx-doc/sphinx/issues/2499">https://github.com/sphinx-doc/sphinx/issues/2499</a></li>
</ul>


<pre><code>[root@ansible workspace]# pip install rst2pdf

[root@ansible workspace]# vi conf.py 
...
#extensions = ['sphinx.ext.doctest', 'sphinx.ext.todo', 'sphinx.ext.pngmath']
extensions = ['sphinx.ext.doctest', 'sphinx.ext.todo', 'rst2pdf.pdfbuilder']

pdf_documents = [('index', u'Workspace', u'Workspace Doc', u'winse'),]

[root@ansible workspace]# sphinx-build -b pdf . _build/pdf
</code></pre>

<p>或者用 singlehtml 临时代替下也行。</p>

<pre><code>make singlehtml
</code></pre>

<p></p>

<h2>MISC</h2>

<ul>
<li><a href="http://www.sphinx-doc.org/en/latest/markup/inline.html">Inline markup</a></li>
<li><a href="http://zh-sphinx-doc.readthedocs.io/en/latest/markup/inline.html">文档引用</a></li>
<li><a href="http://rest-sphinx-memo.readthedocs.io/en/latest/Sphinx.html#sphinx-inline-markup">Sphinx inline markup</a></li>
<li><a href="http://rest-sphinx-memo.readthedocs.io/en/latest/ReST.html#tables">表格</a> GOOD!</li>
<li><a href="http://openalea.gforge.inria.fr/doc/openalea/doc/_build/html/source/sphinx/rest_syntax.html#tables">table</a></li>
<li><a href="http://www.tablesgenerator.com/text_tables#">tablesgenerator</a> <a href="https://stackoverflow.com/questions/26609816/some-online-tool-or-automation-plugin-for-sublimetext-for-generating-sphinx-rst">&lt;-</a></li>
</ul>


<p>&ndash;END</p>
]]></content>
  </entry>
  
</feed>
