<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tools | Winse Blog]]></title>
  <link href="http://winseliu.com/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://winseliu.com/"/>
  <updated>2015-01-14T18:48:06+08:00</updated>
  <id>http://winseliu.com/</id>
  <author>
    <name><![CDATA[Winse Liu]]></name>
    <email><![CDATA[winseliu@foxmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mysql分区]]></title>
    <link href="http://winseliu.com/blog/2014/11/14/mysql-partition/"/>
    <updated>2014-11-14T15:05:50+08:00</updated>
    <id>http://winseliu.com/blog/2014/11/14/mysql-partition</id>
    <content type="html"><![CDATA[<p>Windows8 Mysql安装后数据默认放在<code>C:\ProgramData\MySQL\MySQL Server 5.6\data</code>下。</p>

<blockquote><p>2、MyISAM数据库表文件：
.MYD文件：即MY Data，表数据文件
.MYI文件：即MY Index，索引文件
.log文件：日志文件</p>

<p>3、InnoDB采用表空间（tablespace）来管理数据，存储表数据和索引，
InnoDB数据库文件（即InnoDB文件集，ib-file set）：
  ibdata1、ibdata2等：系统表空间文件，存储InnoDB系统信息和用户数据库表数据和索引，所有表共用
  .ibd文件：单表表空间文件，每个表使用一个表空间文件（file per table），存放用户数据库表数据和索引
  日志文件： ib_logfile1、ib_logfile2</p></blockquote>

<pre><code>create database hello;
use hello;
create table abc ( name varchar(1000), age int );
insert into abc values ("1", 1);

create table abc_myisam ( name varchar(100), age int ) engine=myisam;
insert into abc_myisam values ( '1', 1), ('2',2);
alter table abc_myisam partition by hash(age) partitions 4 ;

insert into abc_myisam values ( '11', 10), ('2',20), ( '1', 11), ('2',21), ( '1', 21), ('2',22), ( '1', 31), ('2',32), ( '1', 41), ('2',24), ( '1', 15), ('2',23) ;
</code></pre>

<p>最终库目录如下:</p>

<p><img src="http://file.bmob.cn/M00/D2/16/oYYBAFRlrMaAAAdoAADDsNJhdNs617.png" alt="" /></p>

<p>根据月份来进行分区：</p>

<pre><code>--最好按照月份分区(date需要为日期类型)
alter table abc_myisam PARTITION BY RANGE (extract(YEAR_MONTH from date)) (  
    PARTITION p410 VALUES LESS THAN (201411),  
    PARTITION p411 VALUES LESS THAN (201412),  
    PARTITION p412 VALUES LESS THAN (201501),  
    PARTITION p501 VALUES LESS THAN (201502), 
    PARTITION p502 VALUES LESS THAN (201503), 
    PARTITION p503 VALUES LESS THAN (201504), 
    PARTITION p504 VALUES LESS THAN (201505), 
    PARTITION p505 VALUES LESS THAN (201506), 
    PARTITION p0 VALUES LESS THAN MAXVALUE  
)
</code></pre>

<p>根据日期来分区：</p>

<pre><code>alter table t_dta_activeresources_ip PARTITION BY RANGE (to_days(day)) (  
    PARTITION p0 VALUES LESS THAN (735926),  
PARTITION p141124 VALUES LESS THAN (735927),
PARTITION p141125 VALUES LESS THAN (735928),
PARTITION p141126 VALUES LESS THAN (735929),
PARTITION p88 VALUES LESS THAN MAXVALUE  
)
</code></pre>

<p>查询时执行计划带上partitions可以查看命中的是那个分区：</p>

<pre><code>mysql&gt; explain select * from t_dta_illegalweb where day='2015-01-04';
+----+-------------+------------------+------+---------------+------+---------+------+---------+-------------+
| id | select_type | table            | type | possible_keys | key  | key_len | ref  | rows    | Extra       |
+----+-------------+------------------+------+---------------+------+---------+------+---------+-------------+
|  1 | SIMPLE      | t_dta_illegalweb | ALL  | NULL          | NULL | NULL    | NULL | 1335432 | Using where |
+----+-------------+------------------+------+---------------+------+---------+------+---------+-------------+
1 row in set

mysql&gt; explain partitions
 select * from t_dta_illegalweb where day='2015-01-04';
+----+-------------+------------------+------------+------+---------------+------+---------+------+---------+-------------+
| id | select_type | table            | partitions | type | possible_keys | key  | key_len | ref  | rows    | Extra       |
+----+-------------+------------------+------------+------+---------------+------+---------+------+---------+-------------+
|  1 | SIMPLE      | t_dta_illegalweb | p150104    | ALL  | NULL          | NULL | NULL    | NULL | 1335432 | Using where |
+----+-------------+------------------+------------+------+---------------+------+---------+------+---------+-------------+
1 row in set
</code></pre>

<p>如果清理掉分区的数据后，再查看执行计划：</p>

<pre><code>mysql&gt; alter table t_dta_illegalweb truncate partition p150104;
Query OK, 0 rows affected

mysql&gt; explain partitions select * from t_dta_illegalweb where day='2015-01-04';
+----+-------------+-------+------------+------+---------------+------+---------+------+------+-----------------------------------------------------+
| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | Extra                                               |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+-----------------------------------------------------+
|  1 | SIMPLE      | NULL  | NULL       | NULL | NULL          | NULL | NULL    | NULL | NULL | Impossible WHERE noticed after reading const tables |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+-----------------------------------------------------+
1 row in set
</code></pre>

<h2>打开日志开关</h2>

<p>默认mysql是没有打开记录一般日志的开关的，可以通过命令行修改参数。对于查看具体执行了那些sql语句，调试很有帮助。</p>

<pre><code>mysql&gt; set global general_log = 1;
Query OK, 0 rows affected

mysql&gt; SHOW  GLOBAL VARIABLES LIKE '%log%';
</code></pre>

<h2>参考</h2>

<ul>
<li><a href="http://blog.csdn.net/yaotinging/article/details/6671506">MySQL数据文件介绍及存放位置</a></li>
<li><a href="http://lehsyh.iteye.com/blog/732719">MySQL的表分区</a></li>
<li><a href="http://lobert.iteye.com/blog/1955841">http://lobert.iteye.com/blog/1955841</a></li>
<li><a href="http://blog.csdn.net/jiao_fuyou/article/details/14214213">http://blog.csdn.net/jiao_fuyou/article/details/14214213</a></li>
<li><a href="http://database.51cto.com/art/201002/184392.htm">http://database.51cto.com/art/201002/184392.htm</a></li>
<li><a href="http://dev.mysql.com/doc/refman/5.5/en/error-log.html">mysql不重启清理日志</a></li>
<li><a href="http://pangge.blog.51cto.com/6013757/1319304">http://pangge.blog.51cto.com/6013757/1319304</a></li>
<li><a href="http://bbs.csdn.net/topics/70096519">http://bbs.csdn.net/topics/70096519</a></li>
<li><a href="http://bbs.csdn.net/topics/350138520">http://bbs.csdn.net/topics/350138520</a></li>
<li><a href="http://www.iteye.com/topic/408701">http://www.iteye.com/topic/408701</a></li>
<li><a href="http://www.blogjava.net/allrounder/articles/323591.html">http://www.blogjava.net/allrounder/articles/323591.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx配置静态站点服务]]></title>
    <link href="http://winseliu.com/blog/2014/11/13/nginx-serving-static-content/"/>
    <updated>2014-11-13T10:16:17+08:00</updated>
    <id>http://winseliu.com/blog/2014/11/13/nginx-serving-static-content</id>
    <content type="html"><![CDATA[<p>配置nginx作为网页快照的服务，需要理解好配置<code>root</code>的涵义！</p>

<p>首先安装，然后修改配置：</p>

<pre><code>yum install nginx 

less /etc/nginx/nginx.conf
less /etc/nginx/conf.d/default.conf 

service nginx restart
</code></pre>

<p>实际操作中没有root，只能自己编译了：</p>

<pre><code>下载nginx，pcre-8.36.zip，zlib-1.2.3.tar.gz解压到src下。
cd nginx-1.7.7
./configure --prefix=/home/omc/tools/nginx --with-pcre=src/pcre --with-zlib=src/zlib

cd /home/omc/tools/nginx
vi conf/nginx.conf # 修改listen的端口，80要root才能起
sbin/nginx
sbin/nginx -s reload
</code></pre>

<p>如果编译的目录和真正存放程序的路径不一致时，可以使用<code>-p</code>参数来指定。</p>

<pre><code>cd nginx
sbin/nginx -p $PWD
sbin/nginx -s reload -p $PWD
</code></pre>

<p>下面具体说说配置的涵义：</p>

<ul>
<li>root（不管在那个配置节点下）位置都对应 请求的根路径。</li>
</ul>


<pre><code>    location /static {
        root  /usr/share/static/html;
        autoindex on;
    }

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }
</code></pre>

<ul>
<li>location的<code>/static</code>对应的是访问目录<code>/usr/share/static/html/static</code>下的内容，请求<code>/static/hello.html</code>对应到<code>/usr/share/static/html/static/hello.html</code>。也就是说节点下的root目录 对应 的是 访问地址的<code>/</code>。</li>
<li>autoindex可以用于list列出目录内容。</li>
</ul>


<p><img src="http://file.bmob.cn/M00/05/49/ooYBAFRkHkmAe3wcAACCDsZ0Oc8983.png" alt="" /></p>

<p>配置了两个路径后，问题来了：如果<code>/usr/share/nginx/html/</code>也有目录static，那nginx会访问谁？<strong>nginx来先匹配配置，访问/static定位到<code>/usr/share/static/html</code></strong>。</p>

<pre><code>    location /static {
        root  /usr/share/static/html;
        try_files $uri /static/404.html;
    }
</code></pre>

<ul>
<li>try_files可以设置默认页面，如<code>/usr/share/static/html/static</code>目录下不存在abc.html，那么会内部重定向到<code>/static/404.html</code>。这里路径要<code>/static</code>下面。</li>
</ul>


<p>try_files还可以返回状态值，跳转到对应状态的页面：</p>

<pre><code>location / {
    try_files $uri $uri/ $uri.html =404;
}
</code></pre>

<p><img src="http://file.bmob.cn/M00/D1/D0/oYYBAFRkJ6eAc8UiAAEKid3ICHw052.png" alt="" /></p>

<p>如果try_files的所给出的地址不包括<code>$uri</code>时，请求会被重定向配置指向的新代理服务：</p>

<pre><code>location / {
    try_files $uri $uri/ @backend;
}

location @backend {
    proxy_pass http://backend.example.com;
}
</code></pre>

<h2>实践</h2>

<p>在实际操作遇到的不能访问的问题，配置本机的其他JavaWeb应用，但是在登录后，点其他链接总是跳转到登陆页。可以查看下真正请求的地址。</p>

<pre><code>    location /omc {
            proxy_pass http://REAL-IP:9000/omc;
            #proxy_pass http://localhost:9000/omc;
    }
</code></pre>

<p>填写localhost不能访问，但是填具体的外网IP时是可以访问的。查看后，在页面定义了<code>&lt;base href="${basedir}/&gt;</code>导致请求都跳转到localhost了。在客户端肯定就访问失败了。这个需要特别注意下。</p>

<p><img src="http://file.bmob.cn/M00/05/C3/ooYBAFRpn1qAKNKiAACUae7DmjY717.png" alt="" /></p>

<p>在特定的情况下，文件不一定是html后缀的（如：txt），如果要在浏览器解析html，需要配置content-type标题头。同时访问的url和真实存放的文件的路径有出处时，可以通过rewrite指令来进行适配。</p>

<pre><code>    server {
        ...
        location /snapshot {
            root   /home/ud/html-snapshot;
            add_header content-type "text/html";
            rewrite ^/snapshot/.*/(.*)$  /snapshot/$1   last;
            try_files $uri $uri.html $uri.htm =404;
        }
</code></pre>

<h2>参考</h2>

<ul>
<li><a href="http://nginx.com/resources/admin-guide/serving-static-content/">Serving Static Content</a></li>
<li><a href="http://nginx.com/resources/admin-guide/web-server/">NGINX Web Server</a></li>
<li><a href="http://www.cnblogs.com/cgli/archive/2011/05/16/2047920.html">nginx rewrite规则</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Expect-批量实现SSH无密钥登录]]></title>
    <link href="http://winseliu.com/blog/2014/09/07/expect-automate-and-batch-config-ssh/"/>
    <updated>2014-09-07T16:11:18+08:00</updated>
    <id>http://winseliu.com/blog/2014/09/07/expect-automate-and-batch-config-ssh</id>
    <content type="html"><![CDATA[<p>在安装部署Hadoop集群的首要步骤就是配置SSH的无密钥登陆。</p>

<pre><code>ssh-keygen -t rsa -P '' -f ~/.ssh/id_rsa
cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys

ssh-copy-id -i ~/.ssh/id_rsa.pub root@$ip
</code></pre>

<p>然后，可以通过ssh命令来进行批量的操作。</p>

<pre><code>ssh root@$ip 'cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys'
scp -o StrictHostKeyChecking=no /etc/hosts root@${ip}:/etc/
</code></pre>

<p>但是，一些需要密码的dialogue形式的输入时，部署N台datanode就需要输入N遍！同时新建用户也是需要输入用户密码的操作！！</p>

<p>Linux Expect就是用来自动化处理这些需求的。Except能根据提示来实现相应的输入。</p>

<pre><code>[hadoop@master1 hadoop-deploy-0.0.1]$ ssh-copy-id localhost
The authenticity of host 'localhost (::1)' can't be established.
RSA key fingerprint is 4e:fe:7a:0a:98:6e:9a:ab:af:e4:65:51:9b:3d:e0:99.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'localhost' (RSA) to the list of known hosts.
hadoop@localhost's password: 
Now try logging into the machine, with "ssh 'localhost'", and check in:

  .ssh/authorized_keys

to make sure we haven't added extra keys that you weren't expecting.
</code></pre>

<p>根据需要<strong>提示信息</strong>，以及需要<strong>输入的信息</strong>，可以编写对应expect脚本来进行自动化。</p>

<pre><code>    [hadoop@master1 hadoop-deploy-0.0.1]$ cat bin/ssh-copy-id.expect 
    #!/usr/bin/expect  

    ## Usage $0 [user@]host password

    set host [lrange $argv 0 0];
    set password [lrange $argv 1 1] ;

    set timeout 30;

    spawn ssh-copy-id $host ;

    expect {
      "(yes/no)?" { send yes\n; exp_continue; }
      "password:" { send $password\n; exp_continue; }
    }

    exec sleep 1;
</code></pre>

<p>同样新建用户初始化密码的操作一样可以使用expect来使用：</p>

<pre><code>    [hadoop@master1 hadoop-deploy-0.0.1]$ cat bin/passwd.expect
    #!/usr/bin/expect  

    ## Usage $0 host username password

    set host [lrange $argv 0 0];
    set username [lrange $argv 1 1];
    set password [lrange $argv 2 2] ;

    set timeout 30;

    ##

    spawn ssh $host useradd $username ;

    exec sleep 1;

    ##

    spawn ssh $host passwd $username ;

    ## password and repasswd all use this
    expect {
      "password:" { send $password\n; exp_continue; }
    }

    exec sleep 1;
</code></pre>

<p>有了上面的脚本，预定义每台机器的root密码，使用ssh-copy-id.expect建立到各台datanode机器的无密钥登录；然后passwd.expect脚本分发给各台机器，然后使用ssh进行运行脚本建立用户初始化密码。</p>

<p>Expect仅在master机器上安装就可以。安装程序的如下：</p>

<pre><code>yum install expect
</code></pre>

<p>or</p>

<pre><code>rpm -ivh tcl-8.5.7-6.el6.x86_64.rpm
rpm -ivh expect-5.44.1.15-5.el6_4.x86_64.rpm
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Ganglia on Redhat5+]]></title>
    <link href="http://winseliu.com/blog/2014/07/18/install-ganglia-on-redhat/"/>
    <updated>2014-07-18T14:53:44+08:00</updated>
    <id>http://winseliu.com/blog/2014/07/18/install-ganglia-on-redhat</id>
    <content type="html"><![CDATA[<p>对使用C写的复杂的程序安装心里有阴影，还有本来可以上网的话，使用yum安装会省很多的事情。
但是没办法，环境是这样，正式环境没有提供网络环境，搭建的本地yum环境也不知道行不行。</p>

<p>上次在自己电脑的虚拟机上面成功安装过ganglia，但apache、rrdtool依赖使用yum安装的，安装过程比较揪心。把ganglia安装到正式环境就不了了之的。
上个星期生产环境出现了用户查询数据久久不能返回的问题，由于查询程序写的比较差的缘故。但同时也给自己敲了警钟，都不知道集群机器运行情况，终究是大隐患；安装后监测集群同时为以后程序的调优工作带来便利。</p>

<p>本次安装全部使用源码包安装，有部分lib有重复编译。</p>

<p>总结下，原来安装ganglia就仅是按照网络的步骤一步步的弄，同时各个程序的版本又有可能不一致，每一步都胆战心惊！没有重点重心，以至于浪费了很多的事情。
分步骤有条不紊的操作就可以踏实多了，安装ganglia主要涉及三个核心部分(安装程序包<a href="http://yunpan.cn/QCFUiuyAWSyZI">下载</a>（提取码：0ec4）)：</p>

<ul>
<li>rrdtool</li>
<li>gmetad / gmond</li>
<li>apache / web</li>
<li>集群子节点部署</li>
<li>配置hadoop metrics监控hadoop集群</li>
</ul>


<p>按照顺序一个个的安装就可以了。无需为一个个依赖的版本不一致问题而忧心，同时可以更好的参考网络上的实践。</p>

<h2>安装rrdtool</h2>

<p>推荐按照<a href="http://oss.oetiker.ch/rrdtool/doc/rrdbuild.en.html#IBUILDING_DEPENDENCIES">官网教程</a>步骤操作，很&amp;非常的详细。
教程中环境变量必须得设置！这个很重点！</p>

<p>下面是安装rrdtool过程中用到的软件，列出的顺序即为安装的次序：</p>

<pre><code>[hadoop@umcc97-44 rrdbuild]$ ll -tr | grep -v 'tar'
总计 24132
drwxrwxrwx  6   1000          1000    4096 07-17 12:12 pkg-config-0.23
drwxr-xr-x 11 hadoop            80    4096 07-17 12:28 zlib-1.2.3
drwxr-xr-x  7   1004 avahi-autoipd    4096 07-17 12:29 libpng-1.2.18
drwxr-xr-x  8   1000 users            4096 07-17 12:31 freetype-2.3.5
drwxrwxrwx 15  50138 vcsa            12288 07-17 16:37 libxml2-2.6.32
drwxrwxrwx 15   1488 users            4096 07-17 16:53 fontconfig-2.4.2
drwxrwxrwx  4 sjyw   sjyw             4096 07-17 16:56 pixman-0.10.0
drwxrwsrwx  8   1000 ftp              4096 07-17 16:59 cairo-1.6.4
drwxrwxrwx 12 sjyw   sjyw             4096 07-17 17:01 glib-2.15.4
drwxrwxrwx  9 sjyw   sjyw             4096 07-17 17:16 pango-1.21.1
drwxr-xr-x 11   1003          1001    4096 07-17 17:36 rrdtool-1.4.8
</code></pre>

<p>具体操作的步骤（原来包括操作步骤，发现太累赘了重新调整了一下）：</p>

<pre><code># 下面几个环境变量时基础！
BUILD_DIR=/home/ganglia/rrdbuild
INSTALL_DIR=/opt/rrdtool-1.4.8

export PKG_CONFIG_PATH=${INSTALL_DIR}/lib/pkgconfig
export PATH=$INSTALL_DIR/bin:$PATH

export LDFLAGS="-Wl,--rpath -Wl,${INSTALL_DIR}/lib" 

[root@umcc97-44 rrdbuild]# tar zxvf pkg-config-0.23.tar.gz 
[root@umcc97-44 rrdbuild]# cd pkg-config-0.23
[root@umcc97-44 pkg-config-0.23]# ./configure --prefix=$INSTALL_DIR CFLAGS="-O3 -fPIC"
[root@umcc97-44 pkg-config-0.23]# make &amp;&amp; make install

# 这个环境变量也很重要
[root@umcc97-44 pkg-config-0.23]# export PKG_CONFIG=$INSTALL_DIR/bin/pkg-config
[root@umcc97-44 pkg-config-0.23]# cd ..

[root@umcc97-44 rrdbuild]# tar zxvf zlib-1.2.3.tar.gz 
[root@umcc97-44 rrdbuild]# cd zlib-1.2.3
# 修改了下官网的命令; 64位问题 recompile with -fPIC
[root@umcc97-44 zlib-1.2.3]# CFLAGS="-O3 -fPIC" ./configure
[root@umcc97-44 zlib-1.2.3]# make &amp;&amp; make install

[root@umcc97-44 rrdbuild]# tar zxvf libpng-1.2.18.tar.gz 
[root@umcc97-44 rrdbuild]# cd libpng-1.2.18
[root@umcc97-44 zlib-1.2.3]# cd ../libpng-1.2.18
[root@umcc97-44 libpng-1.2.18]# env CFLAGS="-O3 -fPIC" ./configure --prefix=$INSTALL_DIR
[root@umcc97-44 libpng-1.2.18]# make &amp;&amp; make install

[root@umcc97-44 libpng-1.2.18]# cd ..
[root@umcc97-44 rrdbuild]# tar zxvf freetype-2.3.5.tar.gz 
[root@umcc97-44 rrdbuild]# cd freetype-2.3.5
[root@umcc97-44 freetype-2.3.5]# ./configure --prefix=$INSTALL_DIR CFLAGS="-O3 -fPIC"
[root@umcc97-44 freetype-2.3.5]# make &amp;&amp; make install

[root@umcc97-44 rrdbuild]# tar zxvf libxml2-2.6.32.tar.gz 
[root@umcc97-44 rrdbuild]# cd libxml2-2.6.32
[root@umcc97-44 libxml2-2.6.32]#  ./configure --prefix=$INSTALL_DIR CFLAGS="-O3 -fPIC"
[root@umcc97-44 libxml2-2.6.32]# make &amp;&amp; make install

[root@umcc97-44 libxml2-2.6.32]# cd ..
[root@umcc97-44 rrdbuild]# tar zxvf fontconfig-2.4.2.tar.gz 
[root@umcc97-44 rrdbuild]# cd fontconfig-2.4.2
[root@umcc97-44 fontconfig-2.4.2]# ./configure --prefix=$INSTALL_DIR CFLAGS="-O3 -fPIC" --with-freetype-config=$INSTALL_DIR/bin/freetype-config
[root@umcc97-44 fontconfig-2.4.2]# make &amp;&amp; make install

[root@umcc97-44 fontconfig-2.4.2]# cd ..
[root@umcc97-44 rrdbuild]# cd pixman-0.10.0
[root@umcc97-44 pixman-0.10.0]# ./configure --prefix=$INSTALL_DIR CFLAGS="-O3 -fPIC"
[root@umcc97-44 pixman-0.10.0]# make &amp;&amp; make install

[root@umcc97-44 pixman-0.10.0]# cd ../cairo-1.6.4
[root@umcc97-44 cairo-1.6.4]# ./configure --prefix=$INSTALL_DIR \
&gt;     --enable-xlib=no \
&gt;     --enable-xlib-render=no \
&gt;     --enable-win32=no \
&gt;     CFLAGS="-O3 -fPIC"
[root@umcc97-44 cairo-1.6.4]# make &amp;&amp; make install

[root@umcc97-44 cairo-1.6.4]# cd ..
[root@umcc97-44 rrdbuild]# tar zxvf glib-2.15.4.tar.gz 
[root@umcc97-44 rrdbuild]# cd glib-2.15.4
[root@umcc97-44 glib-2.15.4]# ./configure --prefix=$INSTALL_DIR CFLAGS="-O3 -fPIC"
[root@umcc97-44 glib-2.15.4]# make &amp;&amp; make install

[root@umcc97-44 rrdbuild]# bunzip2 -c pango-1.21.1.tar.bz2 | tar xf -
[root@umcc97-44 rrdbuild]# ll
[root@umcc97-44 rrdbuild]# cd pango-1.21.1
[root@umcc97-44 pango-1.21.1]# ./configure --prefix=$INSTALL_DIR CFLAGS="-O3 -fPIC" --without-x
[root@umcc97-44 pango-1.21.1]# export PATH=$INSTALL_DIR/bin:$PATH
[root@umcc97-44 pango-1.21.1]# make &amp;&amp; make install

[root@umcc97-44 rrdbuild]# cd rrdtool-1.4.8/
[root@umcc97-44 rrdtool-1.4.8]#  ./configure --prefix=$INSTALL_DIR --disable-tcl --disable-python
[root@umcc97-44 rrdtool-1.4.8]# make clean
[root@umcc97-44 rrdtool-1.4.8]# make 
[root@umcc97-44 rrdtool-1.4.8]# make install

## 安装完后，搞个例子玩玩   
[root@umcc97-44 rrdtool-1.4.8]# cd /opt/rrdtool-1.4.8/share/rrdtool/examples/
[root@umcc97-44 examples]# ll
[root@umcc97-44 examples]# ./4charts.pl 
This script has created 4charts.png in the current directory
This demonstrates the use of the TIME and % RPN operators
# 运行完后，会在当前目录生成不同尺寸的png的图片

[hadoop@umcc97-44 ~]$ /opt/rrdtool-1.4.8/bin/rrdtool -v
RRDtool 1.4.8  Copyright 1997-2013 by Tobias Oetiker &lt;tobi@oetiker.ch&gt;
               Compiled Jul 17 2014 17:37:58

Usage: rrdtool [options] command command_options
Valid commands: create, update, updatev, graph, graphv,  dump, restore,
        last, lastupdate, first, info, fetch, tune,
        resize, xport, flushcached

RRDtool is distributed under the Terms of the GNU General
Public License Version 2. (www.gnu.org/copyleft/gpl.html)

For more information read the RRD manpages
</code></pre>

<p>到这里rrd安装好，遇到zlib的CFLAGS变量设置的问题，以及终端断了必须重新设置<strong>环境变量</strong>两个大点的问题！其他如果按照官网的顺序安装基本顺顺利利了。</p>

<p>同时认识到了pkg，其实类似于java的jar嘛，依赖包不一定非要安装在系统的默认位置，自己管理也是一种简单易行的方式。接下来安装gmetad/gmond也使用这样方式，为后面部署gmond带来便利：所有依赖的包都放在一个目录下嘛！
接下来ganglia程序。</p>

<h2>gmetad安装</h2>

<p>需要用到的软件包：</p>

<pre><code>./gangliabuild/ganglia-web-3.5.12
./gangliabuild/apr-1.5.1
./gangliabuild/apr-util-1.5.3
./gangliabuild/confuse-2.7
./gangliabuild/expat-2.0.1
./gangliabuild/ganglia-3.6.0
</code></pre>

<p>整个安装过程，除了make的时刻rrd的库找不到的问题（通过LD_LIBRARY_PATH解决），其他都安装的很顺。</p>

<pre><code># 把下载来的tar全部解压
[root@umcc97-44 gangliabuild]# find . -name "*.tar.gz" -exec tar zxvf {} \;

[root@umcc97-44 gangliabuild]# cd expat-2.0.1
[root@umcc97-44 expat-2.0.1]# INSTALL_DIR=/opt/ganglia
[root@umcc97-44 expat-2.0.1]# ./configure --prefix=$INSTALL_DIR 
[root@umcc97-44 expat-2.0.1]# make &amp;&amp; make install

[root@umcc97-44 expat-2.0.1]# cd ../apr-1.5.1
[root@umcc97-44 apr-1.5.1]# ./configure --prefix=$INSTALL_DIR 
[root@umcc97-44 apr-1.5.1]# make &amp;&amp; make install

[root@umcc97-44 apr-1.5.1]# cd ../apr-util-1.5.3
[root@umcc97-44 apr-util-1.5.3]# ./configure --with-apr=/opt/ganglia --with-expat=/opt/ganglia --prefix=$INSTALL_DIR 
[root@umcc97-44 apr-util-1.5.3]# make &amp;&amp; make install

[root@umcc97-44 apr-util-1.5.3]# cd ../confuse-2.7
[root@umcc97-44 confuse-2.7]# ./configure CFLAGS=-fPIC --disable-nls --prefix=$INSTALL_DIR 
[root@umcc97-44 confuse-2.7]# make &amp;&amp; make install

[root@umcc97-44 confuse-2.7]# cd ../ganglia-3.6.0
[root@umcc97-44 ganglia-3.6.0]# export LDFLAGS="-Wl,--rpath -Wl,${INSTALL_DIR}/lib" 
[root@umcc97-44 ganglia-3.6.0]# export PKG_CONFIG_PATH=${INSTALL_DIR}/lib/pkgconfig
# 注意sysconfdir，运行程序配置所在的目录
[root@umcc97-44 ganglia-3.6.0]# ./configure --prefix=$INSTALL_DIR --with-librrd=/opt/rrdtool-1.4.8 --with-libexpat=/opt/ganglia --with-libconfuse=/opt/ganglia --with-libpcre=no  --with-gmetad --enable-gexec --enable-status -sysconfdir=/etc/ganglia
...
Welcome to..
     ______                  ___
    / ____/___ _____  ____ _/ (_)___ _
   / / __/ __ `/ __ \/ __ `/ / / __ `/
  / /_/ / /_/ / / / / /_/ / / / /_/ /
  \____/\__,_/_/ /_/\__, /_/_/\__,_/
                   /____/

Copyright (c) 2005 University of California, Berkeley

Version: 3.6.0
Library: Release 3.6.0 0:0:0

Type "make" to compile.

[root@umcc97-44 ganglia-3.6.0]# 
# 设置rrd的LIB路径
[root@umcc97-44 ganglia-3.6.0]# export LD_LIBRARY_PATH=/opt/rrdtool-1.4.8/lib
[root@umcc97-44 ganglia-3.6.0]# make
[root@umcc97-44 ganglia-3.6.0]# make install
</code></pre>

<p>接下来是配置gmetad</p>

<pre><code>[root@umcc97-44 ganglia-3.6.0]#  cd gmetad
[root@umcc97-44 gmetad]# cp gmetad.init /etc/init.d/gmetad
[root@umcc97-44 gmetad]# chkconfig gmetad on

[root@umcc97-44 gmetad]# chkconfig --list gmetad
gmetad          0:off   1:off   2:on    3:on    4:on    5:on    6:off

[root@umcc97-44 gmetad]# mkdir -p /var/lib/ganglia/rrds
[root@umcc97-44 gmetad]# chown nobody:nobody /var/lib/ganglia/rrds
[root@umcc97-44 gmetad]# 
# 没有启动起来，程序的路径不对
[root@umcc97-44 gmetad]# service gmetad start
Starting GANGLIA gmetad: 
[root@umcc97-44 gmetad]# 
[root@umcc97-44 gmetad]# ln -s /opt/ganglia/sbin/gmetad /usr/sbin/gmetad
[root@umcc97-44 gmetad]# service gmetad start
Starting GANGLIA gmetad: [  OK  ]

# 配置
[root@umcc97-44 gmetad]# cp gmetad.conf /etc/ganglia/gmetad.conf
[root@umcc97-44 gmetad]# vi /etc/ganglia/gmetad.conf 
 datasource "hadoop" localhost
 rrd_rootdir "/var/lib/ganglia/rrds"

[root@umcc97-44 gmetad]# service gmetad restart
Shutting down GANGLIA gmetad: [  OK  ]
Starting GANGLIA gmetad: [  OK  ]

# 测试下
[root@umcc97-44 gmetad]# telnet localhost 8651
</code></pre>

<h2>gmond安装</h2>

<pre><code>[root@umcc97-44 gmetad]# pwd
/home/ganglia/gangliabuild/ganglia-3.6.0/gmetad
[root@umcc97-44 gmetad]# cd ..
[root@umcc97-44 ganglia-3.6.0]# ./configure --prefix=$INSTALL_DIR  --with-libpcre=no
...
Welcome to..
     ______                  ___
    / ____/___ _____  ____ _/ (_)___ _
   / / __/ __ `/ __ \/ __ `/ / / __ `/
  / /_/ / /_/ / / / / /_/ / / / /_/ /
  \____/\__,_/_/ /_/\__, /_/_/\__,_/
                   /____/

Copyright (c) 2005 University of California, Berkeley

Version: 3.6.0
Library: Release 3.6.0 0:0:0

Type "make" to compile.

# 尽管检查通过了，但是make会报错
# 需要指定lib包位置
[root@umcc97-44 ganglia-3.6.0]# ./configure --prefix=$INSTALL_DIR  --with-libpcre=no  --with-libexpat=/opt/ganglia --with-libconfuse=/opt/ganglia -sysconfdir=/etc/ganglia
[root@umcc97-44 ganglia-3.6.0]# make &amp;&amp; make install

[root@umcc97-44 ganglia-3.6.0]# cd gmond/
[root@umcc97-44 gmond]# ./gmond -t &gt; /etc/ganglia/gmond.conf

# 和gmetad一样，需要把路径把程序做个软连接
[root@umcc97-44 gmond]# cat gmond.init
    #!/bin/sh
    #
    # chkconfig: 2345 70 40
    # description: gmond startup script
    #
    GMOND=/usr/sbin/gmond

...
[root@umcc97-44 gmond]# ln -s /opt/ganglia/sbin/gmond /usr/sbin/gmond

[root@umcc97-44 gmond]# cp gmond.init /etc/init.d/gmond
[root@umcc97-44 gmond]# chkconfig --add gmond
[root@umcc97-44 gmond]# chkconfig --list gmond
gmond           0:off   1:off   2:on    3:on    4:on    5:on    6:off

[root@umcc97-44 ganglia-3.6.0]# vi /etc/ganglia/gmond.conf 
 cluster-name

[root@umcc97-44 ganglia-3.6.0]# service gmond start
Starting GANGLIA gmond: [  OK  ]

# 测试下
[root@umcc97-44 ganglia-3.6.0]# telnet localhost 8649
</code></pre>

<p>查看运行情况：</p>

<pre><code>[root@umcc97-44 ganglia-3.6.0]# ldconfig -v
[root@umcc97-44 ganglia-3.6.0]# /opt/ganglia/bin/gstat -a
</code></pre>

<h2>apache和php环境安装</h2>

<pre><code>[root@umcc97-44 webbuild]# tar zxvf httpd-2.4.9.tar.gz 
[root@umcc97-44 webbuild]# cd httpd-2.4.9
[root@umcc97-44 httpd-2.4.9]# ./configure -with-enable-so -sysconfdir=/etc/httpd
...
checking for APR... no
configure: error: APR not found.  Please read the documentation.

# 前面安装ganglia时也安装过APR但是安装的目录指定的，混用不是很好。查看官方安装2.4的安装文档，可以直接把apr放到srclib下，编译时会同时编译这些依赖
[root@umcc97-44 httpd-2.4.9]# cd srclib/
[root@umcc97-44 srclib]# cp -r /home/ganglia/gangliabuild/apr-1.5.1 ./
[root@umcc97-44 srclib]# cp -r /home/ganglia/gangliabuild/apr-util-1.5.3 ./
[root@umcc97-44 srclib]# mv apr-1.5.1 apr
[root@umcc97-44 srclib]# mv apr-util-1.5.3 apr-util
[root@umcc97-44 srclib]# ll
[root@umcc97-44 srclib]# cd ..
[root@umcc97-44 httpd-2.4.9]#  cd ../
[root@umcc97-44 webbuild]# tar zxvf pcre-8.35.tar.gz 
# 正则表达式的包，这里安装默认位置
[root@umcc97-44 webbuild]# cd pcre-8.35
[root@umcc97-44 pcre-8.35]# ./configure 
[root@umcc97-44 pcre-8.35]# make &amp;&amp; make install

[root@umcc97-44 pcre-8.35]# cd ../httpd-2.4.9
[root@umcc97-44 httpd-2.4.9]# ./configure --with-included-apr -with-enable-so -sysconfdir=/etc/httpd
[root@umcc97-44 httpd-2.4.9]# make &amp;&amp; make install

[root@umcc97-44 httpd-2.4.9]# cd /usr/local/apache2/
[root@umcc97-44 apache2]# cd /etc/httpd

[root@umcc97-44 httpd]# cd /home/ganglia/webbuild/
[root@umcc97-44 webbuild]# tar zxvf php-5.5.14\ \(2\).tar.gz 
[root@umcc97-44 webbuild]# cd php-5.5.14
# 用了安装rrd时的libxml
[root@umcc97-44 php-5.5.14]# ./configure -with-apxs2=/usr/local/apache2/bin/apxs --with-libxml-dir=/opt/rrdtool-1.4.8/ -sysconfdir=/etc -with-config-file-path=/etc -with-config-file-scan-dir=/usr/etc/php.d -with-zlib
[root@umcc97-44 php-5.5.14]# make &amp;&amp; make install

[root@umcc97-44 php-5.5.14]#  
[root@umcc97-44 php-5.5.14]#  vi /etc/httpd/httpd.conf

    LoadModule php5_module        modules/libphp5.so #这个安装php后自动加上了

    DocumentRoot "/var/www/html"
    &lt;Directory "/var/www/html"&gt;

    AddType application/x-httpd-php .php

[root@umcc97-44 php-5.5.14]# /usr/local/apache2/bin/apachectl start
AH00526: Syntax error on line 215 of /etc/httpd/httpd.conf:
DocumentRoot must be a directory

[root@umcc97-44 php-5.5.14]# mkdir -p /var/www/html
[root@umcc97-44 php-5.5.14]# /usr/local/apache2/bin/apachectl start
AH00558: httpd: Could not reliably determine the server's fully qualified domain name, using 10.18.97.44. Set the 'ServerName' directive globally to suppress this message

[root@umcc97-44 php-5.5.14]#  vi /etc/httpd/httpd.conf
    ServerName
[root@umcc97-44 php-5.5.14]#/usr/local/apache2/bin/apachectl start
httpd (pid 31416) already running

[root@umcc97-44 php-5.5.14]# cp /usr/local/apache2/bin/apachectl /etc/init.d/httpd
[root@umcc97-44 php-5.5.14]# chkconfig --add httpd
service httpd does not support chkconfig

[root@umcc97-44 ~]# vi /etc/init.d/httpd 
 #chkconfig: 2345 10 90
 #description: Activates/Deactivates Apache Web Server

[root@umcc97-44 ~]# service httpd start

[root@umcc97-44 ~]# cd /var/www/html/
[root@umcc97-44 ~]# vi index.php
# http://umcc97-44 浏览器查看下结果

# /usr/local/apache2/bin/apachectl -k stop
[root@umcc97-44 ganglia-web]# service httpd -k stop 
# 等apache结束
[root@umcc97-44 ganglia-web]# tail -f /usr/local/apache2/logs/error_log 
</code></pre>

<p>部署ganglia-web：</p>

<pre><code>[root@umcc97-44 ~]# cd /home/ganglia/gangliabuild/ganglia-web-3.5.12
[root@umcc97-44 ganglia-web-3.5.12]# ls
[root@umcc97-44 ganglia-web-3.5.12]# make install
rsync --exclude "rpmbuild" --exclude "*.gz" --exclude "Makefile" --exclude "*debian*" --exclude "ganglia-web-3.5.12" --exclude ".git*" --exclude "*.in" --exclude "*~" --exclude "#*#" --exclude "ganglia-web.spec" --exclude "apache.conf" -a . ganglia-web-3.5.12
mkdir -p //var/lib/ganglia-web/dwoo/compiled &amp;&amp; \
    mkdir -p //var/lib/ganglia-web/dwoo/cache &amp;&amp; \
    mkdir -p //var/lib/ganglia-web &amp;&amp; \
    rsync -a ganglia-web-3.5.12/conf //var/lib/ganglia-web &amp;&amp; \
    mkdir -p //usr/share/ganglia-webfrontend &amp;&amp; \
    rsync --exclude "conf" -a ganglia-web-3.5.12/* //usr/share/ganglia-webfrontend &amp;&amp; \
    chown -R root:root //var/lib/ganglia-web

[root@umcc97-44 ganglia-web-3.5.12]# mv /usr/share/ganglia-webfrontend /var/www/html/ganglia
[root@umcc97-44 ganglia-web-3.5.12]# cd /var/www/html/ganglia/  

# 修改配置，在安装完gmetad后有新建/var/lib/ganglia/rrds其实和conf中的配置是一致的
[root@umcc97-44 ganglia]# cp conf_default.php conf.php  

[root@umcc97-44 ganglia]# cd /var/lib/ganglia-web/
[root@umcc97-44 ganglia-web]# cd dwoo/
[root@umcc97-44 dwoo]# ll
total 8
drwxr-xr-x 2 root root 4096 Jul 17 21:34 cache
drwxr-xr-x 2 root root 4096 Jul 17 21:34 compiled
[root@umcc97-44 dwoo]# chmod 777 *  
# http://umcc97-44/ganglia
</code></pre>

<p>部署gmond到其他集群节点</p>

<pre><code>
[root@umcc97-44 opt]# cat /etc/init.d/gmond 
    #!/bin/sh
    #
    # chkconfig: 2345 70 40
    # description: gmond startup script
    #
    GMOND=/usr/sbin/gmond   

[root@umcc97-44 opt]# vi /etc/ganglia/gmetad.conf   
 data_source
 # 重启gmetad
[root@umcc97-44 opt]# ssh-copy-id -i ~/.ssh/id_rsa.pub umcc97-144
[root@umcc97-44 opt]# scp /etc/init.d/gmond umcc97-144:/etc/init.d/
[root@umcc97-44 opt]# ssh umcc97-144 'mkdir /etc/ganglia' 
[root@umcc97-44 opt]# scp /etc/ganglia/gmond.conf  umcc97-144:/etc/ganglia/
[root@umcc97-44 opt]# rsync -vaz ganglia umcc97-144:/opt/
[root@umcc97-44 opt]# ssh umcc97-144
Last login: Tue Jun 10 12:08:47 2014

[root@umcc97-144 ~]# ln -s /opt/ganglia/sbin/gmond /usr/sbin/gmond
[root@umcc97-144 ~]# chkconfig --add gmond
[root@umcc97-144 ~]# service gmond start
Starting GANGLIA gmond: [  OK  ]

[root@umcc97-144 ~]# 
</code></pre>

<h2>Hadoop/Hbase Metrics配置</h2>

<pre><code>[hadoop@umcc97-44 ~]$ cat hadoop-2.2.0/etc/hadoop/hadoop-metrics*
#
#   Licensed to the Apache Software Foundation (ASF) under one or more
#   contributor license agreements.  See the NOTICE file distributed with
#   this work for additional information regarding copyright ownership.
#   The ASF licenses this file to You under the Apache License, Version 2.0
#   (the "License"); you may not use this file except in compliance with
#   the License.  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

# syntax: [prefix].[source|sink].[instance].[options]
# See javadoc of package-info.java for org.apache.hadoop.metrics2 for details

# @changed
#*.sink.file.class=org.apache.hadoop.metrics2.sink.FileSink
# default sampling period, in seconds
#*.period=10

# The namenode-metrics.out will contain metrics from all context
#namenode.sink.file.filename=namenode-metrics.out
# Specifying a special sampling period for namenode:
#namenode.sink.*.period=8

#datanode.sink.file.filename=datanode-metrics.out

# the following example split metrics of different
# context to different sinks (in this case files)
#jobtracker.sink.file_jvm.context=jvm
#jobtracker.sink.file_jvm.filename=jobtracker-jvm-metrics.out
#jobtracker.sink.file_mapred.context=mapred
#jobtracker.sink.file_mapred.filename=jobtracker-mapred-metrics.out

#tasktracker.sink.file.filename=tasktracker-metrics.out

#maptask.sink.file.filename=maptask-metrics.out

#reducetask.sink.file.filename=reducetask-metrics.out



*.sink.ganglia.class=org.apache.hadoop.metrics2.sink.ganglia.GangliaSink31
*.sink.ganglia.period=10

*.sink.ganglia.slope=jvm.metrics.gcCount=zero,jvm.metrics.memHeapUsedM=both
*.sink.ganglia.dmax=jvm.metrics.threadsBlocked=70,jvm.metrics.memHeapUsedM=40

namenode.sink.ganglia.servers=umcc97-44:8649
resourcemanager.sink.ganglia.servers=umcc97-44:8649

datanode.sink.ganglia.servers=umcc97-44:8649
nodemanager.sink.ganglia.servers=umcc97-44:8649

maptask.sink.ganglia.servers=umcc97-44:8649
reducetask.sink.ganglia.servers=umcc97-44:8649



# Configuration of the "dfs" context for null
dfs.class=org.apache.hadoop.metrics.spi.NullContext

# Configuration of the "dfs" context for file
#dfs.class=org.apache.hadoop.metrics.file.FileContext
#dfs.period=10
#dfs.fileName=/tmp/dfsmetrics.log

# Configuration of the "dfs" context for ganglia
# Pick one: Ganglia 3.0 (former) or Ganglia 3.1 (latter)
# dfs.class=org.apache.hadoop.metrics.ganglia.GangliaContext
# dfs.class=org.apache.hadoop.metrics.ganglia.GangliaContext31
# dfs.period=10
# dfs.servers=localhost:8649


# Configuration of the "mapred" context for null
mapred.class=org.apache.hadoop.metrics.spi.NullContext

# Configuration of the "mapred" context for file
#mapred.class=org.apache.hadoop.metrics.file.FileContext
#mapred.period=10
#mapred.fileName=/tmp/mrmetrics.log

# Configuration of the "mapred" context for ganglia
# Pick one: Ganglia 3.0 (former) or Ganglia 3.1 (latter)
# mapred.class=org.apache.hadoop.metrics.ganglia.GangliaContext
# mapred.class=org.apache.hadoop.metrics.ganglia.GangliaContext31
# mapred.period=10
# mapred.servers=localhost:8649


# Configuration of the "jvm" context for null
#jvm.class=org.apache.hadoop.metrics.spi.NullContext

# Configuration of the "jvm" context for file
#jvm.class=org.apache.hadoop.metrics.file.FileContext
#jvm.period=10
#jvm.fileName=/tmp/jvmmetrics.log

# Configuration of the "jvm" context for ganglia
# jvm.class=org.apache.hadoop.metrics.ganglia.GangliaContext
# jvm.class=org.apache.hadoop.metrics.ganglia.GangliaContext31
# jvm.period=10
# jvm.servers=localhost:8649

# Configuration of the "rpc" context for null
rpc.class=org.apache.hadoop.metrics.spi.NullContext

# Configuration of the "rpc" context for file
#rpc.class=org.apache.hadoop.metrics.file.FileContext
#rpc.period=10
#rpc.fileName=/tmp/rpcmetrics.log

# Configuration of the "rpc" context for ganglia
# rpc.class=org.apache.hadoop.metrics.ganglia.GangliaContext
# rpc.class=org.apache.hadoop.metrics.ganglia.GangliaContext31
# rpc.period=10
# rpc.servers=localhost:8649


# Configuration of the "ugi" context for null
ugi.class=org.apache.hadoop.metrics.spi.NullContext

# Configuration of the "ugi" context for file
#ugi.class=org.apache.hadoop.metrics.file.FileContext
#ugi.period=10
#ugi.fileName=/tmp/ugimetrics.log

# Configuration of the "ugi" context for ganglia
# ugi.class=org.apache.hadoop.metrics.ganglia.GangliaContext
# ugi.class=org.apache.hadoop.metrics.ganglia.GangliaContext31
# ugi.period=10
# ugi.servers=localhost:8649

[hadoop@umcc97-44 ~]$ cat hbase-0.98.3-hadoop2/conf/hadoop-metrics2-hbase.properties 
# syntax: [prefix].[source|sink].[instance].[options]
# See javadoc of package-info.java for org.apache.hadoop.metrics2 for details

#*.sink.file*.class=org.apache.hadoop.metrics2.sink.FileSink
# default sampling period
#*.period=10

# Below are some examples of sinks that could be used
# to monitor different hbase daemons.

# hbase.sink.file-all.class=org.apache.hadoop.metrics2.sink.FileSink
# hbase.sink.file-all.filename=all.metrics

# hbase.sink.file0.class=org.apache.hadoop.metrics2.sink.FileSink
# hbase.sink.file0.context=hmaster
# hbase.sink.file0.filename=master.metrics

# hbase.sink.file1.class=org.apache.hadoop.metrics2.sink.FileSink
# hbase.sink.file1.context=thrift-one
# hbase.sink.file1.filename=thrift-one.metrics

# hbase.sink.file2.class=org.apache.hadoop.metrics2.sink.FileSink
# hbase.sink.file2.context=thrift-two
# hbase.sink.file2.filename=thrift-one.metrics

# hbase.sink.file3.class=org.apache.hadoop.metrics2.sink.FileSink
# hbase.sink.file3.context=rest
# hbase.sink.file3.filename=rest.metrics


*.sink.ganglia.class=org.apache.hadoop.metrics2.sink.ganglia.GangliaSink31
*.sink.ganglia.period=10

hbase.sink.ganglia.period=10
hbase.sink.ganglia.servers=umcc97-44:8649
</code></pre>

<p>然后properties配置同步到集群的从节点（datanode/regionserver），重启集群。等一会儿就能在ganglia-web界面看到多了很多很多的指标量。</p>

<h2>参考</h2>

<h3>ganglia</h3>

<ul>
<li><a href="http://oss.oetiker.ch/rrdtool/doc/rrdbuild.en.html#IBUILDING_DEPENDENCIES">RRDTool安装</a></li>
<li><a href="http://www.cnblogs.com/qq78292959/archive/2012/05/30/2526761.html">CFLAGS=&ldquo;-O3 -fPIC"为64位编译参数</a></li>
<li><a href="http://www.codesky.net/article/201107/174186.html">pkgconfig作用处理包依赖</a></li>
<li><a href="http://blog.chinaunix.net/uid-23916356-id-3290237.html">gmetad和gmond安装以及配置</a></li>
<li><a href="http://wenku.baidu.com/link?url=RH4EhSP3U_dp4I7goEVA_DFkb0DrgZ3uWw_mSt2hhaRb6mQJLtWxaa75RrwETwtY5e8BvOCI_p9RNrmXn_qbEexTE-PGlgtf6f5T3cGglKq">gmond节点拷贝安装</a></li>
<li><a href="http://blog.chinaunix.net/uid-11121450-id-3147002.html">http://blog.chinaunix.net/uid-11121450-id-3147002.html</a></li>
<li><a href="http://blog.chinaunix.net/uid-23916356-id-3290237.html">http://blog.chinaunix.net/uid-23916356-id-3290237.html</a></li>
<li><a href="http://wenku.baidu.com/link?url=qY7vCTyodgSCsoIg6c2UiHXWv0nEGkS9nd0DbQERxFGEaTvgvi7FMQTKv5Sn1L9H8CX5_gDgAbJJ5jaQh3KhZED7PoB2Bgr2I6mS-vDc1LS">虚拟机操作从零开始弄, 搭了个本地源, 配置</a></li>
<li><a href="http://www.linuxidc.com/Linux/2014-01/95804p2.htm">Hadoop/Hbase metrics2配置</a></li>
<li><a href="https://github.com/cbuchner1/CudaMiner/issues/23">https://github.com/cbuchner1/CudaMiner/issues/23</a></li>
<li><a href="http://bbs.csdn.net/topics/390546319">http://bbs.csdn.net/topics/390546319</a> LIBRARY_PATH是编译时使用的，LD_LIBRARY_PATH是运行时使用的。</li>
</ul>


<h3>apache web</h3>

<ul>
<li><a href="http://blog.sina.com.cn/s/blog_70121e200100lq0h.html">apache程序安装</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_5d15305b0101ceft.html">apache服务安装配置</a></li>
<li><a href="http://www.cnblogs.com/yuboyue/archive/2011/07/18/2109875.html">apache关闭服务</a></li>
<li><a href="http://www.soadmin.com/zonghe/operating-system/1008085.htm">目录权限处理</a></li>
<li><a href="http://blog.163.com/figo_2007@126/blog/static/2318076520111149413935/">http://blog.163.com/figo_2007@126/blog/static/2318076520111149413935/</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_70121e200100lq0h.html">http://blog.sina.com.cn/s/blog_70121e200100lq0h.html</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_815611fb0101cxnl.html">http://blog.sina.com.cn/s/blog_815611fb0101cxnl.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GIT操作记录手册]]></title>
    <link href="http://winseliu.com/blog/2014/03/30/git-cheatsheet/"/>
    <updated>2014-03-30T22:15:11+08:00</updated>
    <id>http://winseliu.com/blog/2014/03/30/git-cheatsheet</id>
    <content type="html"><![CDATA[<p>Git的每次提交都有一个<strong>唯一的ID</strong>与之对应，所有的TAG/Branch/Master/HEAD等等，都是一个<strong>软链接/别名</strong>而已！这个是理解好Git的基础！</p>

<h2>提交最佳实践</h2>

<ul>
<li>commit 只改一件事情。</li>
<li>如果一个文档有多个变更，使用<code>git add --patch</code>只选择文档中的<strong>部分变更</strong>进入stage。具体怎么使用，键入命令后在输入<code>?</code></li>
<li>写清楚 commit message</li>
</ul>


<h2>配置</h2>

<h3>内建的图形化 git：</h3>

<pre><code>gitk
</code></pre>

<h3>git服务器</h3>

<p>搭建git服务器也很方便，有很多web-server的版本，我试用了下<a href="http://www.scm-manager.org/download/">scm-manager</a>使用挺简单的！
如果已经有了SVN的服务器，可以直接使用git-svn检出到本地！！</p>

<h3>配置环境</h3>

<pre><code>git config --global user.email "XXX"
git config --global user.name "XXX"
</code></pre>

<h3>换行（\r\n）提交检出均不转换</h3>

<p>基本上都在windows操作系统上工作，不需要进行转换！</p>

<pre><code>git config --global core.autocrlf false
</code></pre>

<ul>
<li>true 提交时转换为LF，检出时转换为CRLF</li>
<li>input 提交时转换为LF，检出时不转换</li>
<li>false 提交检出均不转换</li>
</ul>


<h3>core.safecrlf</h3>

<ul>
<li>true 拒绝提交包含混合换行符的文件</li>
<li>false 允许提交包含混合换行符的文件</li>
<li>warn 提交包含混合换行符的文件时给出警告</li>
</ul>


<h3>默认分支</h3>

<p>.git/config如下的内容：</p>

<pre><code>[branch "master"]
    remote = origin
    merge = refs/heads/master
</code></pre>

<p>这等于告诉git两件事:
1. 当你处于master branch, 默认的remote就是origin。
2. 当你在master branch上使用git pull时，没有指定remote和branch，那么git就会采用默认的remote（也就是origin）来merge在master branch上所有的改变</p>

<p>如果不想或者不会编辑config文件的话，可以在bush上输入如下命令行：</p>

<pre><code>$ git config branch.master.remote origin 
$ git config branch.master.merge refs/heads/master 
</code></pre>

<p>之后再重新git pull下。最后git push你的代码，到此步顺利完成时，则可以在Github上看到你新建的仓库以及你提交到仓库中文件了OK。</p>

<h3>修改默认Git编辑器</h3>

<pre><code>$ git config core.editor vim

$ git config --global core.editor vi
</code></pre>

<h2>常用基本操作</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> 操作                                          </th>
<th style="text-align:left;"> 说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> git init                                      </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git init &ndash;bare                               </td>
<td style="text-align:left;"> 服务端使用bare（空架子，赤裸）的方式</td>
</tr>
<tr>
<td style="text-align:left;"> git status                                    </td>
<td style="text-align:left;"> 使用git打的最多的就是status命令，查看状态的同时会提示下一步的操作！</td>
</tr>
<tr>
<td style="text-align:left;"> git diff                                      </td>
<td style="text-align:left;"> 工作空间和index/stage进行对比</td>
</tr>
<tr>
<td style="text-align:left;"> git diff &ndash;cached                             </td>
<td style="text-align:left;"> index/stage与本地仓库进行对比</td>
</tr>
<tr>
<td style="text-align:left;"><strong>增加到变更(index/stage)</strong>                    </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git add .                                     </td>
<td style="text-align:left;"> 将当前目录添加到git仓库中，常用命令！</td>
</tr>
<tr>
<td style="text-align:left;"> git add -A                                    </td>
<td style="text-align:left;"> 添加所有改动的文档</td>
</tr>
<tr>
<td style="text-align:left;"> git add -u                                    </td>
<td style="text-align:left;"> 只加修改过的文件,新增的文件不加入</td>
</tr>
<tr>
<td style="text-align:left;"> git rm &ndash;cached <file>&hellip;                     </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"><strong>添加到本地库</strong>                               </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git commit                                    </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git commit -m &ldquo;msg&rdquo;                           </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git commit -a                                 </td>
<td style="text-align:left;"> -a是把所有的修改的（tracked）文件都commit</td>
</tr>
<tr>
<td style="text-align:left;"> git commit &ndash;amend -m &ldquo;commit message.&rdquo;       </td>
<td style="text-align:left;"> 未push到远程分支的提交，快捷的回退再提交。修补提交（修补最近一次的提交而不创建新的提交），可结合git add使用！</td>
</tr>
<tr>
<td style="text-align:left;"> git commit -v                                 </td>
<td style="text-align:left;"> -v 可以看到文件哪些内容被修改</td>
</tr>
<tr>
<td style="text-align:left;"> git commit -m &lsquo;v1.2.0-final&rsquo; &ndash;allow-empty    </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git reset                                     </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git reset HEAD^                               </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git reset &ndash;hard HEAD^                        </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git checkout file                             </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git checkout &ndash;orphan <branchname>; git rm &ndash;cached -r . </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git rebase                                    </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git merge                                     </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"><strong>日志</strong>                                       </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git log                                       </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git log &ndash;oneline &ndash;decorate &ndash;graph          </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git log &ndash;stat                                </td>
<td style="text-align:left;"> 查看提交信息及更新的文件</td>
</tr>
<tr>
<td style="text-align:left;"> git log &ndash;stat -p -1 &ndash;format=raw             </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git log -3 <file-name>                        </td>
<td style="text-align:left;"> 文件的最近3次提交的历史版本记录</td>
</tr>
<tr>
<td style="text-align:left;"> git log &ndash;stat -2                             </td>
<td style="text-align:left;"> 查看最近两次的提交描述及修改文件信息</td>
</tr>
<tr>
<td style="text-align:left;"> git log -p -2                                 </td>
<td style="text-align:left;"> 展开显示每次提交的内容差异，类似git show功能</td>
</tr>
<tr>
<td style="text-align:left;"> git log &ndash;name-status                         </td>
<td style="text-align:left;"> 仅显示文件的D/M/A的状态</td>
</tr>
<tr>
<td style="text-align:left;"> git log &ndash;summary                             </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git log &ndash;dirstat -5                          </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git log &ndash;pretty=format:&ldquo;%h %s&rdquo; &ndash;graph       </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git log &ndash;pretty=oneline                      </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git reflog                                    </td>
<td style="text-align:left;"> 查看本地操作历史。 ref log</td>
</tr>
<tr>
<td style="text-align:left;"> git show                                      </td>
<td style="text-align:left;"> 查看某版本文件的内容，版本库中最新提交的diff！</td>
</tr>
<tr>
<td style="text-align:left;"> git show master:index.md                      </td>
<td style="text-align:left;"> 查看历史版本的文件内容</td>
</tr>
<tr>
<td style="text-align:left;"> git show &lt;哈希值:文件目录/文件>               </td>
<td style="text-align:left;"> 查看内容</td>
</tr>
<tr>
<td style="text-align:left;"> git cat-file                                  </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"><strong>分支</strong>                                       </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git branch                                    </td>
<td style="text-align:left;"> 查看本地分支</td>
</tr>
<tr>
<td style="text-align:left;"> git branch <branch>                           </td>
<td style="text-align:left;"> 添加新分支，新分支创建后不会自动切换！！</td>
</tr>
<tr>
<td style="text-align:left;"> git branch &ndash;set-upstream branch-name origin/branch-name      </td>
<td style="text-align:left;"> * 建立本地分支和远程分支的关联</td>
</tr>
<tr>
<td style="text-align:left;"> git branch -a                                 </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git branch &ndash;list &ndash;merged                    </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git branch -r                                 </td>
<td style="text-align:left;"> 查看远程分支</td>
</tr>
<tr>
<td style="text-align:left;"> git checkout &ndash;orphan <new-branch>            </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git checkout <branch>                         </td>
<td style="text-align:left;"> 切换分支</td>
</tr>
<tr>
<td style="text-align:left;"> git checkout -b [new_branch_name]             </td>
<td style="text-align:left;"> 创建新分支并立即切换到新分支。git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致</td>
</tr>
<tr>
<td style="text-align:left;"> git branch -d branch_name                     </td>
<td style="text-align:left;"> -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项</td>
</tr>
<tr>
<td style="text-align:left;"> git branch -d -r remote_name/branch_name      </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git merge origin/local-branch                 </td>
<td style="text-align:left;"> 本地分支与主分支合并</td>
</tr>
<tr>
<td style="text-align:left;"><strong>推/拉</strong>                                      </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git pull                                      </td>
<td style="text-align:left;"> * 等价于git fetch &amp;&amp; git merge</td>
</tr>
<tr>
<td style="text-align:left;"> git fetch                                     </td>
<td style="text-align:left;"> 先把git的东西fetch到你本地然后merge后再push</td>
</tr>
<tr>
<td style="text-align:left;"> git push &ndash;rebase                             </td>
<td style="text-align:left;"> *</td>
</tr>
<tr>
<td style="text-align:left;"> git push                                      </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git push &ndash;set-upstream origin <branch>       </td>
<td style="text-align:left;"> To push the current branch and set the remote as upstream</td>
</tr>
<tr>
<td style="text-align:left;"> git push origin branch-name                   </td>
<td style="text-align:left;"> 创建远程分支(本地分支push到远程)，从本地推送分支。如果推送失败，先用git pull抓取远程的新提交</td>
</tr>
<tr>
<td style="text-align:left;"> git push -u origin master                     </td>
<td style="text-align:left;"> 将代码从本地回传到仓库</td>
</tr>
<tr>
<td style="text-align:left;"> git push origin test:master                   </td>
<td style="text-align:left;"> 提交本地test分支作为远程的master分支</td>
</tr>
<tr>
<td style="text-align:left;"> git push -f                                   </td>
<td style="text-align:left;"> * 强推(&ndash;force)，即利用强覆盖方式用你本地的代码替代git仓库内的内容，这种方式不建议使用。</td>
</tr>
<tr>
<td style="text-align:left;"> git pull [remoteName] [localBranchName]       </td>
<td style="text-align:left;"> 获取远程版本库提交与本地提交进行合并</td>
</tr>
<tr>
<td style="text-align:left;"> git push [remoteName] [localBranchName]       </td>
<td style="text-align:left;"> 提交、推送远程仓库</td>
</tr>
<tr>
<td style="text-align:left;"> git push &ndash;tags                               </td>
<td style="text-align:left;"> 提交时带上标签信息</td>
</tr>
<tr>
<td style="text-align:left;"> git push <git-url> master                     </td>
<td style="text-align:left;"> 把本地仓库提交到远程仓库的master分支中</td>
</tr>
<tr>
<td style="text-align:left;"> git push origin :branch_name                  </td>
<td style="text-align:left;"> 删除远端分支,(如果:左边的分支为空，那么将删除:右边的远程的分支。)远程的test将被删除，但是本地还会保存的，不用担心。</td>
</tr>
<tr>
<td style="text-align:left;"> git push origin :/refs/tags/tagname           </td>
<td style="text-align:left;"> 删除远端标签</td>
</tr>
<tr>
<td style="text-align:left;"> git clone <a href="http://path/to/git.git">http://path/to/git.git</a>              </td>
<td style="text-align:left;"> clone的内容会放在当前目录下的新目录</td>
</tr>
<tr>
<td style="text-align:left;"> git clone &ndash;branch <remote-branch> <git-url>  </td>
<td style="text-align:left;"> 获取指定分支，检出远程版本的分支。 git clone &ndash;branch unity /d/winsegit/hello helloclone</td>
</tr>
<tr>
<td style="text-align:left;"><strong>TAG</strong>                                        </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git tag                                       </td>
<td style="text-align:left;"> 查看标签</td>
</tr>
<tr>
<td style="text-align:left;"> git tag <tag>                                 </td>
<td style="text-align:left;"> 添加标签</td>
</tr>
<tr>
<td style="text-align:left;"> git tag -d <tag>                              </td>
<td style="text-align:left;"> 删除标签</td>
</tr>
<tr>
<td style="text-align:left;"> git tag -r                                    </td>
<td style="text-align:left;"> 查看远程标签</td>
</tr>
<tr>
<td style="text-align:left;"> git show <tag>                                </td>
<td style="text-align:left;"> 查看标签的信息</td>
</tr>
<tr>
<td style="text-align:left;"> git tag -a <tag> <msg>                        </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"><strong>REMOTE</strong>                                     </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git remote [show]                             </td>
<td style="text-align:left;"> 查看远程仓库</td>
</tr>
<tr>
<td style="text-align:left;"> git remote -v                                 </td>
<td style="text-align:left;"> 查看远程仓库</td>
</tr>
<tr>
<td style="text-align:left;"> git remote add [name] [url]                   </td>
<td style="text-align:left;"> 添加远程仓库</td>
</tr>
<tr>
<td style="text-align:left;"> git remote set-url &ndash;push[name][newUrl]       </td>
<td style="text-align:left;"> 修改远程仓库</td>
</tr>
<tr>
<td style="text-align:left;"> git remote show origin                        </td>
<td style="text-align:left;"> 远程库origin的详细信息。缺省值推送分支，有哪些远端分支还没有同步到本地，哪些已同步到本地的远端分支在远端服务器上已被删除，git pull 时将自动合并哪些分支！</td>
</tr>
<tr>
<td style="text-align:left;"> git remote show <remote-name>                 </td>
<td style="text-align:left;"> 远程版本信息查看</td>
</tr>
<tr>
<td style="text-align:left;"> git remote add origin <git-url>               </td>
<td style="text-align:left;"> 设置仓库</td>
</tr>
<tr>
<td style="text-align:left;"> git remote rm [name]                          </td>
<td style="text-align:left;"> 删除远程仓库</td>
</tr>
<tr>
<td style="text-align:left;"><strong>文件列表</strong>                                   </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;">git ls-tree &ndash;name-only  -rt <SHA-ID></td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"><strong>打包</strong>                                       </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git archive &ndash;format tar &ndash;output <tar> master</td>
<td style="text-align:left;"> 将 master以tar格式打包到指定文件</td>
</tr>
</tbody>
</table>


<h2>按功能点完整的操作步骤</h2>

<h3>查看指定版本文件内容</h3>

<pre><code>Administrator@WINSELIU /e/git/hello (master)
$ git ls-tree master
100644 blob 139b30f9054cf77bd2eeabcebaf6ca3f32cd1d50    abc

Administrator@WINSELIU /e/git/hello (master)
$ git cat-file -p 139b30f9054cf77bd2eeabcebaf6ca3f32cd1d50
</code></pre>

<h3>查看提交版本的指定文件内容</h3>

<pre><code>git log abc  # 获取文件提交ID
git cat-file -p &lt;commit-id&gt;  # 获取treeID
git cat-file -p &lt;tree-id&gt;  # 获取当前tree的列表
git cat-file -p &lt;file-blob-id&gt;
</code></pre>

<h3>根据格式输出日志</h3>

<pre><code>$ git log --pretty=oneline
$ git log --pretty=short
$ git log --pretty=format:'%h was %an, %ar, message: %s'
$ git log --pretty=format:'%h : %s' --graph
$ git log --pretty=format:'%h : %s' --topo-order --graph
$ git log --pretty=format:'%h : %s' --date-order --graph
</code></pre>

<p>你也可用‘medium',&lsquo;full&rsquo;,&lsquo;fuller&rsquo;,&lsquo;email&rsquo; 或‘raw'. 如果这些格式不完全符合你的相求， 你也可以用‘&ndash;pretty=format'参数(参见：git log)来创建你自己的"格式“.</p>

<h3>本地提交后再次修改</h3>

<p><strong>修改注释</strong></p>

<pre><code>git commit --amend 
</code></pre>

<p><strong>内容修改</strong></p>

<pre><code> # edit file
git add file
git commit --amend
</code></pre>

<p><strong>提交了不该提交的，并撤回</strong></p>

<p>刚刚提交的不完整，想修改一些东西，加到刚才的提交中</p>

<p>commit -> modify -> add -> amend</p>

<pre><code>git reset HEAD^
git status
cat abc
git diff
git commit -a -m "for test reset"
git log
git diff

vi abc
git add abc
git commit --amend

git status
git diff
git show master:abc
git log
</code></pre>

<h3>没有push到远程库的提交，本地可以做的事情</h3>

<ul>
<li>git reset: 用于回溯，回到原来的提交节点，多次提交合并为一个</li>
<li>git rebase <origin>：在origin分支的基础上，合并当前分支上的提交，形成线性提交历史。 会把当前分支的提交保存为patch，然后切到origin分支应用patch，形成线性的提交，common-origin-current。</li>
</ul>


<p>rebase冲突处理时，使用git add &amp;&amp; git rebase &ndash;continue。如果你使用了git add &amp;&amp; git commit，那么当前冲突使用git rebase &ndash;skip即可。</p>

<h3>处理本地和服务器之间冲突的方式</h3>

<ul>
<li>以本地为主。 git push -f</li>
<li>归并merge。 git pull 或者 git fetch &amp;&amp; git merge</li>
<li></li>
</ul>


<p>从stash恢复出现冲突，可以先提交，然后在pop，最后处理冲突。一般提交到本地index中的数据才是自己想要的，从stash中获取的数据只是临时的，可以直接用HEAD的数据内容覆盖，省去处理冲突的时间。</p>

<pre><code>$ git add -u
$ git commit -m 'update XXXX'
$ git stash pop

$ git status | grep 'both modified'  | grep ' ssh-config' | awk -F: '{print $2}' | while read line ; do git show HEAD:"$line" &gt; "$line" ; done
</code></pre>

<h3>从Github远程服务上拿其他分支：</h3>

<pre><code>Administrator@WINSELIU /e/git/to-markdown (master)
$ git branch -r
  origin/HEAD -&gt; origin/master
  origin/gh-pages
  origin/jquery
  origin/master

$ git checkout -b jquery origin/jquery
</code></pre>

<h3>把本地的git项目发布到Github</h3>

<pre><code>touch README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin git@github.com:winse/flickr-uploader.git
git push -u origin master
</code></pre>

<p>Push an existing repository from the command line：</p>

<pre><code>git remote add origin git@github.com:winse/flickr-uploader.git
git push -u origin master
</code></pre>

<p>如果已经存在remote origin，使用下面的方式修改远程的地址：</p>

<pre><code>Administrator@WINSELIU /d/winsegit/flickr_uploader/chrome (master)
$ git remote set-url --add origin  git@github.com:winse/flickr-uploader.git

Administrator@WINSELIU /d/winsegit/flickr_uploader/chrome (master)
$ git remote show origin
Warning: Permanently added 'github.com,192.30.252.128' (RSA) to the list of known hosts.
* remote origin
  Fetch URL: git@github.com:winse/flickr-uploader.git
  Push  URL: git@github.com:winse/flickr-uploader.git
  HEAD branch: (unknown)
</code></pre>

<h3>git查看本地领先远程的提交</h3>

<pre><code>Administrator@WINSELIU /d/winsegit/winse.github.com (master)
$ git status
# On branch master
# Your branch is ahead of 'origin/master' by 2 commits.
#   (use "git push" to publish your local commits)
#
# Changes not staged for commit:
#   (use "git add &lt;file&gt;..." to update what will be committed)
#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
#
#       modified:   about.md
#       modified:   blog/_posts/2014-01-21-monitoring-mobile-networks.md
#
# Untracked files:
#   (use "git add &lt;file&gt;..." to include in what will be committed)
#
#       default.html
no changes added to commit (use "git add" and/or "git commit -a")

Administrator@WINSELIU /d/winsegit/winse.github.com (master)
$ git log --oneline --decorate -5
0425ec5 (HEAD, master) 增加日志Github修改历史功能
f3a4a58 把TAG定位到首页，并分页以及按照年分类
d5097e3 (origin/master, origin/HEAD) plugins disabled in github page!
e75d62b test
876dd42 修复根目录下的md不能通过npp-windows请求编辑的BUG

Administrator@WINSELIU /d/winsegit/winse.github.com (master)
$ git cherry
+ f3a4a58cfead3aa76e4b92de3342bee5970accb7
+ 0425ec548aa4e3dd29cd6fbfa1b656543e85058e
</code></pre>

<h3>找回游离的提交</h3>

<p><strong>绑定到新分支</strong></p>

<pre><code>git reflog # 查看本地操作历史
git branch head23 HEAD@{23} # 把分支head23指向/绑定到游离的提交
</code></pre>

<p>git的版本都是从分支开始查找的，如果没有被分支管理的提交就游离在版本库中！
所以在reset重新修改时，最好建立分支然后再提交！
如果发现类似的提交问题，就需要尽快的修复，不然提交的ID找不到就S了！</p>

<blockquote><p>那些老的提交会被丢弃。 如果运行垃圾收集命令(pruning garbage collection), 这些被丢弃的提交就会删除. （请查看 git gc)</p></blockquote>

<p><strong>重置HEAD</strong></p>

<pre><code>git reset --hard HEAD@{23}
</code></pre>

<h3>删除提交</h3>

<p>删除提交E：</p>

<pre><code>$ git tag F
$ git tag E HEAD^
$ git tag D HEAD^^
$ git checkout D
$ git cherry-pick master # 把master-patch应用到TAG-D
# fix conflicts
$ git status # 提交
$ git checkout master # checkout到master分支
$ git reset --hard HEAD@{1} # 重置master到删除E后的提交
</code></pre>

<h3>Git浏览特定版本的文件列表</h3>

<pre><code>git ls-tree --name-only  -rt &lt;SHA-ID&gt;
</code></pre>

<h3>删除没有被git track的文件</h3>

<pre><code>git clean -fd # -f force branch switch/ignore unmerged entries， -d if you have new directory
git clean -x -fd

git reset --hard ( or git reset then back to 1. )
git checkout . ( or specify with file names )
git reset --hard ( or git reset then back to 3. )
</code></pre>

<h3>检出SVN项目</h3>

<pre><code>Administrator@ZGC-20130605LYE /e/git
$ git svn clone http://chrome-hosts-manager.googlecode.com/svn/trunk/
</code></pre>

<p><a href="http://www.worldhello.net/2010/02/01/339.html">http://www.worldhello.net/2010/02/01/339.html</a>下面提到的有意思：</p>

<blockquote><p>Git-svn 是 Subversion 的最佳伴侣，可以用 Git 来操作 Subversion 版本库。这带来一个非常有意思的副产品——部分检出：
可以用 git-svn 来对 Subversion 代码库的任何目录进行克隆，克隆出来的是一个git版本库
可以在部分克隆的版本库中用 Git 进行本地提交。
部分克隆版本库中的本地提交可以提交到上游 Subversion 版本库的相应目录中</p></blockquote>

<h3>Github添加项目主页github page(gh-pages)</h3>

<p>提交后就可以访问了<a href="http://winse.github.io/flickr-uploader/popup.html">页面</a>了。</p>

<pre><code>Administrator@WINSELIU /d/winsegit/flickr_uploader/chrome (master)
$ git branch -a
* master
  remotes/origin/master

Administrator@WINSELIU /d/winsegit/flickr_uploader/chrome (master)
$ git push origin master:gh-pages
Warning: Permanently added 'github.com,192.30.252.128' (RSA) to the list of known hosts.
Total 0 (delta 0), reused 0 (delta 0)
To git@github.com:winse/flickr-uploader.git
 * [new branch]      master -&gt; gh-pages

Administrator@WINSELIU /d/winsegit/flickr_uploader/chrome (master)
$ git branch -a
* master
  remotes/origin/gh-pages
  remotes/origin/master
</code></pre>

<p><strong><a href="https://help.github.com/articles/creating-project-pages-manually">Creating Project Pages manually</a></strong></p>

<blockquote><pre><code>  cd repository

  git checkout --orphan gh-pages
  # Creates our branch, without any parents (it's an orphan!)
  # Switched to a new branch 'gh-pages'

  git rm -rf .
  # Remove all files from the old working tree
  # rm '.gitignore'

  echo "My GitHub Page" &gt; index.html
  git add index.html
  git commit -a -m "First pages commit"
  git push origin gh-pages
</code></pre></blockquote>

<h3>子模块操作</h3>

<p><a href="http://josephjiang.com/entry.php?id=342">git-submodule教程！</a></p>

<pre><code>Administrator@WINSELIU /d/winsegit/jae_winse (master)
$ git submodule add git@github.com:winse/flickr-uploader.git src/main/webapp/flickr

Administrator@WINSELIU /d/winsegit/jae_winse (master)
$ git submodule status
 635090c5a754eebf5ce6566b7f8c65446b764f51 src/main/webapp/flickr (heads/master)

Administrator@WINSELIU /d/winsegit/jae_winse (master)
$ git commit -m "add submodule"
[master c7dc8c7] add submodule
warning: LF will be replaced by CRLF in .gitmodules.
The file will have its original line endings in your working directory.
 2 files changed, 4 insertions(+)
 create mode 100644 .gitmodules
 create mode 160000 src/main/webapp/flickr
</code></pre>

<p>如：$ git submodule add git://github.com/soberh/ui-libs.git src/main/webapp/ui-libs</p>

<p>初始化子模块：$ git submodule init &mdash;-只在首次检出仓库时运行一次就行</p>

<p>更新子模块：$ git submodule update &mdash;-每次更新或切换分支后都需要运行一下</p>

<p>删除子模块：（分4步走哦）</p>

<ol>
<li>$ git rm &ndash;cached [path]</li>
<li>编辑“.gitmodules”文件，将子模块的相关配置节点删除掉</li>
<li>编辑“.git/config”文件，将子模块的相关配置节点删除掉</li>
<li>手动删除子模块残留的目录</li>
</ol>


<h2>其他偶尔使用命令</h2>

<pre><code>git diff --check # 检查行尾有没有多余的空白
git remote prune &lt;remotename&gt;
git ls-remote --heads origin
git gc --prune=now
git ls-remote --heads &lt;remote-name&gt;
git rm -r --cached *
</code></pre>

<h2>参考</h2>

<ul>
<li><a href="http://blog.csdn.net/trochiluses/article/details/8996431">回溯 与 合并:git rebase与git reset</a></li>
<li><a href="http://ihower.tw/git/">git教程的一个站点</a></li>
<li><a href="http://ihower.tw/git/basic.html">git基本操作</a></li>
<li><a href="http://ihower.tw/git/vcs.html">版本管理介绍</a></li>
<li><a href="http://blog.csdn.net/ithomer/article/details/7529841">速查表</a></li>
<li><a href="http://git-scm.com/book/zh/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2">Git 基础 - 查看提交历史</a></li>
<li><p><a href="http://gitbook.liuhui998.com/3_4.html">查看历史 －Git日志</a></p></li>
<li><p><a href="http://git-scm.com/book/zh/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2">http://git-scm.com/book/zh/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2</a></p></li>
<li><a href="http://ihower.tw/blog/archives/2622">http://ihower.tw/blog/archives/2622</a></li>
<li><a href="http://git-scm.com/docs/git-rebase">http://git-scm.com/docs/git-rebase</a></li>
<li><a href="http://xiewenbo.iteye.com/blog/1285693">http://xiewenbo.iteye.com/blog/1285693</a></li>
<li><a href="http://gitready.com/">http://gitready.com/</a></li>
<li><a href="http://git-scm.com/book/zh/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2">http://git-scm.com/book/zh/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2</a></li>
<li><a href="http://josephjiang.com/entry.php?id=342">http://josephjiang.com/entry.php?id=342</a> git-submodule没有更好的教程了</li>
<li><a href="http://www.cnblogs.com/william9/archive/2012/09/01/2666767.html">http://www.cnblogs.com/william9/archive/2012/09/01/2666767.html</a></li>
<li><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html">http://marklodato.github.io/visual-git-guide/index-zh-cn.html</a></li>
<li><a href="http://www.16kan.com/question/detail/321093.html">http://www.16kan.com/question/detail/321093.html</a></li>
<li><a href="http://gitbook.liuhui998.com/3_4.html">http://gitbook.liuhui998.com/3_4.html</a></li>
<li><a href="http://www.bootcss.com/p/git-guide/">http://www.bootcss.com/p/git-guide/</a></li>
<li><a href="http://blog.csdn.net/ithomer/article/details/7529022">http://blog.csdn.net/ithomer/article/details/7529022</a></li>
<li><a href="http://git-scm.com/book/zh/Git-%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">http://git-scm.com/book/zh/Git-%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF</a></li>
<li><a href="http://git-scm.com/book/zh/Git-%E5%9F%BA%E7%A1%80-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8">http://git-scm.com/book/zh/Git-%E5%9F%BA%E7%A1%80-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8</a></li>
<li><a href="http://blog.csdn.net/trochiluses/article/details/14517379">http://blog.csdn.net/trochiluses/article/details/14517379</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
