<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tools | Winse Blog]]></title>
  <link href="http://winseliu.com/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://winseliu.com/"/>
  <updated>2017-03-06T17:45:39+08:00</updated>
  <id>http://winseliu.com/</id>
  <author>
    <name><![CDATA[Winse Liu]]></name>
    <email><![CDATA[winseliu@foxmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Privoxy把shadowsocks转换为Http代理]]></title>
    <link href="http://winseliu.com/blog/2017/02/04/privoxy-http-proxy-for-shadowsocks/"/>
    <updated>2017-02-04T15:36:08+08:00</updated>
    <id>http://winseliu.com/blog/2017/02/04/privoxy-http-proxy-for-shadowsocks</id>
    <content type="html"><![CDATA[<p><a href="https://program-think.blogspot.com/2014/12/gfw-privoxy.html">https://program-think.blogspot.com/2014/12/gfw-privoxy.html</a></p>

<p>Privoxy是一个代理辅助工具，这里用Privoxy把Shadowsocks socks5代理转换为http代理。</p>

<p>kubernetes的docker容器需要访问google的服务，docker暂时只支持http代理，而我手上有的代理是 <a href="http://99ss.in">shadowsocks</a> 的。这里通过Privoxy把socks5转成http代理。</p>

<h2>安装Shadowsocks</h2>

<ul>
<li><a href="http://blog.lxx1.com/1420">http://blog.lxx1.com/1420</a></li>
<li><a href="https://shadowsocks.org/en/download/clients.html">https://shadowsocks.org/en/download/clients.html</a></li>
</ul>


<pre><code>[root@k8s ~]# yum install epel-release python-pip -y

[root@k8s ~]# pip install shadowsocks
Collecting shadowsocks
  Downloading shadowsocks-2.8.2.tar.gz
Installing collected packages: shadowsocks
  Running setup.py install for shadowsocks ... done
Successfully installed shadowsocks-2.8.2
You are using pip version 8.1.2, however version 9.0.1 is available.
You should consider upgrading via the 'pip install --upgrade pip' command.

上面软件已经安装好了, 推荐更新下pip.
[root@k8s ~]# pip install --upgrade pip
Collecting pip
  Downloading pip-9.0.1-py2.py3-none-any.whl (1.3MB)
    100% |████████████████████████████████| 1.3MB 46kB/s 
Installing collected packages: pip
  Found existing installation: pip 8.1.2
    Uninstalling pip-8.1.2:
      Successfully uninstalled pip-8.1.2
Successfully installed pip-9.0.1
</code></pre>

<p>填写shadowsocks服务端信息以及本地映射端口，启动客户端</p>

<pre><code>[root@k8s ~]# cat /etc/shadowsocks.json 
{
"server": "xxxxxx",
"server_port": xxx,
"local_port": 1080,
"password": "xxxxxxxx",
"timeout": 600,
"method": "rc4-md5",
"fast_open": false,
"workers": 1
}
[root@k8s ~]# sslocal -c /etc/shadowsocks.json 
</code></pre>

<p></p>

<p>配置防火墙，如果其他主机也需要用这个代理的话</p>

<p><a href="https://havee.me/linux/2015-01/using-firewalls-on-centos-7.html">https://havee.me/linux/2015-01/using-firewalls-on-centos-7.html</a></p>

<pre><code>[root@bigdata-dev ~]# firewall-cmd --zone=public --add-port=1080/tcp --permanent
[root@bigdata-dev ~]# firewall-cmd --reload
</code></pre>

<h2>安装privoxy</h2>

<ul>
<li><a href="https://www.privoxy.org/sf-download-mirror/Win32/3.0.26%20%28stable%29/">windows版本下载地址</a></li>
<li><a href="http://www.ttlsa.com/linux/privoxy-convert-socks-proxy-to-http/">http://www.ttlsa.com/linux/privoxy-convert-socks-proxy-to-http/</a></li>
<li><a href="https://blog.phpgao.com/privoxy-shadowsocks.html">https://blog.phpgao.com/privoxy-shadowsocks.html</a></li>
</ul>


<pre><code>[root@k8s ~]# yum install privoxy -y

查找listen-address行注释掉，在最后添加如下两行
[root@k8s docker.service.d]# vi /etc/privoxy/config 
...
forward-socks5 / 127.0.0.1:1080 .
listen-address k8s:8118

# 启动
[root@k8s ~]# systemctl start privoxy
# 查看状态
[root@k8s ~]# systemctl status privoxy

[root@k8s ~]# systemctl enable privoxy
Created symlink from /etc/systemd/system/multi-user.target.wants/privoxy.service to /usr/lib/systemd/system/privoxy.service.

如果其他机器需要用到代理的话，需要配置防火墙开放端口
[root@k8s ~]# firewall-cmd --zone=public --add-port=8118/tcp --permanent
[root@k8s ~]# firewall-cmd --reload 
</code></pre>

<p>在本机调试会方便点，安装桌面环境</p>

<p><a href="http://unix.stackexchange.com/questions/181503/how-to-install-desktop-environments-on-centos-7">http://unix.stackexchange.com/questions/181503/how-to-install-desktop-environments-on-centos-7</a></p>

<pre><code>yum -y groups install "GNOME Desktop" 
</code></pre>

<p>然后firefox安装autoproxy，配置http代理。（firefox自带的代理有点抽风，不太好用）</p>

<p>或者通过curl加代理参数：</p>

<p>```
[root@k8s ~]# curl google.com
curl: (7) Failed to connect to 2404:6800:4008:802::200e: Network is unreachable
[root@k8s ~]#
[root@k8s ~]# curl -x localhost:8118 google.com
<HTML><HEAD><meta http-equiv="content-type" content="text/html;charset=utf-8">
<TITLE>301 Moved</TITLE></HEAD><BODY></p>

<H1>301 Moved</H1>


<p>The document has moved
<A HREF="http://www.google.com/">here</A>.
</BODY></HTML>
```</p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Centos7上安装VNC Server]]></title>
    <link href="http://winseliu.com/blog/2017/01/27/vnc-server-on-centos7/"/>
    <updated>2017-01-27T16:43:51+08:00</updated>
    <id>http://winseliu.com/blog/2017/01/27/vnc-server-on-centos7</id>
    <content type="html"><![CDATA[<h2>安装</h2>

<pre><code>[root@bigdata-dev ~]# yum install -y tigervnc-server

首先查看原来的默认配置
[root@bigdata-dev ~]# cat /lib/systemd/system/vncserver@.service 

[Service]
Type=forking
# Clean any existing files in /tmp/.X11-unix environment
ExecStartPre=/bin/sh -c '/usr/bin/vncserver -kill %i &gt; /dev/null 2&gt;&amp;1 || :'
ExecStart=/usr/sbin/runuser -l &lt;USER&gt; -c "/usr/bin/vncserver %i"
PIDFile=/home/&lt;USER&gt;/.vnc/%H%i.pid
ExecStop=/bin/sh -c '/usr/bin/vncserver -kill %i &gt; /dev/null 2&gt;&amp;1 || :'

复制一份修改，已root用户为例。其他用户类推
[root@bigdata-dev system]# cp vncserver@.service vncserver@:1.service 
[root@bigdata-dev system]# vi vncserver@\:1.service 

[Service]
Type=forking
# Clean any existing files in /tmp/.X11-unix environment
ExecStartPre=/bin/sh -c '/usr/bin/vncserver -kill %i &gt; /dev/null 2&gt;&amp;1 || :'
ExecStart=/usr/sbin/runuser -l root -c "/usr/bin/vncserver %i"
PIDFile=/root/.vnc/%H%i.pid
ExecStop=/bin/sh -c '/usr/bin/vncserver -kill %i &gt; /dev/null 2&gt;&amp;1 || :'

[root@bigdata-dev system]# systemctl daemon-reload
[root@bigdata-dev system]# systemctl enable vncserver@:1.service
Created symlink from /etc/systemd/system/multi-user.target.wants/vncserver@:1.service to /etc/systemd/system/vncserver@:1.service.
[root@bigdata-dev system]# systemctl start vncserver@:1.service
[root@bigdata-dev system]# systemctl status vncserver@:1.service
● vncserver@:1.service - Remote desktop service (VNC)
   Loaded: loaded (/etc/systemd/system/vncserver@:1.service; enabled; vendor preset: disabled)
   Active: active (running) since Wed 2017-01-25 14:28:04 CST; 27s ago

[root@bigdata-dev system]# vncpasswd 
Password:
Verify:
[root@bigdata-dev system]# 
[root@bigdata-dev system]# 
[root@bigdata-dev system]# systemctl restart vncserver@:1.service
http://www.aboutyun.com/thread-17535-1-1.html
[root@bigdata-dev system]# systemctl status firewalld.service
● firewalld.service - firewalld - dynamic firewall daemon
   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)
   Active: inactive (dead)
     Docs: man:firewalld(1)
</code></pre>

<h2>下载客户端并访问</h2>

<p><a href="https://www.realvnc.com/download/viewer/">https://www.realvnc.com/download/viewer/</a> 访问VNC服务的地址 HOST:5901</p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[整理] 环境准备工具集]]></title>
    <link href="http://winseliu.com/blog/2017/01/25/develop-environment-prepare/"/>
    <updated>2017-01-25T10:57:18+08:00</updated>
    <id>http://winseliu.com/blog/2017/01/25/develop-environment-prepare</id>
    <content type="html"><![CDATA[<p>工具其实很重要，不仅仅是帮你把东西管理起来，而是工具是一整套的解决方案，是前辈多年总结实践的成果。</p>

<p>初出茅庐的时刻，总觉得工具麻烦，写个java程序还得写个pom，直接把jar放到lib下然后加入classpath就好了。殊不知，后面还有打包，进阶后还要看源码等等问题接踵而来。慢慢把maven用起来，又觉得apache的访问太慢（忍了），项目组内部分功能，开始全部放一个parent下面（也还行）。但后面编译打包太麻烦，尝试在项目组自己建立maven私有仓库。</p>

<p>这里把这几年使用的工具罗列下：</p>

<p>私有仓库：</p>

<ul>
<li>Nexus 如：项目组私有仓库</li>
<li>YUM repo: createrepo <a href="/blog/2016/06/17/ganglia-install-on-centos-with-puppet/">使用Puppet安装配置Ganglia</a> 如：生产环境YUM仓库</li>
<li><a href="/blog/2016/04/04/rpm-build-your-package/">RPM打包</a></li>
<li>Docker register [TODO]</li>
<li><a href="/blog/2016/03/11/install-and-config-openvpn/">OpenVPN</a> 如：访问只能内网访问的服务组（OA、SSH）</li>
</ul>


<p>软件使用：</p>

<ul>
<li><a href="/images/blogs/linux-101-hacks-review-securecrt-config.png">SecureCRT</a> 如：访问只能内网访问的单服务（无依赖）</li>
<li><a href="/blog/2015/11/22/gfw-ladder/">翻墙</a> google值得拥有</li>
<li><a href="/blog/2015/04/12/optimize-system-ramdisk/">内存盘</a></li>
<li><a href="/blog/2012/10/08/eclipse-remote-debugging-java-applications/">远程调试</a> <a href="/blog/2014/04/22/remote-debug-hadoop2/">远程调试hadoop2以及错误处理方法</a></li>
<li><a href="/blog/2014/02/23/quickly-open-program-in-windows/">WIN + R 快速打开程序</a></li>
<li><a href="/blog/2013/09/19/let-shell-command-efficient/">Shell</a></li>
<li><a href="/blog/2014/10/18/docker-dnsmasq-handler-hosts-build-hadoop-cluster/">Dnsmasq</a></li>
<li><a href="/blog/2015/09/06/squid-http-proxy-server-install/">squid</a></li>
</ul>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jarsperreports生成PDF中文问题]]></title>
    <link href="http://winseliu.com/blog/2017/01/21/jarsperreports-pdf-chinese/"/>
    <updated>2017-01-21T12:06:31+08:00</updated>
    <id>http://winseliu.com/blog/2017/01/21/jarsperreports-pdf-chinese</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://blog.csdn.net/magicboylinw/article/details/8574202">JasperReport Studio生成PDF中文乱码的解决方案</a></li>
</ul>


<p>上个月弄JarsperReport报表，当时就有中文不能显示的问题。由于比较忙一直没有处理(能显示English基本能满足要求)，最近又遇到决定把它倒腾倒腾解决掉。</p>

<p>这里简单罗列下步骤，清楚怎么弄了其实非常简单。</p>

<ol>
<li>添加Jasperreport需要的字体（注意不是系统字体哦）： Window - Preferences - Jaspersoft Studio - Fonts - Add按钮</li>
<li>编辑弹出框Font Family：Family Name简单易记的就行（相当于唯一标识），添加Normal/Bold字体TTF的（微软雅黑是ttc的可以网上找工具转成ttf），PDF Details选择Identity-H、以及Embed this font in PDF document.</li>
<li>在报表jrxml中设置需要显示中文的文字字体为 <strong> 微软雅黑 </strong>（刚刚设置的名称），重新编译生成jasper文件。预览导出PDF已经可以正常显示中文了。</li>
<li><strong>导出字体为jar</strong>：回到Preferences字体配置页面，点击Export按钮把字体导出为jar。</li>
<li>把上面导出的jar放到应用的lib目录下。</li>
</ol>


<p>完成上面的步骤PDF就能展示中文了。</p>

<p>字体比较大，可以直接把jar加启动tomcat的classpath: Debug Configurations - Apache Tomcat - Classpath - User Entries 。</p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jasperreports使用小结]]></title>
    <link href="http://winseliu.com/blog/2016/12/01/jasperreports-brief-summary/"/>
    <updated>2016-12-01T12:04:32+08:00</updated>
    <id>http://winseliu.com/blog/2016/12/01/jasperreports-brief-summary</id>
    <content type="html"><![CDATA[<p>最近接了一个报表的任务，原来也有接触过，但是仅限于了解没有真正的动手画过。这里把从选型到最后成型一路下来遇到的问题整理下。</p>

<p>主要两个大问题：环境的搭建，以及子报表(嵌套报表)的配置。</p>

<h2>选择Jasperreports</h2>

<p>知道的有Birts、Pentaho、FineReport感觉其实都差不多，大家各自都取长补当更多。由于一穷二白的，没有弄过。网上找了和SpringMVC结合的都是Jasperreport的文章，就这么草率的定下来了。</p>

<p>基本的操作都类似，报表HelloWorld还是比较简单的。下载<a href="http://community.jaspersoft.com/project/jaspersoft-studio">jaspersoftstudio</a>最新版，然后了解各个区域的作用。</p>

<ul>
<li><a href="http://www.lai18.com/content/9047924.html">JasperReport入门</a></li>
<li><a href="http://blog.csdn.net/bryanliu1982/article/details/598176">JasperReport Tutorial（翻译）</a></li>
</ul>


<blockquote><p>一个完全的报表模板包括如下几个区域：title, pageHeader, columnHeader, groupHeader, detail, groupFooter, columnFoter, pageFooter, summary</p></blockquote>

<h2>整合SpringMVC</h2>

<p>原来做报表的同时都是直接连数据库的，过程中遇到各种问题。很多没法维护的事情发生：改个字段，数据库测试/生产链接等等。我这里直接选择通过JavaBean来传递数据。</p>

<ul>
<li>*<a href="http://blog.csdn.net/hwt_211/article/details/19904333">SpringMVC整合jasperreport做报表</a></li>
<li><a href="http://www.javacoder.cn/?p=188">Spring MVC中使用JasperReport</a></li>
<li><a href="http://zzc1684.iteye.com/blog/2189000">SpringMVC与iReport(JasperReports) 5.6整合开发实例</a></li>
</ul>


<p>贴代码之前先说PDF报表字体的问题，本来报表是加粗的，但是服务器生成浏览的时刻没有效果。发现还需要单独添加字体的包：<a href="http://stackoverflow.com/questions/25977427/bold-not-working-in-jaspersoft-studio-for-fonts-other-than-sans-serif">pdf - Bold not working in Jaspersoft Studio for fonts other than sans serif</a></p>

<pre><code>#maven
&lt;properties&gt;
        &lt;spring.version&gt;4.2.5.RELEASE&lt;/spring.version&gt;
...
        &lt;dependency&gt;
            &lt;groupId&gt;net.sf.jasperreports&lt;/groupId&gt;
            &lt;artifactId&gt;jasperreports&lt;/artifactId&gt;
            &lt;version&gt;6.3.1&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;net.sf.jasperreports&lt;/groupId&gt;
            &lt;artifactId&gt;jasperreports-fonts&lt;/artifactId&gt;
            &lt;version&gt;6.0.0&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.itextpdf&lt;/groupId&gt;
            &lt;artifactId&gt;itextpdf&lt;/artifactId&gt;
            &lt;version&gt;5.5.10&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.itextpdf&lt;/groupId&gt;
            &lt;artifactId&gt;itext-asian&lt;/artifactId&gt;
            &lt;version&gt;5.2.0&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.codehaus.groovy&lt;/groupId&gt;
            &lt;artifactId&gt;groovy-all&lt;/artifactId&gt;
            &lt;version&gt;2.4.7&lt;/version&gt;
        &lt;/dependency&gt;

# spring mvc xml
    &lt;bean id="viewResolver" class="org.springframework.web.servlet.view.ResourceBundleViewResolver"&gt;
        &lt;property name="order" value="0"&gt;&lt;/property&gt;
        &lt;property name="basename" value="views"&gt;&lt;/property&gt;
    &lt;/bean&gt;
    &lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
        &lt;property name="order" value="1"&gt;&lt;/property&gt;
        &lt;property name="viewClass"&gt;
            &lt;value&gt;org.springframework.web.servlet.view.JstlView&lt;/value&gt;
        &lt;/property&gt;
...

# views.properties
HELLO.(class)=org.springframework.web.servlet.view.jasperreports.JasperReportsPdfView 
HELLO.url=/WEB-INF/report/helloworld.jasper
HELLO.reportDataKey=datasource

# java Controller
@Controller
@RequestMapping("/report")
public class HelloReportController {

    @RequestMapping("/hello.pdf")
    public ModelAndView printExpress() {
        ModelAndView mv = new ModelAndView("HELLO");

        // 如果直接传对象bean不行，需要使用list传值
        List&lt;HelloWorldData&gt; list = new ArrayList&lt;&gt;();
        list.add(new HelloWorldData("jarperreport", "Hi"));

        mv.addObject("datasource", list);
        return mv;
    }
</code></pre>

<p>最后通过浏览器就能查看报表的PDF文件了。</p>

<p>前端所有的页面都是通过ajax来获取展示的，这里通过jquery-media.js来进行展示（生成内嵌的iframe），这也是上面的地址加上pdf后缀的原因。</p>

<p>```</p>

<h1>html</h1>

<div class="modal-body" style="max-height: 900px; padding: 10px;">
    <a class="media" href="${contextPath}${url}"></a>
</div>


<h1>jquery</h1>

<p>$(&lsquo;a.media&rsquo;, $modal).media({width:&ldquo;100%&rdquo;, height:600});
```</p>

<h2>子报表</h2>

<p>有一个结账的报表，既要展示汇总信息，还得把详情列表也输出出来。一开始的JavaBean：</p>

<pre><code>public class InvoiceData {
  private String roomNo;
  private List&lt;InvoiceDetailData&gt; details;
  ...
}
public class InvoiceDetailData {
  private String date;
  private String amount;
  ...
}
</code></pre>

<p>但是简单报表是一维的，不能展示list里面的内容。网上一堆资料都是简单的案例，涉及多维度的就Table、Crosstable、Subreport这几个控件。Table的样式调起来麻烦，数据也不知道怎么搞。子报表至少看起来合乎逻辑，操作起来也简单。画好图标以及把对应的字段对应好后，子报表的Datasource直接填 <code>$F{details}</code> 。</p>

<p>修改views.properties，写好controller后，启动竟然报<strong>找不到details子报表</strong>路径。根据文章修改如下：</p>

<ul>
<li>*<a href="http://docs.spring.io/autorepo/docs/spring-framework/3.0.0.M3/reference/html/ch17s07.html">Working with Sub-Reports</a></li>
<li><a href="https://www.tutorialspoint.com/jasper_reports/jasper_create_subreports.htm">Create SubReports</a></li>
<li>*<a href="http://it.zhaozhao.info/archives/5581">在 Spring MVC 3.1.2.RELEASE 产出 JasperReports 4.7.1 子报表（Subreport）</a></li>
</ul>


<pre><code># 主报表
# 类型必须加哦！
    &lt;parameter name="DetailSubReport" class="net.sf.jasperreports.engine.JasperReport"/&gt;
    ...
    &lt;subreport&gt;
        &lt;reportElement stretchType="RelativeToBandHeight" x="0" y="0" width="520" height="167" uuid="8d69d85b-4fcf-482a-836c-c1698ce42dcd"/&gt;
        &lt;dataSourceExpression&gt;&lt;![CDATA[$F{details}]]&gt;&lt;/dataSourceExpression&gt;
        &lt;subreportExpression&gt;&lt;![CDATA[$P{DetailSubReport}]]&gt;&lt;/subreportExpression&gt;
    &lt;/subreport&gt;

# views.properties
Invoice.(class)=org.springframework.web.servlet.view.jasperreports.JasperReportsPdfView 
Invoice.url=/WEB-INF/report/invoice.jasper
Invoice.reportDataKey=datasource
Invoice.subReportUrls=DetailSubReport=/WEB-INF/report/InvoiceDetail.jasper
</code></pre>

<p>罗马建成非一日之功，再次编译启动后，再次报错，这次的是<strong>类型错误</strong>。感觉正在慢慢向成功靠近。修改类型后最后启动展示搞定。</p>

<pre><code># javabean
public class InvoiceData {
    private JRDataSource details;

    public void setDetails(JRDataSource details) {
        this.details = details;
    }

    public void setDetails(List&lt;InvoiceDetailData&gt; details) {
        this.details = new JRBeanCollectionDataSource(details);
    }

# 主报表
    &lt;field name="details" class="net.sf.jasperreports.engine.JRDataSource"&gt;
        &lt;fieldDescription&gt;&lt;![CDATA[details]]&gt;&lt;/fieldDescription&gt;
    &lt;/field&gt;
</code></pre>

<p>&ndash;END</p>
]]></content>
  </entry>
  
</feed>
