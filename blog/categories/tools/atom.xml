<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tools | Winse Blog]]></title>
  <link href="http://winseliu.com/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://winseliu.com/"/>
  <updated>2015-03-08T11:29:34+08:00</updated>
  <id>http://winseliu.com/</id>
  <author>
    <name><![CDATA[Winse Liu]]></name>
    <email><![CDATA[winseliu@foxmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vmware共享目录]]></title>
    <link href="http://winseliu.com/blog/2015/03/07/vmware-sharefolder/"/>
    <updated>2015-03-07T22:25:52+08:00</updated>
    <id>http://winseliu.com/blog/2015/03/07/vmware-sharefolder</id>
    <content type="html"><![CDATA[<p>VMware提供了与主机共享目录的功能，可以在虚拟机访问宿主机器的文件。</p>

<ol>
<li>选择映射目录
 选择[Edit virtual machine settings]，在弹出的对话框中选择[Options]页签，选择[Shared Folders]，点击右边的[Add]按钮添加需要映射(maven)的本地目录。</li>
<li>安装VMware Tools

<ul>
<li>启动linux虚拟机，选择[VM]菜单，再选择[Install VMware Tools&hellip;]菜单。下载完成后，会自动通过cdrom加载到虚拟机。</li>
<li>登录linux虚拟机，执行以下命令：</li>
</ul>
</li>
</ol>


<pre><code>cd /mnt
mkdir cdrom
mount /dev/cdrom cdrom
cd cdrom/
mkdir ~/vmware
tar zxvf VMwareTools-9.2.0-799703.tar.gz -C ~/vmware

cd ~/vmware
cd vmware-tools-distrib/
./vmware-install.pl 
reboot

cd /mnt/hgfs/maven
</code></pre>

<p>当前的maven目录是映射到宿主的机器目录。</p>

<pre><code>[root@localhost maven]# ll -a
total 3
drwxrwxrwx. 1 root root    0 Dec 28  2012 .
dr-xr-xr-x. 1 root root 4192 Mar  7 22:41 ..
drwxrwxrwx. 1 root root    0 Dec 28  2012 .m2
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习btrace]]></title>
    <link href="http://winseliu.com/blog/2015/02/06/start-btrace/"/>
    <updated>2015-02-06T20:38:33+08:00</updated>
    <id>http://winseliu.com/blog/2015/02/06/start-btrace</id>
    <content type="html"><![CDATA[<p>到官网下载<a href="https://kenai.com/projects/btrace/downloads/directory/releases">btrace</a>，在btrace-bin.zip压缩包中包括了usersguide.html入门教程。源码用hg管理<a href="https://kenai.com/projects/btrace/sources/hg/show">点击下载</a>。</p>

<p>Btrace程序是一个普通的java类，由<strong>BTrace annotations</strong>标注的带有的<code>public static void</code>方法组成。从代码上面来看，类似于spring aop的写法。标注用于指定需要监控的位置（方法，类）。</p>

<p>Btrace程序是只读的，以及只能执行有限制的操作。一般的限制：</p>

<ul>
<li>不能创建新对象（new objects）</li>
<li>不能创建数组（new arrays）</li>
<li>不能抛出异常（throw）</li>
<li>不能捕获异常（catch）</li>
<li>不能调用实例/静态方法。仅仅能调用com.sun.btrace.BTraceUtils的static方法。</li>
<li>不能给被监测的程序的实例或者静态字段复制。但是Btrace程序可以给自己的类的静态字段复制。</li>
<li>不能有实例字段和方法。Btrace类中仅能包括static字段和<code>public static void</code>的方法。</li>
<li>不能有内部类，嵌套类（outer, inner, nested or local classes）</li>
<li>不能有同步块或同步方法</li>
<li>不能包括循环（for，while，do&hellip;while）</li>
<li>不能继承（父类只能是默认的java.lang.Object）</li>
<li>不能实现接口</li>
<li>不能包括assert语句</li>
<li>不能使用类常量</li>
</ul>


<h2>helloworld</h2>

<pre><code>// import all BTrace annotations
import com.sun.btrace.annotations.*;
// import statics from BTraceUtils class
import static com.sun.btrace.BTraceUtils.*;

// @BTrace annotation tells that this is a BTrace program
@BTrace
public class HelloWorld {

    // @OnMethod annotation tells where to probe.
    // In this example, we are interested in entry 
    // into the Thread.start() method. 
    @OnMethod(
        clazz="java.lang.Thread",
        method="start"
    )
    public static void func() {
        // println is defined in BTraceUtils
        // you can only call the static methods of BTraceUtils
        println("about to start a thread!");
    }
}
</code></pre>

<p>通过命令行脚本<code>btrace &lt;PID&gt; &lt;btrace-script&gt;</code>脚本运行。script可以是java源文件，或者已经编译好的class字节码文件。</p>

<p>btracec提供了类似于javac的功能，额外会对include的文件中定义的变量进行替换。如果你的btrace类就是一个普通功能的java类的话，直接用javac编译及可以了。</p>

<p>编写一个测试类，然后监控这个java程序的线程启动：</p>

<pre><code>public class HelloTest {

    @Test
    public void test() throws Exception {
        testNewThread();
    }

    public void testNewThread() throws InterruptedException {
        Thread.sleep(20 * 1000); // 最佳方式就是使用Scanner，手动输入一个操作后执行后面的操作。scanner.nextLine()

        for (int i = 0; i &lt; 100; i++) {
            final int index = i;
            new Thread(//
                    new Runnable() {
                        public void run() {
                            System.out.println("my order: " + index);
                        }
                    } //
            ).start();
        }
    }

}
</code></pre>

<p>然后，启动btrace程序：</p>

<pre><code>cd src\test\script

#下面的内容是一个批处理文件
set PATH=%PATH%;C:\cygwin\bin;C:\cygwin\usr\local\bin

set BTRACE_HOME=E:\local\opt\btrace-bin
set CUR_ROOT=%cd%\..\..\..
set SCRIPT=%CUR_ROOT%\src\main\java\com\github\winse\btrace\HelloWorld.java
set SCRIPT=%CUR_ROOT%\target\classes\com\github\winse\btrace\HelloWorld.class

jps -m  | findstr HelloTest | gawk '{print $1}' | xargs -I {} %BTRACE_HOME%\bin\btrace.bat {} %SCRIPT%
</code></pre>

<p>上面的主程序启动后sleep了20s，等btrace程序启动。如果是程序一启动就要进行监控记录，可vm的参数添加javaagent：</p>

<pre><code>-javaagent:E:\local\opt\btrace-bin\build\btrace-agent.jar=noServer=true,scriptOutputFile=C:\Temp\test.txt,script=F:\workspaces\cms_hadoop\btrace\target\classes\com\github\winse\btrace\HelloWorld.class
</code></pre>

<p>添加到eclipse的运行配置（Debug Configurations）参数（Arguments）的VM arguments输入框内。</p>

<p>启动主程序，就可以在C:\Temp\test.txt文件看到btrace程序输出的内容了。</p>

<h2>注解</h2>

<ul>
<li>参数</li>
</ul>


<p>@Self获取this对象
@Return用于获取方法的返回值对象
@TargetInstance和@TargetMethodOrField用来查看被监控的方法内部调用那些实例的方法
@ProbeClassName和@ProbeMethodName用来检测获取当前被监控实例和方法（在OnMethod中使用通配符时，查看到底有那些方法被调用）</p>

<ul>
<li>方法</li>
</ul>


<p>@OnMethod
@OnTimer
@OnError
@OnExist
@OnLowMemory
@OnEvent
@OnProbe</p>

<h2>源码</h2>

<ul>
<li><a href="https://github.com/winse/helloJ/tree/hello/btrace">https://github.com/winse/helloJ/tree/hello/btrace</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows Gif]]></title>
    <link href="http://winseliu.com/blog/2015/02/04/windows-gif/"/>
    <updated>2015-02-04T15:18:20+08:00</updated>
    <id>http://winseliu.com/blog/2015/02/04/windows-gif</id>
    <content type="html"><![CDATA[<p>看到linux上各种录制gif的工具：</p>

<pre><code>yum install byzanz

byzanz-record -d 10 -x 0 -y 0 -w 1363 -h 758 byzanz-demo.gif
</code></pre>

<p>还有各种包装的工具：<a href="https://github.com/KeyboardFire/mkcast">mkcast</a></p>

<p>本来想在cygwin中安装byzanz，但是编译需要各种库，最终放弃了。</p>

<p>其实在windows下面，也有很好的gif录制的工具：<a href="http://www.cockos.com/licecap/">LICEcap</a></p>

<p><img src="/images/blogs/gif-capture-helloworld.gif" alt="" /></p>

<h2>参考</h2>

<ul>
<li><a href="http://v2ex.com/t/139035">windows 下有没有什么录制 gif 截屏质量较好的软件可推荐?</a></li>
<li><a href="http://v5b7.com/other/ubuntu_byzanz.html">Ubuntu录制GIF图</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql分区]]></title>
    <link href="http://winseliu.com/blog/2014/11/14/mysql-partition/"/>
    <updated>2014-11-14T15:05:50+08:00</updated>
    <id>http://winseliu.com/blog/2014/11/14/mysql-partition</id>
    <content type="html"><![CDATA[<p>Windows8 Mysql安装后数据默认放在<code>C:\ProgramData\MySQL\MySQL Server 5.6\data</code>下。</p>

<blockquote><p>2、MyISAM数据库表文件：
.MYD文件：即MY Data，表数据文件
.MYI文件：即MY Index，索引文件
.log文件：日志文件</p>

<p>3、InnoDB采用表空间（tablespace）来管理数据，存储表数据和索引，
InnoDB数据库文件（即InnoDB文件集，ib-file set）：
  ibdata1、ibdata2等：系统表空间文件，存储InnoDB系统信息和用户数据库表数据和索引，所有表共用
  .ibd文件：单表表空间文件，每个表使用一个表空间文件（file per table），存放用户数据库表数据和索引
  日志文件： ib_logfile1、ib_logfile2</p></blockquote>

<pre><code>create database hello;
use hello;
create table abc ( name varchar(1000), age int );
insert into abc values ("1", 1);

create table abc_myisam ( name varchar(100), age int ) engine=myisam;
insert into abc_myisam values ( '1', 1), ('2',2);
alter table abc_myisam partition by hash(age) partitions 4 ;

insert into abc_myisam values ( '11', 10), ('2',20), ( '1', 11), ('2',21), ( '1', 21), ('2',22), ( '1', 31), ('2',32), ( '1', 41), ('2',24), ( '1', 15), ('2',23) ;
</code></pre>

<p>最终库目录如下:</p>

<p><img src="http://file.bmob.cn/M00/D2/16/oYYBAFRlrMaAAAdoAADDsNJhdNs617.png" alt="" /></p>

<p>根据月份来进行分区：</p>

<pre><code>--最好按照月份分区(date需要为日期类型)
alter table abc_myisam PARTITION BY RANGE (extract(YEAR_MONTH from date)) (  
    PARTITION p410 VALUES LESS THAN (201411),  
    PARTITION p411 VALUES LESS THAN (201412),  
    PARTITION p412 VALUES LESS THAN (201501),  
    PARTITION p501 VALUES LESS THAN (201502), 
    PARTITION p502 VALUES LESS THAN (201503), 
    PARTITION p503 VALUES LESS THAN (201504), 
    PARTITION p504 VALUES LESS THAN (201505), 
    PARTITION p505 VALUES LESS THAN (201506), 
    PARTITION p0 VALUES LESS THAN MAXVALUE  
)
</code></pre>

<p>根据日期来分区：</p>

<pre><code>alter table t_dta_activeresources_ip PARTITION BY RANGE (to_days(day)) (  
    PARTITION p0 VALUES LESS THAN (735926),  
PARTITION p141124 VALUES LESS THAN (735927),
PARTITION p141125 VALUES LESS THAN (735928),
PARTITION p141126 VALUES LESS THAN (735929),
PARTITION p88 VALUES LESS THAN MAXVALUE  
)
</code></pre>

<p>查询时执行计划带上partitions可以查看命中的是那个分区：</p>

<pre><code>mysql&gt; explain select * from t_dta_illegalweb where day='2015-01-04';
+----+-------------+------------------+------+---------------+------+---------+------+---------+-------------+
| id | select_type | table            | type | possible_keys | key  | key_len | ref  | rows    | Extra       |
+----+-------------+------------------+------+---------------+------+---------+------+---------+-------------+
|  1 | SIMPLE      | t_dta_illegalweb | ALL  | NULL          | NULL | NULL    | NULL | 1335432 | Using where |
+----+-------------+------------------+------+---------------+------+---------+------+---------+-------------+
1 row in set

mysql&gt; explain partitions
 select * from t_dta_illegalweb where day='2015-01-04';
+----+-------------+------------------+------------+------+---------------+------+---------+------+---------+-------------+
| id | select_type | table            | partitions | type | possible_keys | key  | key_len | ref  | rows    | Extra       |
+----+-------------+------------------+------------+------+---------------+------+---------+------+---------+-------------+
|  1 | SIMPLE      | t_dta_illegalweb | p150104    | ALL  | NULL          | NULL | NULL    | NULL | 1335432 | Using where |
+----+-------------+------------------+------------+------+---------------+------+---------+------+---------+-------------+
1 row in set
</code></pre>

<p>如果清理掉分区的数据后，再查看执行计划：</p>

<pre><code>mysql&gt; alter table t_dta_illegalweb truncate partition p150104;
Query OK, 0 rows affected

mysql&gt; explain partitions select * from t_dta_illegalweb where day='2015-01-04';
+----+-------------+-------+------------+------+---------------+------+---------+------+------+-----------------------------------------------------+
| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | Extra                                               |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+-----------------------------------------------------+
|  1 | SIMPLE      | NULL  | NULL       | NULL | NULL          | NULL | NULL    | NULL | NULL | Impossible WHERE noticed after reading const tables |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+-----------------------------------------------------+
1 row in set
</code></pre>

<h2>打开日志开关</h2>

<p>默认mysql是没有打开记录一般日志的开关的，可以通过命令行修改参数。对于查看具体执行了那些sql语句，调试很有帮助。</p>

<pre><code>mysql&gt; set global general_log = 1;
Query OK, 0 rows affected

mysql&gt; SHOW  GLOBAL VARIABLES LIKE '%log%';
</code></pre>

<h2>参考</h2>

<ul>
<li><a href="http://blog.csdn.net/yaotinging/article/details/6671506">MySQL数据文件介绍及存放位置</a></li>
<li><a href="http://lehsyh.iteye.com/blog/732719">MySQL的表分区</a></li>
<li><a href="http://lobert.iteye.com/blog/1955841">http://lobert.iteye.com/blog/1955841</a></li>
<li><a href="http://blog.csdn.net/jiao_fuyou/article/details/14214213">http://blog.csdn.net/jiao_fuyou/article/details/14214213</a></li>
<li><a href="http://database.51cto.com/art/201002/184392.htm">http://database.51cto.com/art/201002/184392.htm</a></li>
<li><a href="http://dev.mysql.com/doc/refman/5.5/en/error-log.html">mysql不重启清理日志</a></li>
<li><a href="http://pangge.blog.51cto.com/6013757/1319304">http://pangge.blog.51cto.com/6013757/1319304</a></li>
<li><a href="http://bbs.csdn.net/topics/70096519">http://bbs.csdn.net/topics/70096519</a></li>
<li><a href="http://bbs.csdn.net/topics/350138520">http://bbs.csdn.net/topics/350138520</a></li>
<li><a href="http://www.iteye.com/topic/408701">http://www.iteye.com/topic/408701</a></li>
<li><a href="http://www.blogjava.net/allrounder/articles/323591.html">http://www.blogjava.net/allrounder/articles/323591.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx配置静态站点服务]]></title>
    <link href="http://winseliu.com/blog/2014/11/13/nginx-serving-static-content/"/>
    <updated>2014-11-13T10:16:17+08:00</updated>
    <id>http://winseliu.com/blog/2014/11/13/nginx-serving-static-content</id>
    <content type="html"><![CDATA[<p>配置nginx作为网页快照的服务，需要理解好配置<code>root</code>的涵义！</p>

<p>首先安装，然后修改配置：</p>

<pre><code>yum install nginx 

less /etc/nginx/nginx.conf
less /etc/nginx/conf.d/default.conf 

service nginx restart
</code></pre>

<p>实际操作中没有root，只能自己编译了：</p>

<pre><code>下载nginx，pcre-8.36.zip，zlib-1.2.3.tar.gz解压到src下。
cd nginx-1.7.7
./configure --prefix=/home/omc/tools/nginx --with-pcre=src/pcre --with-zlib=src/zlib

cd /home/omc/tools/nginx
vi conf/nginx.conf # 修改listen的端口，80要root才能起
sbin/nginx
sbin/nginx -s reload
</code></pre>

<p>如果编译的目录和真正存放程序的路径不一致时，可以使用<code>-p</code>参数来指定。</p>

<pre><code>cd nginx
sbin/nginx -p $PWD
sbin/nginx -s reload -p $PWD
</code></pre>

<p>下面具体说说配置的涵义：</p>

<ul>
<li>root（不管在那个配置节点下）位置都对应 请求的根路径。</li>
</ul>


<pre><code>    location /static {
        root  /usr/share/static/html;
        autoindex on;
    }

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }
</code></pre>

<ul>
<li>location的<code>/static</code>对应的是访问目录<code>/usr/share/static/html/static</code>下的内容，请求<code>/static/hello.html</code>对应到<code>/usr/share/static/html/static/hello.html</code>。也就是说节点下的root目录 对应 的是 访问地址的<code>/</code>。</li>
<li>autoindex可以用于list列出目录内容。</li>
</ul>


<p><img src="http://file.bmob.cn/M00/05/49/ooYBAFRkHkmAe3wcAACCDsZ0Oc8983.png" alt="" /></p>

<p>配置了两个路径后，问题来了：如果<code>/usr/share/nginx/html/</code>也有目录static，那nginx会访问谁？<strong>nginx来先匹配配置，访问/static定位到<code>/usr/share/static/html</code></strong>。</p>

<pre><code>    location /static {
        root  /usr/share/static/html;
        try_files $uri /static/404.html;
    }
</code></pre>

<ul>
<li>try_files可以设置默认页面，如<code>/usr/share/static/html/static</code>目录下不存在abc.html，那么会内部重定向到<code>/static/404.html</code>。这里路径要<code>/static</code>下面。</li>
</ul>


<p>try_files还可以返回状态值，跳转到对应状态的页面：</p>

<pre><code>location / {
    try_files $uri $uri/ $uri.html =404;
}
</code></pre>

<p><img src="http://file.bmob.cn/M00/D1/D0/oYYBAFRkJ6eAc8UiAAEKid3ICHw052.png" alt="" /></p>

<p>如果try_files的所给出的地址不包括<code>$uri</code>时，请求会被重定向配置指向的新代理服务：</p>

<pre><code>location / {
    try_files $uri $uri/ @backend;
}

location @backend {
    proxy_pass http://backend.example.com;
}
</code></pre>

<h2>实践</h2>

<p>在实际操作遇到的不能访问的问题，配置本机的其他JavaWeb应用，但是在登录后，点其他链接总是跳转到登陆页。可以查看下真正请求的地址。</p>

<pre><code>    location /omc {
            proxy_pass http://REAL-IP:9000/omc;
            #proxy_pass http://localhost:9000/omc;
    }
</code></pre>

<p>填写localhost不能访问，但是填具体的外网IP时是可以访问的。查看后，在页面定义了<code>&lt;base href="${basedir}/&gt;</code>导致请求都跳转到localhost了。在客户端肯定就访问失败了。这个需要特别注意下。</p>

<p><img src="http://file.bmob.cn/M00/05/C3/ooYBAFRpn1qAKNKiAACUae7DmjY717.png" alt="" /></p>

<p>在特定的情况下，文件不一定是html后缀的（如：txt），如果要在浏览器解析html，需要配置content-type标题头。同时访问的url和真实存放的文件的路径有出处时，可以通过rewrite指令来进行适配。</p>

<pre><code>    server {
        ...
        location /snapshot {
            root   /home/ud/html-snapshot;
            add_header content-type "text/html";
            rewrite ^/snapshot/.*/(.*)$  /snapshot/$1   last;
            try_files $uri $uri.html $uri.htm =404;
        }
</code></pre>

<h2>参考</h2>

<ul>
<li><a href="http://nginx.com/resources/admin-guide/serving-static-content/">Serving Static Content</a></li>
<li><a href="http://nginx.com/resources/admin-guide/web-server/">NGINX Web Server</a></li>
<li><a href="http://www.cnblogs.com/cgli/archive/2011/05/16/2047920.html">nginx rewrite规则</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
