<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tools | Winse Blog]]></title>
  <link href="http://winseliu.com/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://winseliu.com/"/>
  <updated>2015-09-10T20:16:19+08:00</updated>
  <id>http://winseliu.com/</id>
  <author>
    <name><![CDATA[Winse Liu]]></name>
    <email><![CDATA[winseliu@foxmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[安装http代理服务器squid]]></title>
    <link href="http://winseliu.com/blog/2015/09/06/squid-http-proxy-server-install/"/>
    <updated>2015-09-06T23:22:50+08:00</updated>
    <id>http://winseliu.com/blog/2015/09/06/squid-http-proxy-server-install</id>
    <content type="html"><![CDATA[<h2>环境说明</h2>

<ul>
<li>squid-3.3.14.tar.gz</li>
<li>centos6.6</li>
</ul>


<h2>安装</h2>

<pre><code>yum install gcc gcc-c++
cd squid-3.3.14
./configure
make
make install

cd /usr/local/squid
#不修改会有权限的问题
chmod 777 var/logs
sbin/squid 
sbin/squid -k shutdown
</code></pre>

<h2>使用</h2>

<p>在浏览器中设置Http代理。端口为3128</p>

<h2>参考</h2>

<ul>
<li><a href="ftp://ftp.cuhk.edu.hk/pub/packages/info-systems/www/squid/">ftp://ftp.cuhk.edu.hk/pub/packages/info-systems/www/squid/</a></li>
<li><a href="http://www.educity.cn/linux/517165.html">http://www.educity.cn/linux/517165.html</a></li>
<li><a href="http://www.ajaxstu.com/Proxyfuwuqi/283731.html">http://www.ajaxstu.com/Proxyfuwuqi/283731.html</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_537b9caa010185xo.html">http://blog.sina.com.cn/s/blog_537b9caa010185xo.html</a></li>
<li><a href="http://blog.163.com/sword_111/blog/static/6658941620114163458435/">http://blog.163.com/sword_111/blog/static/6658941620114163458435/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[手动安装supervisor]]></title>
    <link href="http://winseliu.com/blog/2015/08/24/manual-install-supervisor/"/>
    <updated>2015-08-24T16:24:25+08:00</updated>
    <id>http://winseliu.com/blog/2015/08/24/manual-install-supervisor</id>
    <content type="html"><![CDATA[<h2>下载依赖以及安装包，并安装</h2>

<pre><code>python -V

tar zxvf setuptools-18.2.tar.gz 
cd setuptools-18.2
python setup.py install

tar zxvf meld3-0.6.5.tar.gz 
cd meld3-0.6.5
python setup.py install

tar zxvf elementtree-1.2.6-20050316.tar.gz 
cd elementtree-1.2.6-20050316
python setup.py install

tar zxvf supervisor-3.1.3.tar.gz 
cd supervisor-3.1.3
python setup.py  install
</code></pre>

<h2>配置启动</h2>

<pre><code>[root@master supervisor-3.1.3]# echo_supervisord_conf &gt;/etc/supervisord.conf
[root@master supervisor-3.1.3]# supervisord

[root@master supervisor-3.1.3]# ps aux | grep supervisor | grep -v grep
root      6123  0.0  0.7 207292 13296 ?        Ss   08:15   0:00 /usr/bin/python /usr/bin/supervisord

[root@master supervisor-3.1.3]# supervisorctl shutdown
Shut down
</code></pre>

<h2>参考</h2>

<ul>
<li><a href="http://supervisord.org/installing.html#installing-to-a-system-without-internet-access">http://supervisord.org/installing.html#installing-to-a-system-without-internet-access</a></li>
<li><a href="http://supervisord.org/configuration.html#programx-section">http://supervisord.org/configuration.html#programx-section</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logstash Elasticsearch Kibana日志采集查询系统搭建]]></title>
    <link href="http://winseliu.com/blog/2015/08/21/logstash-elasticsearch-kibana-startguide/"/>
    <updated>2015-08-21T14:42:30+08:00</updated>
    <id>http://winseliu.com/blog/2015/08/21/logstash-elasticsearch-kibana-startguide</id>
    <content type="html"><![CDATA[<h2>软件版本</h2>

<pre><code>[root@master opt]# ll
total 20
drwxr-xr-x 7 root root 4096 Aug 21 01:23 elasticsearch-1.7.1
drwxr-xr-x 8 uucp  143 4096 Mar 18  2014 jdk1.8.0_05
drwxrwxr-x 7 1000 1000 4096 Aug 21 01:09 kibana-4.1.1-linux-x64
drwxr-xr-x 5 root root 4096 Aug 21 05:58 logstash-1.5.3
drwxrwxr-x 6 root root 4096 Aug 21 06:44 redis-3.0.3
</code></pre>

<h2>安装运行脚本</h2>

<pre><code># java
vi /etc/profile
source /etc/profile

cd /opt/elasticsearch-1.7.1
bin/elasticsearch -p elasticsearch.pid -d

curl localhost:9200/_cluster/nodes/172.17.0.4

cd /opt/kibana-4.1.1-linux-x64/
bin/kibana 
# http://master:5601

cd /opt/redis-3.0.3
yum install gcc
yum install bzip2
make MALLOC=jemalloc

# 也可以修改配置的daemon属性
nohup src/redis-server &amp; 

cd /opt/logstash-1.5.3/
bin/logstash -e 'input { stdin { } } output { stdout {} }'

vi index.conf
vi agent.conf

# agent可不加
bin/logstash agent -f agent.conf &amp;
bin/logstash agent -f index.conf &amp;
</code></pre>

<h2>logstash配置</h2>

<p>由于程序都运行在一台机器(localhost)，redis、elasticsearch和kibana都使用默认配置。下面贴的是logstash的采集和过滤的配置：</p>

<p>(kibaba的配置config/kibana.yml, elasticsearch的配置config/elasticsearch.yml)</p>

<pre><code>[root@master logstash-1.5.3]# cat agent.conf 
input {
  file {
    path =&gt; "/var/log/yum.log"
    start_position =&gt; beginning
  }
}

output {
  redis {
    key =&gt; "logstash.redis"
    data_type =&gt; list
  }

  # 便于查看调试
  stdout { }
}

[root@master logstash-1.5.3]# cat index.conf 
input {
  redis {
    data_type =&gt; list
    key =&gt; "logstash.redis"
  }
}

output {
  elasticsearch {
    host =&gt; "localhost"
  }
}
</code></pre>

<p>注意要改动下被采集的原始文件！！然后启动相应的程序，打开浏览器<a href="http://master:5601">http://master:5601</a>配置一下索引项，就可以查看了。</p>

<p>至于input/output/filter(map,reduce)怎么配置，查看官方文档<a href="https://www.elastic.co/guide/en/logstash/current/filter-plugins.html">filter-plugins</a></p>

<h2>filter</h2>

<pre><code>[hadoop@cu1 logstash-1.5.3]$ bin/logstash -e "
input {
stdin {}
}

filter {
grok { 
match =&gt; {\"message\" =&gt; \"%{WORD:content}\"}
add_field =&gt; { \"foo_%{content}\" =&gt; \"helloworld\" }
}
}

output {
stdout { codec =&gt; json }
}
"

abc
{"message":"abc","@version":"1","@timestamp":"2015-09-10T08:02:52.024Z","host":"cu1","content":"abc","foo_abc":"helloworld"}
</code></pre>

<p>grok-pattern文件的位置：</p>

<pre><code>[hadoop@cu2 logstash-1.5.3]$ less ./vendor/bundle/jruby/1.9/gems/logstash-patterns-core-0.1.10/patterns/grok-patterns 

2015-09-06 15:23:53,027 INFO org.apache.hadoop.hdfs.server.namenode.FSNamesystem: No KeyProvider found.
%{TIMESTAMP_ISO8601:time} %{LOGLEVEL:loglevel} %{GREEDYDATA:content}

[2015-09-10 08:00:46,539][INFO ][cluster.metadata         ] [Jumbo Carnation] [logstash-2015.09.10] update_mapping [hbase-logs] (dynamic)
\[%{TIMESTAMP_ISO8601:time}\]\[%{LOGLEVEL:loglevel}%{SPACE}\]%{GREEDYDATA:content}
</code></pre>

<h2>学习</h2>

<p>过滤DEBUG/INFO日志</p>

<pre><code>[hadoop@cu1 logstash-1.5.3]$ bin/logstash -e "
 input {
 stdin {}
 }

 filter {
 grok {
 match =&gt; { \"message\" =&gt; \"%{TIMESTAMP_ISO8601:time} %{LOGLEVEL:loglevel} %{GREEDYDATA:content}\" }
 }

 if [loglevel] == \"INFO\" { drop {} }
 }

 output {
 stdout {}
 }

 "
</code></pre>

<p>用shell先预处理</p>

<pre><code>input {
    stdin {
        type =&gt; "nginx"
        format =&gt; "json_event"
    }
} 
output {
    amqp {
        type =&gt; "nginx"
        host =&gt; "10.10.10.10"
        key  =&gt; "cdn"
        name =&gt; "logstash"
        exchange_type =&gt; "direct"
    }
}

#!/bin/sh
      tail -F /data/nginx/logs/access.json \
    | sed 's/upstreamtime":-/upstreamtime":0/' \
    | /usr/local/logstash/bin/logstash -f /usr/local/logstash/etc/agent.conf &amp;
</code></pre>

<h2>参考</h2>

<ul>
<li><a href="http://www.cnblogs.com/buzzlight/p/logstash_elasticsearch_kibana_log.html">http://www.cnblogs.com/buzzlight/p/logstash_elasticsearch_kibana_log.html</a></li>
<li><a href="http://www.cnblogs.com/ibook360/archive/2013/03/15/2961428.html">http://www.cnblogs.com/ibook360/archive/2013/03/15/2961428.html</a></li>
<li><a href="https://www.elastic.co/guide/en/logstash/current/index.html">https://www.elastic.co/guide/en/logstash/current/index.html</a></li>
<li><a href="https://www.elastic.co/guide/en/logstash/current/first-event.html">https://www.elastic.co/guide/en/logstash/current/first-event.html</a></li>
<li><a href="https://www.elastic.co/guide/en/logstash/current/working-with-plugins.html">https://www.elastic.co/guide/en/logstash/current/working-with-plugins.html</a></li>
<li><a href="https://www.elastic.co/guide/en/logstash/current/advanced-pipeline.html">https://www.elastic.co/guide/en/logstash/current/advanced-pipeline.html</a></li>
<li><p><a href="https://www.elastic.co/guide/en/logstash/current/codec-plugins.html">https://www.elastic.co/guide/en/logstash/current/codec-plugins.html</a></p></li>
<li><p><a href="http://blog.csdn.net/yeasy/article/details/45332493">http://blog.csdn.net/yeasy/article/details/45332493</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用RamDisk来优化系统]]></title>
    <link href="http://winseliu.com/blog/2015/04/12/optimize-system-ramdisk/"/>
    <updated>2015-04-12T16:56:09+08:00</updated>
    <id>http://winseliu.com/blog/2015/04/12/optimize-system-ramdisk</id>
    <content type="html"><![CDATA[<p>最近加了一条8G的内存，总共16G。暂时来说很难全部用起来。如果能够实现类似linux的shm分区的话，那就完美了，把临时的数据全部放到这个内存分区中。最好是免费的，通过一阵折腾搜索，整理如下：</p>

<p>去到官网<a href="http://www.ltr-data.se/opencode.html/#ImDisk">http://www.ltr-data.se/opencode.html/#ImDisk</a>直接下载<code>ImDisk Toolkit</code><a href="http://reboot.pro/files/file/284-imdisk-toolkit/">http://reboot.pro/files/file/284-imdisk-toolkit/</a>，toolkit里面已经集成了ImDisk软件。（新版本的toolkit可以节省很多事情，参考最后的两个链接看看即可）</p>

<p>配置：填写大小<code>5</code>、盘符<code>S</code>、磁盘格式<code>NTFS</code>，然后点击【确定】格式化磁盘，然后就可以使用了。</p>

<p><img src="/images/blogs/ramdisk-config.png" alt="" /></p>

<p>把临时的文件目录指定到ramdisk，重启系统。</p>

<p><img src="/images/blogs/ramdisk-temp.png" alt="" /></p>

<p>上面仅仅是把用户和系统的临时目录移到<strong>内存盘</strong>中。由于rar，java一些软件都是用用户的临时目录，已经可以体验到加速的快感了！！直接拖拽解压rar情况下速度明显快了很多。</p>

<p></p>

<p>还有一个问题，重启后，内存盘的数据会被全部清掉。默认情况下只建立了Temp目录，没有我们指定的Cache目录。Chrome启动的时刻如果发现Cache目录为不可用状态会重建该目录。</p>

<p>在Advanced页签，<strong>Load Content from Image File or Folder</strong>选项可以选择初始化加载的内容。我们只要先把目录结构建立后，然后在初始化后加载该路径一切都解决了。</p>

<pre><code>E:\local\home\RamDiskInit&gt;find .
.
./Temp
./Temp/Chrome
./Temp/Chrome/Cache
</code></pre>

<p>然后在<code>RamDisk Config</code>的Advanced页签选择<strong>E:\local\home\RamDiskInit</strong>作为<strong>Load Content</strong>即可。</p>

<h2>参考</h2>

<ul>
<li><a href="http://zohead.com/archives/rsync-performance-linux-cygwin-msys/">http://zohead.com/archives/rsync-performance-linux-cygwin-msys/</a> 从这里看到ramdisk-imdisk</li>
<li><a href="http://www.appinn.com/imdisk/">http://www.appinn.com/imdisk/</a> 安装简单使用，以及两篇核心文章的链接</li>
<li><a href="http://www.ltr-data.se/opencode.html/#ImDisk">http://www.ltr-data.se/opencode.html/#ImDisk</a></li>
<li><a href="http://www.kenming.idv.tw/super_lighweight_ramdisk_imdisk_setup#more-1995">超小巧效能强悍的穷人版 Ramdisk－ImDisk (设定篇) </a></li>
<li><a href="http://www.mobile01.com/topicdetail.php?f=300&amp;t=2200352">Win7 x64 下使用 ImDisk 当作RamDisk的小小心得与改良方法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VMware共享目录]]></title>
    <link href="http://winseliu.com/blog/2015/03/07/vmware-sharefolder/"/>
    <updated>2015-03-07T22:25:52+08:00</updated>
    <id>http://winseliu.com/blog/2015/03/07/vmware-sharefolder</id>
    <content type="html"><![CDATA[<p>VMware提供了与主机共享目录的功能，可以在虚拟机访问宿主机器的文件。</p>

<ol>
<li>选择映射目录
 选择[Edit virtual machine settings]，在弹出的对话框中选择[Options]页签，选择[Shared Folders]，点击右边的[Add]按钮添加需要映射(maven)的本地目录。</li>
<li>安装VMware Tools

<ul>
<li>启动linux虚拟机，选择[VM]菜单，再选择[Install VMware Tools&hellip;]菜单。下载完成后，会自动通过cdrom加载到虚拟机。</li>
<li>登录linux虚拟机，执行以下命令：</li>
</ul>
</li>
</ol>


<pre><code>cd /mnt
mkdir cdrom
mount /dev/cdrom cdrom
cd cdrom/
mkdir ~/vmware
tar zxvf VMwareTools-9.2.0-799703.tar.gz -C ~/vmware

cd ~/vmware
cd vmware-tools-distrib/
./vmware-install.pl 
reboot

cd /mnt/hgfs/maven
</code></pre>

<p>当前的maven目录是映射到宿主的机器目录。</p>

<pre><code>[root@localhost maven]# ll -a
total 3
drwxrwxrwx. 1 root root    0 Dec 28  2012 .
dr-xr-xr-x. 1 root root 4192 Mar  7 22:41 ..
drwxrwxrwx. 1 root root    0 Dec 28  2012 .m2
</code></pre>
]]></content>
  </entry>
  
</feed>
