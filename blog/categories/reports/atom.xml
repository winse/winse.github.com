<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: #reports | Winse Blog]]></title>
  <link href="http://winse.github.io/blog/categories/reports/atom.xml" rel="self"/>
  <link href="http://winse.github.io/"/>
  <updated>2024-01-16T13:54:48+08:00</updated>
  <id>http://winse.github.io/</id>
  <author>
    <name><![CDATA[Winse Liu]]></name>
    <email><![CDATA[winseliu@foxmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jarsperreports生成PDF中文问题]]></title>
    <link href="http://winse.github.io/blog/2017/01/21/jarsperreports-pdf-chinese/"/>
    <updated>2017-01-21T12:06:31+08:00</updated>
    <id>http://winse.github.io/blog/2017/01/21/jarsperreports-pdf-chinese</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://blog.csdn.net/magicboylinw/article/details/8574202">JasperReport Studio生成PDF中文乱码的解决方案</a></li>
</ul>


<p>上个月弄JarsperReport报表，当时就有中文不能显示的问题。由于比较忙一直没有处理(能显示English基本能满足要求)，最近又遇到决定把它倒腾倒腾解决掉。</p>

<p>这里简单罗列下步骤，清楚怎么弄了其实非常简单。</p>

<ol>
<li>添加Jasperreport需要的字体（注意不是系统字体哦）： Window - Preferences - Jaspersoft Studio - Fonts - Add按钮</li>
<li>编辑弹出框Font Family：Family Name简单易记的就行（相当于唯一标识），添加Normal/Bold字体TTF的（微软雅黑是ttc的可以网上找工具转成ttf），PDF Details选择Identity-H、以及Embed this font in PDF document.</li>
<li>在报表jrxml中设置需要显示中文的文字字体为 <strong> 微软雅黑 </strong>（刚刚设置的名称），重新编译生成jasper文件。预览导出PDF已经可以正常显示中文了。</li>
<li><strong>导出字体为jar</strong>：回到Preferences字体配置页面，点击Export按钮把字体导出为jar。</li>
<li>把上面导出的jar放到应用的lib目录下。</li>
</ol>


<p>完成上面的步骤PDF就能展示中文了。</p>

<p>字体比较大，可以直接把jar加启动tomcat的classpath: Debug Configurations - Apache Tomcat - Classpath - User Entries 。</p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jasperreports使用小结]]></title>
    <link href="http://winse.github.io/blog/2016/12/01/jasperreports-brief-summary/"/>
    <updated>2016-12-01T12:04:32+08:00</updated>
    <id>http://winse.github.io/blog/2016/12/01/jasperreports-brief-summary</id>
    <content type="html"><![CDATA[<p>最近接了一个报表的任务，原来也有接触过，但是仅限于了解没有真正的动手画过。这里把从选型到最后成型一路下来遇到的问题整理下。</p>

<p>主要两个大问题：环境的搭建，以及子报表(嵌套报表)的配置。</p>

<h2>选择Jasperreports</h2>

<p>知道的有Birts、Pentaho、FineReport感觉其实都差不多，大家各自都取长补当更多。由于一穷二白的，没有弄过。网上找了和SpringMVC结合的都是Jasperreport的文章，就这么草率的定下来了。</p>

<p>基本的操作都类似，报表HelloWorld还是比较简单的。下载<a href="http://community.jaspersoft.com/project/jaspersoft-studio">jaspersoftstudio</a>最新版，然后了解各个区域的作用。</p>

<ul>
<li><a href="http://www.lai18.com/content/9047924.html">JasperReport入门</a></li>
<li><a href="http://blog.csdn.net/bryanliu1982/article/details/598176">JasperReport Tutorial（翻译）</a></li>
</ul>


<blockquote><p>一个完全的报表模板包括如下几个区域：title, pageHeader, columnHeader, groupHeader, detail, groupFooter, columnFoter, pageFooter, summary</p></blockquote>

<h2>整合SpringMVC</h2>

<p>原来做报表的同时都是直接连数据库的，过程中遇到各种问题。很多没法维护的事情发生：改个字段，数据库测试/生产链接等等。我这里直接选择通过JavaBean来传递数据。</p>

<ul>
<li>*<a href="http://blog.csdn.net/hwt_211/article/details/19904333">SpringMVC整合jasperreport做报表</a></li>
<li><a href="http://www.javacoder.cn/?p=188">Spring MVC中使用JasperReport</a></li>
<li><a href="http://zzc1684.iteye.com/blog/2189000">SpringMVC与iReport(JasperReports) 5.6整合开发实例</a></li>
</ul>


<p>贴代码之前先说PDF报表字体的问题，本来报表是加粗的，但是服务器生成浏览的时刻没有效果。发现还需要单独添加字体的包：<a href="http://stackoverflow.com/questions/25977427/bold-not-working-in-jaspersoft-studio-for-fonts-other-than-sans-serif">pdf - Bold not working in Jaspersoft Studio for fonts other than sans serif</a></p>

<pre><code>#maven
&lt;properties&gt;
        &lt;spring.version&gt;4.2.5.RELEASE&lt;/spring.version&gt;
...
        &lt;dependency&gt;
            &lt;groupId&gt;net.sf.jasperreports&lt;/groupId&gt;
            &lt;artifactId&gt;jasperreports&lt;/artifactId&gt;
            &lt;version&gt;6.3.1&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;net.sf.jasperreports&lt;/groupId&gt;
            &lt;artifactId&gt;jasperreports-fonts&lt;/artifactId&gt;
            &lt;version&gt;6.0.0&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.itextpdf&lt;/groupId&gt;
            &lt;artifactId&gt;itextpdf&lt;/artifactId&gt;
            &lt;version&gt;5.5.10&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.itextpdf&lt;/groupId&gt;
            &lt;artifactId&gt;itext-asian&lt;/artifactId&gt;
            &lt;version&gt;5.2.0&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.codehaus.groovy&lt;/groupId&gt;
            &lt;artifactId&gt;groovy-all&lt;/artifactId&gt;
            &lt;version&gt;2.4.7&lt;/version&gt;
        &lt;/dependency&gt;

# spring mvc xml
    &lt;bean id="viewResolver" class="org.springframework.web.servlet.view.ResourceBundleViewResolver"&gt;
        &lt;property name="order" value="0"&gt;&lt;/property&gt;
        &lt;property name="basename" value="views"&gt;&lt;/property&gt;
    &lt;/bean&gt;
    &lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
        &lt;property name="order" value="1"&gt;&lt;/property&gt;
        &lt;property name="viewClass"&gt;
            &lt;value&gt;org.springframework.web.servlet.view.JstlView&lt;/value&gt;
        &lt;/property&gt;
...

# views.properties
HELLO.(class)=org.springframework.web.servlet.view.jasperreports.JasperReportsPdfView 
HELLO.url=/WEB-INF/report/helloworld.jasper
HELLO.reportDataKey=datasource

# java Controller
@Controller
@RequestMapping("/report")
public class HelloReportController {

    @RequestMapping("/hello.pdf")
    public ModelAndView printExpress() {
        ModelAndView mv = new ModelAndView("HELLO");

        // 如果直接传对象bean不行，需要使用list传值
        List&lt;HelloWorldData&gt; list = new ArrayList&lt;&gt;();
        list.add(new HelloWorldData("jarperreport", "Hi"));

        mv.addObject("datasource", list);
        return mv;
    }
</code></pre>

<p>最后通过浏览器就能查看报表的PDF文件了。</p>

<p>前端所有的页面都是通过ajax来获取展示的，这里通过jquery-media.js来进行展示（生成内嵌的iframe），这也是上面的地址加上pdf后缀的原因。</p>

<p>```</p>

<h1>html</h1>

<div class="modal-body" style="max-height: 900px; padding: 10px;">
    <a class="media" href="${contextPath}${url}"></a>
</div>


<h1>jquery</h1>

<p>$(&lsquo;a.media&rsquo;, $modal).media({width:&ldquo;100%&rdquo;, height:600});
```</p>

<h2>子报表</h2>

<p>有一个结账的报表，既要展示汇总信息，还得把详情列表也输出出来。一开始的JavaBean：</p>

<pre><code>public class InvoiceData {
  private String roomNo;
  private List&lt;InvoiceDetailData&gt; details;
  ...
}
public class InvoiceDetailData {
  private String date;
  private String amount;
  ...
}
</code></pre>

<p>但是简单报表是一维的，不能展示list里面的内容。网上一堆资料都是简单的案例，涉及多维度的就Table、Crosstable、Subreport这几个控件。Table的样式调起来麻烦，数据也不知道怎么搞。子报表至少看起来合乎逻辑，操作起来也简单。画好图标以及把对应的字段对应好后，子报表的Datasource直接填 <code>$F{details}</code> 。</p>

<p>修改views.properties，写好controller后，启动竟然报<strong>找不到details子报表</strong>路径。根据文章修改如下：</p>

<ul>
<li>*<a href="http://docs.spring.io/autorepo/docs/spring-framework/3.0.0.M3/reference/html/ch17s07.html">Working with Sub-Reports</a></li>
<li><a href="https://www.tutorialspoint.com/jasper_reports/jasper_create_subreports.htm">Create SubReports</a></li>
<li>*<a href="http://it.zhaozhao.info/archives/5581">在 Spring MVC 3.1.2.RELEASE 产出 JasperReports 4.7.1 子报表（Subreport）</a></li>
</ul>


<pre><code># 主报表
# 类型必须加哦！
    &lt;parameter name="DetailSubReport" class="net.sf.jasperreports.engine.JasperReport"/&gt;
    ...
    &lt;subreport&gt;
        &lt;reportElement stretchType="RelativeToBandHeight" x="0" y="0" width="520" height="167" uuid="8d69d85b-4fcf-482a-836c-c1698ce42dcd"/&gt;
        &lt;dataSourceExpression&gt;&lt;![CDATA[$F{details}]]&gt;&lt;/dataSourceExpression&gt;
        &lt;subreportExpression&gt;&lt;![CDATA[$P{DetailSubReport}]]&gt;&lt;/subreportExpression&gt;
    &lt;/subreport&gt;

# views.properties
Invoice.(class)=org.springframework.web.servlet.view.jasperreports.JasperReportsPdfView 
Invoice.url=/WEB-INF/report/invoice.jasper
Invoice.reportDataKey=datasource
Invoice.subReportUrls=DetailSubReport=/WEB-INF/report/InvoiceDetail.jasper
</code></pre>

<p>罗马建成非一日之功，再次编译启动后，再次报错，这次的是<strong>类型错误</strong>。感觉正在慢慢向成功靠近。修改类型后最后启动展示搞定。</p>

<pre><code># javabean
public class InvoiceData {
    private JRDataSource details;

    public void setDetails(JRDataSource details) {
        this.details = details;
    }

    public void setDetails(List&lt;InvoiceDetailData&gt; details) {
        this.details = new JRBeanCollectionDataSource(details);
    }

# 主报表
    &lt;field name="details" class="net.sf.jasperreports.engine.JRDataSource"&gt;
        &lt;fieldDescription&gt;&lt;![CDATA[details]]&gt;&lt;/fieldDescription&gt;
    &lt;/field&gt;
</code></pre>

<p>&ndash;END</p>
]]></content>
  </entry>
  
</feed>
