<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: #haodop | Winse Blog]]></title>
  <link href="http://winse.github.io/blog/categories/haodop/atom.xml" rel="self"/>
  <link href="http://winse.github.io/"/>
  <updated>2024-01-13T08:46:58+08:00</updated>
  <id>http://winse.github.io/</id>
  <author>
    <name><![CDATA[Winse Liu]]></name>
    <email><![CDATA[winseliu@foxmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ganglia扩展-Python]]></title>
    <link href="http://winse.github.io/blog/2016/02/01/ganglia-python-extension/"/>
    <updated>2016-02-01T18:23:43+08:00</updated>
    <id>http://winse.github.io/blog/2016/02/01/ganglia-python-extension</id>
    <content type="html"><![CDATA[<p>最简单的添加metric的方式使用 <code>gmetric</code> ：</p>

<pre><code>/usr/local/ganglia/bin/gmetric -n "TITLE" -v VALUE -t int16 -g GROUP
</code></pre>

<p>有时指标计算复杂，通过简单的shell不能满足功能需要。我们可以使用python模块来定制。</p>

<h2>安装</h2>

<p>默认安装会检查Python环境，符合条件会自动的安装Python模块。</p>

<pre><code>[root@cu2 ganglia-3.7.2]# yum install -y python-devel
[root@cu2 ganglia-3.7.2]# ./configure --with-gmetad --enable-gexec --enable-status --prefix=/usr/local/ganglia
...
Checking for python
checking for python... /usr/bin/python
checking Python version... 2.6
checking Python support... yes
checking Perl support... no
checking for pkg-config... /usr/bin/pkg-config
checking pkg-config is at least version 0.9.0... yes
...
[root@cu2 ganglia-3.7.2]# make &amp;&amp; make install
</code></pre>

<h2>安装成功</h2>

<pre><code>[root@cu2 ganglia]# pwd
/usr/local/ganglia
[root@cu2 ganglia]# ll lib64/ganglia/
total 704
-rwxr-xr-x 1 root root 87344 Feb  1 16:52 modcpu.so
-rwxr-xr-x 1 root root 84566 Feb  1 16:52 moddisk.so
-rwxr-xr-x 1 root root 17896 Feb  1 16:52 modgstatus.so
-rwxr-xr-x 1 root root 84526 Feb  1 16:52 modload.so
-rwxr-xr-x 1 root root 86280 Feb  1 16:52 modmem.so
-rwxr-xr-x 1 root root 31695 Feb  1 16:52 modmulticpu.so
-rwxr-xr-x 1 root root 84928 Feb  1 16:52 modnet.so
-rwxr-xr-x 1 root root 84246 Feb  1 16:52 modproc.so
-rwxr-xr-x 1 root root 53994 Feb  1 16:52 modpython.so
-rwxr-xr-x 1 root root 85584 Feb  1 16:52 modsys.so
[root@cu2 ganglia]# ll etc/conf.d/
total 4
-rw-r--r-- 1 root root 408 Feb  1 16:52 modpython.conf

[root@cu2 ganglia]# vi etc/gmetad.conf
 rrdtool_dir

[root@cu2 ganglia]# cat etc/conf.d/modpython.conf 
/*
  params - path to the directory where mod_python
           should look for python metric modules

  the "pyconf" files in the include directory below
  will be scanned for configurations for those modules
*/
modules {
  module {
    name = "python_module"
    path = "modpython.so"
    params = "/usr/local/ganglia/lib64/ganglia/python_modules"
  }
}

include ("/usr/local/ganglia/etc/conf.d/*.pyconf")
</code></pre>

<h2>Hello World</h2>

<pre><code>[root@cu2 ganglia]# cd lib64/ganglia/
[root@cu2 ganglia]# mkdir python_modules
[root@cu2 ganglia]# cd python_modules/

[root@cu2 python_modules]# cp ~/ganglia-3.7.2/gmond/python_modules/example/example.py ./
[root@cu2 python_modules]# 

[root@cu2 python_modules]# cd /usr/local/ganglia/etc/conf.d/
[root@cu2 conf.d]# vi example.pyconf
modules {
  module {
    name = "example"
    language = "python"
    param RandomMax {
      value = 600
    }
    param ConstantValue {
      value = 112
    }
  }
}

collection_group {
  collect_every = 10
  time_threshold = 50
  metric {
    name = "PyRandom_Numbers"
    title = "Random"
    value_threshold = 70
  }
  metric {
    name = "PyConstant_Number"
    title = "Constant"
    value_threshold = 70
  }
}

[root@cu2 conf.d]# service gmond restart
</code></pre>

<p><strong>example.py</strong> 初始化函数 <code>metric_init</code> 从 <strong>example.pyconf</strong> 文件获取配置、返回可用指标对象（ <code>call_back</code> 关联执行的handler; <code>groups</code> 数据的分组）。</p>

<p>模块中必须包含的三个方法是：</p>

<ul>
<li>def metric_init(params):</li>
<li>def metric_cleanup():</li>
<li>def metric_handler(name):</li>
</ul>


<p>前面两个方法的名字必须是一定的，而最后一个 metric_handler与 <code>metric_init</code> 返回对象的callback对应。<code>__main__</code> 函数用于debug，可以单独调试该模块，以检测是否有错。
更详细的内容看官网的文档<a href="https://github.com/ganglia/monitor-core/wiki/Ganglia-GMond-Python-Modules">Ganglia-GMond-Python-Modules</a></p>

<h2>参考</h2>

<ul>
<li><a href="https://github.com/ganglia/monitor-core/wiki/Ganglia-GMond-Python-Modules">https://github.com/ganglia/monitor-core/wiki/Ganglia-GMond-Python-Modules</a></li>
<li><a href="http://www.cnblogs.com/marysam/archive/2012/01/03/2311187.html">http://www.cnblogs.com/marysam/archive/2012/01/03/2311187.html</a></li>
<li><a href="http://blog.csdn.net/cloudeep/article/details/5669295">http://blog.csdn.net/cloudeep/article/details/5669295</a></li>
</ul>


<p>&ndash;END</p>
]]></content>
  </entry>
  
</feed>
