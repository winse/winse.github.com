<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Raspberry | Winse Blog]]></title>
  <link href="http://winse.github.io/blog/categories/raspberry/atom.xml" rel="self"/>
  <link href="http://winse.github.io/"/>
  <updated>2023-03-26T00:12:09+08:00</updated>
  <id>http://winse.github.io/</id>
  <author>
    <name><![CDATA[Winse Liu]]></name>
    <email><![CDATA[winseliu@foxmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[重新折腾raspberry2]]></title>
    <link href="http://winse.github.io/blog/2023/03/25/reinstall-raspberry2/"/>
    <updated>2023-03-25T21:24:35+08:00</updated>
    <id>http://winse.github.io/blog/2023/03/25/reinstall-raspberry2</id>
    <content type="html"><![CDATA[<p>买了新的raspberry4后，就没怎么去弄旧的树莓派2了，今天再次看到想着运行起来看看，插上电源后，一直亮着绿灯，然后就没其他反应了。</p>

<p>树莓派2有点旧，现在直接拿着新的手机充电器去接的时刻，一直起不来，刚开始是怀疑是用TTL接错线导致板子烧了，也没有显示器查看界面。</p>

<p>后面想着重新安装一下试试，然后拿着去接网线有线网络，这样就拿了一个旧的充电器的头。没想到这个时刻电源指示灯尽然闪起来了。想来这可能是电流过载保护了。</p>

<p>问题解决了，也把最新的重新安装的记录一下。</p>

<h2>安装</h2>

<p>参考：
* <a href="https://www.raspberrypi.com/documentation/computers/getting-started.html#installing-the-operating-system">Setting up your Raspberry Pi</a></p>

<h3>安装系统</h3>

<p>1 打开 <a href="https://www.raspberrypi.com/software/">Raspberry Pi Imager</a> 下载并安装，然后把SD card插入电脑。</p>

<p><img src="/images/blogs/rasp2/rasp2-1.png" alt="" /></p>

<p>2 设置初始化 用户和密码，并默认打开ssh服务（新版本已经去掉默认用户了，所以要设置一下 <a href="https://www.raspberrypi.com/news/raspberry-pi-bullseye-update-april-2022/">An update to Raspberry Pi OS Bullseye</a> ）</p>

<p><img src="/images/blogs/rasp2/rasp2-2.png" alt="" /></p>

<p>3 选择操作系统</p>

<p><img src="/images/blogs/rasp2/rasp2-3-1.png" alt="" /></p>

<p><img src="/images/blogs/rasp2/rasp2-3-2.png" alt="" /></p>

<p>4 连上有线网络，接通电源。然后打开路由管理界面，查看raspberry的ip地址</p>

<p><img src="/images/blogs/rasp2/rasp2-4-0.png" alt="" /></p>

<p>5 用ssh连接服务器</p>

<p><img src="/images/blogs/rasp2/rasp2-4-1.png" alt="" /></p>

<h3>配置Wifi网络</h3>

<p>原来已经买了usb的无线网卡，用 <code>ifconfig</code> 也能查看到 <code>wlan0</code> 的接口。</p>

<pre><code>root@raspberrypi:~# apt install vim 
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
  libgpm2 vim-runtime
Suggested packages:
  gpm ctags vim-doc vim-scripts
The following NEW packages will be installed:
  libgpm2 vim vim-runtime
0 upgraded, 3 newly installed, 0 to remove and 0 not upgraded.
...
update-alternatives: using /usr/bin/vim.basic to provide /usr/bin/vim (vim) in auto mode
update-alternatives: using /usr/bin/vim.basic to provide /usr/bin/vimdiff (vimdiff) in auto mode
update-alternatives: using /usr/bin/vim.basic to provide /usr/bin/rvim (rvim) in auto mode
update-alternatives: using /usr/bin/vim.basic to provide /usr/bin/rview (rview) in auto mode
update-alternatives: using /usr/bin/vim.basic to provide /usr/bin/vi (vi) in auto mode
update-alternatives: using /usr/bin/vim.basic to provide /usr/bin/view (view) in auto mode
update-alternatives: using /usr/bin/vim.basic to provide /usr/bin/ex (ex) in auto mode
Processing triggers for man-db (2.9.4-2) ...
Processing triggers for libc-bin (2.31-13+rpt2+rpi1+deb11u5) ...

root@raspberrypi:~# echo "set mouse-=a" &gt;&gt;~/.vimrc
root@raspberrypi:~# vim /etc/wpa_supplicant/wpa_supplicant.conf    
root@raspberrypi:~# 


root@raspberrypi:~# iwlist wlan0 scan

# 算一个加密的配置
root@raspberrypi:~# wpa_passphrase winse
# reading passphrase from stdin
xxx
network={
        ssid="winse"
        #psk="xxx"
        psk=xxx
}

root@raspberrypi:~# cat /etc/wpa_supplicant/wpa_supplicant.conf   
country=CN
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1

network={
        ssid="winse"
        #psk="xxx"
        psk=xxx
}


# 配置服务
pi@raspberrypi:~ $ cat /lib/systemd/system/wpa_supplicant.service 
[Unit]
Description=WPA supplicant
Before=network.target
After=dbus.service
Wants=network.target
IgnoreOnIsolate=true

[Service]
#Type=dbus
#BusName=fi.w1.wpa_supplicant1
Type=forking
ExecStart=/sbin/wpa_supplicant -u -s -O /run/wpa_supplicant -c /etc/wpa_supplicant/wpa_supplicant.conf -i wlan0 -B -D wext
Restart=always

[Install]
WantedBy=multi-user.target
#Alias=dbus-fi.w1.wpa_supplicant1.service
pi@raspberrypi:~ $ cat /etc/systemd/system/dhclient.service 
[Unit]
Description= DHCP Client
Before=network.target

[Service]
Type=forking
ExecStart=/sbin/dhclient wlan0 -v
ExecStop=/sbin/dhclient wlan0 -r
Restart=always

[Install] 
WantedBy=multi-user.target
pi@raspberrypi:~ $ 

root@raspberrypi:~# systemctl daemon-reload 

root@raspberrypi:~# systemctl stop NetworkManager
root@raspberrypi:~# systemctl enable wpa_supplicant.service 
root@raspberrypi:~# systemctl enable dhclient.service
Created symlink /etc/systemd/system/multi-user.target.wants/dhclient.service → /etc/systemd/system/dhclient.service.
</code></pre>

<p>配置好后，重启服务器，再次查看路由器管理web界面：</p>

<p><img src="/images/blogs/rasp2/rasp2-5.png" alt="" /></p>

<p>然后再把网线拔掉，再重启一次确认一下。</p>

<h3>遇到的问题：</h3>

<p>1 <a href="https://zhuanlan.zhihu.com/p/136463580">https://zhuanlan.zhihu.com/p/136463580</a></p>

<pre><code>如果树莓派系统使用的是Raspbian Stretch，则ifup命令可能不起作用，可能会收到一条错误消息，
内容如下：“ ifdown：unknown interface wlan0 ”。可以使用以下任何命令来解决：
sudo ifconfig wlan0 up
</code></pre>

<p>2 <a href="https://shumeipai.nxez.com/2017/09/13/raspberry-pi-network-configuration-before-boot.html">https://shumeipai.nxez.com/2017/09/13/raspberry-pi-network-configuration-before-boot.html</a></p>

<pre><code>说明以及不同安全性的 WiFi 配置示例：
#ssid:网络的ssid
#psk:密码
#priority:连接优先级，数字越大优先级越高（不可以是负数）
#scan_ssid:连接隐藏WiFi时需要指定该值为1

如果你的 WiFi 没有密码

network={
  ssid="你的无线网络名称（ssid）"
  key_mgmt=NONE
}
如果你的 WiFi 使用WEP加密


network={
  ssid="你的无线网络名称（ssid）"
  key_mgmt=NONE
  wep_key0="你的wifi密码"
}
如果你的 WiFi 使用WPA/WPA2加密


network={
  ssid="你的无线网络名称（ssid）"
  key_mgmt=WPA-PSK
  psk="你的wifi密码"
}

如果你不清楚 WiFi 的加密模式，可以在安卓手机上用 root explorer 打开 /data/misc/wifi/wpa/wpa_supplicant.conf，查看 WiFi 的信息。
</code></pre>

<p>3 <a href="https://www.labno3.com/2021/03/22/setting-up-raspberry-pi-wifi/">https://www.labno3.com/2021/03/22/setting-up-raspberry-pi-wifi/</a></p>

<pre><code>如果连接有问题，一定要确认Pi是否支持WiFi。也有可能你的SSID是错误的，要扫描和检查，
使用sudo iwlist wlan0 scan并检查essid字段。
这个字段应该和你在ssid字段输入的一样。
</code></pre>

<p>4 查看信息 <a href="https://www.baeldung.com/linux/connect-network-cli">https://www.baeldung.com/linux/connect-network-cli</a></p>

<pre><code>root@raspberrypi:~# ip link show wlan0
3: wlan0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq state DOWN mode DEFAULT group default qlen 1000
    link/ether 00:5a:39:e1:4d:bb brd ff:ff:ff:ff:ff:ff
root@raspberrypi:~# ip link set wlan0 up  
root@raspberrypi:~# ip link show wlan0
3: wlan0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq state DOWN mode DEFAULT group default qlen 1000
    link/ether 00:5a:39:e1:4d:bb brd ff:ff:ff:ff:ff:ff
root@raspberrypi:~# 
root@raspberrypi:~# iw wlan0 link
Not connected.

root@raspberrypi:~# ifconfig wlan0 down
root@raspberrypi:~# ifconfig wlan0 up 
root@raspberrypi:~# ifconfig wlan0
wlan0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500
        ether 00:5a:39:e1:4d:bb  txqueuelen 1000  (Ethernet)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
</code></pre>

<p>5 <a href="https://shapeshed.com/linux-wifi/">https://shapeshed.com/linux-wifi/</a></p>

<pre><code>wpa_cli
</code></pre>

<p>6 <a href="https://www.bilibili.com/read/cv8895717">https://www.bilibili.com/read/cv8895717</a></p>

<pre><code>vim /etc/wpa_supplicant/wpa_supplicant.conf 编辑该文件，在文件顶部增加以下内容
country=CN
ctrl_interface=/run/wpa_supplicant
update_config=1

特别说明：country=CN 由于各个国家wifi使用频段不同，尤其5G频段

vim /etc/rc.local 添加以下内容

#!/bin/bash

ip link set wlan0 up &amp;
wpa_supplicant -B -i wlan0 -D nl80211 -c /etc/wpa_supplicant/wpa_supplicant.conf &amp;
dhclient wlan0

exit 0
</code></pre>

<p>7 <a href="https://blog.csdn.net/u010049696/article/details/48765999">https://blog.csdn.net/u010049696/article/details/48765999</a></p>

<pre><code>配置service。进入到/usr/lib/systemd/system目录，可以看到下面四个文件：

wpa_supplicant-nl80211@.service
wpa_supplicant.service
wpa_supplicant@.service
wpa_supplicant-wired@.service

编辑wpa_supplicant.service文件，如下：

[Unit]
Description=WPA supplicant


[Service]
Type=dbus
BusName=fi.epitest.hostap.WPASupplicant
ExecStart=/usr/bin/wpa_supplicant -c/etc/wpa_supplicant/test.conf -i wlp3s0


[Install]
WantedBy=multi-user.target
Alias=dbus-fi.epitest.hostap.WPASupplicant.service

其中，只需修改ExecStart=/usr/bin/wpa_supplicant -c/etc/wpa_supplicant/test.conf -i wlp3s0即可。
</code></pre>

<p>8 <a href="https://www.linuxbabe.com/command-line/ubuntu-server-16-04-wifi-wpa-supplicant">https://www.linuxbabe.com/command-line/ubuntu-server-16-04-wifi-wpa-supplicant</a></p>

<pre><code>Auto Connect on Startup
To automatically connect to wireless network at boot time, we need to edit the wpa_supplicant.service file. It’s a good idea to copy the file from /lib/systemd/system/ directory to /etc/systemd/system/ directory, then edit it because we don’t want newer version of wpasupplicant to override our modifications.

sudo cp /lib/systemd/system/wpa_supplicant.service /etc/systemd/system/wpa_supplicant.service

sudo nano /etc/systemd/system/wpa_supplicant.service
Find the following line.

ExecStart=/sbin/wpa_supplicant -u -s -O /run/wpa_supplicant
Change it to the following. Obviously you need to change wlp3s0 if that isn’t your interface name.

ExecStart=/sbin/wpa_supplicant -u -s -c /etc/wpa_supplicant.conf -i wlp3s0
It’s recommended to always try to restart wpa_supplicant when failure is detected. Add the following right below the ExecStart line.

Restart=always
If you can find the following line in this file, comment it out (Add the # character at the beginning of the line).

Alias=dbus-fi.w1.wpa_supplicant1.service
Save and close the file. Then enable wpa_supplicant service to start at boot time.

sudo systemctl enable wpa_supplicant.service

~~~

sudo nano /etc/systemd/system/dhclient.service
Put the following text into the file.

[Unit]
Description= DHCP Client
Before=network.target

[Service]
Type=forking
ExecStart=/sbin/dhclient wlp3s0 -v
ExecStop=/sbin/dhclient wlp3s0 -r
Restart=always

[Install] 
WantedBy=multi-user.target
Save and close the file. Then enable this service.

sudo systemctl enable dhclient.service
</code></pre>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在树莓派上部署redmine - Respberrypi]]></title>
    <link href="http://winse.github.io/blog/2020/05/11/redmine-on-arm-pi/"/>
    <updated>2020-05-11T10:33:44+08:00</updated>
    <id>http://winse.github.io/blog/2020/05/11/redmine-on-arm-pi</id>
    <content type="html"><![CDATA[<p>变废为宝。</p>

<p>服务器没怎么用，但是偶尔又想访问下文档或者redmine，狠狠心咬咬牙最后把x64上的迁移到了树莓派2： Raspbian GNU/Linux 9 (stretch) 。</p>

<p>温故下原来redmine的安装过程： <a href="http://www.winseliu.com/blog/2017/09/18/redmine-deploy-and-install-plugins/">Redmine部署以及插件安装</a></p>

<p>过程中涉及到了docker的重新编译，这其中主要使用ubuntu apt源码在本地arm上进行再编译。其中涉及的镜像有：</p>

<ul>
<li><a href="https://github.com/sameersbn/docker-ubuntu/tree/14.04">https://github.com/sameersbn/docker-ubuntu/tree/14.04</a></li>
<li><a href="https://github.com/sameersbn/docker-postgresql/tree/9.6-2">https://github.com/sameersbn/docker-postgresql/tree/9.6-2</a></li>
<li><a href="https://github.com/sameersbn/docker-redmine/tree/3.4.6">https://github.com/sameersbn/docker-redmine/tree/3.4.6</a></li>
</ul>


<h2>备份</h2>

<p>redmine直接整个目录打包 /srv/docker/redmine/redmine 。数据库的要备份出来，架构不同不兼容。</p>

<p>这是编译后arm postgres直接用x64的/srv/docker/redmine/postgresql的报错信息：
```
root@raspberrypi:~# docker run &ndash;rm -ti &ndash;entrypoint=&ldquo;bash&rdquo; -v /srv/docker/redmine/postgresql:/var/lib/postgresql sameersbn/postgresql:9.6-2</p>

<p>root@8f39c2904607:/var/lib/postgresql# sudo -HEu postgres /usr/lib/postgresql/9.6/bin/pg_ctl -D /var/lib/postgresql/9.6/main -w start
waiting for server to start&hellip;.FATAL:  database files are incompatible with server
DETAIL:  The database cluster was initialized with USE_FLOAT8_BYVAL but the server was compiled without USE_FLOAT8_BYVAL.
HINT:  It looks like you need to recompile or initdb.
LOG:  database system is shut down
stopped waiting
pg_ctl: could not start server
Examine the log output.
```</p>

<h2>编译ubuntu镜像</h2>

<p>直接使用最新的trusty发布版镜像。由于低版本的可能会没有 linux/arm/v7 : <a href="https://hub.docker.com/_/ubuntu/?tab=tags&amp;page=1&amp;name=trusty">https://hub.docker.com/_/ubuntu/?tab=tags&amp;page=1&amp;name=trusty</a></p>

<pre><code>root@raspberrypi:~/docker-ubuntu# vi Dockerfile
FROM ubuntu:trusty

docker build -t sameersbn/ubuntu:14.04.20170123 . 
docker tag sameersbn/ubuntu:14.04.20170123 sameersbn/ubuntu:14.04.20170711 
</code></pre>

<h2>编译postgres镜像</h2>

<p>由于postgresql apt的库中没有armhf的deb，需要先手动编译好对应的deb。先运行一个容器，再里面编译好postgres。</p>

<pre><code>wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \
 &amp;&amp; echo 'deb-src http://mirrors.zju.edu.cn/postgresql/repos/apt/ trusty-pgdg main' &gt; /etc/apt/sources.list.d/pgdg.list \
 &amp;&amp; sed -i 's/ports.ubuntu.com/mirrors.aliyun.com/' /etc/apt/sources.list \
 &amp;&amp; sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list \
 &amp;&amp; apt-get update

root@7d55994af11e:/# apt-get build-dep dh-exec postgresql-common  pgdg-keyring     
root@7d55994af11e:/# apt-get source --compile dh-exec postgresql-common  pgdg-keyring   

root@7d55994af11e:/# apt-get build-dep postgresql-${PG_VERSION} postgresql-client-${PG_VERSION} postgresql-contrib-${PG_VERSION} dh-exec
root@7d55994af11e:/# apt-get source --compile postgresql-${PG_VERSION} postgresql-client-${PG_VERSION} postgresql-contrib-${PG_VERSION} 
</code></pre>

<p>再测试安装一下这些deb：</p>

<pre><code>wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \
 &amp;&amp; echo 'deb-src http://mirrors.zju.edu.cn/postgresql/repos/apt/ trusty-pgdg main' &gt; /etc/apt/sources.list.d/pgdg.list \
 &amp;&amp; sed -i 's/ports.ubuntu.com/mirrors.aliyun.com/' /etc/apt/sources.list \
 &amp;&amp; sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list \
 &amp;&amp; apt-get update

apt-get install -y acl \
    libpipeline1 debhelper ssl-cert libxml2 libedit2 libxslt1.1 libperl5.18 libpython2.7 libpython3.4 libtcl8.6

dpkg -i pgdg-keyring_2018.2_all.deb postgresql-common_201.pgdg14.04+1_all.deb  postgresql-client-common_201.pgdg14.04+1_all.deb

dpkg -i libpq5_9.6.13-1.pgdg14.04+1_armhf.deb  postgresql-9.6_9.6.13-1.pgdg14.04+1_armhf.deb postgresql-client-9.6_9.6.13-1.pgdg14.04+1_armhf.deb postgresql-contrib-9.6_9.6.13-1.pgdg14.04+1_armhf.deb
</code></pre>

<p>修改Dockerfile，直接通过dpkg安装postgresql的deb：</p>

<pre><code>root@raspberrypi:~/docker-postgresql# less Dockerfile 
...
COPY deb/ /tmp/psql/

RUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \
 &amp;&amp; echo 'deb-src http://mirrors.zju.edu.cn/postgresql/repos/apt/ trusty-pgdg main' &gt; /etc/apt/sources.list.d/pgdg.list \
 &amp;&amp; sed -i 's/ports.ubuntu.com/mirrors.aliyun.com/' /etc/apt/sources.list \
 &amp;&amp; sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list \
 &amp;&amp; apt-get update \
 &amp;&amp; DEBIAN_FRONTEND=noninteractive apt-get install -y acl \
    libpipeline1 debhelper ssl-cert libxml2 libedit2 libxslt1.1 libperl5.18 libpython2.7 libpython3.4 libtcl8.6 \
 &amp;&amp; cd /tmp/psql \
 &amp;&amp; dpkg -i pgdg-keyring_2018.2_all.deb postgresql-common_201.pgdg14.04+1_all.deb  postgresql-client-common_201.pgdg14.04+1_all.deb \
 &amp;&amp; dpkg -i libpq5_9.6.13-1.pgdg14.04+1_armhf.deb  postgresql-9.6_9.6.13-1.pgdg14.04+1_armhf.deb postgresql-client-9.6_9.6.13-1.pgdg14.04+1_armhf.deb postgresql-contrib-9.6_9.6.13-1.pgdg14.04+1_armhf.deb \
 &amp;&amp; rm -rf /tmp/psql \
...

root@raspberrypi:~/docker-postgresql# docker build -t sameersbn/postgresql:9.6-2 .
</code></pre>

<h2>编译redmine镜像</h2>

<p>redmine主要是缺少ruby2.3的包，跟上面的步骤类似。先编译出arm的ruby2.3，再编译镜像。</p>

<pre><code>sed -i 's/ports.ubuntu.com/mirrors.aliyun.com/' /etc/apt/sources.list \
&amp;&amp; sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list

apt-get build-dep ruby${RUBY_VERSION} ruby${RUBY_VERSION}-dev
apt-get source --compile ruby${RUBY_VERSION} ruby${RUBY_VERSION}-dev


root@raspberrypi:~/docker-redmine# vi Dockerfile 
...
COPY deb/ /tmp/ruby/

RUN apt-key adv --keyserver keyserver.ubuntu.com --recv E1DD270288B4E6030699E45FA1715D88E1DF1F24 \
 &amp;&amp; echo "deb http://ppa.launchpad.net/git-core/ppa/ubuntu trusty main" &gt;&gt; /etc/apt/sources.list \
 &amp;&amp; apt-key adv --keyserver keyserver.ubuntu.com --recv 80F70E11F0F0D5F10CB20E62F5DA5F09C3173AA6 \
 &amp;&amp; echo "deb http://ppa.launchpad.net/brightbox/ruby-ng/ubuntu trusty main" &gt;&gt; /etc/apt/sources.list \
 &amp;&amp; apt-key adv --keyserver keyserver.ubuntu.com --recv 8B3981E7A6852F782CC4951600A6F0A3C300EE8C \
 &amp;&amp; echo "deb http://ppa.launchpad.net/nginx/stable/ubuntu trusty main" &gt;&gt; /etc/apt/sources.list \
 &amp;&amp; wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \
 &amp;&amp; echo 'deb-src http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main' &gt; /etc/apt/sources.list.d/pgdg.list \
 &amp;&amp; sed -i 's/ports.ubuntu.com/mirrors.aliyun.com/' /etc/apt/sources.list \
 &amp;&amp; sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list \
 &amp;&amp; apt-get update \
 &amp;&amp; DEBIAN_FRONTEND=noninteractive apt-get install -y supervisor logrotate nginx mysql-client postgresql-client \
      imagemagick subversion git cvs bzr mercurial darcs rsync   locales openssh-client \
      gcc g++ make patch pkg-config gettext-base   libc6-dev zlib1g-dev libxml2-dev \
      libmysqlclient18 libpq5 libyaml-0-2 libcurl3 libssl1.0.0 uuid-dev xz-utils \
      libxslt1.1 libffi6 zlib1g gsfonts \
      libgmpxx4ldbl libgmp-dev libtk8.5 libxft2 libxrender1 libxss1 x11-common libtcl8.5 rubygems-integration \
 &amp;&amp; dpkg -i /tmp/ruby/*.deb \
 &amp;&amp; rm -rf /tmp/ruby \
 &amp;&amp; update-locale LANG=C.UTF-8 LC_MESSAGES=POSIX \
 &amp;&amp; gem install --no-document --version '&lt; 2.0' bundler \
 &amp;&amp; rm -rf /var/lib/apt/lists/*
...

root@raspberrypi:~/docker-redmine# docker build -t sameersbn/redmine:3.4.6 .
</code></pre>

<p>如果docker构建失败，可以通过以下两种方式来进行调试：</p>

<pre><code># 1
docker commit $container-id image-id
docker run -ti $image-id bash

# 2 
失败也会有前一步骤的镜像已经提交，再次基础上检查后面的步骤
The last successful step is 2. It produced an image a3acfa4ab179. Now you start a container
docker run -it a3acfa4ab179 bash
</code></pre>

<h2>结合原有数据进行迁移</h2>

<pre><code># 备份
psql -U postgres -cC --if-exists -d redmine_production &gt;redmine.dump 

# 安装compose
root@raspberrypi:~/redmine/bin# python -m pip install --upgrade pip
root@raspberrypi:~/redmine/bin# pip install docker-compose

# 启动
root@raspberrypi:~/redmine/bin# docker-compose up -d 

# 数据库还原
docker cp redmine.dump e472d9ec3124:/var/lib/postgresql/
psql -U postgres &lt;redmine.dump

# redmine修复
root@3f0774db222d:/home/redmine/redmine# apt-get install libmysqlclient-dev                                    

https://stackoverflow.com/questions/13086073/rails-install-pg-cant-find-the-libpq-fe-h-header
root@3f0774db222d:/home/redmine/redmine# apt-get install libpq-dev
https://stackoverflow.com/questions/38200015/package-magickcore-was-not-found-in-the-pkg-config-search-path
root@3f0774db222d:/home/redmine/redmine# apt-get install libmagickwand-dev

root@3f0774db222d:/home/redmine/redmine# bundle install                    
</code></pre>

<p>后面就直接安装docker-compose.yml中的端口映射配置访问即可。</p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[连接树莓派 - Respberrypi]]></title>
    <link href="http://winse.github.io/blog/2017/10/05/respberrypi-connected-via/"/>
    <updated>2017-10-05T17:04:24+08:00</updated>
    <id>http://winse.github.io/blog/2017/10/05/respberrypi-connected-via</id>
    <content type="html"><![CDATA[<p>启动树莓派后，总得连上去操作才能告诉它做事情。最常用的就是通过SSH远程控制，前提是能连上网络、知道树莓派获取到的地址。下来把了解到的，以及自实践的连接方式做下小结。</p>

<h4>通过路由器</h4>

<p>网线、无线连接后，通过 <strong> 显示器 </strong> 、<strong> 路由管理界面 </strong> 获取树莓派的地址（在管理web界面有明确的respberrypi的字样）。</p>

<h4>通过USB</h4>

<ol>
<li>USB转COM</li>
</ol>


<p>USB连接电脑，连树莓派的GPIO对应的针。然后通过COM口协议与树莓派通信</p>

<ol>
<li>USB共享网络</li>
</ol>


<p>使用手机的USB共享网络。</p>

<p>USB连树莓派，Micro口连手机。手机上打开USB网络共享，树莓派中会建立一个usb0的网卡。这样就能通过这个网卡进行上网了（网上也有说同时打开wifi热点，没啥用啊，usb和wlan是两个不同的网段）。</p>

<p>手机上安装一个ssh的工具（juicessh等），先连上本地的shell，然后执行 <code>cat /proc/net/arp</code> 或者 <code>busybox arp -a</code> 查看与 rndis0 同一个网段的ip（一般就是连接到树莓派的地址了）。</p>

<p>在手机上安装一个IP扫描软件应该也行，但 <strong> 通过ARP是最简单最高效的方式了。</strong></p>

<p><img src="/images/blogs/raspberrypi-phone-usb-network.png" alt="" /></p>

<p>注意：busybox感觉像一个工具集，包含了很多linux的命令，并且有些命令参数比系统提供的更全，如 <code>tar -j</code> 。可以用 <code>busybox --help</code> 查看帮助。</p>

<p></p>

<h4>网线互联</h4>

<p>一跟网线直接连电脑和树莓派。</p>

<p>互传数据应该有用。当前感觉，这种方式没啥优势，有点鸡肋。上网比较麻烦：手动设置IP、域名解析、还要在电脑上面搞网卡绑定。</p>

<p>下面自动获取的方法（没试，应该是可以的吧）：</p>

<blockquote><p>网线直接把树莓派与电脑连接起来，电脑需要连wifi（如果不连接无法使用网络共享让树莓派获取到ip地址），在 设置->网络->wlan->网络与共享中心->wlan->属性->共享->允许​其它用户通过它来连接->确定。</p>

<p>稍等片刻树莓派应该就获取到一个ip地址了，此时打开命令提示符（我用的Xshell），运行arp -a命令，应该就可以看到​一个局域网段，如192.168.xx.1，通常以192.168开头，最后一位是1的那个接口，下面多出来的一条动态记录就是树莓派的。</p></blockquote>

<h2>参考：</h2>

<ul>
<li><a href="https://jingyan.baidu.com/article/676629977483b154d51b848e.html">使用Android手机作为树莓派的屏幕</a></li>
<li><a href="http://www.jianshu.com/p/f2e0a02c01d9">http://www.jianshu.com/p/f2e0a02c01d9</a></li>
<li><a href="http://blog.163.com/elliot_alderson/blog/static/26832905920161122104246919/">http://blog.163.com/elliot_alderson/blog/static/26832905920161122104246919/</a> 添加过ifcfg-usb0，但需要重启网卡才是设置IP地址，麻烦。</li>
<li><a href="http://blog.163.com/elliot_alderson/blog/static/268329059201611925543687/">树莓派安装kali linux （系统安装和初步配置）</a> 安装、gparted扩容</li>
</ul>


<h2>键盘输入、手机显示</h2>

<p>前提：安装screen。</p>

<ul>
<li>连接USB键盘，启动树莓派。</li>
<li>键盘盲打登录（输入：root回车centos回车screen -S pi）。</li>
<li>然后手机上ssh连接，进入pi的会话（screen -x pi）</li>
</ul>


<p>这样就能用键盘敲、手机看了！觉得挺好玩的。</p>

<h2>重新折腾树莓派</h2>

<ul>
<li>安装centos7: 密码root/centos</li>
</ul>


<p><a href="http://www.21ic.com/evm/trick/201605/675705.htm">http://www.21ic.com/evm/trick/201605/675705.htm</a></p>

<ul>
<li>扩大容量：</li>
</ul>


<p><a href="http://blog.csdn.net/qq_20480611/article/details/48657827">http://blog.csdn.net/qq_20480611/article/details/48657827</a></p>

<p>fdisk删掉分区然后重新加，重启后执行resize2fs</p>

<ul>
<li>安装wiringpi</li>
</ul>


<pre><code>git clone git://git.drogon.net/wiringPi
cd wiringPi
./build
</code></pre>

<ul>
<li>epel</li>
</ul>


<p><a href="https://hobo.house/2016/03/03/installing-centos-on-the-raspberry-pi-2/">https://hobo.house/2016/03/03/installing-centos-on-the-raspberry-pi-2/</a></p>

<pre><code>cat &gt; /etc/yum.repos.d/epel-unsigned.repo &lt;&lt; EOF
[epel]
name=Epel rebuild for armhfp
baseurl=https://armv7.dev.centos.org/repodir/epel-pass-1/
enabled=1
gpgcheck=0

EOF
</code></pre>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[树莓派raspberrypi2简单使用 - Respberrypi]]></title>
    <link href="http://winse.github.io/blog/2015/11/04/raspberrypi-start-guide/"/>
    <updated>2015-11-04T11:52:18+08:00</updated>
    <id>http://winse.github.io/blog/2015/11/04/raspberrypi-start-guide</id>
    <content type="html"><![CDATA[<h2>买的东西地址：</h2>

<p>现在想来，其实可以多加100，买一整套的比较方便。内存卡还有外壳都在里面。</p>

<ul>
<li><p><a href="https://item.taobao.com/item.htm?id=520179324500&amp;ali_refid=a3_420434_1006:1103723226:N:%E6%A0%91%E8%8E%93%E6%B4%BE2+b%2B:fc636846d2212679077e26f5f9f14118&amp;ali_trackid=1_fc636846d2212679077e26f5f9f14118&amp;spm=a230r.1.0.0.vhiQsb&amp;qq-pf-to=pcqq.c2c">树莓派2b 树莓派raspberry Pi 2代B型四核开发板 官方正品 树莓派</a></p></li>
<li><p><a href="http://item.jd.com/679773.html">闪迪（SanDisk）至尊高速移动MicroSDHC UHS-I存储卡 TF卡 32GB Class10 读速48Mb/s</a></p></li>
<li><a href="http://item.jd.com/667570.html">迅捷（FAST）FW150US 超小型150M无线USB网卡</a></li>
<li><p><a href="https://detail.tmall.com/item.htm?_u=4jgup6l1c31&amp;id=45729451918">USB转TTL PL2303HX模块 STC单片机下载线刷机线 升级串口模块</a></p></li>
<li><p><a href="http://item.jd.com/629794.html">雷柏（Rapoo）1860 无线光学键鼠套装</a>  质量一般。临时用用，可以考虑不买！</p></li>
</ul>


<h2>安装系统</h2>

<ul>
<li>显示器： 恰好同时有HDMI的接口和显示器。如果没有，那就要考虑直接把系统写到SD卡了！！</li>
<li>无线键盘、鼠标</li>
<li>电源： 一般的手机充电器都可以，用充电宝也是OK的</li>
<li><a href="https://www.raspberrypi.org/help/noobs-setup/">NOOBS</a>

<ul>
<li>NOOBS_v1_4_2.zip</li>
<li>SDFormatterv4.zip</li>
</ul>
</li>
</ul>


<p>插上SD卡，安装系统就行了。</p>

<p><img src="/images/blogs/raspberrypi-os-install.png" alt="" /></p>

<h2>无线网卡</h2>

<p>网站上没说有linux的驱动，但是直接插上后是能检测到设备的！</p>

<pre><code>pi@raspberrypi:~$ lsusb
Bus 001 Device 004: ID 0bda:8179 Realtek Semiconductor Corp. 
Bus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp. SMSC9512/9514 Fast Ethernet Adapter
Bus 001 Device 002: ID 0424:9514 Standard Microsystems Corp. 
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
</code></pre>

<p>ifconfig也能查看到wlan0的无线网卡。接下来修改配置，添加用户密码即可。</p>

<p>配置：</p>

<pre><code>pi@raspberrypi:~$ cat /etc/network/interfaces
# Please note that this file is written to be used with dhcpcd.
# For static IP, consult /etc/dhcpcd.conf and 'man dhcpcd.conf'.

auto lo
iface lo inet loopback

auto eth0
allow-hotplug eth0
#iface eth0 inet manual
iface eth0 inet dhcp

auto wlan0
allow-hotplug wlan0
#iface wlan0 inet manual
iface wlan0 inet dhcp
wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf

auto wlan1
allow-hotplug wlan1
iface wlan1 inet manual
wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf

pi@raspberrypi:~$ sudo cat /etc/wpa_supplicant/wpa_supplicant.conf
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1


network={
ssid="winse.liu"
psk="MIMA"
}

network={
ssid="1108"
psk="MIMA"
}
</code></pre>

<h2>USB转串口使用COM控制raspberry</h2>

<p>在淘宝上面买的，我系统是win10，抱着尝试下的心态也很便宜就买了一个。买来后，安装了win7的驱动<a href="https://detail.tmall.com/item.htm?_u=4jgup6l1c31&amp;id=45729451918">PL-2303 Vista&amp;Win7 Driver Installer.exe</a>， 能用。</p>

<p>配置见图：</p>

<p><img src="/images/blogs/raspberrypi-gpio.png" alt="" /></p>

<p><img src="/images/blogs/raspberrypi-usb-com-install.jpg" alt="" /></p>

<p><img src="/images/blogs/raspberrypi-usb-com-config.jpg" alt="" /></p>

<p>连接后按enter才会出现登录提示！<strong> pi默认密码raspberry </strong>。</p>

<p>最终效果：</p>

<p><img src="/images/blogs/raspberrypi-finished.jpg" alt="" /></p>

<h2>用到的一些命令</h2>

<pre><code>sudo raspi-config
修改配置，默认使用图形界面登录，可以使用`Boot Options`修改为文本console模式

sudo iwlist wlan0 scan | grep ESSID
查看可用的无线

systemctl list-units

sudo apt-get install screen

sudo apt-get -y install vim
sudo apt-get install nginx
systemctl status nginx.service
sudo cp /etc/skel/.* /home/robot/
</code></pre>

<p>手机放一个热点出来，然后手机安装一个ssh的工具(JuiceSSH v2.0.2)就可以控制树莓派了。</p>

<p>网上有用手机当屏幕，然后键盘连树莓派usb，结合来控制树莓派。一开始挺新奇的，后来感觉挺扯淡的！不过学习到了screen的程序，自动登录啥的没弄成，直接输入用户密码登录也行了。在boot选项看到有自动登录，不知道有没有用。现在有无线网卡和com来控制，感觉已经够用了。</p>

<h2>参考</h2>

<ul>
<li><a href="https://www.raspberrypi.org/forums/viewtopic.php?f=91&amp;t=4751&amp;sid=661d1a59e4f85f333b40e6e46db58d32">Getting Started with the Raspberry Pi</a></li>
<li><a href="http://blog.csdn.net/c80486/article/details/8545307">树莓派(raspberry pi)学习15: 使用WIFI网卡连接无线网络</a></li>
<li><a href="http://blog.csdn.net/cugbabybear/article/details/23048741">windows下 用串行连接控制树莓派</a></li>
<li><a href="http://www.alsrobot.cn/article-141.html">【创客学堂】如何在windows系统下用串口通信完爆raspberry pi（树莓派）</a></li>
<li><a href="http://shumeipai.nxez.com/2013/10/10/raspberry-pi-pick-kindle-display.html">视频详解树莓派如何外接Kindle显示器</a></li>
<li><p><a href="http://www.ibm.com/developerworks/cn/linux/l-cn-screen/index.html">linux 技巧：使用 screen 管理你的远程会话</a></p></li>
<li><p><a href="http://www.bkjia.com/Pythonjc/818142.html">RASPBERRY PI wifi配置</a></p></li>
<li><p><a href="http://blog.sina.com.cn/s/blog_3cb6a78c0101a0fe.html">Raspberry Pi 连接无线网卡</a></p></li>
<li><p><a href="http://davidrobot.com/2014/11/raspberry_pi_model_b_plus_startup.html">开机篇 – 树莓派 Raspberry Pi Model B+ 入手折腾记 (1)</a></p></li>
<li><p><a href="http://shumeipai.nxez.com/2013/09/07/no-screen-unknow-ip-login-pi.html#more-184">没有显示器且IP未知的情况下登录树莓派</a></p></li>
<li><p><a href="http://www.pc6.com/az/104761.html">JuiceSSH v2.0.2</a></p></li>
</ul>


<p>&ndash;END</p>
]]></content>
  </entry>
  
</feed>
