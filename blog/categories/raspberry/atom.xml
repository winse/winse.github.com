<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: #raspberry | Winse Blog]]></title>
  <link href="http://winse.github.io/blog/categories/raspberry/atom.xml" rel="self"/>
  <link href="http://winse.github.io/"/>
  <updated>2024-01-16T12:59:42+08:00</updated>
  <id>http://winse.github.io/</id>
  <author>
    <name><![CDATA[Winse Liu]]></name>
    <email><![CDATA[winseliu@foxmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reinstall Redmine on Raspberry2]]></title>
    <link href="http://winse.github.io/blog/2023/11/18/reinstall-redmine-on-respberry2/"/>
    <updated>2023-11-18T09:55:24+08:00</updated>
    <id>http://winse.github.io/blog/2023/11/18/reinstall-redmine-on-respberry2</id>
    <content type="html"><![CDATA[<p>年前把树莓派拯救了回来 <a href="https://winse.github.io/blog/2023/03/25/reinstall-raspberry2/">重新折腾raspberry2</a> 由于年底了新平台慢慢成型，可能会用到BUG跟踪，想着不能浪费，能用则用能省者省的原则，把老古董用起来。</p>

<p>原来在树莓派2上安装过redmine的 <a href="https://winse.github.io/blog/2020/05/11/redmine-on-arm-pi/">在树莓派上部署redmine</a> 不过有些年头了，一开始想着刻舟求剑的方法能参照绝不死脑细胞的原则，现实则是四处碰壁。</p>

<p>这个配置确实有点拿不出手了。</p>

<pre><code>top - 14:01:28 up 1 min,  1 user,  load average: 1.87, 0.63, 0.22
Tasks: 130 total,   1 running, 129 sleeping,   0 stopped,   0 zombie
%Cpu0  :  0.0 us,  0.0 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.3 si,  0.0 st
%Cpu1  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
%Cpu2  :  0.3 us,  0.3 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
%Cpu3  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
MiB Mem :    922.0 total,    643.8 free,     79.7 used,    198.5 buff/cache
MiB Swap:    100.0 total,    100.0 free,      0.0 used.    788.3 avail Mem 
</code></pre>

<h2>参照学习</h2>

<p>原来老版本安装的是 postgres9.6 + redmine3.4 的版本，2020年的时刻这些版本都还当时热乎着的，当时也用上了原来的数据以及插件都还想和原来一样使用。现在再来安装这个版本已经时过境迁了，官方的postgres9.6已经归档了。</p>

<p>1、ubuntu-14官方不支持以后，postgresql官网和各种镜像的网站的都没有该版本的9.6的源码。</p>

<p>2、找一个相对旧一些的操作系统ubuntu-20(focal)支持postgres9.6的，然后试着按原来源码编译的方式打包postgres-9.6 armv7的版本。</p>

<p>安装编译的依赖，编译打包除了慢一点（一个通宵）看起来都通过了（中间过程漫长有冗长没细细的看）。</p>

<p>打包好deb，等安装的时刻，就出现依赖不对找不到了。齐了怪了，编译都“通过”了，安装就不行，perl缺的依赖又找不到对应的版本。又重新弄了两遍！！！这个时间和精神消耗，我这身子骨已经跟它耗不起了。改变方式。</p>

<p>3、docker postgres有镜像也是11之后的，更别说是armv7的9.6了。</p>

<p>4、经过几天的折腾，狠狠心咬咬牙，换最新版本。只能最后再迁移数据，这样估计快一点。</p>

<h2>实践与改进</h2>

<p>确定使用最新的版本后，找到 <a href="https://github.com/sameersbn/docker-redmine/releases/tag/5.1.0">sameersbn/redmine:5.10</a> 然后用的是postgres-15数据库。在上面折腾的过程中，已经找过armv7的postgres数据库了，这次直接基于官方armv7-postgres-15作为基础来构建我这个应用数据库的镜像。</p>

<h3>postgres</h3>

<p>编译 armv7-postgres15 除了在LANG上有一些些错之外，其他都是挺顺利的。修改的内容以及Dockerfile内容如下：</p>

<pre><code>root@raspberrypi:/opt/docker-postgresql-15-20230628# vim runtime/functions 

300         if [[ -z $(psql -U ${PG_USER} -Atc "SELECT 1 FROM pg_catalog.pg_user WHERE usename = '${DB_USER}'";) ]]; then
301           #psql -U ${PG_USER} -c "CREATE ROLE \"${DB_USER}\" with LOGIN CREATEDB PASSWORD '${DB_PASS}';" &gt;/dev/null
302           psql -U ${PG_USER} -c "CREATE ROLE \"${DB_USER}\" SUPERUSER CREATEDB CREATEROLE LOGIN PASSWORD '${DB_PASS}';" &gt;/dev/null
303         fi

root@raspberrypi:/opt/docker-postgresql-15-20230628# cat Dockerfile 
FROM arm32v7/postgres:15-bullseye

LABEL maintainer="sameer@damagehead.com"

ENV LC_ALL="en_US.UTF-8" \
    LC_CTYPE="en_US.UTF-8"

ENV PG_APP_HOME="/etc/docker-postgresql" \
    PG_VERSION=15 \
    PG_USER=postgres \
    PG_HOME=/var/lib/postgresql \
    PG_RUNDIR=/run/postgresql \
    PG_LOGDIR=/var/log/postgresql \
    PG_CERTDIR=/etc/postgresql/certs

ENV PG_BINDIR=/usr/lib/postgresql/${PG_VERSION}/bin \
    PG_DATADIR=${PG_HOME}/${PG_VERSION}/main

RUN echo "LC_ALL=en_US.UTF-8" &gt;&gt; /etc/environment
RUN echo "en_US.UTF-8 UTF-8" &gt;&gt; /etc/locale.gen
RUN echo "LANG=en_US.UTF-8" &gt; /etc/locale.conf

RUN sed -i 's@http://deb.debian.org@http://mirrors.aliyun.com@g' /etc/apt/sources.list \
 &amp;&amp; apt-get update \
 &amp;&amp; DEBIAN_FRONTEND=noninteractive apt-get install -y acl sudo locales \
 &amp;&amp; update-locale LANG=C.UTF-8 LC_MESSAGES=POSIX \
 &amp;&amp; locale-gen en_US.UTF-8 \
 &amp;&amp; DEBIAN_FRONTEND=noninteractive dpkg-reconfigure locales \
 &amp;&amp; mkdir -p /etc/postgresql/${PG_VERSION}/main \
 &amp;&amp; ln -sf ${PG_DATADIR}/postgresql.conf /etc/postgresql/${PG_VERSION}/main/postgresql.conf \
 &amp;&amp; ln -sf ${PG_DATADIR}/pg_hba.conf /etc/postgresql/${PG_VERSION}/main/pg_hba.conf \
 &amp;&amp; ln -sf ${PG_DATADIR}/pg_ident.conf /etc/postgresql/${PG_VERSION}/main/pg_ident.conf \
 &amp;&amp; rm -rf ${PG_HOME} \
 &amp;&amp; rm -rf /var/lib/apt/lists/*

COPY runtime/ ${PG_APP_HOME}/

COPY entrypoint.sh /sbin/entrypoint.sh

RUN chmod 755 /sbin/entrypoint.sh

EXPOSE 5432/tcp

WORKDIR ${PG_HOME}

ENTRYPOINT ["/sbin/entrypoint.sh"]
</code></pre>

<h3>redmine</h3>

<p>再编译redmine，这个构建镜像的时刻下载依赖太慢了，可能是安装的这些软件对树莓派2要求有点过高了，多次没响应远程断掉导致要重新弄。用了screen也没有效果。</p>

<ol>
<li>开一个screen的窗口，再启动一个容器。</li>
<li>在容器里面手动安装先把依赖搞定后，最后把容器提交作为一个镜像。</li>
<li>在这个镜像的基础上再构建redmine应用的镜像。</li>
</ol>


<pre><code>root@raspberrypi:~/docker-redmine-5.1.0# docker run -ti arm32v7/ruby:2.7.8-bullseye bash 

root@e76bef6f1a9c:/# 
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - 
echo 'deb http://apt.postgresql.org/pub/repos/apt/ bullseye-pgdg main' &gt; /etc/apt/sources.list.d/pgdg.list 

sed -i 's@http://deb.debian.org@https://mirrors.aliyun.com@g' /etc/apt/sources.list &amp;&amp; apt-get update
#sed -i 's@http://deb.debian.org@https://mirrors.ustc.edu.cn@g' /etc/apt/sources.list &amp;&amp; apt-get update


# 去掉mysql和ruby依赖
apt-get install --no-install-recommends -y \
      supervisor logrotate nginx postgresql-client ca-certificates sudo tzdata \
      imagemagick subversion git cvs bzr mercurial darcs rsync locales openssh-client \
      gcc g++ make patch pkg-config gettext-base libc6-dev zlib1g-dev libxml2-dev \
      libpq5 libyaml-0-2 libcurl4 libssl1.1 uuid-dev xz-utils \
      libxslt1.1 libffi7 zlib1g gsfonts vim-tiny ghostscript sqlite3 libsqlite3-dev 

update-locale LANG=C.UTF-8 LC_MESSAGES=POSIX

gem install --no-document bundler


# 修改redmine的安装脚本
# @see https://mirrors.tuna.tsinghua.edu.cn/help/rubygems/
root@raspberrypi:/opt/docker-redmine-5.1.0# vi assets/build/install.sh 
  7 BUILD_DEPENDENCIES="wget libcurl4-openssl-dev libssl-dev libmagickcore-dev libmagickwand-dev \
  8                     libpq-dev libxslt1-dev libffi-dev libyaml-dev \
  9                     libsqlite3-dev"

 41   exec_as_redmine wget --no-check-certificate "http://www.redmine.org/releases/redmine-${REDMINE_VERSION}.tar.gz" -O /tmp/redmine-${RE    DMINE_VERSION}.tar.gz

104 exec_as_redmine gem sources --add https://mirrors.tuna.tsinghua.edu.cn/rubygems/ --remove https://rubygems.org/
105 exec_as_redmine bundle config mirror.https://rubygems.org https://mirrors.tuna.tsinghua.edu.cn/rubygems
106 exec_as_redmine bundle install -j$(nproc)

# 拷贝到容器安装redmine
root@raspberrypi:~/docker-redmine-5.1.0# docker cp assets/build/install.sh  e76bef6f1a9c:/opt/


root@e76bef6f1a9c:/# cd /opt/
export RUBY_VERSION=2.7 \
   REDMINE_VERSION=5.1.0 \
   REDMINE_USER="redmine" \
   REDMINE_HOME="/home/redmine" \
   REDMINE_LOG_DIR="/var/log/redmine" \
   REDMINE_ASSETS_DIR="/etc/docker-redmine" \
   RAILS_ENV=production

export REDMINE_INSTALL_DIR="${REDMINE_HOME}/redmine" \
   REDMINE_DATA_DIR="${REDMINE_HOME}/data" \
   REDMINE_BUILD_ASSETS_DIR="${REDMINE_ASSETS_DIR}/build" \
   REDMINE_RUNTIME_ASSETS_DIR="${REDMINE_ASSETS_DIR}/runtime"

root@e76bef6f1a9c:/# bash -x install.sh


# 安装好后，停掉容器提交作为镜像
root@raspberrypi:~/docker-redmine-5.1.0# docker stop e76bef6f1a9c
root@raspberrypi:~/docker-redmine-5.1.0# docker commit e76bef6f1a9c arm32v7/ruby:2.7.8-bullseye-redmine-base

root@raspberrypi:/opt/docker-redmine-5.1.0# cat Dockerfile 
#FROM arm32v7/ruby:2.7.8-bullseye AS add-apt-repositories
#
#RUN sed -i 's@http://deb.debian.org@https://mirrors.aliyun.com@g' /etc/apt/sources.list \
# &amp;&amp; apt-get update \
# &amp;&amp; DEBIAN_FRONTEND=noninteractive apt-get install -y wget gnupg2 \
# &amp;&amp; apt-key adv --keyserver keyserver.ubuntu.com --recv E1DD270288B4E6030699E45FA1715D88E1DF1F24 \
# &amp;&amp; apt-key adv --keyserver keyserver.ubuntu.com --recv 80F70E11F0F0D5F10CB20E62F5DA5F09C3173AA6 \
# &amp;&amp; apt-key adv --keyserver keyserver.ubuntu.com --recv 8B3981E7A6852F782CC4951600A6F0A3C300EE8C \
# &amp;&amp; wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \
# &amp;&amp; echo 'deb http://apt.postgresql.org/pub/repos/apt/ bullseye-pgdg main' &gt; /etc/apt/sources.list.d/pgdg.list 

FROM arm32v7/ruby:2.7.8-bullseye-redmine-base

LABEL maintainer="sameer@damagehead.com"

ENV RUBY_VERSION=2.7 \
    REDMINE_VERSION=5.1.0 \
    REDMINE_USER="redmine" \
    REDMINE_HOME="/home/redmine" \
    REDMINE_LOG_DIR="/var/log/redmine" \
    REDMINE_ASSETS_DIR="/etc/docker-redmine" \
    RAILS_ENV=production

ENV REDMINE_INSTALL_DIR="${REDMINE_HOME}/redmine" \
    REDMINE_DATA_DIR="${REDMINE_HOME}/data" \
    REDMINE_BUILD_ASSETS_DIR="${REDMINE_ASSETS_DIR}/build" \
    REDMINE_RUNTIME_ASSETS_DIR="${REDMINE_ASSETS_DIR}/runtime"

#COPY --from=add-apt-repositories /etc/apt/trusted.gpg /etc/apt/trusted.gpg
#
#COPY --from=add-apt-repositories /etc/apt/sources.list /etc/apt/sources.list
#COPY --from=add-apt-repositories /etc/apt/sources.list.d/pgdg.list /etc/apt/sources.list.d/
#
#RUN sed -i 's@http://deb.debian.org@https://mirrors.aliyun.com@g' /etc/apt/sources.list \
# &amp;&amp; apt-get update \
# &amp;&amp; DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \
#      supervisor logrotate nginx postgresql-client ca-certificates sudo tzdata \
#      imagemagick subversion git cvs rsync locales openssh-client \
#      gcc g++ make patch pkg-config gettext-base libxml2-dev \
#      python3-pil python3-scour libimage-exiftool-perl ffmpegthumbnailer \
#      libpq5 libyaml-0-2 libcurl4 libssl1.1 uuid-dev xz-utils \
#      libxslt1.1 vim-tiny sqlite3 libsqlite3-dev \
# &amp;&amp; update-locale LANG=C.UTF-8 LC_MESSAGES=POSIX \
# &amp;&amp; gem install --no-document bundler \
# &amp;&amp; rm -rf /var/lib/apt/lists/*

#COPY assets/build/ ${REDMINE_BUILD_ASSETS_DIR}/
#
#RUN bash ${REDMINE_BUILD_ASSETS_DIR}/install.sh

COPY assets/runtime/ ${REDMINE_RUNTIME_ASSETS_DIR}/

COPY assets/tools/ /usr/bin/

COPY entrypoint.sh /sbin/entrypoint.sh

COPY VERSION /VERSION

RUN chmod 755 /sbin/entrypoint.sh \
 &amp;&amp; sed -i '/session    required     pam_loginuid.so/c\#session    required   pam_loginuid.so' /etc/pam.d/cron

EXPOSE 80/tcp 443/tcp

WORKDIR ${REDMINE_INSTALL_DIR}

ENTRYPOINT ["/sbin/entrypoint.sh"]

CMD ["app:start"]

root@raspberrypi:/opt/docker-redmine-5.1.0# make build

root@raspberrypi:/opt/docker-redmine-5.1.0# docker images 
REPOSITORY             TAG                           IMAGE ID       CREATED        SIZE
sameersbn/postgresql   15-20230628                   cedece0ace69   1 hours ago   324MB
sameersbn/redmine      latest                        f1ab03480a1e   1 hours ago   953MB
arm32v7/ruby           2.7.8-bullseye-redmine-base   3ee3b95c4c85   1 hours ago   953MB
arm32v7/postgres       15-bullseye                   c8e0db9da7af   8 days ago     314MB
arm32v7/ruby           2.7.8-bullseye                8100b7e215f8   6 months ago   667MB
</code></pre>

<h3>redmine-3.4的数据迁移到redmine-5.1</h3>

<pre><code>root@1cd14c92899a:/var/lib/postgresql# docker ps 
CONTAINER ID   IMAGE                        COMMAND                  CREATED        STATUS      PORTS                                 NAMES
458df7209e1b   sameersbn/redmine:3.4.6      "/sbin/entrypoint.sh…"   6 months ago   Up 2 days   443/tcp, 172.21.37.204:8081-&gt;80/tcp   redmine_redmine_1
884a04c9f985   sameersbn/postgresql:9.6-2   "/sbin/entrypoint.sh"    2 years ago    Up 2 days   5432/tcp                              redmine_postgresql_1

root@1cd14c92899a:/var/lib/postgresql# pg_dump -U postgres -Cc -d redmine_production &gt;redmine.dump 


# 把redmine-5.1的也导出来一份对照，把库里已有的数据保留，在旧sql里面去掉5存在的记录（不然导入报逐渐冲突导入失败的）。

# 配置数据导入，增加旧版本需要的字段。
ALTER TABLE projects
  ADD COLUMN customers_deploys_notifications_emails character varying,
  ADD COLUMN deploys_notifications_emails character varying,
  ADD COLUMN abbreviation character varying
  ;

ALTER TABLE trackers
  ADD COLUMN is_in_chlog boolean DEFAULT false NOT NULL
  ;

ALTER TABLE users
  ADD COLUMN identity_url character varying
  ;

删掉空的表和数据还原部分。把需要的，保留有数据的表。
</code></pre>

<p>数据库备份处理不好要重新做的话，要删除对应的文件内容，然后重启即可。</p>

<pre><code>root@raspberrypi:~/docker-redmine-5.1.0# docker-compose down 
root@raspberrypi:~/docker-redmine-5.1.0# rm -rf /srv/docker/redmine

root@raspberrypi:~/docker-redmine-5.1.0# docker-compose up 
</code></pre>

<h3>图片附件解压文件</h3>

<pre><code>root@raspberrypi:/# tar zxvf srv-docker-redmine.tar.gz /srv/docker/redmine/redmine/files 
</code></pre>

<h3>redmine插件</h3>

<pre><code>root@raspberrypi:/srv/docker/redmine/redmine/plugins# unzip clipboard_image_paste-1.13.zip 
root@raspberrypi:/srv/docker/redmine/redmine/plugins# mv clipboard_image_paste-1.13 clipboard_image_paste
root@raspberrypi:/srv/docker/redmine/redmine/plugins# rm clipboard_image_paste-1.13.zip 
root@raspberrypi:~/docker-redmine-5.1.0# docker-compose up -d 


root@raspberrypi:/srv/docker/redmine/redmine/plugins# less clipboard_image_paste/init.rb
 30 # @see https://github.com/paginagmbh/redmine_lightbox2/blob/master/init.rb
 31 if Rails::VERSION::MAJOR &gt;= 5
 32   ActiveSupport::Reloader.to_prepare do
 33     require_dependency 'clipboard_image_paste/hooks'
 34     require_dependency 'clipboard_image_paste/attachment_patch'
 35   end 
 36 elsif Rails::VERSION::MAJOR &gt;= 3

# @see https://github.com/peclik/clipboard_image_paste/pull/91/commits/570acebeb5dded80f24e7b01ffddbec09c9eccb6
root@raspberrypi:/srv/docker/redmine/redmine/plugins# less clipboard_image_paste/lib/clipboard_image_paste/attachment_patch.rb
 25       #alias_method_chain :save_attachments, :pasted_images
 26       alias_method :save_attachmenets_without_pasted_images, :save_attachments
 27       alias_method :save_attachments, :save_attachments_with_pasted_images

root@raspberrypi:~/docker-redmine-5.1.0# docker-compose restart redmine 


lightbox2
https://github.com/theforeman/redmine_lightbox2/commit/9c8b41f6893d4a92bb30923684bad7a1b40fdb62

apijs
https://www.luigifab.fr/en/redmine/apijs.php

pi@raspberrypi:/srv/docker/redmine/redmine-logs $ docker logs -n 50 1e966fec7f9b
</code></pre>

<h3>docker-compose</h3>

<pre><code># @see https://github.com/docker/compose/releases/

root@raspberrypi:/usr/local/bin# ln -s docker-compose-linux-armv7 docker-compose
</code></pre>

<h2>反思与深思</h2>

<p>搞搞简单的文字还行，图片大了要计算的话就卡了！！！还是用4吧！！！</p>

<p>pi4上安装简单多了，直接在机器上编译一下镜像就可以了：</p>

<ol>
<li>postgres的用户修改下权限;</li>
<li>redmine去掉mysql的依赖。</li>
</ol>


<pre><code>
#@ pi2
root@1cd14c92899a:/var/lib/postgresql# pg_dump -U redmine -Cc -d redmine_production &gt;redmine.dump        

#@ pi4
root@d744a148ea59:/var/lib/postgresql# psql -U redmine -d postgres -f redmine.dump 

# srv的话，只需要复制redmine下的files、plugins。
</code></pre>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[树莓派4安装Clash]]></title>
    <link href="http://winse.github.io/blog/2023/03/26/clash-on-raspberry4/"/>
    <updated>2023-03-26T00:31:01+08:00</updated>
    <id>http://winse.github.io/blog/2023/03/26/clash-on-raspberry4</id>
    <content type="html"><![CDATA[<h2>安装Clash</h2>

<p>参考：<a href="https://mraddict.top/posts/clash-on-rpi/">https://mraddict.top/posts/clash-on-rpi/</a></p>

<pre><code>root@ubuntu:~# arch

# 下载上传clash
root@ubuntu:~# mv clash-linux-arm64 /usr/local/bin/

root@ubuntu:~# cd /usr/local/bin/
root@ubuntu:/usr/local/bin# chmod +x clash-linux-arm64 
root@ubuntu:/usr/local/bin# ln -s clash-linux-arm64 clash
root@ubuntu:/usr/local/bin# ls clash*
clash  clash-linux-arm64
root@ubuntu:/usr/local/bin# ls -l clash*
lrwxrwxrwx 1 root root      17 Mar 24 21:43 clash -&gt; clash-linux-arm64
-rwxr-xr-x 1 root root 8978432 Jan 29 18:59 clash-linux-arm64


# 启动一次，会生成配置和下载Country.mmdb文件：
root@ubuntu:/usr/local/bin# clash
INFO[0000] Can't find config, create a initial config file 
INFO[0000] Can't find MMDB, start download              
INFO[0344] Mixed(http+socks) proxy listening at: 127.0.0.1:7890 

# clash-ui
root@ubuntu:/usr/local/bin# cd ~/.config/clash
root@ubuntu:~/.config/clash# git clone --branch gh-pages https://github.com/Dreamacro/clash-dashboard.git    
Cloning into 'clash-dashboard'...
remote: Enumerating objects: 3951, done.
remote: Counting objects: 100% (232/232), done.
remote: Compressing objects: 100% (172/172), done.
remote: Total 3951 (delta 79), reused 189 (delta 56), pack-reused 3719
Receiving objects: 100% (3951/3951), 4.87 MiB | 21.00 KiB/s, done.
Resolving deltas: 100% (2240/2240), done.
</code></pre>

<p>配置：</p>

<pre><code>## 配置文件：https://github.com/Dreamacro/clash/wiki/Configuration#introduction
## 下载服务提供的订阅地址内容，保存到文件。

root@ubuntu:~/.config/clash# ln -s Clash_1679667989.yaml config.yaml
root@ubuntu:~/.config/clash# vi config.yaml 
  11 mode: rule
  12 log-level: debug
  13 external-ui: clash-dashboard
  14 external-controller: '0.0.0.0:9090'


root@ubuntu:~/.config/clash# clash
INFO[0000] Start initial compatible provider 🎬哔哩哔哩      
INFO[0000] Start initial compatible provider ⚓️其他流量     
INFO[0000] Start initial compatible provider ✈️Telegram 
INFO[0000] Start initial compatible provider 🎬Netflix   
INFO[0000] Start initial compatible provider 🍎苹果服务      
INFO[0000] Start initial compatible provider 🎬Youtube   
INFO[0000] Start initial compatible provider 🎬国外媒体      
INFO[0000] Start initial compatible provider 🚀直接连接      
INFO[0000] Start initial compatible provider 🔰国外流量      
INFO[0000] Start initial compatible provider Ⓜ️ 微软服务    
INFO[0000] HTTP proxy listening at: 127.0.0.1:7890      
INFO[0000] RESTful API listening at: [::]:9090          
INFO[0000] SOCKS proxy listening at: 127.0.0.1:7891     
INFO[0000] Redirect proxy listening at: 127.0.0.1:7892 


# 打开 http://192.168.123.41:9090/ui/#/settings 页面后，添加一下服务器的ip地址，就可以访问了。
</code></pre>

<h2>安装conda</h2>

<pre><code># 用代理下载后面的数据
root@ubuntu:~# export http_proxy="http://127.0.0.1:7890"
root@ubuntu:~# export https_proxy="http://127.0.0.1:7890"

root@ubuntu:~# wget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-aarch64.sh     
--2023-03-24 23:16:35--  https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-aarch64.sh
Connecting to 127.0.0.1:7890... connected.
Proxy request sent, awaiting response... 302 Found
Location: https://github.com/conda-forge/miniforge/releases/download/22.11.1-4/Miniforge3-Linux-aarch64.sh [following]
--2023-03-24 23:16:35--  https://github.com/conda-forge/miniforge/releases/download/22.11.1-4/Miniforge3-Linux-aarch64.sh
Reusing existing connection to github.com:443.
Proxy request sent, awaiting response... 302 Found
Location: https://objects.githubusercontent.com/github-production-release-asset-2e65be/221584272/97169057-ca90-4fce-873e-a7d6d2e1db90?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20230324%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20230324T151635Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=c46561816462b1e2bcd82d8b99f8ce840f4ff9b6214fda083828079783d43f0f&amp;X-Amz-SignedHeaders=host&amp;actor_id=0&amp;key_id=0&amp;repo_id=221584272&amp;response-content-disposition=attachment%3B%20filename%3DMiniforge3-Linux-aarch64.sh&amp;response-content-type=application%2Foctet-stream [following]
--2023-03-24 23:16:36--  https://objects.githubusercontent.com/github-production-release-asset-2e65be/221584272/97169057-ca90-4fce-873e-a7d6d2e1db90?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20230324%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20230324T151635Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=c46561816462b1e2bcd82d8b99f8ce840f4ff9b6214fda083828079783d43f0f&amp;X-Amz-SignedHeaders=host&amp;actor_id=0&amp;key_id=0&amp;repo_id=221584272&amp;response-content-disposition=attachment%3B%20filename%3DMiniforge3-Linux-aarch64.sh&amp;response-content-type=application%2Foctet-stream
Connecting to 127.0.0.1:7890... connected.
Proxy request sent, awaiting response... 200 OK
Length: 53550114 (51M) [application/octet-stream]
Saving to: ‘Miniforge3-Linux-aarch64.sh.1’

Miniforge3-Linux-aarch64.sh.1                    1%[&gt;                                                                                                  ] 752.00K  9.01KB/s    in 74s     

2023-03-24 23:17:51 (10.2 KB/s) - Connection closed at byte 770048. Retrying.

## 默认用的是direct，没有翻墙。在9090/ui页面先把原来的[连接]停掉，然后把[代理]切换到香港的节点

--2023-03-24 23:17:52--  (try: 2)  https://objects.githubusercontent.com/github-production-release-asset-2e65be/221584272/97169057-ca90-4fce-873e-a7d6d2e1db90?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20230324%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20230324T151635Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=c46561816462b1e2bcd82d8b99f8ce840f4ff9b6214fda083828079783d43f0f&amp;X-Amz-SignedHeaders=host&amp;actor_id=0&amp;key_id=0&amp;repo_id=221584272&amp;response-content-disposition=attachment%3B%20filename%3DMiniforge3-Linux-aarch64.sh&amp;response-content-type=application%2Foctet-stream
Connecting to 127.0.0.1:7890... connected.
Proxy request sent, awaiting response... 206 Partial Content
Length: 53550114 (51M), 52780066 (50M) remaining [application/octet-stream]
Saving to: ‘Miniforge3-Linux-aarch64.sh.1’

Miniforge3-Linux-aarch64.sh.1                  100%[+=================================================================================================&gt;]  51.07M  2.79MB/s    in 21s     

2023-03-24 23:18:14 (2.39 MB/s) - ‘Miniforge3-Linux-aarch64.sh.1’ saved [53550114/53550114]

root@ubuntu:~# 

root@ubuntu:~# rm -rf Miniforge3-Linux-aarch64.sh
root@ubuntu:~# mv Miniforge3-Linux-aarch64.sh.1 Miniforge3-Linux-aarch64.sh
root@ubuntu:~# chmod +x Miniforge3-Linux-aarch64.sh

root@ubuntu:~# rm -rf /usr/local/miniforge3
root@ubuntu:~# ./Miniforge3-Linux-aarch64.sh 

Welcome to Miniforge3 22.11.1-4

In order to continue the installation process, please review the license
agreement.
Please, press ENTER to continue
&gt;&gt;&gt;  
Miniforge installer code uses BSD-3-Clause license as stated below.

Binary packages that come with it have their own licensing terms
and by installing miniforge you agree to the licensing terms of individual
packages as well. They include different OSI-approved licenses including
the GNU General Public License and can be found in pkgs/&lt;pkg-name&gt;/info/licenses
folders.

Miniforge installer comes with a boostrapping executable that is used
when installing miniforge and is deleted after miniforge is installed.
The bootstrapping executable uses micromamba, cli11, cpp-filesystem,
curl, c-ares, krb5, libarchive, libev, lz4, nghttp2, openssl, libsolv,
nlohmann-json, reproc and zstd which are licensed under BSD-3-Clause,
MIT and OpenSSL licenses. Licenses and copyright notices of these
projects can be found at the following URL.
https://github.com/conda-forge/micromamba-feedstock/tree/master/recipe.

=============================================================================

Copyright (c) 2019-2022, conda-forge
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


Do you accept the license terms? [yes|no]
[no] &gt;&gt;&gt; yes

Miniforge3 will now be installed into this location:
/root/miniforge3

  - Press ENTER to confirm the location
  - Press CTRL-C to abort the installation
  - Or specify a different location below

[/root/miniforge3] &gt;&gt;&gt; /usr/local/miniforge3   
PREFIX=/usr/local/miniforge3
Unpacking payload ...
Extracting ca-certificates-2022.12.7-h4fd8a4c_0.conda
Extracting ld_impl_linux-aarch64-2.40-h2d8c526_0.conda
Extracting libgomp-12.2.0-h607ecd0_19.tar.bz2
Extracting libstdcxx-ng-12.2.0-hc13a102_19.tar.bz2
Extracting python_abi-3.10-3_cp310.conda
Extracting tzdata-2022g-h191b570_0.conda
Extracting _openmp_mutex-4.5-2_gnu.tar.bz2
Extracting libgcc-ng-12.2.0-h607ecd0_19.tar.bz2
Extracting bzip2-1.0.8-hf897c2e_4.tar.bz2
Extracting libffi-3.4.2-h3557bc0_5.tar.bz2
Extracting libnsl-2.0.0-hf897c2e_0.tar.bz2
Extracting libuuid-2.32.1-hf897c2e_1000.tar.bz2
Extracting libzlib-1.2.13-h4e544f5_4.tar.bz2
Extracting ncurses-6.3-headf329_1.tar.bz2
Extracting openssl-3.0.8-hb4cce97_0.conda
Extracting xz-5.2.6-h9cdd2b7_0.tar.bz2
Extracting libsqlite-3.40.0-hf9034f9_0.tar.bz2
Extracting readline-8.1.2-h38e3740_0.tar.bz2
Extracting tk-8.6.12-hd8af866_0.tar.bz2
Extracting zstd-1.5.2-h44f6412_6.conda
Extracting python-3.10.9-ha43d526_0_cpython.conda
Extracting certifi-2022.12.7-pyhd8ed1ab_0.conda
Extracting charset-normalizer-2.1.1-pyhd8ed1ab_0.tar.bz2
Extracting colorama-0.4.6-pyhd8ed1ab_0.tar.bz2
Extracting idna-3.4-pyhd8ed1ab_0.tar.bz2
Extracting pluggy-1.0.0-pyhd8ed1ab_5.tar.bz2
Extracting pycosat-0.6.4-py310h761cc84_1.tar.bz2
Extracting pycparser-2.21-pyhd8ed1ab_0.tar.bz2
Extracting pysocks-1.7.1-pyha2e5f31_6.tar.bz2
Extracting ruamel.yaml.clib-0.2.7-py310hb89b984_1.conda
Extracting setuptools-65.6.3-pyhd8ed1ab_0.conda
Extracting toolz-0.12.0-pyhd8ed1ab_0.tar.bz2
Extracting wheel-0.38.4-pyhd8ed1ab_0.tar.bz2
Extracting cffi-1.15.1-py310hf0c4615_3.conda
Extracting pip-23.0-pyhd8ed1ab_0.conda
Extracting ruamel.yaml-0.17.21-py310h761cc84_2.tar.bz2
Extracting tqdm-4.64.1-pyhd8ed1ab_0.tar.bz2
Extracting brotlipy-0.7.0-py310h761cc84_1005.tar.bz2
Extracting cryptography-39.0.1-py310he4ba0b1_0.conda
Extracting zstandard-0.19.0-py310hde4b81c_1.conda
Extracting conda-package-streaming-0.7.0-pyhd8ed1ab_1.conda
Extracting pyopenssl-23.0.0-pyhd8ed1ab_0.conda
Extracting conda-package-handling-2.0.2-pyh38be061_0.conda
Extracting urllib3-1.26.14-pyhd8ed1ab_0.conda
Extracting requests-2.28.2-pyhd8ed1ab_0.conda
Extracting conda-22.11.1-py310h4c7bcd0_1.conda

Installing base environment...


                                           __
          __  ______ ___  ____ _____ ___  / /_  ____ _
         / / / / __ `__ \/ __ `/ __ `__ \/ __ \/ __ `/
        / /_/ / / / / / / /_/ / / / / / / /_/ / /_/ /
       / .___/_/ /_/ /_/\__,_/_/ /_/ /_/_.___/\__,_/
      /_/

Transaction

  Prefix: /usr/local/miniforge3

  Updating specs:

   - conda-forge/linux-aarch64::ca-certificates==2022.12.7=h4fd8a4c_0[md5=2450fbcaf65634e0d071e47e2b8487b4]
   - conda-forge/linux-aarch64::ld_impl_linux-aarch64==2.40=h2d8c526_0[md5=16246d69e945d0b1969a6099e7c5d457]
   - conda-forge/linux-aarch64::libgomp==12.2.0=h607ecd0_19[md5=65b9cb876525dcb2e74a90cf02c6762a]
   - conda-forge/linux-aarch64::libstdcxx-ng==12.2.0=hc13a102_19[md5=981741cd4321edd5c504b48f74fe91f2]
   - conda-forge/linux-aarch64::python_abi==3.10=3_cp310[md5=7f4f00b03d3a7c4d4b8b987e5da461a9]
   - conda-forge/noarch::tzdata==2022g=h191b570_0[md5=51fc4fcfb19f5d95ffc8c339db5068e8]
   - conda-forge/linux-aarch64::_openmp_mutex==4.5=2_gnu[md5=6168d71addc746e8f2b8d57dfd2edcea]
   - conda-forge/linux-aarch64::libgcc-ng==12.2.0=h607ecd0_19[md5=8456a29b6d9fc3123ccb9a966b6b2c49]
   - conda-forge/linux-aarch64::bzip2==1.0.8=hf897c2e_4[md5=2d787570a729e273a4e75775ddf3348a]
   - conda-forge/linux-aarch64::libffi==3.4.2=h3557bc0_5[md5=dddd85f4d52121fab0a8b099c5e06501]
   - conda-forge/linux-aarch64::libnsl==2.0.0=hf897c2e_0[md5=36fdbc05c9d9145ece86f5a63c3f352e]
   - conda-forge/linux-aarch64::libuuid==2.32.1=hf897c2e_1000[md5=e038da5ef9095b0d79aac14a311394e7]
   - conda-forge/linux-aarch64::libzlib==1.2.13=h4e544f5_4[md5=88596b6277fe6d39f046983aae6044db]
   - conda-forge/linux-aarch64::ncurses==6.3=headf329_1[md5=486b68148e121bc8bbadc3cefae4c04f]
   - conda-forge/linux-aarch64::openssl==3.0.8=hb4cce97_0[md5=268fe30a14a3f40fe54da04fc053fd2d]
   - conda-forge/linux-aarch64::xz==5.2.6=h9cdd2b7_0[md5=83baad393a31d59c20b63ba4da6592df]
   - conda-forge/linux-aarch64::libsqlite==3.40.0=hf9034f9_0[md5=9afb0d5dbaa403858a660cd0b4a31d29]
   - conda-forge/linux-aarch64::readline==8.1.2=h38e3740_0[md5=3cdbfb7d7b63ae2c2d35bb167d257ecd]
   - conda-forge/linux-aarch64::tk==8.6.12=hd8af866_0[md5=7894e82ff743bd96c76585ddebe28e2a]
   - conda-forge/linux-aarch64::zstd==1.5.2=h44f6412_6[md5=6d0d1cd6d184129eabb96bb220afb5b2]
   - conda-forge/linux-aarch64::python==3.10.9=ha43d526_0_cpython[md5=24478dd738f2d557efe2a4fc6a248eb3]
   - conda-forge/noarch::certifi==2022.12.7=pyhd8ed1ab_0[md5=fb9addc3db06e56abe03e0e9f21a63e6]
   - conda-forge/noarch::charset-normalizer==2.1.1=pyhd8ed1ab_0[md5=c1d5b294fbf9a795dec349a6f4d8be8e]
   - conda-forge/noarch::colorama==0.4.6=pyhd8ed1ab_0[md5=3faab06a954c2a04039983f2c4a50d99]
   - conda-forge/noarch::idna==3.4=pyhd8ed1ab_0[md5=34272b248891bddccc64479f9a7fffed]
   - conda-forge/noarch::pluggy==1.0.0=pyhd8ed1ab_5[md5=7d301a0d25f424d96175f810935f0da9]
   - conda-forge/linux-aarch64::pycosat==0.6.4=py310h761cc84_1[md5=c701cff6d6e7907c93ab603e58082a7c]
   - conda-forge/noarch::pycparser==2.21=pyhd8ed1ab_0[md5=076becd9e05608f8dc72757d5f3a91ff]
   - conda-forge/noarch::pysocks==1.7.1=pyha2e5f31_6[md5=2a7de29fb590ca14b5243c4c812c8025]
   - conda-forge/linux-aarch64::ruamel.yaml.clib==0.2.7=py310hb89b984_1[md5=89972c78c36ed3261c22bde7c012be03]
   - conda-forge/noarch::setuptools==65.6.3=pyhd8ed1ab_0[md5=9600fc9524d3f821e6a6d58c52f5bf5a]
   - conda-forge/noarch::toolz==0.12.0=pyhd8ed1ab_0[md5=92facfec94bc02d6ccf42e7173831a36]
   - conda-forge/noarch::wheel==0.38.4=pyhd8ed1ab_0[md5=c829cfb8cb826acb9de0ac1a2df0a940]
   - conda-forge/linux-aarch64::cffi==1.15.1=py310hf0c4615_3[md5=a2bedcb1d205485ea32fe5d2bd6fd970]
   - conda-forge/noarch::pip==23.0=pyhd8ed1ab_0[md5=85b35999162ec95f9f999bac15279c02]
   - conda-forge/linux-aarch64::ruamel.yaml==0.17.21=py310h761cc84_2[md5=98c0b13f20fcb4f5080554d137e39b37]
   - conda-forge/noarch::tqdm==4.64.1=pyhd8ed1ab_0[md5=5526ff3f88f9db87bb0924b9ce575345]
   - conda-forge/linux-aarch64::brotlipy==0.7.0=py310h761cc84_1005[md5=66934993368d01f896652925d3ac7e66]
   - conda-forge/linux-aarch64::cryptography==39.0.1=py310he4ba0b1_0[md5=3129345d217e5fd6488df794e49e327b]
   - conda-forge/linux-aarch64::zstandard==0.19.0=py310hde4b81c_1[md5=d4b3cc980179c38949c83fe23057d97c]
   - conda-forge/noarch::conda-package-streaming==0.7.0=pyhd8ed1ab_1[md5=1a2fa9e53cfbc2e4d9ab21990805a436]
   - conda-forge/noarch::pyopenssl==23.0.0=pyhd8ed1ab_0[md5=d41957700e83bbb925928764cb7f8878]
   - conda-forge/noarch::conda-package-handling==2.0.2=pyh38be061_0[md5=44800e9bd13143292097c65e57323038]
   - conda-forge/noarch::urllib3==1.26.14=pyhd8ed1ab_0[md5=01f33ad2e0aaf6b5ba4add50dad5ad29]
   - conda-forge/noarch::requests==2.28.2=pyhd8ed1ab_0[md5=11d178fc55199482ee48d6812ea83983]
   - conda-forge/linux-aarch64::conda==22.11.1=py310h4c7bcd0_1[md5=a71c4cc6bd77f61c0c1601b28291c460]


  Package                      Version  Build               Channel           Size
────────────────────────────────────────────────────────────────────────────────────
  Install:
────────────────────────────────────────────────────────────────────────────────────

  + _openmp_mutex                  4.5  2_gnu               conda-forge     Cached
  + brotlipy                     0.7.0  py310h761cc84_1005  conda-forge     Cached
  + bzip2                        1.0.8  hf897c2e_4          conda-forge     Cached
  + ca-certificates          2022.12.7  h4fd8a4c_0          conda-forge     Cached
  + certifi                  2022.12.7  pyhd8ed1ab_0        conda-forge     Cached
  + cffi                        1.15.1  py310hf0c4615_3     conda-forge     Cached
  + charset-normalizer           2.1.1  pyhd8ed1ab_0        conda-forge     Cached
  + colorama                     0.4.6  pyhd8ed1ab_0        conda-forge     Cached
  + conda                      22.11.1  py310h4c7bcd0_1     conda-forge     Cached
  + conda-package-handling       2.0.2  pyh38be061_0        conda-forge     Cached
  + conda-package-streaming      0.7.0  pyhd8ed1ab_1        conda-forge     Cached
  + cryptography                39.0.1  py310he4ba0b1_0     conda-forge     Cached
  + idna                           3.4  pyhd8ed1ab_0        conda-forge     Cached
  + ld_impl_linux-aarch64         2.40  h2d8c526_0          conda-forge     Cached
  + libffi                       3.4.2  h3557bc0_5          conda-forge     Cached
  + libgcc-ng                   12.2.0  h607ecd0_19         conda-forge     Cached
  + libgomp                     12.2.0  h607ecd0_19         conda-forge     Cached
  + libnsl                       2.0.0  hf897c2e_0          conda-forge     Cached
  + libsqlite                   3.40.0  hf9034f9_0          conda-forge     Cached
  + libstdcxx-ng                12.2.0  hc13a102_19         conda-forge     Cached
  + libuuid                     2.32.1  hf897c2e_1000       conda-forge     Cached
  + libzlib                     1.2.13  h4e544f5_4          conda-forge     Cached
  + ncurses                        6.3  headf329_1          conda-forge     Cached
  + openssl                      3.0.8  hb4cce97_0          conda-forge     Cached
  + pip                           23.0  pyhd8ed1ab_0        conda-forge     Cached
  + pluggy                       1.0.0  pyhd8ed1ab_5        conda-forge     Cached
  + pycosat                      0.6.4  py310h761cc84_1     conda-forge     Cached
  + pycparser                     2.21  pyhd8ed1ab_0        conda-forge     Cached
  + pyopenssl                   23.0.0  pyhd8ed1ab_0        conda-forge     Cached
  + pysocks                      1.7.1  pyha2e5f31_6        conda-forge     Cached
  + python                      3.10.9  ha43d526_0_cpython  conda-forge     Cached
  + python_abi                    3.10  3_cp310             conda-forge     Cached
  + readline                     8.1.2  h38e3740_0          conda-forge     Cached
  + requests                    2.28.2  pyhd8ed1ab_0        conda-forge     Cached
  + ruamel.yaml                0.17.21  py310h761cc84_2     conda-forge     Cached
  + ruamel.yaml.clib             0.2.7  py310hb89b984_1     conda-forge     Cached
  + setuptools                  65.6.3  pyhd8ed1ab_0        conda-forge     Cached
  + tk                          8.6.12  hd8af866_0          conda-forge     Cached
  + toolz                       0.12.0  pyhd8ed1ab_0        conda-forge     Cached
  + tqdm                        4.64.1  pyhd8ed1ab_0        conda-forge     Cached
  + tzdata                       2022g  h191b570_0          conda-forge     Cached
  + urllib3                    1.26.14  pyhd8ed1ab_0        conda-forge     Cached
  + wheel                       0.38.4  pyhd8ed1ab_0        conda-forge     Cached
  + xz                           5.2.6  h9cdd2b7_0          conda-forge     Cached
  + zstandard                   0.19.0  py310hde4b81c_1     conda-forge     Cached
  + zstd                         1.5.2  h44f6412_6          conda-forge     Cached

  Summary:

  Install: 46 packages

  Total download: 0 B

────────────────────────────────────────────────────────────────────────────────────



Transaction starting
Linking ca-certificates-2022.12.7-h4fd8a4c_0
Linking ld_impl_linux-aarch64-2.40-h2d8c526_0
Linking libgomp-12.2.0-h607ecd0_19
Linking libstdcxx-ng-12.2.0-hc13a102_19
Linking python_abi-3.10-3_cp310
Linking tzdata-2022g-h191b570_0
Linking _openmp_mutex-4.5-2_gnu
Linking libgcc-ng-12.2.0-h607ecd0_19
Linking bzip2-1.0.8-hf897c2e_4
Linking libffi-3.4.2-h3557bc0_5
Linking libnsl-2.0.0-hf897c2e_0
Linking libuuid-2.32.1-hf897c2e_1000
Linking libzlib-1.2.13-h4e544f5_4
Linking ncurses-6.3-headf329_1
Linking openssl-3.0.8-hb4cce97_0
Linking xz-5.2.6-h9cdd2b7_0
Linking libsqlite-3.40.0-hf9034f9_0
Linking readline-8.1.2-h38e3740_0
Linking tk-8.6.12-hd8af866_0
Linking zstd-1.5.2-h44f6412_6
Linking python-3.10.9-ha43d526_0_cpython
Linking certifi-2022.12.7-pyhd8ed1ab_0
Linking charset-normalizer-2.1.1-pyhd8ed1ab_0
Linking colorama-0.4.6-pyhd8ed1ab_0
Linking idna-3.4-pyhd8ed1ab_0
Linking pluggy-1.0.0-pyhd8ed1ab_5
Linking pycosat-0.6.4-py310h761cc84_1
Linking pycparser-2.21-pyhd8ed1ab_0
Linking pysocks-1.7.1-pyha2e5f31_6
Linking ruamel.yaml.clib-0.2.7-py310hb89b984_1
Linking setuptools-65.6.3-pyhd8ed1ab_0
Linking toolz-0.12.0-pyhd8ed1ab_0
Linking wheel-0.38.4-pyhd8ed1ab_0
Linking cffi-1.15.1-py310hf0c4615_3
Linking pip-23.0-pyhd8ed1ab_0
Linking ruamel.yaml-0.17.21-py310h761cc84_2
Linking tqdm-4.64.1-pyhd8ed1ab_0
Linking brotlipy-0.7.0-py310h761cc84_1005
Linking cryptography-39.0.1-py310he4ba0b1_0
Linking zstandard-0.19.0-py310hde4b81c_1
Linking conda-package-streaming-0.7.0-pyhd8ed1ab_1
Linking pyopenssl-23.0.0-pyhd8ed1ab_0
Linking conda-package-handling-2.0.2-pyh38be061_0
Linking urllib3-1.26.14-pyhd8ed1ab_0
Linking requests-2.28.2-pyhd8ed1ab_0
Linking conda-22.11.1-py310h4c7bcd0_1
Transaction finished
installation finished.
Do you wish the installer to initialize Miniforge3
by running conda init? [yes|no]
[no] &gt;&gt;&gt; yes
no change     /usr/local/miniforge3/condabin/conda
no change     /usr/local/miniforge3/bin/conda
no change     /usr/local/miniforge3/bin/conda-env
no change     /usr/local/miniforge3/bin/activate
no change     /usr/local/miniforge3/bin/deactivate
no change     /usr/local/miniforge3/etc/profile.d/conda.sh
no change     /usr/local/miniforge3/etc/fish/conf.d/conda.fish
no change     /usr/local/miniforge3/shell/condabin/Conda.psm1
no change     /usr/local/miniforge3/shell/condabin/conda-hook.ps1
no change     /usr/local/miniforge3/lib/python3.10/site-packages/xontrib/conda.xsh
no change     /usr/local/miniforge3/etc/profile.d/conda.csh
modified      /root/.bashrc

==&gt; For changes to take effect, close and re-open your current shell. &lt;==

If you'd prefer that conda's base environment not be activated on startup, 
   set the auto_activate_base parameter to false: 

conda config --set auto_activate_base false

Thank you for installing Miniforge3!
root@ubuntu:~# 
</code></pre>

<p>这里修改了 /root/.bashrc 添加了：</p>

<pre><code># &gt;&gt;&gt; conda initialize &gt;&gt;&gt;
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/usr/local/miniforge3/bin/conda' 'shell.bash' 'hook' 2&gt; /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/usr/local/miniforge3/etc/profile.d/conda.sh" ]; then
        . "/usr/local/miniforge3/etc/profile.d/conda.sh"
    else
        export PATH="/usr/local/miniforge3/bin:$PATH"
    fi
fi
unset __conda_setup
# &lt;&lt;&lt; conda initialize &lt;&lt;&lt;
</code></pre>

<p>为了重新加载环境变量，新开一个窗口，查看版本：</p>

<pre><code>(base) root@ubuntu:~# python -V
Python 3.10.9
(base) root@ubuntu:~# 
(base) root@ubuntu:~# conda -V
conda 22.11.1

(base) root@ubuntu:~# python3
Python 3.10.9 | packaged by conda-forge | (main, Feb  2 2023, 20:11:30) [GCC 11.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.architecture()
('64bit', 'ELF')
&gt;&gt;&gt; 
</code></pre>

<p>使用conda新建一个python3.8的配置 <a href="https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html">https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html</a> ：</p>

<pre><code>(base) root@ubuntu:~# conda info --envs
# conda environments:
#
base                  *  /usr/local/miniforge3

(base) root@ubuntu:~# export http_proxy="http://127.0.0.1:7890"
(base) root@ubuntu:~# export https_proxy="http://127.0.0.1:7890" 

(base) root@ubuntu:~# conda create -n openai python=3.8 
Collecting package metadata (current_repodata.json): done
Solving environment: done


==&gt; WARNING: A newer version of conda exists. &lt;==
  current version: 22.11.1
  latest version: 23.1.0

Please update conda by running

    $ conda update -n base -c conda-forge conda

Or to minimize the number of packages updated during conda update use

     conda install conda=23.1.0



## Package Plan ##

  environment location: /usr/local/miniforge3/envs/openai

  added / updated specs:
    - python=3.8


The following packages will be downloaded:

    package                    |            build
    ---------------------------|-----------------
    pypy3.8-7.3.11             |       hf9a8208_0        31.6 MB  conda-forge
    ------------------------------------------------------------
                                           Total:        31.6 MB

The following NEW packages will be INSTALLED:

  _openmp_mutex      conda-forge/linux-aarch64::_openmp_mutex-4.5-2_gnu 
  bzip2              conda-forge/linux-aarch64::bzip2-1.0.8-hf897c2e_4 
  ca-certificates    conda-forge/linux-aarch64::ca-certificates-2022.12.7-h4fd8a4c_0 
  expat              conda-forge/linux-aarch64::expat-2.5.0-ha18d298_0 
  gdbm               conda-forge/linux-aarch64::gdbm-1.18-h0a1914f_2 
  libffi             conda-forge/linux-aarch64::libffi-3.4.2-h3557bc0_5 
  libgcc-ng          conda-forge/linux-aarch64::libgcc-ng-12.2.0-h607ecd0_19 
  libgomp            conda-forge/linux-aarch64::libgomp-12.2.0-h607ecd0_19 
  libsqlite          conda-forge/linux-aarch64::libsqlite-3.40.0-hf9034f9_0 
  libstdcxx-ng       conda-forge/linux-aarch64::libstdcxx-ng-12.2.0-hc13a102_19 
  libzlib            conda-forge/linux-aarch64::libzlib-1.2.13-h4e544f5_4 
  ncurses            conda-forge/linux-aarch64::ncurses-6.3-headf329_1 
  openssl            conda-forge/linux-aarch64::openssl-3.1.0-hb4cce97_0 
  pip                conda-forge/noarch::pip-23.0.1-pyhd8ed1ab_0 
  pypy3.8            conda-forge/linux-aarch64::pypy3.8-7.3.11-hf9a8208_0 
  python             conda-forge/linux-aarch64::python-3.8.16-0_73_pypy 
  python_abi         conda-forge/linux-aarch64::python_abi-3.8-3_pypy38_pp73 
  readline           conda-forge/linux-aarch64::readline-8.2-h8fc344f_1 
  setuptools         conda-forge/noarch::setuptools-67.6.0-pyhd8ed1ab_0 
  sqlite             conda-forge/linux-aarch64::sqlite-3.40.0-h69ca7e5_0 
  tk                 conda-forge/linux-aarch64::tk-8.6.12-hd8af866_0 
  wheel              conda-forge/noarch::wheel-0.40.0-pyhd8ed1ab_0 
  xz                 conda-forge/linux-aarch64::xz-5.2.6-h9cdd2b7_0 
  zlib               conda-forge/linux-aarch64::zlib-1.2.13-h4e544f5_4 


Proceed ([y]/n)? y


Downloading and Extracting Packages

Preparing transaction: done
Verifying transaction: done
Executing transaction: done
#
# To activate this environment, use
#
#     $ conda activate openai
#
# To deactivate an active environment, use
#
#     $ conda deactivate

(base) root@ubuntu:~# 
</code></pre>

<p>激活配置：</p>

<pre><code>(base) root@ubuntu:~# conda activate openai
(openai) root@ubuntu:~# 
(openai) root@ubuntu:~# python --version
Python 3.8.16 | packaged by conda-forge | (a9dbdca6, Jan 29 2023, 10:19:50)
[PyPy 7.3.11 with GCC 11.3.0]
(openai) root@ubuntu:~# pip --version 
pip 23.0.1 from /usr/local/miniforge3/envs/openai/lib/pypy3.8/site-packages/pip (python 3.8)
(openai) root@ubuntu:~# git clone https://github.com/zhayujie/bot-on-anything
Cloning into 'bot-on-anything'...
remote: Enumerating objects: 644, done.
remote: Counting objects: 100% (271/271), done.
remote: Compressing objects: 100% (116/116), done.
remote: Total 644 (delta 190), reused 194 (delta 154), pack-reused 373
Receiving objects: 100% (644/644), 588.10 KiB | 448.00 KiB/s, done.
Resolving deltas: 100% (373/373), done.
(openai) root@ubuntu:~# 
(openai) root@ubuntu:~# pip3 install itchat-uos==1.5.0.dev0
Collecting itchat-uos==1.5.0.dev0
  Downloading itchat_uos-1.5.0.dev0-py3-none-any.whl (52 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 52.5/52.5 kB 244.0 kB/s eta 0:00:00
Collecting requests
  Downloading requests-2.28.2-py3-none-any.whl (62 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 62.8/62.8 kB 409.1 kB/s eta 0:00:00
Collecting pyqrcode
  Downloading PyQRCode-1.2.1.zip (41 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 41.9/41.9 kB 961.5 kB/s eta 0:00:00
  Preparing metadata (setup.py) ... done
Collecting pypng
  Downloading pypng-0.20220715.0-py3-none-any.whl (58 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 58.1/58.1 kB 540.0 kB/s eta 0:00:00
Collecting charset-normalizer&lt;4,&gt;=2
  Downloading charset_normalizer-3.1.0-py3-none-any.whl (46 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 46.2/46.2 kB 642.4 kB/s eta 0:00:00
Collecting idna&lt;4,&gt;=2.5
  Downloading idna-3.4-py3-none-any.whl (61 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 61.5/61.5 kB 567.0 kB/s eta 0:00:00
Collecting urllib3&lt;1.27,&gt;=1.21.1
  Downloading urllib3-1.26.15-py2.py3-none-any.whl (140 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 140.9/140.9 kB 1.0 MB/s eta 0:00:00
Collecting certifi&gt;=2017.4.17
  Downloading certifi-2022.12.7-py3-none-any.whl (155 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 155.3/155.3 kB 1.2 MB/s eta 0:00:00
Building wheels for collected packages: pyqrcode
  Building wheel for pyqrcode (setup.py) ... done
  Created wheel for pyqrcode: filename=PyQRCode-1.2.1-py3-none-any.whl size=36228 sha256=ba8cd080e7793f5e55c14fa704e57c1459ae29aa6481c719833bf9e148de5ad0
  Stored in directory: /root/.cache/pip/wheels/5f/46/eb/231c89e0ae989c528db1a30d3aae90c4fee29f14d4e0369312
Successfully built pyqrcode
Installing collected packages: pyqrcode, pypng, urllib3, idna, charset-normalizer, certifi, requests, itchat-uos
Successfully installed certifi-2022.12.7 charset-normalizer-3.1.0 idna-3.4 itchat-uos-1.5.0.dev0 pypng-0.20220715.0 pyqrcode-1.2.1 requests-2.28.2 urllib3-1.26.15
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
(openai) root@ubuntu:~# 
(openai) root@ubuntu:~# pip3 install --upgrade openai
Collecting openai
  Downloading openai-0.27.2-py3-none-any.whl (70 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 70.1/70.1 kB 277.1 kB/s eta 0:00:00
Requirement already satisfied: requests&gt;=2.20 in /usr/local/miniforge3/envs/openai/lib/python3.8/site-packages (from openai) (2.28.2)
Collecting tqdm
  Downloading tqdm-4.65.0-py3-none-any.whl (77 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 77.1/77.1 kB 394.8 kB/s eta 0:00:00
Collecting aiohttp
  Downloading aiohttp-3.8.4.tar.gz (7.3 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 7.3/7.3 MB 2.1 MB/s eta 0:00:00
  Installing build dependencies ... done
  Getting requirements to build wheel ... done
  Installing backend dependencies ... done
  Preparing metadata (pyproject.toml) ... done
Requirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /usr/local/miniforge3/envs/openai/lib/python3.8/site-packages (from requests&gt;=2.20-&gt;openai) (3.1.0)
Requirement already satisfied: idna&lt;4,&gt;=2.5 in /usr/local/miniforge3/envs/openai/lib/python3.8/site-packages (from requests&gt;=2.20-&gt;openai) (3.4)
Requirement already satisfied: urllib3&lt;1.27,&gt;=1.21.1 in /usr/local/miniforge3/envs/openai/lib/python3.8/site-packages (from requests&gt;=2.20-&gt;openai) (1.26.15)
Requirement already satisfied: certifi&gt;=2017.4.17 in /usr/local/miniforge3/envs/openai/lib/python3.8/site-packages (from requests&gt;=2.20-&gt;openai) (2022.12.7)
Collecting attrs&gt;=17.3.0
  Downloading attrs-22.2.0-py3-none-any.whl (60 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 60.0/60.0 kB 834.6 kB/s eta 0:00:00
Collecting multidict&lt;7.0,&gt;=4.5
  Downloading multidict-6.0.4.tar.gz (51 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 51.3/51.3 kB 1.4 MB/s eta 0:00:00
  Installing build dependencies ... done
  Getting requirements to build wheel ... done
  Installing backend dependencies ... done
  Preparing metadata (pyproject.toml) ... done
Collecting async-timeout&lt;5.0,&gt;=4.0.0a3
  Downloading async_timeout-4.0.2-py3-none-any.whl (5.8 kB)
Collecting yarl&lt;2.0,&gt;=1.0
  Downloading yarl-1.8.2.tar.gz (172 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 172.3/172.3 kB 1.8 MB/s eta 0:00:00
  Installing build dependencies ... done
  Getting requirements to build wheel ... done
  Preparing metadata (pyproject.toml) ... done
Collecting frozenlist&gt;=1.1.1
  Downloading frozenlist-1.3.3.tar.gz (66 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 66.6/66.6 kB 392.4 kB/s eta 0:00:00
  Installing build dependencies ... done
  Getting requirements to build wheel ... done
  Preparing metadata (pyproject.toml) ... done
Collecting aiosignal&gt;=1.1.2
  Downloading aiosignal-1.3.1-py3-none-any.whl (7.6 kB)
Building wheels for collected packages: aiohttp, frozenlist, multidict, yarl
  Building wheel for aiohttp (pyproject.toml) ... done
  Created wheel for aiohttp: filename=aiohttp-3.8.4-py3-none-any.whl size=183495 sha256=6bdf6b07bb86d5e5e452691da3570b0465c4177bec6fbe8ab668aef8d27ce39c
  Stored in directory: /root/.cache/pip/wheels/46/48/fb/1fceb5376aa4eb481cec5ca10d6aece4455cf6a95030009502
  Building wheel for frozenlist (pyproject.toml) ... done
  Created wheel for frozenlist: filename=frozenlist-1.3.3-py3-none-any.whl size=9271 sha256=83ae70b8a9145f1fb94dffca4105ef207500e63dd3d8c056dc63a3f6ba664927
  Stored in directory: /root/.cache/pip/wheels/0e/e7/55/8036a4cd9267238ba8aa2d714837827b8fd836324632469067
  Building wheel for multidict (pyproject.toml) ... done
  Created wheel for multidict: filename=multidict-6.0.4-py3-none-any.whl size=9710 sha256=0a72821685197753e4e43473bbfe1232bb33cd79fa4ad9c97daae3a7e4afd097
  Stored in directory: /root/.cache/pip/wheels/23/65/1f/b5b0672ad49d2ff7b2c6ad75f24f45c407aab185c37803ae76
  Building wheel for yarl (pyproject.toml) ... done
  Created wheel for yarl: filename=yarl-1.8.2-py3-none-any.whl size=24118 sha256=4ed71ce5647e860cac0a0b5496e72e837878a33d62177d3bdded7d20d068b299
  Stored in directory: /root/.cache/pip/wheels/4e/40/2e/3261e7db3f6b66ca3d8a1ec694f2d5d87f89110e2204675597
Successfully built aiohttp frozenlist multidict yarl
Installing collected packages: tqdm, multidict, frozenlist, attrs, async-timeout, yarl, aiosignal, aiohttp, openai
Successfully installed aiohttp-3.8.4 aiosignal-1.3.1 async-timeout-4.0.2 attrs-22.2.0 frozenlist-1.3.3 multidict-6.0.4 openai-0.27.2 tqdm-4.65.0 yarl-1.8.2
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
(openai) root@ubuntu:~# 
</code></pre>

<h3>学习conda</h3>

<ul>
<li><a href="https://stackoverflow.com/questions/34534513/calling-conda-source-activate-from-bash-script">https://stackoverflow.com/questions/34534513/calling-conda-source-activate-from-bash-script</a></li>
<li><a href="https://docs.conda.io/projects/conda/en/latest/dev-guide/deep-dives/activation.html">https://docs.conda.io/projects/conda/en/latest/dev-guide/deep-dives/activation.html</a></li>
<li><a href="https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html">https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html</a></li>
</ul>


<pre><code>1
$ eval "$(conda shell.bash activate)"
$ conda shell.bash activate mamba-poc

2
eval "$(conda shell.bash hook)"
conda activate &lt;env-name&gt;

3
#!/bin/bash
source /Users/yourname/anaconda/bin/activate your_env
python --version # example way to see that your virtual env loaded as expected

4
try using

source ~/anaconda3/etc/profile.d/conda.sh

and then do

conda activate pult

5
https://unix.stackexchange.com/questions/689163/launch-terminal-and-conda-activate-env-from-bash-script
# Just activate my conda
alias my_conda='source /home/$USER/anaconda3/bin/activate &amp;&amp; conda activate MyPy38'

# Open Jupyter Notebook in my Env
alias my_jupn='source /home/$USER/anaconda3/bin/activate &amp;&amp; conda activate MyPy38 &amp;&amp; jupyter-notebook'

# Open Jupyter Lab in my Env
alias my_jupl='source /home/$USER/anaconda3/bin/activate &amp;&amp; conda activate MyPy38 &amp;&amp; jupyter-lab'

# Open Spyder in my Env
alias my_spyder='source /home/$USER/anaconda3/bin/activate &amp;&amp; conda activate MyPy38 &amp;&amp; spyder'
</code></pre>

<h2>花生壳</h2>

<ul>
<li><a href="https://hsk.oray.com/download">https://hsk.oray.com/download</a></li>
<li><a href="https://service.oray.com/question/11639.html">https://service.oray.com/question/11639.html</a></li>
</ul>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重新折腾raspberry2]]></title>
    <link href="http://winse.github.io/blog/2023/03/25/reinstall-raspberry2/"/>
    <updated>2023-03-25T21:24:35+08:00</updated>
    <id>http://winse.github.io/blog/2023/03/25/reinstall-raspberry2</id>
    <content type="html"><![CDATA[<p>买了新的raspberry4后，就没怎么去弄旧的树莓派2了，今天再次看到想着运行起来看看，插上电源后，一直亮着绿灯，然后就没其他反应了。</p>

<p>树莓派2有点旧，现在直接拿着新的手机充电器去接的时刻，一直起不来，刚开始是怀疑是用TTL接错线导致板子烧了，也没有显示器查看界面。</p>

<p>后面想着重新安装一下试试，然后拿着去接网线有线网络，这样就拿了一个旧的充电器的头。没想到这个时刻电源指示灯尽然闪起来了。想来这可能是电流过载保护了。</p>

<p>问题解决了，也把最新的重新安装的记录一下。</p>

<h2>安装</h2>

<p>参考：
* <a href="https://www.raspberrypi.com/documentation/computers/getting-started.html#installing-the-operating-system">Setting up your Raspberry Pi</a></p>

<h3>安装系统</h3>

<p>1 打开 <a href="https://www.raspberrypi.com/software/">Raspberry Pi Imager</a> 下载并安装，然后把SD card插入电脑。</p>

<p><img src="/images/blogs/rasp2/rasp2-1.png" alt="" /></p>

<p>2 设置初始化 用户和密码，并默认打开ssh服务（新版本已经去掉默认用户了，所以要设置一下 <a href="https://www.raspberrypi.com/news/raspberry-pi-bullseye-update-april-2022/">An update to Raspberry Pi OS Bullseye</a> ）</p>

<p><img src="/images/blogs/rasp2/rasp2-2.png" alt="" /></p>

<p>3 选择操作系统</p>

<p><img src="/images/blogs/rasp2/rasp2-3-1.png" alt="" /></p>

<p><img src="/images/blogs/rasp2/rasp2-3-2.png" alt="" /></p>

<p>4 连上有线网络，接通电源。然后打开路由管理界面，查看raspberry的ip地址</p>

<p><img src="/images/blogs/rasp2/rasp2-4-0.png" alt="" /></p>

<p>5 用ssh连接服务器</p>

<p><img src="/images/blogs/rasp2/rasp2-4-1.png" alt="" /></p>

<h3>配置Wifi网络</h3>

<p>原来已经买了usb的无线网卡，用 <code>ifconfig</code> 也能查看到 <code>wlan0</code> 的接口。</p>

<pre><code>root@raspberrypi:~# apt install vim 
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
  libgpm2 vim-runtime
Suggested packages:
  gpm ctags vim-doc vim-scripts
The following NEW packages will be installed:
  libgpm2 vim vim-runtime
0 upgraded, 3 newly installed, 0 to remove and 0 not upgraded.
...
update-alternatives: using /usr/bin/vim.basic to provide /usr/bin/vim (vim) in auto mode
update-alternatives: using /usr/bin/vim.basic to provide /usr/bin/vimdiff (vimdiff) in auto mode
update-alternatives: using /usr/bin/vim.basic to provide /usr/bin/rvim (rvim) in auto mode
update-alternatives: using /usr/bin/vim.basic to provide /usr/bin/rview (rview) in auto mode
update-alternatives: using /usr/bin/vim.basic to provide /usr/bin/vi (vi) in auto mode
update-alternatives: using /usr/bin/vim.basic to provide /usr/bin/view (view) in auto mode
update-alternatives: using /usr/bin/vim.basic to provide /usr/bin/ex (ex) in auto mode
Processing triggers for man-db (2.9.4-2) ...
Processing triggers for libc-bin (2.31-13+rpt2+rpi1+deb11u5) ...

root@raspberrypi:~# echo "set mouse-=a" &gt;&gt;~/.vimrc
root@raspberrypi:~# vim /etc/wpa_supplicant/wpa_supplicant.conf    
root@raspberrypi:~# 


root@raspberrypi:~# iwlist wlan0 scan

# 算一个加密的配置
root@raspberrypi:~# wpa_passphrase winse
# reading passphrase from stdin
xxx
network={
        ssid="winse"
        #psk="xxx"
        psk=xxx
}

root@raspberrypi:~# cat /etc/wpa_supplicant/wpa_supplicant.conf   
country=CN
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1

network={
        ssid="winse"
        #psk="xxx"
        psk=xxx
}


# 配置服务
pi@raspberrypi:~ $ cat /lib/systemd/system/wpa_supplicant.service 
[Unit]
Description=WPA supplicant
Before=network.target
After=dbus.service
Wants=network.target
IgnoreOnIsolate=true

[Service]
#Type=dbus
#BusName=fi.w1.wpa_supplicant1
Type=forking
ExecStart=/sbin/wpa_supplicant -u -s -O /run/wpa_supplicant -c /etc/wpa_supplicant/wpa_supplicant.conf -i wlan0 -B -D wext
Restart=always

[Install]
WantedBy=multi-user.target
#Alias=dbus-fi.w1.wpa_supplicant1.service
pi@raspberrypi:~ $ cat /etc/systemd/system/dhclient.service 
[Unit]
Description= DHCP Client
Before=network.target

[Service]
Type=forking
ExecStart=/sbin/dhclient wlan0 -v
ExecStop=/sbin/dhclient wlan0 -r
Restart=always

[Install] 
WantedBy=multi-user.target
pi@raspberrypi:~ $ 

root@raspberrypi:~# systemctl daemon-reload 

root@raspberrypi:~# systemctl stop NetworkManager
root@raspberrypi:~# systemctl enable wpa_supplicant.service 
root@raspberrypi:~# systemctl enable dhclient.service
Created symlink /etc/systemd/system/multi-user.target.wants/dhclient.service → /etc/systemd/system/dhclient.service.
</code></pre>

<p>配置好后，重启服务器，再次查看路由器管理web界面：</p>

<p><img src="/images/blogs/rasp2/rasp2-5.png" alt="" /></p>

<p>然后再把网线拔掉，再重启一次确认一下。</p>

<h3>遇到的问题：</h3>

<p>1 <a href="https://zhuanlan.zhihu.com/p/136463580">https://zhuanlan.zhihu.com/p/136463580</a></p>

<pre><code>如果树莓派系统使用的是Raspbian Stretch，则ifup命令可能不起作用，可能会收到一条错误消息，
内容如下：“ ifdown：unknown interface wlan0 ”。可以使用以下任何命令来解决：
sudo ifconfig wlan0 up
</code></pre>

<p>2 <a href="https://shumeipai.nxez.com/2017/09/13/raspberry-pi-network-configuration-before-boot.html">https://shumeipai.nxez.com/2017/09/13/raspberry-pi-network-configuration-before-boot.html</a></p>

<pre><code>说明以及不同安全性的 WiFi 配置示例：
#ssid:网络的ssid
#psk:密码
#priority:连接优先级，数字越大优先级越高（不可以是负数）
#scan_ssid:连接隐藏WiFi时需要指定该值为1

如果你的 WiFi 没有密码

network={
  ssid="你的无线网络名称（ssid）"
  key_mgmt=NONE
}
如果你的 WiFi 使用WEP加密


network={
  ssid="你的无线网络名称（ssid）"
  key_mgmt=NONE
  wep_key0="你的wifi密码"
}
如果你的 WiFi 使用WPA/WPA2加密


network={
  ssid="你的无线网络名称（ssid）"
  key_mgmt=WPA-PSK
  psk="你的wifi密码"
}

如果你不清楚 WiFi 的加密模式，可以在安卓手机上用 root explorer 打开 /data/misc/wifi/wpa/wpa_supplicant.conf，查看 WiFi 的信息。
</code></pre>

<p>3 <a href="https://www.labno3.com/2021/03/22/setting-up-raspberry-pi-wifi/">https://www.labno3.com/2021/03/22/setting-up-raspberry-pi-wifi/</a></p>

<pre><code>如果连接有问题，一定要确认Pi是否支持WiFi。也有可能你的SSID是错误的，要扫描和检查，
使用sudo iwlist wlan0 scan并检查essid字段。
这个字段应该和你在ssid字段输入的一样。
</code></pre>

<p>4 查看信息 <a href="https://www.baeldung.com/linux/connect-network-cli">https://www.baeldung.com/linux/connect-network-cli</a></p>

<pre><code>root@raspberrypi:~# ip link show wlan0
3: wlan0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq state DOWN mode DEFAULT group default qlen 1000
    link/ether 00:5a:39:e1:4d:bb brd ff:ff:ff:ff:ff:ff
root@raspberrypi:~# ip link set wlan0 up  
root@raspberrypi:~# ip link show wlan0
3: wlan0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq state DOWN mode DEFAULT group default qlen 1000
    link/ether 00:5a:39:e1:4d:bb brd ff:ff:ff:ff:ff:ff
root@raspberrypi:~# 
root@raspberrypi:~# iw wlan0 link
Not connected.

root@raspberrypi:~# ifconfig wlan0 down
root@raspberrypi:~# ifconfig wlan0 up 
root@raspberrypi:~# ifconfig wlan0
wlan0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500
        ether 00:5a:39:e1:4d:bb  txqueuelen 1000  (Ethernet)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
</code></pre>

<p>5 <a href="https://shapeshed.com/linux-wifi/">https://shapeshed.com/linux-wifi/</a></p>

<pre><code>wpa_cli
</code></pre>

<p>6 <a href="https://www.bilibili.com/read/cv8895717">https://www.bilibili.com/read/cv8895717</a></p>

<pre><code>vim /etc/wpa_supplicant/wpa_supplicant.conf 编辑该文件，在文件顶部增加以下内容
country=CN
ctrl_interface=/run/wpa_supplicant
update_config=1

特别说明：country=CN 由于各个国家wifi使用频段不同，尤其5G频段

vim /etc/rc.local 添加以下内容

#!/bin/bash

ip link set wlan0 up &amp;
wpa_supplicant -B -i wlan0 -D nl80211 -c /etc/wpa_supplicant/wpa_supplicant.conf &amp;
dhclient wlan0

exit 0
</code></pre>

<p>7 <a href="https://blog.csdn.net/u010049696/article/details/48765999">https://blog.csdn.net/u010049696/article/details/48765999</a></p>

<pre><code>配置service。进入到/usr/lib/systemd/system目录，可以看到下面四个文件：

wpa_supplicant-nl80211@.service
wpa_supplicant.service
wpa_supplicant@.service
wpa_supplicant-wired@.service

编辑wpa_supplicant.service文件，如下：

[Unit]
Description=WPA supplicant


[Service]
Type=dbus
BusName=fi.epitest.hostap.WPASupplicant
ExecStart=/usr/bin/wpa_supplicant -c/etc/wpa_supplicant/test.conf -i wlp3s0


[Install]
WantedBy=multi-user.target
Alias=dbus-fi.epitest.hostap.WPASupplicant.service

其中，只需修改ExecStart=/usr/bin/wpa_supplicant -c/etc/wpa_supplicant/test.conf -i wlp3s0即可。
</code></pre>

<p>8 <a href="https://www.linuxbabe.com/command-line/ubuntu-server-16-04-wifi-wpa-supplicant">https://www.linuxbabe.com/command-line/ubuntu-server-16-04-wifi-wpa-supplicant</a></p>

<pre><code>Auto Connect on Startup
To automatically connect to wireless network at boot time, we need to edit the wpa_supplicant.service file. It’s a good idea to copy the file from /lib/systemd/system/ directory to /etc/systemd/system/ directory, then edit it because we don’t want newer version of wpasupplicant to override our modifications.

sudo cp /lib/systemd/system/wpa_supplicant.service /etc/systemd/system/wpa_supplicant.service

sudo nano /etc/systemd/system/wpa_supplicant.service
Find the following line.

ExecStart=/sbin/wpa_supplicant -u -s -O /run/wpa_supplicant
Change it to the following. Obviously you need to change wlp3s0 if that isn’t your interface name.

ExecStart=/sbin/wpa_supplicant -u -s -c /etc/wpa_supplicant.conf -i wlp3s0
It’s recommended to always try to restart wpa_supplicant when failure is detected. Add the following right below the ExecStart line.

Restart=always
If you can find the following line in this file, comment it out (Add the # character at the beginning of the line).

Alias=dbus-fi.w1.wpa_supplicant1.service
Save and close the file. Then enable wpa_supplicant service to start at boot time.

sudo systemctl enable wpa_supplicant.service

~~~

sudo nano /etc/systemd/system/dhclient.service
Put the following text into the file.

[Unit]
Description= DHCP Client
Before=network.target

[Service]
Type=forking
ExecStart=/sbin/dhclient wlp3s0 -v
ExecStop=/sbin/dhclient wlp3s0 -r
Restart=always

[Install] 
WantedBy=multi-user.target
Save and close the file. Then enable this service.

sudo systemctl enable dhclient.service
</code></pre>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在树莓派上部署redmine - Respberrypi]]></title>
    <link href="http://winse.github.io/blog/2020/05/11/redmine-on-arm-pi/"/>
    <updated>2020-05-11T10:33:44+08:00</updated>
    <id>http://winse.github.io/blog/2020/05/11/redmine-on-arm-pi</id>
    <content type="html"><![CDATA[<p>变废为宝。</p>

<p>服务器没怎么用，但是偶尔又想访问下文档或者redmine，狠狠心咬咬牙最后把x64上的迁移到了树莓派2： Raspbian GNU/Linux 9 (stretch) 。</p>

<p>温故下原来redmine的安装过程： <a href="http://www.winseliu.com/blog/2017/09/18/redmine-deploy-and-install-plugins/">Redmine部署以及插件安装</a></p>

<p>过程中涉及到了docker的重新编译，这其中主要使用ubuntu apt源码在本地arm上进行再编译。其中涉及的镜像有：</p>

<ul>
<li><a href="https://github.com/sameersbn/docker-ubuntu/tree/14.04">https://github.com/sameersbn/docker-ubuntu/tree/14.04</a></li>
<li><a href="https://github.com/sameersbn/docker-postgresql/tree/9.6-2">https://github.com/sameersbn/docker-postgresql/tree/9.6-2</a></li>
<li><a href="https://github.com/sameersbn/docker-redmine/tree/3.4.6">https://github.com/sameersbn/docker-redmine/tree/3.4.6</a></li>
</ul>


<h2>备份</h2>

<p>redmine直接整个目录打包 /srv/docker/redmine/redmine 。数据库的要备份出来，架构不同不兼容。</p>

<p>这是编译后arm postgres直接用x64的/srv/docker/redmine/postgresql的报错信息：
```
root@raspberrypi:~# docker run &ndash;rm -ti &ndash;entrypoint=&ldquo;bash&rdquo; -v /srv/docker/redmine/postgresql:/var/lib/postgresql sameersbn/postgresql:9.6-2</p>

<p>root@8f39c2904607:/var/lib/postgresql# sudo -HEu postgres /usr/lib/postgresql/9.6/bin/pg_ctl -D /var/lib/postgresql/9.6/main -w start
waiting for server to start&hellip;.FATAL:  database files are incompatible with server
DETAIL:  The database cluster was initialized with USE_FLOAT8_BYVAL but the server was compiled without USE_FLOAT8_BYVAL.
HINT:  It looks like you need to recompile or initdb.
LOG:  database system is shut down
stopped waiting
pg_ctl: could not start server
Examine the log output.
```</p>

<h2>编译ubuntu镜像</h2>

<p>直接使用最新的trusty发布版镜像。由于低版本的可能会没有 linux/arm/v7 : <a href="https://hub.docker.com/_/ubuntu/?tab=tags&amp;page=1&amp;name=trusty">https://hub.docker.com/_/ubuntu/?tab=tags&amp;page=1&amp;name=trusty</a></p>

<pre><code>root@raspberrypi:~/docker-ubuntu# vi Dockerfile
FROM ubuntu:trusty

docker build -t sameersbn/ubuntu:14.04.20170123 . 
docker tag sameersbn/ubuntu:14.04.20170123 sameersbn/ubuntu:14.04.20170711 
</code></pre>

<h2>编译postgres镜像</h2>

<p>由于postgresql apt的库中没有armhf的deb，需要先手动编译好对应的deb。先运行一个容器，再里面编译好postgres。</p>

<pre><code>wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \
 &amp;&amp; echo 'deb-src http://mirrors.zju.edu.cn/postgresql/repos/apt/ trusty-pgdg main' &gt; /etc/apt/sources.list.d/pgdg.list \
 &amp;&amp; sed -i 's/ports.ubuntu.com/mirrors.aliyun.com/' /etc/apt/sources.list \
 &amp;&amp; sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list \
 &amp;&amp; apt-get update

root@7d55994af11e:/# apt-get build-dep dh-exec postgresql-common  pgdg-keyring     
root@7d55994af11e:/# apt-get source --compile dh-exec postgresql-common  pgdg-keyring   

root@7d55994af11e:/# apt-get build-dep postgresql-${PG_VERSION} postgresql-client-${PG_VERSION} postgresql-contrib-${PG_VERSION} dh-exec
root@7d55994af11e:/# apt-get source --compile postgresql-${PG_VERSION} postgresql-client-${PG_VERSION} postgresql-contrib-${PG_VERSION} 
</code></pre>

<p>再测试安装一下这些deb：</p>

<pre><code>wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \
 &amp;&amp; echo 'deb-src http://mirrors.zju.edu.cn/postgresql/repos/apt/ trusty-pgdg main' &gt; /etc/apt/sources.list.d/pgdg.list \
 &amp;&amp; sed -i 's/ports.ubuntu.com/mirrors.aliyun.com/' /etc/apt/sources.list \
 &amp;&amp; sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list \
 &amp;&amp; apt-get update

apt-get install -y acl \
    libpipeline1 debhelper ssl-cert libxml2 libedit2 libxslt1.1 libperl5.18 libpython2.7 libpython3.4 libtcl8.6

dpkg -i pgdg-keyring_2018.2_all.deb postgresql-common_201.pgdg14.04+1_all.deb  postgresql-client-common_201.pgdg14.04+1_all.deb

dpkg -i libpq5_9.6.13-1.pgdg14.04+1_armhf.deb  postgresql-9.6_9.6.13-1.pgdg14.04+1_armhf.deb postgresql-client-9.6_9.6.13-1.pgdg14.04+1_armhf.deb postgresql-contrib-9.6_9.6.13-1.pgdg14.04+1_armhf.deb
</code></pre>

<p>修改Dockerfile，直接通过dpkg安装postgresql的deb：</p>

<pre><code>root@raspberrypi:~/docker-postgresql# less Dockerfile 
...
COPY deb/ /tmp/psql/

RUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \
 &amp;&amp; echo 'deb-src http://mirrors.zju.edu.cn/postgresql/repos/apt/ trusty-pgdg main' &gt; /etc/apt/sources.list.d/pgdg.list \
 &amp;&amp; sed -i 's/ports.ubuntu.com/mirrors.aliyun.com/' /etc/apt/sources.list \
 &amp;&amp; sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list \
 &amp;&amp; apt-get update \
 &amp;&amp; DEBIAN_FRONTEND=noninteractive apt-get install -y acl \
    libpipeline1 debhelper ssl-cert libxml2 libedit2 libxslt1.1 libperl5.18 libpython2.7 libpython3.4 libtcl8.6 \
 &amp;&amp; cd /tmp/psql \
 &amp;&amp; dpkg -i pgdg-keyring_2018.2_all.deb postgresql-common_201.pgdg14.04+1_all.deb  postgresql-client-common_201.pgdg14.04+1_all.deb \
 &amp;&amp; dpkg -i libpq5_9.6.13-1.pgdg14.04+1_armhf.deb  postgresql-9.6_9.6.13-1.pgdg14.04+1_armhf.deb postgresql-client-9.6_9.6.13-1.pgdg14.04+1_armhf.deb postgresql-contrib-9.6_9.6.13-1.pgdg14.04+1_armhf.deb \
 &amp;&amp; rm -rf /tmp/psql \
...

root@raspberrypi:~/docker-postgresql# docker build -t sameersbn/postgresql:9.6-2 .
</code></pre>

<h2>编译redmine镜像</h2>

<p>redmine主要是缺少ruby2.3的包，跟上面的步骤类似。先编译出arm的ruby2.3，再编译镜像。</p>

<pre><code>sed -i 's/ports.ubuntu.com/mirrors.aliyun.com/' /etc/apt/sources.list \
&amp;&amp; sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list

apt-get build-dep ruby${RUBY_VERSION} ruby${RUBY_VERSION}-dev
apt-get source --compile ruby${RUBY_VERSION} ruby${RUBY_VERSION}-dev


root@raspberrypi:~/docker-redmine# vi Dockerfile 
...
COPY deb/ /tmp/ruby/

RUN apt-key adv --keyserver keyserver.ubuntu.com --recv E1DD270288B4E6030699E45FA1715D88E1DF1F24 \
 &amp;&amp; echo "deb http://ppa.launchpad.net/git-core/ppa/ubuntu trusty main" &gt;&gt; /etc/apt/sources.list \
 &amp;&amp; apt-key adv --keyserver keyserver.ubuntu.com --recv 80F70E11F0F0D5F10CB20E62F5DA5F09C3173AA6 \
 &amp;&amp; echo "deb http://ppa.launchpad.net/brightbox/ruby-ng/ubuntu trusty main" &gt;&gt; /etc/apt/sources.list \
 &amp;&amp; apt-key adv --keyserver keyserver.ubuntu.com --recv 8B3981E7A6852F782CC4951600A6F0A3C300EE8C \
 &amp;&amp; echo "deb http://ppa.launchpad.net/nginx/stable/ubuntu trusty main" &gt;&gt; /etc/apt/sources.list \
 &amp;&amp; wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \
 &amp;&amp; echo 'deb-src http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main' &gt; /etc/apt/sources.list.d/pgdg.list \
 &amp;&amp; sed -i 's/ports.ubuntu.com/mirrors.aliyun.com/' /etc/apt/sources.list \
 &amp;&amp; sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list \
 &amp;&amp; apt-get update \
 &amp;&amp; DEBIAN_FRONTEND=noninteractive apt-get install -y supervisor logrotate nginx mysql-client postgresql-client \
      imagemagick subversion git cvs bzr mercurial darcs rsync   locales openssh-client \
      gcc g++ make patch pkg-config gettext-base   libc6-dev zlib1g-dev libxml2-dev \
      libmysqlclient18 libpq5 libyaml-0-2 libcurl3 libssl1.0.0 uuid-dev xz-utils \
      libxslt1.1 libffi6 zlib1g gsfonts \
      libgmpxx4ldbl libgmp-dev libtk8.5 libxft2 libxrender1 libxss1 x11-common libtcl8.5 rubygems-integration \
 &amp;&amp; dpkg -i /tmp/ruby/*.deb \
 &amp;&amp; rm -rf /tmp/ruby \
 &amp;&amp; update-locale LANG=C.UTF-8 LC_MESSAGES=POSIX \
 &amp;&amp; gem install --no-document --version '&lt; 2.0' bundler \
 &amp;&amp; rm -rf /var/lib/apt/lists/*
...

root@raspberrypi:~/docker-redmine# docker build -t sameersbn/redmine:3.4.6 .
</code></pre>

<p>如果docker构建失败，可以通过以下两种方式来进行调试：</p>

<pre><code># 1
docker commit $container-id image-id
docker run -ti $image-id bash

# 2 
失败也会有前一步骤的镜像已经提交，再次基础上检查后面的步骤
The last successful step is 2. It produced an image a3acfa4ab179. Now you start a container
docker run -it a3acfa4ab179 bash
</code></pre>

<h2>结合原有数据进行迁移</h2>

<pre><code># 备份
psql -U postgres -cC --if-exists -d redmine_production &gt;redmine.dump 

# 安装compose
root@raspberrypi:~/redmine/bin# python -m pip install --upgrade pip
root@raspberrypi:~/redmine/bin# pip install docker-compose

# 启动
root@raspberrypi:~/redmine/bin# docker-compose up -d 

# 数据库还原
docker cp redmine.dump e472d9ec3124:/var/lib/postgresql/
psql -U postgres &lt;redmine.dump

# redmine修复
root@3f0774db222d:/home/redmine/redmine# apt-get install libmysqlclient-dev                                    

https://stackoverflow.com/questions/13086073/rails-install-pg-cant-find-the-libpq-fe-h-header
root@3f0774db222d:/home/redmine/redmine# apt-get install libpq-dev
https://stackoverflow.com/questions/38200015/package-magickcore-was-not-found-in-the-pkg-config-search-path
root@3f0774db222d:/home/redmine/redmine# apt-get install libmagickwand-dev

root@3f0774db222d:/home/redmine/redmine# bundle install                    
</code></pre>

<p>后面就直接安装docker-compose.yml中的端口映射配置访问即可。</p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[连接树莓派 - Respberrypi]]></title>
    <link href="http://winse.github.io/blog/2017/10/05/respberrypi-connected-via/"/>
    <updated>2017-10-05T17:04:24+08:00</updated>
    <id>http://winse.github.io/blog/2017/10/05/respberrypi-connected-via</id>
    <content type="html"><![CDATA[<p>启动树莓派后，总得连上去操作才能告诉它做事情。最常用的就是通过SSH远程控制，前提是能连上网络、知道树莓派获取到的地址。下来把了解到的，以及自实践的连接方式做下小结。</p>

<h4>通过路由器</h4>

<p>网线、无线连接后，通过 <strong> 显示器 </strong> 、<strong> 路由管理界面 </strong> 获取树莓派的地址（在管理web界面有明确的respberrypi的字样）。</p>

<h4>通过USB</h4>

<ol>
<li>USB转COM</li>
</ol>


<p>USB连接电脑，连树莓派的GPIO对应的针。然后通过COM口协议与树莓派通信</p>

<ol>
<li>USB共享网络</li>
</ol>


<p>使用手机的USB共享网络。</p>

<p>USB连树莓派，Micro口连手机。手机上打开USB网络共享，树莓派中会建立一个usb0的网卡。这样就能通过这个网卡进行上网了（网上也有说同时打开wifi热点，没啥用啊，usb和wlan是两个不同的网段）。</p>

<p>手机上安装一个ssh的工具（juicessh等），先连上本地的shell，然后执行 <code>cat /proc/net/arp</code> 或者 <code>busybox arp -a</code> 查看与 rndis0 同一个网段的ip（一般就是连接到树莓派的地址了）。</p>

<p>在手机上安装一个IP扫描软件应该也行，但 <strong> 通过ARP是最简单最高效的方式了。</strong></p>

<p><img src="/images/blogs/raspberrypi-phone-usb-network.png" alt="" /></p>

<p>注意：busybox感觉像一个工具集，包含了很多linux的命令，并且有些命令参数比系统提供的更全，如 <code>tar -j</code> 。可以用 <code>busybox --help</code> 查看帮助。</p>

<p></p>

<h4>网线互联</h4>

<p>一跟网线直接连电脑和树莓派。</p>

<p>互传数据应该有用。当前感觉，这种方式没啥优势，有点鸡肋。上网比较麻烦：手动设置IP、域名解析、还要在电脑上面搞网卡绑定。</p>

<p>下面自动获取的方法（没试，应该是可以的吧）：</p>

<blockquote><p>网线直接把树莓派与电脑连接起来，电脑需要连wifi（如果不连接无法使用网络共享让树莓派获取到ip地址），在 设置->网络->wlan->网络与共享中心->wlan->属性->共享->允许​其它用户通过它来连接->确定。</p>

<p>稍等片刻树莓派应该就获取到一个ip地址了，此时打开命令提示符（我用的Xshell），运行arp -a命令，应该就可以看到​一个局域网段，如192.168.xx.1，通常以192.168开头，最后一位是1的那个接口，下面多出来的一条动态记录就是树莓派的。</p></blockquote>

<h2>参考：</h2>

<ul>
<li><a href="https://jingyan.baidu.com/article/676629977483b154d51b848e.html">使用Android手机作为树莓派的屏幕</a></li>
<li><a href="http://www.jianshu.com/p/f2e0a02c01d9">http://www.jianshu.com/p/f2e0a02c01d9</a></li>
<li><a href="http://blog.163.com/elliot_alderson/blog/static/26832905920161122104246919/">http://blog.163.com/elliot_alderson/blog/static/26832905920161122104246919/</a> 添加过ifcfg-usb0，但需要重启网卡才是设置IP地址，麻烦。</li>
<li><a href="http://blog.163.com/elliot_alderson/blog/static/268329059201611925543687/">树莓派安装kali linux （系统安装和初步配置）</a> 安装、gparted扩容</li>
</ul>


<h2>键盘输入、手机显示</h2>

<p>前提：安装screen。</p>

<ul>
<li>连接USB键盘，启动树莓派。</li>
<li>键盘盲打登录（输入：root回车centos回车screen -S pi）。</li>
<li>然后手机上ssh连接，进入pi的会话（screen -x pi）</li>
</ul>


<p>这样就能用键盘敲、手机看了！觉得挺好玩的。</p>

<h2>重新折腾树莓派</h2>

<ul>
<li>安装centos7: 密码root/centos</li>
</ul>


<p><a href="http://www.21ic.com/evm/trick/201605/675705.htm">http://www.21ic.com/evm/trick/201605/675705.htm</a></p>

<ul>
<li>扩大容量：</li>
</ul>


<p><a href="http://blog.csdn.net/qq_20480611/article/details/48657827">http://blog.csdn.net/qq_20480611/article/details/48657827</a></p>

<p>fdisk删掉分区然后重新加，重启后执行resize2fs</p>

<ul>
<li>安装wiringpi</li>
</ul>


<pre><code>git clone git://git.drogon.net/wiringPi
cd wiringPi
./build
</code></pre>

<ul>
<li>epel</li>
</ul>


<p><a href="https://hobo.house/2016/03/03/installing-centos-on-the-raspberry-pi-2/">https://hobo.house/2016/03/03/installing-centos-on-the-raspberry-pi-2/</a></p>

<pre><code>cat &gt; /etc/yum.repos.d/epel-unsigned.repo &lt;&lt; EOF
[epel]
name=Epel rebuild for armhfp
baseurl=https://armv7.dev.centos.org/repodir/epel-pass-1/
enabled=1
gpgcheck=0

EOF
</code></pre>

<p>&ndash;END</p>
]]></content>
  </entry>
  
</feed>
