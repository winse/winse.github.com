<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Topics | Winse Blog]]></title>
  <link href="http://winseliu.com/blog/categories/topics/atom.xml" rel="self"/>
  <link href="http://winseliu.com/"/>
  <updated>2017-05-23T21:02:24+08:00</updated>
  <id>http://winseliu.com/</id>
  <author>
    <name><![CDATA[Winse Liu]]></name>
    <email><![CDATA[winseliu@foxmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tomcat源码阅读-批处理解读]]></title>
    <link href="http://winseliu.com/blog/2014/03/15/tomcat-batch-startup/"/>
    <updated>2014-03-15T18:03:03+08:00</updated>
    <id>http://winseliu.com/blog/2014/03/15/tomcat-batch-startup</id>
    <content type="html"><![CDATA[<h3>常用Tomcat批处理文件</h3>

<p>在windows系统下，双击bin/startup.bat即可启动tomcat。但核心的批处理文件是<strong>catalina.bat</strong>，最终调用的就是catalina.bat文件。</p>

<p>version.bat、shutdown.bat、startup.bat、configtest.bat都只是增加version/stop/start/configtest命令参数，然后调用catalina.bat批处理文件。</p>

<h3>catalina.bat</h3>

<p>批处理文件中最重要的非catalina.bat莫属了！包含非常多的操作！</p>

<h4>1 关闭优化</h4>

<p><strong> Suppress(止住) Terminate batch job on CTRL+C </strong></p>

<p>在第一个参数<code>%1</code>为run操作时，同时拥有%TEMP%目录写权限，执行<code>call "%~f0" %* &lt;"%TEMP%\%~nx0.Y"</code>，好像也就是调用自身，如果检测到<code>"%TEMP%\%~nx0.run"</code>存在就跳到脚本主体去执行。完成后退出。<strong>Tomcat7才加上的！</strong></p>

<p>在按了CTRL+C后，<strong>去掉提示用户确认操作</strong>！！！对比下Tomcat6和Tomcat7一切都明白了！在命令行里面调用call的重定向输入<code>%TEMP%\%~nx0.Y</code>的就是Y！！就是提示行的输入啊！</p>

<blockquote><p>Suppress anoying Terminate batch job prompt when hitting CTRL+C. Note however that it leaves the file named yes in the bin directory</p>

<p>git-svn-id: <a href="https://svn.apache.org/repos/asf/tomcat/trunk@922223">https://svn.apache.org/repos/asf/tomcat/trunk@922223</a> 13f79535-47bb-0310-9956-ffa450edef68</p></blockquote>

<h4>2 验证主目录</h4>

<ul>
<li><p>获取CATALINA_HOME</p>

<ul>
<li>CATALINA_HOME环境变量存在</li>
<li>当前目录<code>%cd%</code>，如果<code>%CATALINA_HOME%\bin\catalina.bat</code>存在，跳到<strong>验证EXECUTABLE</strong>操作</li>
<li>当前目录父目录。</li>
</ul>
</li>
<li><p>验证CATALINA_HOME</p>

<p>  如果<code>%CATALINA_HOME%\bin\catalina.bat</code>不存在，打印错误信息，退出</p></li>
<li><p>验证EXECUTABLE</p>

<p>  其实就是验证%CATALINA_HOME%\bin\catalina.bat是否存在（个人觉得相当多余，到达这一部，已经保证了catalina.bat的存在）。</p>

<p>  不存在则报错。每个文件都要获取并设置CATALINA_HOME，其实shell的sh文件也一样，每个sh文件都需要获取一遍当前dirname。</p></li>
</ul>


<h4>3 设置环境变量/参数</h4>

<ul>
<li>设置CATALINA_BASE为CATALINA_HOME（如果没定义）</li>
<li>调用setenv.bat脚本设置环境变量（如果存在）。先检测调用CATALINA_BASE目录下的，没有才调用CATALINA_HOME下的。</li>
<li>调用CATALINA_HOME下面的setclasspath.bat脚本（必须存在，否则会报错退出）</li>
<li>获取CLASSPATH，并添加bootstrap.jar</li>
<li>设置CATALINA_TMPDIR为<code>%CATALINA_BASE%\temp</code>（如果没定义）</li>
<li>如果tomcat-juli.jar存在则添加到CLASSPATH</li>
<li>把<code>%LOGGING_CONFIG%</code>加入JAVA_OPTS

<ol>
<li> <code>%LOGGING_CONFIG%</code></li>
<li> <code>-Dnop</code></li>
<li> <code>-Djava.util.logging.config.file="%CATALINA_BASE%\conf\logging.properties"</code></li>
</ol>
</li>
<li>把<code>%LOGGING_MANAGER%</code>加入JAVA_OPTS

<ol>
<li> <code>%LOGGING_MANAGER%</code></li>
<li> <code>-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager</code></li>
</ol>
</li>
<li>输出环境变量信息</li>
</ul>


<h4>4 组装执行命令</h4>

<p>接下来的变量直接牵涉到怎么去运行tomcat！ 这些变量包括： MAINCLASS、ACTION、JDPA、_EXECJAVA、SECURITY_POLICY_FILE</p>

<ul>
<li><p>MAINCLASS设置了Java调用的主类org.apache.catalina.startup.Bootstrap</p>

<p>  除了version直接调用org.apache.catalina.util.ServerInfo外，其他命令的入口都是这个类。</p></li>
<li><p>ACTION默认的操作为start</p>

<p>  另外命令对应是stop/configtest。</p></li>
<li><p>JDPA(<a href="http://www.ibm.com/developerworks/cn/java/j-lo-jpda1/">Java Platform Debugger Architecture</a>)</p>

<p>  使用<code>jpda [start|run|stop|configtest]</code>即可启用远程调试功能。默认为<code>-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=n</code>。也可以通过JPDA_TRANSPORT，JPDA_ADDRESS，JPDA_SUSPEND环境变量来指定部分参数，或者直接指定JPDA_OPTS完整的JPDA选项。</p></li>
<li><p>_EXECJAVA： 默认为<code>%_RUNJAVA%</code>，debug时设置为<code>%_RUNJDB%</code>，start时指定TITLE设置为<code>start "%TITLE%" %_RUNJAVA%</code>。</p></li>
<li>SECURITY_POLICY_FILE： debug/run/start后跟<code>-security</code>时，设置为<code>%CATALINA_BASE%\conf\catalina.policy</code> [TODO]</li>
</ul>


<p>最后就是_EXECJAVA、Jpda、Security进行组合来执行调用Java类，<code>ACTION</code>作为最后一个参数传给java的main方法。</p>

<p><strong>其他一些参数可以通过JAVA_OPTS，CATALINA_OPTS环境变量指定。</strong></p>

<hr />

<h3>其他注意点</h3>

<ul>
<li><p>如果第一个参数为debug命令，一定要用JDK！</p>

<p>  在打印输出信息的时刻，会输出JAVA_HOME，而不是JRE_HOME</p>

<p>  看到的一些不足：
在打印信息的时刻，%1判断是否为debug。接下来检测取出jpda，再判读其他执行操作（debug/run/start/configtest/stop/version）。
但是呢，jdpa后不能跟debug的！执行了<code>catalina.bat debug</code>会调用jdb，而 -agentlib:jdwp不在jdb允许的选项之列！</p></li>
<li><p>网上很多教程都是，安装tomcat都会去设置环境变量！</p>

<p>  JAVA_HOME和TOMCAT_HOME的环境变量（全局），其实可以在startup.bat中设置即可（本地）。这样，可以很好的运行多个不同版本的tomcat。</p></li>
<li><p>run和start的区别</p>

<p>  start命令会<code>start %_RUNJAVA%</code>另起一个进程，而run是直接调用<code>%_RUNJAVA%</code>。
在windows系统start命令会弹出一个新窗口，但是在linux下面start会在调用的时刻添加<code>&amp;</code>后台运行，打印的信息都得去日志文件中查看。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tomcat源码阅读-环境搭建]]></title>
    <link href="http://winseliu.com/blog/2013/08/31/tomcat-build-dev-env/"/>
    <updated>2013-08-31T04:22:58+08:00</updated>
    <id>http://winseliu.com/blog/2013/08/31/tomcat-build-dev-env</id>
    <content type="html"><![CDATA[<p>很早就买了《深入剖析Tomcat》这本书，但是一直没有下定决心去看tomcat的源码  <br/>
在工作中大部分时间都是使用tomcat作为容器，整体来说对tomcat还是有所了解，有那么点好奇，还是想好好的深入的了解下Tomcat。</p>

<p>既然要读源码，第一步就是检出源码，配置环境。</p>

<h2>下载源码</h2>

<p>打开Eclipse的git视图，下载源码<a href="https://github.com/apache/tomcat.git">https://github.com/apache/tomcat.git</a>
然后检出TOMCAT_7_0_42的Tag。</p>

<h2>生成eclipse的工程文件</h2>

<p>执行Ant的Target为ide-eclipse任务。正常完成后，会在tomcat工作目录下生成eclipse工程需要的.project和.classpath两个文件。</p>

<pre><code>D:\top_projects\tomcat&gt;ant ide-eclipse
...
downloadfile:
    [mkdir] Created dir: D:\usr\share\java\wsdl4j-1.6.2
      [get] Getting: http://repo.maven.apache.org/maven2/wsdl4j/wsdl4j/1.6.2/wsdl4j-1.6.2.jar
      [get] To: D:\usr\share\java\wsdl4j-1.6.2\wsdl4j-1.6.2.jar
     [copy] Copying 1 file to D:\top_projects\tomcat\output\extras\webservices
     [copy] Copying 1 file to D:\top_projects\tomcat\output\extras\webservices

ide-eclipse:
     [copy] Copying 1 file to D:\top_projects\tomcat
     [copy] Copying 1 file to D:\top_projects\tomcat
     [echo] Eclipse project files created.
     [echo] Read the Building page on the Apache Tomcat documentation site for details on how to configure your Eclipse
workplace.

BUILD SUCCESSFUL
Total time: 2 minutes 47 seconds
</code></pre>

<p>在Git Repositories视图，右键Working Directory节点，然后选择Import Projects到eclipse工作区即可。</p>

<h2>依赖jar处理</h2>

<p>在导入为eclipse工程后，出现了ANT_HOME和TOMCAT_LIBS_BASE的classpath依赖的错误，导致整个工程不能编译  <br/>
在生成eclipse工程文件的步骤时，有下载编译依赖的jar，我们需要把这些jar路径告诉eclipse-classpath</p>

<p>选择<code>Preferences -&gt; Java -&gt; Build Path -&gt; Classpath Variables</code>， <strong>添加ANT_HOME和TOMCAT_LIBS_BASE的两个路径。</strong></p>

<p>其中TOMCAT_LIBS_BASE为build.properties.default文件中base.path指定的路径；
确定后即可找到依赖的jar。</p>

<h2>小结</h2>

<p>Tomcat的开发环境的搭建，由于提供了Ant的脚本，所以配置还是比较简单。需要注意的就是配置两个额外eclipse的classpath参数即可。
搭建好了环境，下一篇穿插讲讲是脚本的启动。这样才知道Tomcat是调用哪个主类来启动Tomcat系统的！</p>
]]></content>
  </entry>
  
</feed>
