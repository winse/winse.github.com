<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Winse Blog]]></title>
  <link href="http://winseliu.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://winseliu.com/"/>
  <updated>2017-10-30T08:05:52+08:00</updated>
  <id>http://winseliu.com/</id>
  <author>
    <name><![CDATA[Winse Liu]]></name>
    <email><![CDATA[winseliu@foxmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GIT操作记录手册]]></title>
    <link href="http://winseliu.com/blog/2014/03/30/git-cheatsheet/"/>
    <updated>2014-03-30T22:15:11+08:00</updated>
    <id>http://winseliu.com/blog/2014/03/30/git-cheatsheet</id>
    <content type="html"><![CDATA[<p>Git的每次提交都有一个<strong>唯一的ID</strong>与之对应，所有的TAG/Branch/Master/HEAD等等，都是一个<strong>软链接/别名</strong>而已！这个是理解好Git的基础！</p>

<h2>提交最佳实践</h2>

<ul>
<li>commit 只改一件事情。</li>
<li>如果一个文档有多个变更，使用<code>git add --patch</code>只选择文档中的<strong>部分变更</strong>进入stage。具体怎么使用，键入命令后在输入<code>?</code></li>
<li>写清楚 commit message</li>
</ul>


<h2>配置</h2>

<h3>内建的图形化 git：</h3>

<pre><code>gitk
</code></pre>

<h3>git服务器</h3>

<p>搭建git服务器也很方便，有很多web-server的版本，我试用了下<a href="http://www.scm-manager.org/download/">scm-manager</a>使用挺简单的！
如果已经有了SVN的服务器，可以直接使用git-svn检出到本地！！</p>

<h3>配置环境</h3>

<pre><code>git config --global user.email "XXX"
git config --global user.name "XXX"
</code></pre>

<h3>换行（\r\n）提交检出均不转换</h3>

<p>基本上都在windows操作系统上工作，不需要进行转换！</p>

<pre><code>git config --global core.autocrlf false
</code></pre>

<ul>
<li>true 提交时转换为LF，检出时转换为CRLF</li>
<li>input 提交时转换为LF，检出时不转换</li>
<li>false 提交检出均不转换</li>
</ul>


<h3>core.safecrlf</h3>

<ul>
<li>true 拒绝提交包含混合换行符的文件</li>
<li>false 允许提交包含混合换行符的文件</li>
<li>warn 提交包含混合换行符的文件时给出警告</li>
</ul>


<h3>默认分支</h3>

<p>.git/config如下的内容：</p>

<pre><code>[branch "master"]
    remote = origin
    merge = refs/heads/master
</code></pre>

<p>这等于告诉git两件事:
1. 当你处于master branch, 默认的remote就是origin。
2. 当你在master branch上使用git pull时，没有指定remote和branch，那么git就会采用默认的remote（也就是origin）来merge在master branch上所有的改变</p>

<p>如果不想或者不会编辑config文件的话，可以在bush上输入如下命令行：</p>

<pre><code>$ git config branch.master.remote origin 
$ git config branch.master.merge refs/heads/master 
</code></pre>

<p>之后再重新git pull下。最后git push你的代码，到此步顺利完成时，则可以在Github上看到你新建的仓库以及你提交到仓库中文件了OK。</p>

<h3>修改默认Git编辑器</h3>

<pre><code>$ git config core.editor vim

$ git config --global core.editor vi
</code></pre>

<h2>常用基本操作</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> 操作                                          </th>
<th style="text-align:left;"> 说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> git init                                      </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git init &ndash;bare                               </td>
<td style="text-align:left;"> 服务端使用bare（空架子，赤裸）的方式</td>
</tr>
<tr>
<td style="text-align:left;"> git status                                    </td>
<td style="text-align:left;"> 使用git打的最多的就是status命令，查看状态的同时会提示下一步的操作！</td>
</tr>
<tr>
<td style="text-align:left;"> git diff                                      </td>
<td style="text-align:left;"> 工作空间和index/stage进行对比</td>
</tr>
<tr>
<td style="text-align:left;"> git diff &ndash;cached                             </td>
<td style="text-align:left;"> index/stage与本地仓库进行对比</td>
</tr>
<tr>
<td style="text-align:left;"><strong>增加到变更(index/stage)</strong>                    </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git add .                                     </td>
<td style="text-align:left;"> 将当前目录添加到git仓库中，常用命令！</td>
</tr>
<tr>
<td style="text-align:left;"> git add -A                                    </td>
<td style="text-align:left;"> 添加所有改动的文档</td>
</tr>
<tr>
<td style="text-align:left;"> git add -u                                    </td>
<td style="text-align:left;"> 只加修改过的文件,新增的文件不加入</td>
</tr>
<tr>
<td style="text-align:left;"> git rm &ndash;cached <file>&hellip;                     </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"><strong>添加到本地库</strong>                               </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git commit                                    </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git commit -m &ldquo;msg&rdquo;                           </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git commit -a                                 </td>
<td style="text-align:left;"> -a是把所有的修改的（tracked）文件都commit</td>
</tr>
<tr>
<td style="text-align:left;"> git commit &ndash;amend -m &ldquo;commit message.&rdquo;       </td>
<td style="text-align:left;"> 未push到远程分支的提交，快捷的回退再提交。修补提交（修补最近一次的提交而不创建新的提交），可结合git add使用！</td>
</tr>
<tr>
<td style="text-align:left;"> git commit -v                                 </td>
<td style="text-align:left;"> -v 可以看到文件哪些内容被修改</td>
</tr>
<tr>
<td style="text-align:left;"> git commit -m &lsquo;v1.2.0-final&rsquo; &ndash;allow-empty    </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git reset                                     </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git reset HEAD^                               </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git reset &ndash;hard HEAD^                        </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git checkout file                             </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git checkout &ndash;orphan <branchname>; git rm &ndash;cached -r . </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git rebase                                    </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git merge                                     </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"><strong>日志</strong>                                       </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git log                                       </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git log &ndash;oneline &ndash;decorate &ndash;graph          </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git log &ndash;stat                                </td>
<td style="text-align:left;"> 查看提交信息及更新的文件</td>
</tr>
<tr>
<td style="text-align:left;"> git log &ndash;stat -p -1 &ndash;format=raw             </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git log -3 <file-name>                        </td>
<td style="text-align:left;"> 文件的最近3次提交的历史版本记录</td>
</tr>
<tr>
<td style="text-align:left;"> git log &ndash;stat -2                             </td>
<td style="text-align:left;"> 查看最近两次的提交描述及修改文件信息。&ndash;stat 每次提交的简略的统计信息</td>
</tr>
<tr>
<td style="text-align:left;"> git log -p -2                                 </td>
<td style="text-align:left;"> 展开显示每次提交的内容差异，类似git show功能。 -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新</td>
</tr>
<tr>
<td style="text-align:left;"> git log &ndash;name-status                         </td>
<td style="text-align:left;"> 仅显示文件的D/M/A的状态</td>
</tr>
<tr>
<td style="text-align:left;"> git log &ndash;summary                             </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git log &ndash;dirstat -5                          </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git log &ndash;pretty=format:&ldquo;%h %s&rdquo; &ndash;graph       </td>
<td style="text-align:left;">  git log &ndash;pretty=format:&ldquo;%h - %an, %ar : %s&rdquo;</td>
</tr>
<tr>
<td style="text-align:left;"> git log &ndash;pretty=oneline                      </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git reflog                                    </td>
<td style="text-align:left;"> 查看本地操作历史。 ref log</td>
</tr>
<tr>
<td style="text-align:left;"> git show                                      </td>
<td style="text-align:left;"> 查看某版本文件的内容，版本库中最新提交的diff！</td>
</tr>
<tr>
<td style="text-align:left;"> git show master:index.md                      </td>
<td style="text-align:left;"> 查看历史版本的文件内容</td>
</tr>
<tr>
<td style="text-align:left;"> git show &lt;哈希值:文件目录/文件>               </td>
<td style="text-align:left;"> 查看内容</td>
</tr>
<tr>
<td style="text-align:left;"> git cat-file                                  </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"><strong>分支</strong>                                       </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git branch                                    </td>
<td style="text-align:left;"> 查看本地分支</td>
</tr>
<tr>
<td style="text-align:left;"> git branch <branch>                           </td>
<td style="text-align:left;"> 添加新分支，新分支创建后不会自动切换！！</td>
</tr>
<tr>
<td style="text-align:left;"> git branch &ndash;set-upstream branch-name origin/branch-name      </td>
<td style="text-align:left;"> * 建立本地分支和远程分支的关联</td>
</tr>
<tr>
<td style="text-align:left;"> git branch -a                                 </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git branch &ndash;list &ndash;merged                    </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git branch -r                                 </td>
<td style="text-align:left;"> 查看远程分支</td>
</tr>
<tr>
<td style="text-align:left;"> git checkout &ndash;orphan <new-branch>            </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git checkout <branch>                         </td>
<td style="text-align:left;"> 切换分支</td>
</tr>
<tr>
<td style="text-align:left;"> git checkout -b [new_branch_name]             </td>
<td style="text-align:left;"> 创建新分支并立即切换到新分支。git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致</td>
</tr>
<tr>
<td style="text-align:left;"> git branch -d branch_name                     </td>
<td style="text-align:left;"> -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项</td>
</tr>
<tr>
<td style="text-align:left;"> git branch -d -r remote_name/branch_name      </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git merge origin/local-branch                 </td>
<td style="text-align:left;"> 本地分支与主分支合并</td>
</tr>
<tr>
<td style="text-align:left;"><strong>推/拉</strong>                                      </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git pull                                      </td>
<td style="text-align:left;"> * 等价于git fetch &amp;&amp; git merge</td>
</tr>
<tr>
<td style="text-align:left;"> git fetch                                     </td>
<td style="text-align:left;"> 先把git的东西fetch到你本地然后merge后再push</td>
</tr>
<tr>
<td style="text-align:left;"> git push &ndash;rebase                             </td>
<td style="text-align:left;"> *</td>
</tr>
<tr>
<td style="text-align:left;"> git push                                      </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git push &ndash;set-upstream origin <branch>       </td>
<td style="text-align:left;"> To push the current branch and set the remote as upstream</td>
</tr>
<tr>
<td style="text-align:left;"> git push origin branch-name                   </td>
<td style="text-align:left;"> 创建远程分支(本地分支push到远程)，从本地推送分支。如果推送失败，先用git pull抓取远程的新提交</td>
</tr>
<tr>
<td style="text-align:left;"> git push -u origin master                     </td>
<td style="text-align:left;"> 将代码从本地回传到仓库</td>
</tr>
<tr>
<td style="text-align:left;"> git push origin test:master                   </td>
<td style="text-align:left;"> 提交本地test分支作为远程的master分支</td>
</tr>
<tr>
<td style="text-align:left;"> git push -f                                   </td>
<td style="text-align:left;"> * 强推(&ndash;force)，即利用强覆盖方式用你本地的代码替代git仓库内的内容，这种方式不建议使用。</td>
</tr>
<tr>
<td style="text-align:left;"> git pull [remoteName] [localBranchName]       </td>
<td style="text-align:left;"> 获取远程版本库提交与本地提交进行合并</td>
</tr>
<tr>
<td style="text-align:left;"> git push [remoteName] [localBranchName]       </td>
<td style="text-align:left;"> 提交、推送远程仓库</td>
</tr>
<tr>
<td style="text-align:left;"> git push &ndash;tags                               </td>
<td style="text-align:left;"> 提交时带上标签信息</td>
</tr>
<tr>
<td style="text-align:left;"> git push <git-url> master                     </td>
<td style="text-align:left;"> 把本地仓库提交到远程仓库的master分支中</td>
</tr>
<tr>
<td style="text-align:left;"> git push origin :branch_name                  </td>
<td style="text-align:left;"> 删除远端分支,(如果:左边的分支为空，那么将删除:右边的远程的分支。)远程的test将被删除，但是本地还会保存的，不用担心。</td>
</tr>
<tr>
<td style="text-align:left;"> git push origin :/refs/tags/tagname           </td>
<td style="text-align:left;"> 删除远端标签</td>
</tr>
<tr>
<td style="text-align:left;"> git clone <a href="http://path/to/git.git">http://path/to/git.git</a>              </td>
<td style="text-align:left;"> clone的内容会放在当前目录下的新目录</td>
</tr>
<tr>
<td style="text-align:left;"> git clone &ndash;branch <remote-branch> <git-url>  </td>
<td style="text-align:left;"> 获取指定分支，检出远程版本的分支。 git clone &ndash;branch unity /d/winsegit/hello helloclone</td>
</tr>
<tr>
<td style="text-align:left;"><strong>TAG</strong>                                        </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git tag                                       </td>
<td style="text-align:left;"> 查看标签</td>
</tr>
<tr>
<td style="text-align:left;"> git tag <tag>                                 </td>
<td style="text-align:left;"> 添加标签</td>
</tr>
<tr>
<td style="text-align:left;"> git tag -d <tag>                              </td>
<td style="text-align:left;"> 删除标签</td>
</tr>
<tr>
<td style="text-align:left;"> git tag -r                                    </td>
<td style="text-align:left;"> 查看远程标签</td>
</tr>
<tr>
<td style="text-align:left;"> git show <tag>                                </td>
<td style="text-align:left;"> 查看标签的信息</td>
</tr>
<tr>
<td style="text-align:left;"> git tag -a <tag> <msg>                        </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"><strong>REMOTE</strong>                                     </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git remote [show]                             </td>
<td style="text-align:left;"> 查看远程仓库</td>
</tr>
<tr>
<td style="text-align:left;"> git remote -v                                 </td>
<td style="text-align:left;"> 查看远程仓库</td>
</tr>
<tr>
<td style="text-align:left;"> git remote add [name] [url]                   </td>
<td style="text-align:left;"> 添加远程仓库</td>
</tr>
<tr>
<td style="text-align:left;"> git remote set-url &ndash;push[name][newUrl]       </td>
<td style="text-align:left;"> 修改远程仓库</td>
</tr>
<tr>
<td style="text-align:left;"> git remote show origin                        </td>
<td style="text-align:left;"> 远程库origin的详细信息。缺省值推送分支，有哪些远端分支还没有同步到本地，哪些已同步到本地的远端分支在远端服务器上已被删除，git pull 时将自动合并哪些分支！</td>
</tr>
<tr>
<td style="text-align:left;"> git remote show <remote-name>                 </td>
<td style="text-align:left;"> 远程版本信息查看</td>
</tr>
<tr>
<td style="text-align:left;"> git remote add origin <git-url>               </td>
<td style="text-align:left;"> 设置仓库</td>
</tr>
<tr>
<td style="text-align:left;"> git remote rm [name]                          </td>
<td style="text-align:left;"> 删除远程仓库</td>
</tr>
<tr>
<td style="text-align:left;"><strong>文件列表</strong>                                   </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;">git ls-tree &ndash;name-only  -rt <SHA-ID></td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"><strong>打包</strong>                                       </td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> git archive &ndash;format tar &ndash;output <tar> master</td>
<td style="text-align:left;"> 将 master以tar格式打包到指定文件 $ git archive -o load.tar master</td>
</tr>
</tbody>
</table>


<pre><code>$ git config core.filemode false

git ls-files
</code></pre>

<h2>按功能点完整的操作步骤</h2>

<h3>查看指定版本文件内容</h3>

<pre><code>Administrator@WINSELIU /e/git/hello (master)
$ git ls-tree master
100644 blob 139b30f9054cf77bd2eeabcebaf6ca3f32cd1d50    abc

Administrator@WINSELIU /e/git/hello (master)
$ git cat-file -p 139b30f9054cf77bd2eeabcebaf6ca3f32cd1d50
</code></pre>

<h3>回归指定的版本文件</h3>

<pre><code># 通过上面的命令得到该文件的版本
winse@Lenovo-PC ~/eshore/git
$ git checkout 4179d96 eshore/DTA/ISMI_CU/docs/测试/省汇聚平台/dta/kettle/file/hive2mysql.ktr
</code></pre>

<h3>查看提交版本的指定文件内容</h3>

<pre><code>git log abc  # 获取文件提交ID
git cat-file -p &lt;commit-id&gt;  # 获取treeID
git cat-file -p &lt;tree-id&gt;  # 获取当前tree的列表
git cat-file -p &lt;file-blob-id&gt;
</code></pre>

<h3>根据格式输出日志</h3>

<pre><code>$ git log --pretty=oneline
$ git log --pretty=short
$ git log --pretty=format:'%h was %an, %ar, message: %s'
$ git log --pretty=format:'%h : %s' --graph
$ git log --pretty=format:'%h : %s' --topo-order --graph
$ git log --pretty=format:'%h : %s' --date-order --graph

# https://stackoverflow.com/questions/1441010/the-shortest-possible-output-from-git-log-containing-author-and-date
git log --pretty=format:"%h%x09%an%x09%ad%x09%s"
pretty = format:%C(auto,yellow)%h%C(auto,magenta)% G? %C(auto,blue)%&gt;(12,trunc)%ad %C(auto,green)%&lt;(7,trunc)%aN%C(auto,reset)%s%C(auto,red)% gD% D

git log --pretty=format:'%h %ad %s | %an' --date=short  
</code></pre>

<p>你也可用‘medium',&lsquo;full&rsquo;,&lsquo;fuller&rsquo;,&lsquo;email&rsquo; 或‘raw'. 如果这些格式不完全符合你的相求， 你也可以用‘&ndash;pretty=format'参数(参见：git log)来创建你自己的"格式“.</p>

<h3>本地提交后再次修改</h3>

<p><strong>修改注释</strong></p>

<pre><code>git commit --amend 
</code></pre>

<p><strong>内容修改</strong></p>

<pre><code> # edit file
git add file
git commit --amend
</code></pre>

<p><strong>提交了不该提交的，并撤回</strong></p>

<p>刚刚提交的不完整，想修改一些东西，加到刚才的提交中</p>

<p>commit -> modify -> add -> amend</p>

<pre><code>git reset HEAD^
git status
cat abc
git diff
git commit -a -m "for test reset"
git log
git diff

vi abc
git add abc
git commit --amend

git status
git diff
git show master:abc
git log
</code></pre>

<h3>没有push到远程库的提交，本地可以做的事情</h3>

<ul>
<li>git reset: 用于回溯，回到原来的提交节点，多次提交合并为一个</li>
<li>git rebase <origin>：在origin分支的基础上，合并当前分支上的提交，形成线性提交历史。 会把当前分支的提交保存为patch，然后切到origin分支应用patch，形成线性的提交，common-origin-current。</li>
</ul>


<p>rebase冲突处理时，使用git add &amp;&amp; git rebase &ndash;continue。如果你使用了git add &amp;&amp; git commit，那么当前冲突使用git rebase &ndash;skip即可。</p>

<h3>处理本地和服务器之间冲突的方式</h3>

<ul>
<li>以本地为主。 git push -f</li>
<li>归并merge。 git pull 或者 git fetch &amp;&amp; git merge</li>
<li></li>
</ul>


<p>从stash恢复出现冲突，可以先提交，然后在pop，最后处理冲突。一般提交到本地index中的数据才是自己想要的，从stash中获取的数据只是临时的，可以直接用HEAD的数据内容覆盖，省去处理冲突的时间。</p>

<pre><code>$ git add -u
$ git commit -m 'update XXXX'
$ git stash pop

$ git status | grep 'both modified'  | grep ' ssh-config' | awk -F: '{print $2}' | while read line ; do git show HEAD:"$line" &gt; "$line" ; done
</code></pre>

<h3>从Github远程服务上拿其他分支：</h3>

<pre><code>Administrator@WINSELIU /e/git/to-markdown (master)
$ git branch -r
  origin/HEAD -&gt; origin/master
  origin/gh-pages
  origin/jquery
  origin/master

$ git checkout -b jquery origin/jquery
</code></pre>

<h3>把本地的git项目发布到Github</h3>

<pre><code>touch README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin git@github.com:winse/flickr-uploader.git
git push -u origin master
</code></pre>

<p>Push an existing repository from the command line：</p>

<pre><code>git remote add origin git@github.com:winse/flickr-uploader.git
git push -u origin master
</code></pre>

<p>如果已经存在remote origin，使用下面的方式修改远程的地址：</p>

<pre><code>Administrator@WINSELIU /d/winsegit/flickr_uploader/chrome (master)
$ git remote set-url --add origin  git@github.com:winse/flickr-uploader.git

Administrator@WINSELIU /d/winsegit/flickr_uploader/chrome (master)
$ git remote show origin
Warning: Permanently added 'github.com,192.30.252.128' (RSA) to the list of known hosts.
* remote origin
  Fetch URL: git@github.com:winse/flickr-uploader.git
  Push  URL: git@github.com:winse/flickr-uploader.git
  HEAD branch: (unknown)
</code></pre>

<h3>reset后撤回</h3>

<p>可能存在已经更新的数据，先提交到临时缓存区</p>

<pre><code>git stash
</code></pre>

<p>然后通过reflog得到需要撤回到的版本号</p>

<pre><code>$ git reflog
ef9ccf7 HEAD@{0}: reset: moving to HEAD^^
4f317fe HEAD@{1}: commit (amend): 2015-03-04 d
</code></pre>

<p>仍然使用reset回退</p>

<pre><code>git reset --hard 4f317fe
git stash pop
# 处理冲突
# git add 冲突文件
git reset
</code></pre>

<h3>git查看本地领先远程的提交</h3>

<pre><code>Administrator@WINSELIU /d/winsegit/winse.github.com (master)
$ git status
# On branch master
# Your branch is ahead of 'origin/master' by 2 commits.
#   (use "git push" to publish your local commits)
#
# Changes not staged for commit:
#   (use "git add &lt;file&gt;..." to update what will be committed)
#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
#
#       modified:   about.md
#       modified:   blog/_posts/2014-01-21-monitoring-mobile-networks.md
#
# Untracked files:
#   (use "git add &lt;file&gt;..." to include in what will be committed)
#
#       default.html
no changes added to commit (use "git add" and/or "git commit -a")

Administrator@WINSELIU /d/winsegit/winse.github.com (master)
$ git log --oneline --decorate -5
0425ec5 (HEAD, master) 增加日志Github修改历史功能
f3a4a58 把TAG定位到首页，并分页以及按照年分类
d5097e3 (origin/master, origin/HEAD) plugins disabled in github page!
e75d62b test
876dd42 修复根目录下的md不能通过npp-windows请求编辑的BUG

Administrator@WINSELIU /d/winsegit/winse.github.com (master)
$ git cherry
+ f3a4a58cfead3aa76e4b92de3342bee5970accb7
+ 0425ec548aa4e3dd29cd6fbfa1b656543e85058e
</code></pre>

<h3>找回游离的提交</h3>

<p><strong>绑定到新分支</strong></p>

<pre><code>git reflog # 查看本地操作历史
git branch head23 HEAD@{23} # 把分支head23指向/绑定到游离的提交
</code></pre>

<p>git的版本都是从分支开始查找的，如果没有被分支管理的提交就游离在版本库中！
所以在reset重新修改时，最好建立分支然后再提交！
如果发现类似的提交问题，就需要尽快的修复，不然提交的ID找不到就S了！</p>

<blockquote><p>那些老的提交会被丢弃。 如果运行垃圾收集命令(pruning garbage collection), 这些被丢弃的提交就会删除. （请查看 git gc)</p></blockquote>

<p><strong>重置HEAD</strong></p>

<pre><code>git reset --hard HEAD@{23}
</code></pre>

<h3>删除提交</h3>

<p>删除提交E：</p>

<pre><code>$ git tag F
$ git tag E HEAD^
$ git tag D HEAD^^
$ git checkout D
$ git cherry-pick master # 把master-patch应用到TAG-D
# fix conflicts
$ git status # 提交
$ git checkout master # checkout到master分支
$ git reset --hard HEAD@{1} # 重置master到删除E后的提交
</code></pre>

<h3>Git浏览特定版本的文件列表</h3>

<pre><code>git ls-tree --name-only  -rt &lt;SHA-ID&gt;
</code></pre>

<h3>删除没有被git track的文件</h3>

<pre><code># 删除 untracked files
git clean -f
# 连 untracked 的目录也一起删掉
git clean -fd # -f force branch switch/ignore unmerged entries， -d if you have new directory
# 连 gitignore 的untrack 文件/目录也一起删掉 （慎用，一般这个是用来删掉编译出来的 .o之类的文件用的）
git clean -x -fd

# 在用上述 git clean 前，建议加上 -n 参数来先看看会删掉哪些文件，防止重要文件被误删
git clean -nxfd

git reset --hard ( or git reset then back to 1. )
git checkout . ( or specify with file names )
git reset --hard ( or git reset then back to 3. )
</code></pre>

<h3>检出SVN项目</h3>

<pre><code>Administrator@ZGC-20130605LYE /e/git
$ git svn clone http://chrome-hosts-manager.googlecode.com/svn/trunk/
</code></pre>

<p><a href="http://www.worldhello.net/2010/02/01/339.html">http://www.worldhello.net/2010/02/01/339.html</a>下面提到的有意思：</p>

<blockquote><p>Git-svn 是 Subversion 的最佳伴侣，可以用 Git 来操作 Subversion 版本库。这带来一个非常有意思的副产品——部分检出：
可以用 git-svn 来对 Subversion 代码库的任何目录进行克隆，克隆出来的是一个git版本库
可以在部分克隆的版本库中用 Git 进行本地提交。
部分克隆版本库中的本地提交可以提交到上游 Subversion 版本库的相应目录中</p></blockquote>

<p>如果需要密码的，使用方面的方式会报错<strong>git-svn died signal 11</strong>。可以先init，然后在fetch。</p>

<pre><code>Kevin@Kevin-PC /cygdrive/d/dta-git
$ git svn init URL --username=NAME
Initialized empty Git repository in /cygdrive/d/dta-git/.git/

$ git svn fetch
Authentication realm: &lt;https://IP:PORT&gt; Subversion Repositories
Password for 'NAME':
# 输入密码后，ctrl+c退出后再重新下载

$ git svn fetch &gt; fetch.log 2&gt;&amp;1
</code></pre>

<ul>
<li><a href="http://rongjih.blog.163.com/blog/static/3357446120107111449543/">如何将SVN仓库转换为Git仓库 </a></li>
</ul>


<h3>Github添加项目主页github page(gh-pages)</h3>

<p>提交后就可以访问了<a href="http://winse.github.io/flickr-uploader/popup.html">页面</a>了。</p>

<pre><code>Administrator@WINSELIU /d/winsegit/flickr_uploader/chrome (master)
$ git branch -a
* master
  remotes/origin/master

Administrator@WINSELIU /d/winsegit/flickr_uploader/chrome (master)
$ git push origin master:gh-pages
Warning: Permanently added 'github.com,192.30.252.128' (RSA) to the list of known hosts.
Total 0 (delta 0), reused 0 (delta 0)
To git@github.com:winse/flickr-uploader.git
 * [new branch]      master -&gt; gh-pages

Administrator@WINSELIU /d/winsegit/flickr_uploader/chrome (master)
$ git branch -a
* master
  remotes/origin/gh-pages
  remotes/origin/master
</code></pre>

<p><strong><a href="https://help.github.com/articles/creating-project-pages-manually">Creating Project Pages manually</a></strong></p>

<blockquote><pre><code>  cd repository

  git checkout --orphan gh-pages
  # Creates our branch, without any parents (it's an orphan!)
  # Switched to a new branch 'gh-pages'

  git rm -rf .
  # Remove all files from the old working tree
  # rm '.gitignore'

  echo "My GitHub Page" &gt; index.html
  git add index.html
  git commit -a -m "First pages commit"
  git push origin gh-pages
</code></pre></blockquote>

<h3>子模块操作</h3>

<p><a href="http://josephjiang.com/entry.php?id=342">git-submodule教程！</a></p>

<pre><code>Administrator@WINSELIU /d/winsegit/jae_winse (master)
$ git submodule add git@github.com:winse/flickr-uploader.git src/main/webapp/flickr

Administrator@WINSELIU /d/winsegit/jae_winse (master)
$ git submodule status
 635090c5a754eebf5ce6566b7f8c65446b764f51 src/main/webapp/flickr (heads/master)

Administrator@WINSELIU /d/winsegit/jae_winse (master)
$ git commit -m "add submodule"
[master c7dc8c7] add submodule
warning: LF will be replaced by CRLF in .gitmodules.
The file will have its original line endings in your working directory.
 2 files changed, 4 insertions(+)
 create mode 100644 .gitmodules
 create mode 160000 src/main/webapp/flickr
</code></pre>

<p>如：$ git submodule add git://github.com/soberh/ui-libs.git src/main/webapp/ui-libs</p>

<p>初始化子模块：$ git submodule init &mdash;-只在首次检出仓库时运行一次就行</p>

<p>更新子模块：$ git submodule update &mdash;-每次更新或切换分支后都需要运行一下</p>

<p>删除子模块：（分4步走哦）</p>

<ol>
<li>$ git rm &ndash;cached [path]</li>
<li>编辑“.gitmodules”文件，将子模块的相关配置节点删除掉</li>
<li>编辑“.git/config”文件，将子模块的相关配置节点删除掉</li>
<li>手动删除子模块残留的目录</li>
</ol>


<h2>其他偶尔使用命令</h2>

<pre><code>git diff --check # 检查行尾有没有多余的空白
git remote prune &lt;remotename&gt;
git ls-remote --heads origin
git gc --prune=now
git ls-remote --heads &lt;remote-name&gt;
git rm -r --cached *
</code></pre>

<h2>参考</h2>

<ul>
<li><a href="http://blog.csdn.net/trochiluses/article/details/8996431">回溯 与 合并:git rebase与git reset</a></li>
<li><a href="http://ihower.tw/git/">git教程的一个站点</a></li>
<li><a href="http://ihower.tw/git/basic.html">git基本操作</a></li>
<li><a href="http://ihower.tw/git/vcs.html">版本管理介绍</a></li>
<li><a href="http://blog.csdn.net/ithomer/article/details/7529841">速查表</a></li>
<li><a href="http://git-scm.com/book/zh/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2">Git 基础 - 查看提交历史</a></li>
<li><a href="http://gitbook.liuhui998.com/3_4.html">查看历史 －Git日志</a></li>
<li><p><a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2">https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2</a></p></li>
<li><p><a href="http://git-scm.com/book/zh/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2">http://git-scm.com/book/zh/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2</a></p></li>
<li><a href="http://ihower.tw/blog/archives/2622">http://ihower.tw/blog/archives/2622</a></li>
<li><a href="http://git-scm.com/docs/git-rebase">http://git-scm.com/docs/git-rebase</a></li>
<li><a href="http://xiewenbo.iteye.com/blog/1285693">http://xiewenbo.iteye.com/blog/1285693</a></li>
<li><a href="http://gitready.com/">http://gitready.com/</a></li>
<li><a href="http://git-scm.com/book/zh/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2">http://git-scm.com/book/zh/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2</a></li>
<li><a href="http://josephjiang.com/entry.php?id=342">http://josephjiang.com/entry.php?id=342</a> git-submodule没有更好的教程了</li>
<li><a href="http://www.cnblogs.com/william9/archive/2012/09/01/2666767.html">http://www.cnblogs.com/william9/archive/2012/09/01/2666767.html</a></li>
<li><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html">http://marklodato.github.io/visual-git-guide/index-zh-cn.html</a></li>
<li><a href="http://www.16kan.com/question/detail/321093.html">http://www.16kan.com/question/detail/321093.html</a></li>
<li><a href="http://gitbook.liuhui998.com/3_4.html">http://gitbook.liuhui998.com/3_4.html</a></li>
<li><a href="http://www.bootcss.com/p/git-guide/">http://www.bootcss.com/p/git-guide/</a></li>
<li><a href="http://blog.csdn.net/ithomer/article/details/7529022">http://blog.csdn.net/ithomer/article/details/7529022</a></li>
<li><a href="http://git-scm.com/book/zh/Git-%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">http://git-scm.com/book/zh/Git-%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF</a></li>
<li><a href="http://git-scm.com/book/zh/Git-%E5%9F%BA%E7%A1%80-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8">http://git-scm.com/book/zh/Git-%E5%9F%BA%E7%A1%80-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8</a></li>
<li><a href="http://blog.csdn.net/trochiluses/article/details/14517379">http://blog.csdn.net/trochiluses/article/details/14517379</a></li>
</ul>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git实现多地多版本协作]]></title>
    <link href="http://winseliu.com/blog/2013/10/27/git-implement-multi-place-version-collaborate/"/>
    <updated>2013-10-27T20:20:00+08:00</updated>
    <id>http://winseliu.com/blog/2013/10/27/git-implement-multi-place-version-collaborate</id>
    <content type="html"><![CDATA[<h2>具体情况：</h2>

<ul>
<li>网络的版本库 github.com/winse/winse.github.com</li>
<li>笔记本       /d/winsegit/winse.github.com/</li>
<li>U盘          /?/works/winse.github.com  (盘符会变化)</li>
</ul>


<p>想实现：以笔记本电脑上的更新为主，辅之U盘上的修改（上班时可能进行更新）。</p>

<p>使用SVN基本没法实现这种功能的。原来也没有深入的学习git，看了《Git权威指南》后豁然开朗！</p>

<ul>
<li><strong>Git允许一个版本库和任意多个的版本库进行交互</strong> （第十九章 远程版本库）</li>
<li>Git本地库即可以作为客户端，也可以作为其他库的服务端！</li>
</ul>


<h2>实际操作</h2>

<ul>
<li>把笔记本的<em>winse.github.com</em>程序拷贝到U盘中</li>
<li>为U盘的版本库添加远程版本库notebook</li>
<li>U盘版本库建立新分支</li>
<li>U盘修改提交并push到远程版本库notebook</li>
<li>笔记本的版本库把新分支merge到master</li>
</ul>


<p>第一步也可以直接使用<code>git clone /d/winsegit/winse.github.com/</code>，后面添加github网络的远程版本库remote-repo就是了。</p>

<h2>命令</h2>

<p>U盘数据更新提交到笔记本</p>

<pre><code>$ git branch usb
$ git checkout usb
$ git add *got-git*
$ git commit -m definitive-guide-of-git

Winseliu@WINSE /i/works/winse.github.com (usb)
$ git remote add notebook /d/winsegit/winse.github.com/

Winseliu@WINSE /i/works/winse.github.com (usb)
$ git fetch notebook
From d:/winsegit/winse.github.com
 * [new branch]      master     -&gt; notebook/master

Winseliu@WINSE /i/works/winse.github.com (usb)
$ git remote
notebook
origin

Winseliu@WINSE /i/works/winse.github.com (usb)
$ git  branch -r
  notebook/master
  origin/HEAD -&gt; origin/master
  origin/master

Winseliu@WINSE /i/works/winse.github.com (usb)
$ git push notebook usb
Counting objects: 8, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (5/5), 490 bytes | 0 bytes/s, done.
Total 5 (delta 1), reused 0 (delta 0)
To d:/winsegit/winse.github.com/
 * [new branch]      usb -&gt; usb
</code></pre>

<p>笔记本合并U盘提交的数据</p>

<pre><code>Winseliu@WINSE /d/winsegit/winse.github.com (master)
$ git branch
* master
  usb

Winseliu@WINSE /d/winsegit/winse.github.com (master)
$ git cherry usb

Winseliu@WINSE /d/winsegit/winse.github.com (master)
$ git merge usb
Updating 9f7dff3..31ffaa9
Fast-forward
 bookreview/_posts/2013-10-27-got-git-the-definitive-guide-of-git.md | 5 +++++
 1 file changed, 5 insertions(+)
 create mode 100644 bookreview/_posts/2013-10-27-got-git-the-definitive-guide-of-git.md
</code></pre>

<p>U盘重新获取笔记本的数据合并到usb分支</p>

<pre><code>Winseliu@WINSE /i/works/winse.github.com (usb)
$ git fetch notebook
From d:/winsegit/winse.github.com
   9f7dff3..31ffaa9  master     -&gt; notebook/master

Winseliu@WINSE /i/works/winse.github.com (usb)
$ git merge master
Already up-to-date.
</code></pre>

<h2>其他实践命令</h2>

<p>远程版本库中包含的分支</p>

<pre><code>Winseliu@WINSE /i/works/winse.github.com (usb)
$ git ls-remote --heads /d/winsegit/winse.github.com
9f7dff396b357ca23e1cd765a6dae4ade3417e15        refs/heads/master
</code></pre>

<p>查看远程分支</p>

<pre><code>Winseliu@WINSE /i/works/winse.github.com (usb)
$ git branch -r
  new-remote/master
  origin/HEAD -&gt; origin/master
  origin/master
</code></pre>

<p>添加的远程版本库重命名</p>

<pre><code>Winseliu@WINSE /i/works/winse.github.com (usb)
$ git remote rename new-remote notebook
</code></pre>

<p>Git查看远程库路径</p>

<pre><code>Administrator@WINSELIU /e/git/hello-clone (master)
$ git remote -v
origin  e:/git/hello (fetch)
origin  e:/git/hello (push)
</code></pre>

<p>查看全部的本地引用</p>

<pre><code>Winseliu@WINSE /i/works/winse.github.com (usb)
$ git show-ref
9f7dff396b357ca23e1cd765a6dae4ade3417e15 refs/heads/master
31ffaa98d45eaccf8f9d0949fc1d4375f36f9edb refs/heads/usb
06f6c285b7402fb23a50ccb929b7cd84d98028e7 refs/remotes/origin/HEAD
06f6c285b7402fb23a50ccb929b7cd84d98028e7 refs/remotes/origin/master
</code></pre>

<p>查看哪些提交领先（未被推送到上游跟踪分支中）</p>

<pre><code>Winseliu@WINSE /i/works/winse.github.com (usb)
$ git cherry master
+ 31ffaa98d45eaccf8f9d0949fc1d4375f36f9edb
</code></pre>

<p>各种引用ID之间转换</p>

<pre><code>Winseliu@WINSE /d/winsegit/winse.github.com (master)
$ git rev-parse usb master
31ffaa98d45eaccf8f9d0949fc1d4375f36f9edb
9f7dff396b357ca23e1cd765a6dae4ade3417e15
</code></pre>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[处理git冲突]]></title>
    <link href="http://winseliu.com/blog/2013/05/27/handle-git-conflict/"/>
    <updated>2013-05-27T00:00:00+08:00</updated>
    <id>http://winseliu.com/blog/2013/05/27/handle-git-conflict</id>
    <content type="html"><![CDATA[<h2>命令行处理Git冲突</h2>

<pre><code># 首先需要修改冲突的文件，整合两个版本的数据！
$ vi _posts/2013-5-26-markdown-stu.md

Winseliu@WINSE ~/Documents/GitHub/winse.github.com ((171a4ea...)|REBASE)
$ git status
# Not currently on any branch.
# You are currently rebasing.
#   (fix conflicts and then run "git rebase --continue")
#   (use "git rebase --skip" to skip this patch)
#   (use "git rebase --abort" to check out the original branch)
#
# Unmerged paths:
#   (use "git reset HEAD &lt;file&gt;..." to unstage)
#   (use "git add &lt;file&gt;..." to mark resolution)
#
#       both added:         _posts/2013-5-26-init-blog-pages.md
#       both added:         _posts/2013-5-26-markdown-stu.md
#
no changes added to commit (use "git add" and/or "git commit -a")

Winseliu@WINSE ~/Documents/GitHub/winse.github.com ((171a4ea...)|REBASE)
$ git rebase --continue
_posts/2013-5-26-init-blog-pages.md: needs merge
_posts/2013-5-26-markdown-stu.md: needs merge
You must edit all merge conflicts and then
mark them as resolved using git add

Winseliu@WINSE ~/Documents/GitHub/winse.github.com ((171a4ea...)|REBASE)
$ git add _posts/2013-5-26-init-blog-pages.md

Winseliu@WINSE ~/Documents/GitHub/winse.github.com ((171a4ea...)|REBASE)
$ git add _posts/2013-5-26-markdown-stu.md

Winseliu@WINSE ~/Documents/GitHub/winse.github.com ((171a4ea...)|REBASE)
$ git rebase --continue
Applying: hello
</code></pre>

<h2>问题处理</h2>

<p>更新时，与本地未提交的内容冲突。</p>

<pre><code>$ git pull
Updating ae0a812..fe592a0
error: Your local changes to the following files would be overwritten by merge:
        eshore/DTA/ISMI_CU/DTA/trunk/README.md
Please, commit your changes or stash them before you can merge.
Aborting
</code></pre>

<p>处理方法一，把变更先保存到stash，更新后再还原：</p>

<pre><code>git stash
git pull
git stash pop
// 然后可以使用git diff -w +文件名 来确认代码自动合并的情况.
</code></pre>

<p>处理方法二，先提交，然后再更新处理冲突：</p>

<pre><code>winse@Lenovo-PC ~/eshore/git
$ git add  eshore/DTA/ISMI_CU/DTA/trunk/README.md

winse@Lenovo-PC ~/eshore/git
$ git commit -m 'start  v1.0.5.5'
[master e95b61c] start  v1.0.5.5
 1 files changed, 10 insertions(+), 0 deletions(-)

winse@Lenovo-PC ~/eshore/git
$ git pull
// 没有冲突直接更新ok了！
</code></pre>

<h2>Eclipse中处理Github冲突</h2>

<p>该链接图文并茂的介绍了处理的方法 <a href="http://jerry-chen.iteye.com/blog/1726022">http://jerry-chen.iteye.com/blog/1726022</a> 。</p>

<ol>
<li>工程->Team->同步</li>
<li>从远程pull至本地，会把远程的修改和本地的修改合并到一个文件</li>
<li>使用Merge Tool，执行第二项。使用HEAD合并后的效果</li>
<li>再手动修改冲突</li>
<li>修改后的文件需要添加到git index中去</li>
<li>冲突文件变为修改图标样式，再提交至本地，此时的提交便是merge合并</li>
<li>现在可以直接push到远程了</li>
</ol>


<h2>参考</h2>

<ul>
<li><a href="http://blog.csdn.net/iefreer/article/details/7679631">Git:代码冲突常见解决方法</a></li>
</ul>


<p>&ndash;END</p>
]]></content>
  </entry>
  
</feed>
