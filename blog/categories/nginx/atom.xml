<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Nginx | Winse Blog]]></title>
  <link href="http://winse.github.io/blog/categories/nginx/atom.xml" rel="self"/>
  <link href="http://winse.github.io/"/>
  <updated>2021-12-08T15:06:56+08:00</updated>
  <id>http://winse.github.io/</id>
  <author>
    <name><![CDATA[Winse Liu]]></name>
    <email><![CDATA[winseliu@foxmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nginx Https With Tomcat Http]]></title>
    <link href="http://winse.github.io/blog/2017/01/20/nginx-https-with-tomcat-http/"/>
    <updated>2017-01-20T20:03:19+08:00</updated>
    <id>http://winse.github.io/blog/2017/01/20/nginx-https-with-tomcat-http</id>
    <content type="html"><![CDATA[<p>昨天配置了HTTPS了，nginx https代理访问应用的http登录页也确实没有问题的。一切都是那么的完美，然而今天一早测试的姐姐告诉我：登录失败报错400 Bad Request The plain HTTP request was sent to HTTPS port.</p>

<ul>
<li>nginx 1.10.2</li>
<li>tomcat 8.0.38</li>
</ul>


<h2>初步定位问题</h2>

<p>然后想起有看到过红薯蜀黍的 <a href="https://www.oschina.net/question/12_213459">https://www.oschina.net/question/12_213459</a> 如下：（注：最终版在最后，如果有兴趣可以看看心路历程）</p>

<pre><code># tomcat server.xml
  &lt;Service name="Catalina"&gt;
    &lt;Connector port="9000" protocol="HTTP/1.1"
               connectionTimeout="20000"
               URIEncoding="UTF-8" 
               redirectPort="14443"
               scheme="https" 
               proxyPort="14443" /&gt;
    ...

    &lt;Engine name="Catalina" defaultHost="localhost"&gt;

      &lt;Host name="localhost"  appBase="webapps"
            unpackWARs="true" autoDeploy="true"&gt;

        &lt;Valve className="org.apache.catalina.valves.RemoteIpValve"
                remoteIpHeader="x-forwarded-for"
                remoteIpProxiesHeader="x-forwarded-by"
                protocolHeader="x-forwarded-proto"
            /&gt;

# nginx 
    server {
        listen       14443 ssl;
        server_name localhost;

        ssl on;
        ssl_certificate      nginx.crt;
        ssl_certificate_key  nginx.key;

        ssl_session_cache    shared:SSL:10m;
        ssl_session_timeout  5m;

        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;

        location / {
            root   html;
            index  index.html index.htm;
        }

        location /omc {
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_connect_timeout      240;
            proxy_send_timeout         240;
            proxy_read_timeout         240;

            proxy_pass http://localhost:9000; #默认连的是http的端口
            proxy_redirect off;
            #proxy_redirect https://$host/ / ;
        }
    }
</code></pre>

<p>登录请求确实都是https请求了，但是重定向(302)返回的https的端口丢失了（即被替换为默认的443）。查了很多资料，先弄了一个折中的处理方式，把hostname替换掉，即最后注释的那一行proxy_redirect。</p>

<p>查看的文章多半是http问题和多了端口的问题。我这是少端口了，但是还是有参考价值对proxy_redirect和port_in_redirect多了解一点：</p>

<ul>
<li><a href="http://fuxueliang.com/config/2013/07/05/resolve-the-redirect-problem-when-configuring-nginx-and-tomcat-integration/">nginx 和 Tomcat 集成后发生的重定向问题分析和解决</a></li>
<li><a href="http://feitianbenyue.iteye.com/blog/2056357">Nginx SSL+tomcat集群,request.getScheme() 取到https正确的协议</a></li>
<li><a href="https://www.oschina.net/question/12_213459">Nginx + Tomcat + HTTPS 配置原来不需要在 Tomcat 上启用 SSL 支持</a></li>
<li><a href="http://webapp.org.ua/sysadmin/setting-up-nginx-ssl-reverse-proxy-for-tomcat/">Setting up NGINX SSL reverse proxy for Tomcat</a></li>
</ul>


<p>还有一些没啥卵用，还带点误导性质的，但是还是得把它帖出来（蜜汁尴尬）：(注：不是说人家的有错，而是说和上面的Valve结合后不行了)</p>

<ul>
<li><a href="http://m.blog.csdn.net/article/details?id=52539175">解决nginx https代理tomcat redirect问题</a></li>
</ul>


<h2>关于redirectPort</h2>

<p>翻到一篇关于Valve的文章，看不明白，感觉应该用远程调试看看为什么端口变成默认的了。</p>

<p>先看<a href="http://tomcat.apache.org/tomcat-8.0-doc/config/http.html">redirectPort</a>，仅当http请求有安全约束才会转到端口使用SSL传输。so，redirectPort在这里没啥卵用。就当拓展知识了</p>

<pre><code>redirectPort    
If this Connector is supporting non-SSL requests, and a request is received for which a matching &lt;security-constraint&gt; requires SSL transport, Catalina will automatically redirect the request to the port number specified here.
</code></pre>

<p>web.xml里面可以配置security-constraint节点</p>

<pre><code>&lt;security-constraint&gt; 
&lt;web-resource-collection&gt; 
&lt;web-resource-name&gt;services&lt;/web-resource-name&gt; 
&lt;url-pattern&gt;/login/*&lt;/url-pattern&gt; 
&lt;/web-resource-collection&gt; 
&lt;user-data-constraint&gt; 
&lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt; 
&lt;/user-data-constraint&gt; 
&lt;/security-constraint&gt;
</code></pre>

<p>但是终究不是一种的解决问题的办法，而且怎么看怎么感觉Connector的redirectPort咋一点作用都没有呢？</p>

<ul>
<li><a href="https://zm6.sm-tc.cn/?src=l4uLj8XQ0IiIiNGTlpGKh5abnNGckJLQs5aRiofQzc%2FOytLPydDOzsbNy8bRl4uS&amp;uid=994acb90d7abb10312dae9cc39c4e4dd&amp;hid=3e89e83b734878f3fb6350c5ec9107a2&amp;pos=8&amp;cid=9&amp;time=1484906401433&amp;from=click&amp;restype=1&amp;pagetype=0000004000000402&amp;bu=structure_web_kv&amp;query=nginx+https+tomcat&amp;mode=&amp;v=1&amp;uc_param_str=dnntnwvepffrgibijbprsvdsei">Nginx+Tomcat+SSL免费证书配置</a></li>
</ul>


<h2>Valve问题所在，解决https以及端口问题的源泉</h2>

<ul>
<li><a href="https://zm6.sm-tc.cn/?src=l4uLj8XQ0IiIiNGShpeenJTKx9GckJLQvo2LlpyTmtCMkI2Lz8bG0IyQjYvPzs%2FN0M3PzsnQyMvOz8fRl4uS&amp;uid=994acb90d7abb10312dae9cc39c4e4dd&amp;hid=3e89e83b734878f3fb6350c5ec9107a2&amp;pos=10&amp;cid=9&amp;time=1484906401433&amp;from=click&amp;restype=1&amp;pagetype=0000004000000402&amp;bu=structure_web_info&amp;query=nginx+https+tomcat&amp;mode=&amp;v=1&amp;uc_param_str=dnntnwvepffrgibijbprsvdsei">nginx ssL +tomcat实现https</a></li>
</ul>


<p>由于是https请求，tcpdump从端口查到的数据都是看不懂的。并且不知道问题是在tomcat还是nginx，只能想着远程调试看看端口是在什么时刻被修改的。</p>

<pre><code>[root@cu1 apache-tomcat-8.0.38]# export JPDA_ADDRESS=8000
[root@cu1 apache-tomcat-8.0.38]# bin/catalina.sh jpda run

----

# 本地pom.xml增加如下，要来查看tomcat的源码
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;
    &lt;artifactId&gt;tomcat-catalina&lt;/artifactId&gt;
    &lt;version&gt;8.0.38&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<p>然后本地maven项目临时加入tomcat的包，开启VPN后，在eclipse的 <code>org.apache.catalina.connector.ResponseFacade.sendRedirect(String)</code> 打断点调试。然后定位到 <code>org.apache.coyote.Request.setServerPort(int)</code>， 最终确定在 <code>org.apache.catalina.valves.RemoteIpValve.setPorts(Request, int)</code> 。</p>

<p><strong> RemoteIpValve类里面的Header与nginx中配置Header对应就行的。 </strong></p>

<h2>最终成果</h2>

<p>注：nginx/tomcat配置https的方法，请查看前一篇文章。</p>

<p>注2：还有tomcat里面Header是不区分大小写的： <code>org.apache.tomcat.util.http.MimeHeaders.getValue(String)</code></p>

<p>注3：如果配置proxyPort（而不是Valve的话）取到协议好像不对(没验证)，并且配置Valve可以不影响Connector。</p>

<pre><code># nginx
    server {
        listen       14443 ssl;
        server_name localhost;

        ssl on;
        ssl_certificate      nginx.crt;
        ssl_certificate_key  nginx.key;

        ssl_session_cache    shared:SSL:10m;
        ssl_session_timeout  5m;

        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;

        location / {
            root   html;
            index  index.html index.htm;
        }

        location /omc {
        port_in_redirect on;

        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Port $server_port; # ！！自定义port header
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_connect_timeout      240;
        proxy_send_timeout         240;
        proxy_read_timeout         240;

        proxy_pass http://localhost:9000;
        #proxy_redirect default;
        proxy_redirect off;
        #proxy_redirect https://$host/ / ;
        }

    }

# tomcat server.xml
  &lt;Service name="Catalina"&gt;
    &lt;Connector port="9000" protocol="HTTP/1.1"
               connectionTimeout="20000"
               URIEncoding="UTF-8"
               redirectPort="8443"
                /&gt;
    ...
    &lt;Engine name="Catalina" defaultHost="localhost"&gt;
    ...
      &lt;Host name="localhost"  appBase="webapps"
            unpackWARs="true" autoDeploy="true"&gt;
            ...
            &lt;Valve className="org.apache.catalina.valves.RemoteIpValve"
                  portHeader="x-forwarded-port"
                  remoteIpHeader="x-forwarded-for"
                  proxiesHeader="x-forwarded-by"
                  protocolHeader="x-forwarded-proto"
            /&gt;
</code></pre>

<h2>福利</h2>

<p><strong> nginx https </strong> 代理tomcat <a href="https:">https:</a> 其实就是和http代理一样，很简单。记得删掉上面的removeipvalve。</p>

<pre><code># tomcat server.xml
&lt;Connector
           protocol="org.apache.coyote.http11.Http11AprProtocol"
           port="9443" maxThreads="200"
           scheme="https" secure="true" SSLEnabled="true"
           SSLCertificateFile="/home/cu/tools/apache-tomcat-8.0.38/conf/nginx.crt"
           SSLCertificateKeyFile="/home/cu/tools/apache-tomcat-8.0.38/conf/nginx.key"
           SSLVerifyClient="optional" SSLProtocol="TLSv1+TLSv1.1+TLSv1.2"/&gt;

# nginx
location /omc {
proxy_set_header Host $http_host;
proxy_set_header X-Forwarded-Host $http_host;
proxy_set_header X-Real-IP $remote_addr;
proxy_connect_timeout      240;
proxy_send_timeout         240;
proxy_read_timeout         240;

proxy_redirect off;
proxy_pass https://localhost:9443;
}
</code></pre>

<ul>
<li><a href="https://my.oschina.net/zhlmmc/blog/42125">https://my.oschina.net/zhlmmc/blog/42125</a></li>
</ul>


<p>nginx websockt:</p>

<pre><code>        location /omc/webSocket {
                proxy_pass http://localhost:8888/omc/webSocket;
                proxy_redirect off;

                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
        }
</code></pre>

<p>文件大小：</p>

<pre><code>proxy_read_timeout 86400;
proxy_send_timeout 86400;

client_max_body_size 1024m;
</code></pre>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx配置https]]></title>
    <link href="http://winse.github.io/blog/2017/01/19/nginx-https/"/>
    <updated>2017-01-19T15:53:45+08:00</updated>
    <id>http://winse.github.io/blog/2017/01/19/nginx-https</id>
    <content type="html"><![CDATA[<p>很早前弄过https，当时只是玩玩实际工作中并没有用到。现在业务需要得配置https。欠的债总是要还的，使用puppet的时刻默认全部信任不走证书认证。这里为了安装tomcat的https还是绕不过去。硬着头皮整吧。</p>

<h2>编译</h2>

<pre><code>[... nginx-1.10.2]$ tar zxvf zlib-1.2.8.tar.gz 
[... nginx-1.10.2]$ tar zxvf pcre-8.36.tar.gz 

[... nginx-1.10.2]$ mv zlib-1.2.8 src/zlib
[... nginx-1.10.2]$ mv pcre-8.36 src/pcre

[... nginx-1.10.2]$ ./configure --prefix=/home/hadoop/nginx --with-http_ssl_module --with-pcre=src/pcre --with-zlib=src/zlib
[... nginx-1.10.2]$ make &amp;&amp; make install
</code></pre>

<h2>生成证书</h2>

<p>先整一个能访问的https，再通过本地CA来进行授权（本地浏览器安装这个CA），最后处理chrome sha-1的问题。</p>

<ul>
<li>自己签发（无CA）</li>
</ul>


<pre><code># RSA密钥
[hadoop@cu1 conf]$ openssl genrsa -des3 -out server.key 1024
Generating RSA private key, 1024 bit long modulus
...........++++++
................++++++
e is 65537 (0x10001)
Enter pass phrase for server.key:
Verifying - Enter pass phrase for server.key:
# 拷贝一个不需要输入密码的密钥文件
[hadoop@cu1 conf]$ cp server.key server.key.org
[hadoop@cu1 conf]$ openssl rsa -in server.key.org -out server.key
Enter pass phrase for server.key.org:
writing RSA key

# 需要提交给 SSL 认证机构的(也叫作：生成一个证书请求)
[hadoop@cu1 conf]$ openssl req -new -key server.key -out server.csr
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:CN
State or Province Name (full name) []:GD
Locality Name (eg, city) [Default City]:GZ
Organization Name (eg, company) [Default Company Ltd]:Eshore
Organizational Unit Name (eg, section) []:CU
Common Name (eg, your name or your server's hostname) []:cu.eshore.cn
Email Address []:ca@eshore.cn

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:

# 认证机构颁发(自己签发证书)
[hadoop@cu1 conf]$ openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
Signature ok
subject=/C=CN/ST=Guangdong/L=Guangzhou/O=Eshore/OU=CU/CN=cu1
Getting Private key
</code></pre>

<ul>
<li>本地CA授权 &amp; SHA2(推荐)</li>
</ul>


<pre><code>[root@cu1 apache-tomcat-8.0.38]# ll /etc/pki/CA
total 16
drwxr-xr-x. 2 root root 4096 Mar  1  2016 certs 存放CA签署（颁发）过的数字证书（证书备份目录）
drwxr-xr-x. 2 root root 4096 Mar  1  2016 crl 吊销的证书
drwxr-xr-x. 2 root root 4096 Mar  1  2016 newcerts
drwx------. 2 root root 4096 Mar  1  2016 private 用于存放CA的私钥
[root@cu1 apache-tomcat-8.0.38]# ll /etc/pki/tls/
total 24
lrwxrwxrwx  1 root root    19 May 22  2015 cert.pem -&gt; certs/ca-bundle.crt
drwxr-xr-x. 2 root root  4096 Mar 22  2016 certs
drwxr-xr-x. 2 root root  4096 Mar 22  2016 misc
-rw-r--r--  1 root root 10906 Feb 24  2016 openssl.cnf openssl的CA主配置文件
drwxr-xr-x. 2 root root  4096 Mar  1  2016 private 证书密钥存放目录

# 修改配置(一部分为默认值，一部分与sha2有关)
[root@cu1 pki]# pwd
/etc/pki
[root@cu1 pki]# vi tls/openssl.cnf 
修改一些参数，后面的是修改后的
[root@cu1 pki]# diff /home/hadoop/openssl.cnf tls/openssl.cnf 
50c50
&lt; certificate   = $dir/cacert.pem       # The CA certificate
---
&gt; certificate   = $dir/ca.crt   # The CA certificate
55c55
&lt; private_key   = $dir/private/cakey.pem# The private key
---
&gt; private_key   = $dir/private/ca.key # The private key
74c74
&lt; default_crl_days= 30                  # how long before next CRL
---
&gt; default_crl_days= 365                 # how long before next CRL
86,87c86,87
&lt; stateOrProvinceName   = match
&lt; organizationName      = match
---
&gt; stateOrProvinceName   = optional
&gt; organizationName      = optional
107c107
&lt; default_md            = sha1
---
&gt; default_md            = sha256
126c126
&lt; # req_extensions = v3_req # The extensions to add to a certificate request
---
&gt; req_extensions = v3_req # The extensions to add to a certificate request
130c130
&lt; countryName_default           = XX
---
&gt; countryName_default           = CN
135c135
&lt; #stateOrProvinceName_default  = Default Province
---
&gt; #stateOrProvinceName_default  = GD

# CA证书
清理原来的旧文件
[root@cu1 pki]# cd CA
[root@cu1 CA]# rm -rf index.txt* serial*
[root@cu1 CA]# rm cacert.pem private/cakey.pem 
初始化
[root@cu1 CA]# touch index.txt serial
[root@cu1 CA]# echo 01 &gt; serial 

[root@cu1 CA]# openssl genrsa -out private/ca.key 2048
Generating RSA private key, 2048 bit long modulus
.........................................................................+++
...........................+++
e is 65537 (0x10001)

[root@cu1 CA]# chmod 600 private/ca.key 

[root@cu1 CA]# openssl req -new -x509 -key private/ca.key -out ca.crt
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:CN
State or Province Name (full name) []:GD
Locality Name (eg, city) [Default City]:GZ
Organization Name (eg, company) [Default Company Ltd]:Eshore
Organizational Unit Name (eg, section) []:CU   
Common Name (eg, your name or your server's hostname) []:eshore.cn
Email Address []:ca@eshore.cn

# 应用端证书的新建
[root@cu1 conf]# openssl genrsa -out nginx.key 2048
Generating RSA private key, 2048 bit long modulus
...................................................................+++
.....+++
e is 65537 (0x10001)
[root@cu1 conf]# 

[root@cu1 conf]# openssl req -new -key nginx.key -out nginx.csr
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:CN
State or Province Name (full name) []:GD
Locality Name (eg, city) [Default City]:GZ
Organization Name (eg, company) [Default Company Ltd]:Eshore
Organizational Unit Name (eg, section) []:Cu
Common Name (eg, your name or your server's hostname) []:cu.eshore.cn
Email Address []:cu@eshore.cn

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:

查看是否为sha-2
[root@cu1 conf]# openssl req -in nginx.csr -text | grep sha256

# 应用端证书颁发 方式二选一
* 默认的方式，但不是sha-2。把生成的证书请求csr文件发到CA服务器上，在CA上执行：
签发过程 其实默认使用了 配置文件中指定的ca.crt和ca.key这两个文件.
[root@cu1 conf]# openssl ca -in nginx.csr -out nginx.crt
Using configuration from /etc/pki/tls/openssl.cnf
Check that the request matches the signature
Signature ok
Certificate Details:
        Serial Number: 1 (0x1)
        Validity
            Not Before: Jan 19 07:24:24 2017 GMT
            Not After : Jan 19 07:24:24 2018 GMT
        Subject:
            countryName               = CN
            stateOrProvinceName       = GD
            organizationName          = Eshore
            organizationalUnitName    = Cu
            commonName                = cu.eshore.cn
            emailAddress              = cu@eshore.cn
        X509v3 extensions:
            X509v3 Basic Constraints: 
                CA:FALSE
            Netscape Comment: 
                OpenSSL Generated Certificate
            X509v3 Subject Key Identifier: 
                7B:3D:E8:18:D9:77:20:8F:A2:76:7F:6C:F2:01:65:49:3F:92:1A:7F
            X509v3 Authority Key Identifier: 
                keyid:5F:8C:1E:3D:F7:A1:86:82:22:F5:88:12:36:16:82:49:B6:9C:84:F1

Certificate is to be certified until Jan 19 07:24:24 2018 GMT (365 days)
Sign the certificate? [y/n]:y


1 out of 1 certificate requests certified, commit? [y/n]y
Write out database with 1 new entries
Data Base Updated
[root@cu1 conf]# 

* sha-2签名算法
http://www.ibm.com/support/knowledgecenter/zh/SSPMR3_9.0.0/com.ibm.tivoli.tem.doc_9.0/SUA_9.0/com.ibm.license.mgmt.doc/security/t_generate_certificate_CA.html
[root@cu1 conf]# openssl x509 -req -days 365 -in nginx.csr -CA /etc/pki/CA/ca.crt -CAkey /etc/pki/CA/private/ca.key -CAserial /etc/pki/CA/serial -sha256 -out nginx.crt 
Signature ok
subject=/C=CN/ST=GD/L=GZ/O=Eshore/OU=Cu/CN=cu.eshore.cn/emailAddress=cu@eshore.cn
Getting CA Private Key
</code></pre>

<p>生成key和csr请求可以一条命令搞定(<strong> 这是后期增加的，和本文的一些配置有出处 </strong>)：</p>

<pre><code>https://www.digicert.com/easy-csr/openssl.htm

openssl req -new -newkey rsa:2048 -nodes -out star_winse_com.csr -keyout star_winse_com.key -subj "/C=CN/ST=GD/L=GZ/O=winse/CN=*.winse.com"
</code></pre>

<h2>nginx配置</h2>

<pre><code>    server {
        listen       14443 ssl;
        server_name  cu.eshore.cn;

        ssl on;
        ssl_certificate      nginx.crt;
        ssl_certificate_key  nginx.key;

        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;

        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;

        location / {
            root   html;
            index  index.html index.htm;
        }

        location /omc {
            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        Host $http_host;

            proxy_pass http://localhost:9000;
        }

    }
</code></pre>

<p>MAKR</p>

<blockquote><p>同时，为了统一，你可以把这三个文件都移动到 /etc/ssl/private/ 目录。
然后可以修改 Nginx 配置文件
server { <br/>
    listen 80;
    listen [::]:80 ssl ipv6only=on;<br/>
    listen 443 ssl;
    listen [::]:443 ssl ipv6only=on;
    server_name example.com;
    ssl on;
    ssl_certificate /etc/ssl/private/example_com.crt;
    ssl_certificate_key /etc/ssl/private/example_com.key;
}</p>

<p>server_names barretlee.com *.barretlee.com
ssl on;
ssl_certificate /etc/nginx/ssl/barretlee.com.crt;
ssl_certificate_key /etc/nginx/ssl/barretlee.com.key;
ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_ciphers &ldquo;EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4EECDH EDH+aRSA RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !MEDIUM&rdquo;;</p>

<h1>Add perfect forward secrecy</h1>

<p>ssl_prefer_server_ciphers on;
add_header Strict-Transport-Security &ldquo;max-age=31536000; includeSubdomains&rdquo;;</p>

<p>同时，如果是全站 HTTPS 并且不考虑 HTTP 的话，可以加入 HSTS 告诉你的浏览器本
网站全站加密，并且强制用 HTTPS 访问
        add_header Strict-Transport-Security max-age=63072000;
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
同时也可以单独开一个 Nginx 配置，把 HTTP 的访问请求都用 301 跳转到 HTTPS</p>

<p>浏览器访问HTTP的请求重定向到HTTPS
If they come here using HTTP, bounce them to the correct scheme
error_page 497 <a href="https://$host:$server_port$request_uri;">https://$host:$server_port$request_uri;</a></p></blockquote>

<p>curl访问：正常访问HTTPS需要把CA证书内容加入到ca-bundle.crt</p>

<pre><code>[root@hadoop-master2 nginx]# curl https://www.winse.com
curl: (60) Peer certificate cannot be authenticated with known CA certificates
More details here: http://curl.haxx.se/docs/sslcerts.html

curl performs SSL certificate verification by default, using a "bundle"
 of Certificate Authority (CA) public keys (CA certs). If the default
 bundle file isn't adequate, you can specify an alternate file
 using the --cacert option.
If this HTTPS server uses a certificate signed by a CA represented in
 the bundle, the certificate verification probably failed due to a
 problem with the certificate (it might be expired, or the name might
 not match the domain name in the URL).
If you'd like to turn off curl's verification of the certificate, use
 the -k (or --insecure) option.

[root@hadoop-master2 CA]# cp /etc/pki/tls/certs/ca-bundle.crt{,.bak}
[root@hadoop-master2 CA]# cat /etc/pki/CA/ca.crt &gt;&gt; /etc/pki/tls/certs/ca-bundle.crt
[root@hadoop-master2 CA]# 
[root@hadoop-master2 CA]# curl https://www.winse.com
curl: (51) SSL: certificate subject name 'winse.com' does not match target host name 'www.winse.com'
[root@hadoop-master2 CA]# curl https://winse.com
...
</code></pre>

<h2>tomcat配置https</h2>

<p>直接使用nginx的key和crt，需要安装APR.</p>

<ul>
<li><a href="http://stackoverflow.com/questions/8716259/what-does-the-apr-based-apache-tomcat-native-library-was-not-found-mean">http://stackoverflow.com/questions/8716259/what-does-the-apr-based-apache-tomcat-native-library-was-not-found-mean</a></li>
<li><a href="http://stackoverflow.com/questions/4278047/apr-based-apache-tomcat-native-library-was-not-found-on-the-java-library-path">http://stackoverflow.com/questions/4278047/apr-based-apache-tomcat-native-library-was-not-found-on-the-java-library-path</a></li>
<li><a href="http://jmchung.github.io/blog/2013/09/06/centos-installing-apache-portable-runtime-apr-for-tomcat/">http://jmchung.github.io/blog/2013/09/06/centos-installing-apache-portable-runtime-apr-for-tomcat/</a></li>
<li><a href="https://tomcat.apache.org/native-doc/">https://tomcat.apache.org/native-doc/</a></li>
</ul>


<pre><code>[root@cu1 apache-tomcat-8.0.38]# yum install tomcat-native
[root@cu1 apache-tomcat-8.0.38]# less conf/server.xml 
&lt;Connector
           protocol="org.apache.coyote.http11.Http11AprProtocol"
           port="9443" maxThreads="200"
           scheme="https" secure="true" SSLEnabled="true"
           SSLCertificateFile="/home/cu/tools/apache-tomcat-8.0.38/conf/nginx.crt"
           SSLCertificateKeyFile="/home/cu/tools/apache-tomcat-8.0.38/conf/nginx.key"
           SSLVerifyClient="optional" SSLProtocol="TLSv1+TLSv1.1+TLSv1.2"/&gt;

#另一种keystore
&lt;Connector
           protocol="org.apache.coyote.http11.Http11NioProtocol"
           port="8443" maxThreads="200" SSLEnabled="true"
           scheme="https" secure="true" 
           keystoreFile="/root/.keystore" keystorePass="changeit"
           clientAuth="false" sslProtocol="TLS" /&gt;
</code></pre>

<h2>本地CURL访问</h2>

<p>把/etc/pki/CA目录下的ca.crt拷贝本地，安装到<strong>受信任的根证书颁发机构</strong>目录下面。然后https访问即可。</p>

<h2>参考</h2>

<ul>
<li>GOOD <a href="http://seanlook.com/2015/01/18/openssl-self-sign-ca/">基于OpenSSL自建CA和颁发SSL证书</a></li>
<li><p>GOOD <a href="http://blog.csdn.net/napolunyishi/article/details/42425827">CentOS6.5下openssl加密解密及CA自签颁发证书详解</a></p></li>
<li><p><a href="http://fengwan.blog.51cto.com/508652/1869743">OpenSSL生成自签名的sha256泛域名证书</a></p></li>
<li><p><a href="http://blog.csdn.net/kent7306/article/details/50547388">tomcat配置https单向认证笔记</a></p></li>
<li><a href="https://tomcat.apache.org/tomcat-7.0-doc/ssl-howto.html">SSL/TLS Configuration HOW-TO</a></li>
<li><p><a href="https://www.oschina.net/question/12_23148">5分钟内搞定 Tomcat 的 SSL 配置</a></p></li>
<li><p><a href="http://www.freehao123.com/startssl-ssl/">StartSSL免费SSL证书</a></p></li>
<li><a href="http://nginx.org/en/docs/http/configuring_https_servers.html#single_http_https_server">http://nginx.org/en/docs/http/configuring_https_servers.html#single_http_https_server</a></li>
<li>Redirect http to https in nginx <a href="http://serverfault.com/questions/338700/redirect-http-mydomain-com12345-to-https-mydomain-com12345-in-nginx">http://serverfault.com/questions/338700/redirect-http-mydomain-com12345-to-https-mydomain-com12345-in-nginx</a></li>
</ul>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Naxsi 处理 XSS]]></title>
    <link href="http://winse.github.io/blog/2016/07/19/xss-blocked-by-naxsi/"/>
    <updated>2016-07-19T19:43:13+08:00</updated>
    <id>http://winse.github.io/blog/2016/07/19/xss-blocked-by-naxsi</id>
    <content type="html"><![CDATA[<p>前台安全检查时出现了【检测到目标URL存在跨站漏洞】，就是可以通过url带js来截取用户的信息。</p>

<pre><code>js/jquery/jquery-1.8.2.min.js/&lt;ScRipt&gt;jovoys(6258);&lt;/ScRipt&gt;
</code></pre>

<p>XSS的一些简单介绍：</p>

<ul>
<li><a href="http://anti-hacker.blogspot.com/2008/01/xsscross-site-script.html">淺析XSS(Cross Site Script)漏洞原理</a></li>
<li><a href="http://www.freebuf.com/articles/web/42727.html">XSS的原理分析与解剖（第二篇）</a></li>
</ul>


<p>搜索到使用 <strong>naxsi</strong> 配合 <strong>nginx</strong> 有现成的解决方案，网上的资料很乱，直接看 <a href="https://github.com/nbs-system/naxsi/wiki">官方文档</a> 清晰一些。</p>

<ol>
<li>编译</li>
</ol>


<pre><code>[hadoop@cu2 sources]$ ll
drwxrwxr-x  6 hadoop hadoop      4096 Sep 10  2015 naxsi-0.54
-rw-r--r--  1 hadoop hadoop    192843 Jul 19 18:42 naxsi-0.54.zip
drwxr-xr-x  9 hadoop hadoop      4096 Nov 11  2015 nginx-1.7.10

[hadoop@cu2 sources]$ ll nginx-1.7.10/
total 3180
drwxr-xr-x  6 hadoop hadoop    4096 Nov 11  2015 auto
-rw-r--r--  1 hadoop hadoop  246649 Feb 10  2015 CHANGES
-rw-r--r--  1 hadoop hadoop  375103 Feb 10  2015 CHANGES.ru
drwxr-xr-x  2 hadoop hadoop    4096 Nov 11  2015 conf
-rwxr-xr-x  1 hadoop hadoop    2463 Feb 10  2015 configure
drwxr-xr-x  4 hadoop hadoop    4096 Nov 11  2015 contrib
drwxr-xr-x  2 hadoop hadoop    4096 Nov 11  2015 html
-rw-r--r--  1 hadoop hadoop    1397 Feb 10  2015 LICENSE
-rw-rw-r--  1 hadoop hadoop     342 Jul 19 18:44 Makefile
drwxr-xr-x  2 hadoop hadoop    4096 Nov 11  2015 man
drwxrwxr-x  4 hadoop hadoop    4096 Jul 19 18:45 objs
-rw-r--r--  1 hadoop hadoop 2009464 Nov 11  2015 pcre-8.36.tar.gz
-rw-r--r--  1 hadoop hadoop      49 Feb 10  2015 README
drwxr-xr-x 10 hadoop hadoop    4096 Nov 11  2015 src
-rw-r--r--  1 hadoop hadoop  571091 Nov 11  2015 zlib-1.2.8.tar.gz

[hadoop@cu2 nginx-1.7.10]$ ./configure --add-module=../naxsi-x.xx/naxsi_src/ --prefix=/opt/nginx
[hadoop@cu2 nginx-1.7.10]$ make &amp;&amp; make install
</code></pre>

<ol>
<li>配置</li>
</ol>


<p>需要在 nginx.conf 的http中引入 <strong>naxsi_core.rules</strong> ，在location中加入规则。</p>

<p>先把 naxsi_core.rules 拷贝到 nginx/conf 目录下。</p>

<pre><code>http {
    include       mime.types;
    include       naxsi_core.rules;
    ...
    server {
    ...
        location /omc {

#Enable naxsi
SecRulesEnabled;

#Enable learning mide
#LearningMode;

#Define where blocked requests go
DeniedUrl "/omc/error.jsp";

#CheckRules, determining when naxsi needs to take action
CheckRule "$SQL &gt;= 8" BLOCK;
CheckRule "$RFI &gt;= 8" BLOCK;
CheckRule "$TRAVERSAL &gt;= 4" BLOCK;
CheckRule "$EVADE &gt;= 4" BLOCK;
CheckRule "$XSS &gt;= 8" BLOCK;

#naxsi logs goes there
error_log logs/foo.log;

                proxy_set_header        X-Real-IP $remote_addr;
                proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header        Host $http_host;

                proxy_pass http://localhost:8888/omc;
        }
        ...
</code></pre>

<ol>
<li>启动生效</li>
</ol>


<pre><code>sbin/nginx -p $PWD
</code></pre>

<p><a href="https://github.com/nbs-system/naxsi/wiki/naxsi-setup">https://github.com/nbs-system/naxsi/wiki/naxsi-setup</a>
<a href="https://github.com/nbs-system/naxsi/wiki/checkrules-bnf">https://github.com/nbs-system/naxsi/wiki/checkrules-bnf</a></p>

<p>检查会比较严格，添加后应用可能会报错，需要对 foo.log 中的情况进行确认，对规则进行一些修改。如不需要监控 cookie 里面的内容：</p>

<pre><code>[omc@cu-omc1 nginx]$ vi conf/naxsi_core.rules 
:%s/|$HEADERS_VAR:Cookie//
</code></pre>

<p>还有一些 <code>%[2|3]</code> 的可能也需要改改。</p>

<pre><code>uri=/omc/Frame/Time.do&amp;learning=0&amp;vers=0.54&amp;total_processed=404&amp;total_blocked=10&amp;block=1&amp;zone0=BODY&amp;id0=16&amp;var_name0=
</code></pre>

<p>根据请求的 id 去规则配置里面找具体的描述，然后 uri 和 var_name 查看具体的请求对症下药：去掉规则或者改请求。</p>

<p>如上面请求的 <strong>id0=16</strong> 对应 <strong>#@MainRule &ldquo;msg:empty POST&rdquo; id:16;</strong> 把请求修改成get即可。</p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
</feed>
