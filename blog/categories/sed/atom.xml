<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: #sed | Winse Blog]]></title>
  <link href="http://winse.github.io/blog/categories/sed/atom.xml" rel="self"/>
  <link href="http://winse.github.io/"/>
  <updated>2024-01-14T00:30:01+08:00</updated>
  <id>http://winse.github.io/</id>
  <author>
    <name><![CDATA[Winse Liu]]></name>
    <email><![CDATA[winseliu@foxmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sed Debug: Sedsed]]></title>
    <link href="http://winse.github.io/blog/2017/11/20/sed-debug-sedsed/"/>
    <updated>2017-11-20T23:54:11+08:00</updated>
    <id>http://winse.github.io/blog/2017/11/20/sed-debug-sedsed</id>
    <content type="html"><![CDATA[<p>上一篇把html转成rst，但是页面之间的链接都断了。需要在标题前加上一个TAG，最终效果如下：</p>

<pre><code>
.. _Creating Objects in New Mappings:

Creating Objects in New Mappings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

+ :ref:`Creating Objects in New Mappings`
</code></pre>

<p>想使用sed来实现这个功能，需要利用一些sed的高级功能，但默认sed是不能调试。这里使用sedsed来查看每一个操作的模式空间和缓冲空间，有点类似print调试。对于理解 sed 很有帮助，特别是对理解缓冲区和模式区数据的处理。</p>

<h4>安装 sedsed</h4>

<ul>
<li><a href="http://aurelio.net/projects/sedsed/#usage">官网文档</a></li>
</ul>


<pre><code>cd /opt/
git clone https://github.com/aureliojargas/sedsed
</code></pre>

<p>看看实际的调试输出：</p>

<pre><code>[root@ansible sedsed]# echo -e "one\ntwo\nthree\nfour" | ./sedsed.py -d -f test/scripts/sort.gnu.sed 
PATT:one$
HOLD:$
COMM:H
PATT:one$
HOLD:\none$
COMM:$ !d
PATT:two$
HOLD:\none$
COMM:H
PATT:two$
HOLD:\none\ntwo$
COMM:$ !d
PATT:three$
HOLD:\none\ntwo$
COMM:H
PATT:three$
HOLD:\none\ntwo\nthree$
COMM:$ !d
PATT:four$
HOLD:\none\ntwo\nthree$
COMM:H
PATT:four$
HOLD:\none\ntwo\nthree\nfour$
COMM:$ !d
PATT:four$
HOLD:\none\ntwo\nthree\nfour$
COMM:g
PATT:\none\ntwo\nthree\nfour$
HOLD:\none\ntwo\nthree\nfour$
COMM:s/.//
PATT:one\ntwo\nthree\nfour$
HOLD:\none\ntwo\nthree\nfour$
COMM:s/\n/&amp;L&amp;l/g
PATT:one\nL\nltwo\nL\nlthree\nL\nlfour$
HOLD:\none\ntwo\nthree\nfour$
COMM:s/^/\\Na/
PATT:\naone\nL\nltwo\nL\nlthree\nL\nlfour$
HOLD:\none\ntwo\nthree\nfour$
COMM:s/\nL/\\NA/
PATT:\naone\nA\nltwo\nL\nlthree\nL\nlfour$
HOLD:\none\ntwo\nthree\nfour$
COMM:s/$/\\NL/
PATT:\naone\nA\nltwo\nL\nlthree\nL\nlfour\nL$
HOLD:\none\ntwo\nthree\nfour$
COMM:b start
COMM:/\nA$/ b exit
COMM:s/\nb/\\Nl/
PATT:\naone\nA\nltwo\nL\nlthree\nL\nlfour\nL$
HOLD:\none\ntwo\nthree\nfour$
COMM:s/\nB/\\NL/
PATT:\naone\nA\nltwo\nL\nlthree\nL\nlfour\nL$
HOLD:\none\ntwo\nthree\nfour$
COMM:s/\(\na.*\nA\)\nl\([^\n]*\)\nL/\1\\Nb\2\\NB/
PATT:\naone\nA\nbtwo\nB\nlthree\nL\nlfour\nL$
HOLD:\none\ntwo\nthree\nfour$
COMM::sort
COMM:h
......

[root@ansible sedsed]# (date +'%w %d' ; date +'%-m %Y') | ./sedsed.py -d -f test/scripts/cal.sed
......
</code></pre>

<h4>网上的一案例</h4>

<p>看到一个<a href="http://bbs.chinaunix.net/forum.php?mod=viewthread&amp;tid=3775201&amp;page=1#pid22315115">论坛帖子</a>上用sed实现 <strong>删除匹配的前两行和后三行</strong> ，看的不是很明白，帖子仅注意介绍流程，至于数据到底是怎么样的没有讲。如果知道 sedsed 这工具的话，运行一遍就全部清楚了：</p>

<p>sedsed.py 处理 <code>+</code> 加号有点问题，所以这里就处理匹配的前两行，看看具体的数据是怎么流转的：</p>

<pre><code>[root@ansible sedsed]# echo -e "1\n2\n3\n4\n5\n6\n7\n8\n9\n10" | ./sedsed.py -d '/5/d;:go;1,2!{P;N;D};N;bgo' 
PATT:1$
HOLD:$
COMM:/5/ d
PATT:1$
HOLD:$
COMM::go
COMM:1,2 !{
COMM:N
PATT:1\n2$
HOLD:$
COMM:b go
COMM:1,2 !{
COMM:N
PATT:1\n2\n3$
HOLD:$
COMM:b go
COMM:1,2 !{
COMM:P
1
PATT:1\n2\n3$
HOLD:$
COMM:N
PATT:1\n2\n3\n4$
HOLD:$
COMM:D
PATT:2\n3\n4$
HOLD:$
COMM:/5/ d
PATT:2\n3\n4$
HOLD:$
COMM::go
COMM:1,2 !{
COMM:P
2
PATT:2\n3\n4$
HOLD:$
COMM:N
PATT:2\n3\n4\n5$
HOLD:$
COMM:D
PATT:3\n4\n5$
HOLD:$
COMM:/5/ d
PATT:6$
HOLD:$
COMM:/5/ d
PATT:6$
HOLD:$
COMM::go
COMM:1,2 !{
COMM:P
6
PATT:6$
HOLD:$
COMM:N
PATT:6\n7$
HOLD:$
COMM:D
PATT:7$
HOLD:$
COMM:/5/ d
PATT:7$
HOLD:$
COMM::go
COMM:1,2 !{
COMM:P
7
PATT:7$
HOLD:$
COMM:N
PATT:7\n8$
HOLD:$
COMM:D
PATT:8$
HOLD:$
COMM:/5/ d
PATT:8$
HOLD:$
COMM::go
COMM:1,2 !{
COMM:P
8
PATT:8$
HOLD:$
COMM:N
PATT:8\n9$
HOLD:$
COMM:D
PATT:9$
HOLD:$
COMM:/5/ d
PATT:9$
HOLD:$
COMM::go
COMM:1,2 !{
COMM:P
9
PATT:9$
HOLD:$
COMM:N
PATT:9\n10$
HOLD:$
COMM:D
PATT:10$
HOLD:$
COMM:/5/ d
PATT:10$
HOLD:$
COMM::go
COMM:1,2 !{
COMM:P
10
PATT:10$
HOLD:$
COMM:N
10
</code></pre>

<p>可以看到 <strong>PATT</strong> 模式空间把前面两行连到一起了，匹配到 <strong>5</strong> 的时刻其实模式空间的内容为 <strong>3\n4\n5</strong>，然后执行 <strong>d</strong> 这就相当于删除前两行了。</p>

<p>该命令会多输出最后一行：由于到最后一行，N 又读取了一次下一行（读到结束符），直接就返回没有执行 D 了。sed 文档中的描述如下：</p>

<pre><code>  `D'
      If pattern space contains no newline, start a normal new cycle as
      if the `d' command was issued.  Otherwise, delete text in the
      pattern space up to the first newline, and restart cycle with the
      resultant pattern space, without reading a new line of input.

  `N'
      Add a newline to the pattern space, then append the next line of
      input to the pattern space.  If there is no more input then `sed'
      exits without processing any more commands.
</code></pre>

<p>修复就是：读到最后一行的时刻就不读下一行了：</p>

<pre><code>[root@ansible sedsed]# echo -e "1\n2\n3\n4\n5\n6\n7\n8\n9\n10" | sed '/5/,+3d;:go;1,2!{P;$!N;D};N;bgo' 
</code></pre>

<p></p>

<h4>加标签</h4>

<p>Sphinx可以通过 <strong>ref</strong> 来访问整个文档中定义的标签。所以只需要在每个标题前加上TAG，然后把链接引用修改成 <strong>ref</strong> 的方式即可。</p>

<pre><code># 文档加TAG：
sed -i ' h;N; /\n=\+$/{ x;s/.*/.. _&amp;:\n/;p; x };  P;D ' $(find . -name '*.rst')
sed -i ' h;N; /\n-\+$/{ x;s/.*/.. _&amp;:\n/;p; x };  P;D ' $(find . -name '*.rst')


# 修改链接引用：
sed 's/\(`[[:alnum:] ]*`\)_/:ref:\1/ ' $(find . -name '*.rst')
</code></pre>

<p>&ndash;END</p>
]]></content>
  </entry>
  
</feed>
