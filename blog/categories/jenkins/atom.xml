<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: #jenkins | Winse Blog]]></title>
  <link href="http://winse.github.io/blog/categories/jenkins/atom.xml" rel="self"/>
  <link href="http://winse.github.io/"/>
  <updated>2024-01-13T10:40:37+08:00</updated>
  <id>http://winse.github.io/</id>
  <author>
    <name><![CDATA[Winse Liu]]></name>
    <email><![CDATA[winseliu@foxmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[命令行调用Jenkins2.63打包]]></title>
    <link href="http://winse.github.io/blog/2017/08/31/jenkins-build-via-shell/"/>
    <updated>2017-08-31T01:26:40+08:00</updated>
    <id>http://winse.github.io/blog/2017/08/31/jenkins-build-via-shell</id>
    <content type="html"><![CDATA[<p>Jenkins给集成打包带来了很多的便捷，让不懂开发的同事也能轻松的打包。但是对于开发和运维来说，可能还需要在打包之外做一些事情，以及批量的处理N个打包。</p>

<p>对于研发来说，重复是最难忍受的。Jenkins可以直接通过api来调用查看和处理各种请求。</p>

<p>网络上资料其实挺多的。也有直接一个脚本直接搞定部署的。知其然知其所以然，还是需要自己下功夫理解人家的脚本这样才能更好的用（先不说自己写了）。主要的就是三个步骤：</p>

<ol>
<li>怎么登陆: <a href="https://wiki.jenkins.io/display/JENKINS/Jenkins+Script+Console#JenkinsScriptConsole-Remoteaccess">JenkinsScriptConsole-Remoteaccess</a> .|. <a href="https://wiki.jenkins.io/display/JENKINS/Remote+access+API#RemoteaccessAPI-CSRFProtection">RemoteaccessAPI-CSRFProtection</a></li>
<li>执行build：<a href="http://www.inanzzz.com/index.php/post/jnrg/running-jenkins-build-via-command-line">Running jenkins jobs via command line</a> .|. <a href="https://www.nczonline.net/blog/2015/10/triggering-jenkins-builds-by-url/">Triggering Jenkins builds by URL</a></li>
<li>检查结果：<a href="https://gist.githubusercontent.com/julianchurchill/8780920/raw/ae3ab0c120857b0fe69fe3718d720cb4ef94c4b8/checkJenkins.sh">checkJenkins.sh</a></li>
</ol>


<h2>crumb</h2>

<p>首先来看看crumb是啥</p>

<p>```
[root@iZ9416vn227Z opt]# curl -X POST $JENKINS_PROJ_AUTH_URL/build
<html>
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
<title>Error 403 No valid crumb was included in the request</title>
</head>
<body><h2>HTTP ERROR 403</h2></p>

<p>Problem accessing /job/helloworld/build. Reason:
<pre>    No valid crumb was included in the request</pre></p>


<hr><a href="http://eclipse.org/jetty">Powered by Jetty:// 9.4.z-SNAPSHOT</a><hr/>


<p></body>
</html></p>

<pre><code>
这里[CSRF](https://wiki.jenkins.io/display/JENKINS/Jenkins+Script+Console#JenkinsScriptConsole-RemoteaccesswithCSRFprotectionenabled) 相当于jenkins做的一个权限控制，有两种方式处理：

方法一：取消控制

* [no valid crumb was included in the request解决](http://www.zhyea.com/2016/10/14/resolve-no-valid-crumb-was-included-in-the-request-error.html) 
* [No valid crumb was included in the request](https://github.com/ghale/gradle-jenkins-plugin/issues/78#issuecomment-215783175)

在菜单 系统管理 –&gt; Configure Global Security 中调整设置: 取消 防止跨站点请求伪造(Prevent Cross Site Request Forgery exploits) 的勾选。 如果还坚持要启用“防止跨站点请求伪造”，就需要先动态获取crumb。

方法二：获取token

* [How to request for Crumb issuer for jenkins](https://stackoverflow.com/questions/16738441/how-to-request-for-crumb-issuer-for-jenkins)
* [Calling a jenkins job with a bash script](http://russellsimpkins.blogspot.jp/2014/10/calling-jenkins-job-with-bash-script.html)
*  https://support.cloudbees.com/hc/en-us/articles/218889337-How-to-build-a-job-using-the-REST-API-and-cURL-

通过URL: crumbIssuer/api/json 获取token的键值，然后把它附加到build请求的HEADER。




## 命令行通过URL请求jenkins进行编译

* [使用shell脚本curl调用jenkins进行构建并判断是否构建成功 ](http://blog.csdn.net/xian312854159/article/details/41118245)
* [Remote access API](https://wiki.jenkins.io/display/JENKINS/Remote+access+API)
* https://wiki.jenkins.io/display/JENKINS/Authenticating+scripted+clients
* https://wiki.jenkins.io/display/JENKINS/Jenkins+Script+Console



</code></pre>

<p>JENKINS_ID=&ldquo;admin:PASSWORD&rdquo;
JENKINS_PROJ_AUTH_URL=<a href="http://$JENKINS_ID@localhost:18080/job/helloworld">http://$JENKINS_ID@localhost:18080/job/helloworld</a>
JENKINS_PROJ_URL=<a href="http://localhost:18080/job/helloworld">http://localhost:18080/job/helloworld</a></p>

<p>curl $JENKINS_PROJ_AUTH_URL/lastBuild/api/json</p>

<h1>Get the current configuration and save it locally</h1>

<p>curl -X GET $JENKINS_PROJ_URL/config.xml</p>

<p>curl &lsquo;<a href="http://">http://</a>&rsquo;$JENKINS_ID'@localhost:18080/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,&ldquo;:&rdquo;,//crumb)&lsquo;
Jenkins-Crumb:a4296173a91d900c11af07d932559fcd</p>

<p>curl -X POST -H &ldquo;Jenkins-Crumb:a4296173a91d900c11af07d932559fcd&rdquo;  $JENKINS_PROJ_AUTH_URL/build</p>

<p>curl -s $JENKINS_PROJ_AUTH_URL/lastBuild/api/json | jq .</p>

<h1>&mdash; TODO &mdash;</h1>

<p>progress（排队中）|pending（构建中），每三秒去重新获取结果进行判断<br/>
while grep -qE &ldquo;In progress|pending&rdquo; build.tmp2;</p>

<p>if grep -qE &ldquo;Success&rdquo; build.tmp2 ;then<br/>
elif grep -qE &ldquo;Unstable&rdquo; build.tmp2 ;then<br/>
elif grep -qE &ldquo;Failed|Aborted&rdquo; build.tmp2 ;then<br/>
echo &ldquo;#Open Link: ${jobPage}${newbuild}/console see details&rdquo;</p>

<p>```</p>

<p>BuildName</p>

<ul>
<li><a href="https://wiki.jenkins.io/display/JENKINS/Build+Name+Setter+Plugin">https://wiki.jenkins.io/display/JENKINS/Build+Name+Setter+Plugin</a></li>
<li><a href="https://stackoverflow.com/questions/42172320/how-to-set-the-jenkins-build-name-based-on-some-conditions">https://stackoverflow.com/questions/42172320/how-to-set-the-jenkins-build-name-based-on-some-conditions</a></li>
<li><a href="https://stackoverflow.com/questions/30111298/how-to-use-build-name-setter-plugin">https://stackoverflow.com/questions/30111298/how-to-use-build-name-setter-plugin</a></li>
</ul>


<p>jenkins的使用案例</p>

<ul>
<li><a href="http://debugtalk.com/post/iOS-Android-Packing-with-Jenkins-details/">http://debugtalk.com/post/iOS-Android-Packing-with-Jenkins-details/</a></li>
</ul>


<h2>参考</h2>

<p>API使用</p>

<ul>
<li><a href="https://gist.githubusercontent.com/julianchurchill/8780920/raw/ae3ab0c120857b0fe69fe3718d720cb4ef94c4b8/checkJenkins.sh">https://gist.githubusercontent.com/julianchurchill/8780920/raw/ae3ab0c120857b0fe69fe3718d720cb4ef94c4b8/checkJenkins.sh</a></li>
<li><a href="https://www.nczonline.net/blog/2015/10/triggering-jenkins-builds-by-url/">Triggering Jenkins builds by URL</a></li>
</ul>


<p>登录/权限问题</p>

<ul>
<li><a href="https://stackoverflow.com/questions/10698419/how-can-a-jenkins-user-authentication-details-be-passed-to-a-script-which-uses">https://stackoverflow.com/questions/10698419/how-can-a-jenkins-user-authentication-details-be-passed-to-a-script-which-uses</a></li>
<li><a href="http://www.scmgalaxy.com/tutorials/ways-to-login-jenkins-using-command-line">http://www.scmgalaxy.com/tutorials/ways-to-login-jenkins-using-command-line</a></li>
<li><a href="https://wiki.jenkins.io/display/JENKINS/Jenkins+Script+Console#JenkinsScriptConsole-Remoteaccess">https://wiki.jenkins.io/display/JENKINS/Jenkins+Script+Console#JenkinsScriptConsole-Remoteaccess</a></li>
<li><a href="http://russellsimpkins.blogspot.jp/2014/10/calling-jenkins-job-with-bash-script.html">Calling a jenkins job with a bash script</a></li>
<li><a href="https://issues.jenkins-ci.org/browse/JENKINS-42200">No valid crumb was included in the request in kubernetes</a></li>
</ul>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins Start Guide]]></title>
    <link href="http://winse.github.io/blog/2017/06/04/jenkins-start-guide/"/>
    <updated>2017-06-04T18:19:23+08:00</updated>
    <id>http://winse.github.io/blog/2017/06/04/jenkins-start-guide</id>
    <content type="html"><![CDATA[<p>从原始的Eclipse右键导出打包，到后面使用maven打包，就单自己一个人使用开发部署是完全没问题的。现在的jenkins是对工具的封装、可视化和自动化，对于团队合作还是有一定的作用的，时时刻刻告诉我们代码是可运行的。</p>

<p>但是如果一个很久前的项目，又需要新加/修改功能，一下子还捡不起来，不放心啊还得验证一把。还有就是，测试有时刻他们自己打包，不会的还的教她们使用工具，人家烦自己也累。</p>

<p>jenkins是一个持续集成的工具，原来也接触过，但是都没用起来，都是搞开发，大部分时刻都能自己搞定。当下由于情况比较特殊，很多代码都直接在生产改，测试环境就不顾上了，但是测试环境不能总是旧代码啊，就想着有个自动化的东西来进行部署。</p>

<p>主要就是完成一个代码自动化部署的工作：自己搭建一个jenkins，从oschina上拉代码，编译后部署到tomcat并重启。</p>

<h2><a href="https://jenkins.io/download/">安装Jenkins</a></h2>

<pre><code>wget http://mirrors.jenkins.io/war-stable/latest/jenkins.war
nohup java -jar jenkins.war --httpPort=8081 &gt;/var/log/jenkins.log 2&gt;&amp;1 &amp; 
</code></pre>

<h2>建立到oschina的无密钥登录</h2>

<p>由于项目是私有的，通过https需要输入密码，还是git方式无密钥登录方式便捷一些。本地linux执行ssh-keygen，然后把 id_rsa.pub 的内容拷贝到项目的公钥处进行配置。可以参考文档： <a href="http://git.mydoc.io/?t=154712">http://git.mydoc.io/?t=154712</a>。</p>

<p>也可以结合 本地ssh-agent 和 ssh-forward 来弄。</p>

<h2>配置项目</h2>

<p>第一次登录需要进行一些配置，默认创建的admin密码会保存在 ~/.jenkins/secrets/initialAdminPassword 。（在初始化页面创建新用户报错，也不知道啥原因。登录后再建吧）</p>

<p>新版本的按照默认安装插件还不够，需要再添加一些。登录成功后，添加如下插件：</p>

<ul>
<li>Deploy to container Plugin  把war发布到容器tomcat&hellip;</li>
<li>Nexus Artifact Uploader  上传jar到私服</li>
<li><p>Maven Integration plugin 集成maven</p></li>
<li><p>ThinBackup 备份也是有必要的，用的越久越是必要！！</p></li>
</ul>


<p>配置maven：</p>

<p>自己下载个maven解压后，在jenkins - Global Tool Configuration上面配置maven地址即可（把 自动安装 的勾去掉就可以填地址了）</p>

<p>然后配置JOB：</p>

<ul>
<li>构建一个maven项目：填任务的名称，然后点击左下角的OK</li>
<li>源码管理git: 填写地址，然后新增Credentials - SSH Username with private key - From the Jenkins master ~/.ssh 起一个容易区分的名字</li>
<li>构建触发器： Build periodically - 0 0 * * * 每天一次</li>
<li>Build：web/pom.xml ; clean package -Papp,dist -DskipTests 就是mvn命令的一串参数</li>
<li>Post Steps: Run only if build succeeds - Execute Shell</li>
</ul>


<pre><code>/opt/apache-tomcat-8.0.26/bin/shutdown.sh ; sleep 1 
rm -rf /opt/apache-tomcat-8.0.26/webapps/app.war 
cp $WORKSPACE/web/app/target/app.war /opt/apache-tomcat-8.0.26/webapps 
cd /opt/apache-tomcat-8.0.26/webapps ; ./deploy.sh 
BUILD_ID=dontKillMe nohup /opt/apache-tomcat-8.0.26/bin/startup.sh &amp; 
sleep 3
</code></pre>

<p>注意：这里的BUILD_ID挺有意思的！！！</p>

<p>也可以配置 <strong>构建后操作</strong> 把包发布到tomcat manager（呵呵，无奈原始包webapps下的都被我删了)，就用脚本弄了。</p>

<h2>构建</h2>

<p>完成上面的操作后，就可以执行跑一次看看效果了。其他的还有很多功能：权限等。</p>

<h2>多节点(集群)</h2>

<p>如果只有一台jenkins的时刻，远程发布项目一般都scp或者使用tomcat-manager进行处理，如果把部署的机器作为jenkins node的话，就可以把部署的任务放到该节点本地跑，就不需要考虑远程部署的问题了。</p>

<p>配置节点： <a href="http://blog.csdn.net/e295166319/article/details/54134487">windows</a></p>

<pre><code>    用法  : 只允许运行绑定到这台机器的Job
  启动方法 ： Launch slave agents via SSH（在主机配置无密钥登录，填用户、Private key：From the Jenkins master ~/.ssh）
</code></pre>

<p>配置好后，在界面点击 <code>Launch agent</code>，会把agent拷贝到机器并启动agent。</p>

<p>然后任务的话，配置 <strong> Restrict where this project can be run </strong> 。</p>

<h2>参考</h2>

<ul>
<li><a href="http://www.cnblogs.com/gao241/archive/2013/03/20/2971416.html">Jenkins配置基于角色的项目权限管理</a></li>
<li><a href="http://www.cnblogs.com/zz0412/p/jenkins_jj_14.html">Jenkins进阶系列之——14配置Jenkins用户和权限</a></li>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Spawning+processes+from+build">https://wiki.jenkins-ci.org/display/JENKINS/Spawning+processes+from+build</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-jenkins/">https://www.ibm.com/developerworks/cn/java/j-lo-jenkins/</a></li>
</ul>


<p>&ndash;END</p>
]]></content>
  </entry>
  
</feed>
