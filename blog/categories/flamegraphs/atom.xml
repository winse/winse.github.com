<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: #flamegraphs | Winse Blog]]></title>
  <link href="http://winse.github.io/blog/categories/flamegraphs/atom.xml" rel="self"/>
  <link href="http://winse.github.io/"/>
  <updated>2024-01-13T08:46:58+08:00</updated>
  <id>http://winse.github.io/</id>
  <author>
    <name><![CDATA[Winse Liu]]></name>
    <email><![CDATA[winseliu@foxmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Flamegraphs Java Cpu]]></title>
    <link href="http://winse.github.io/blog/2016/05/06/flamegraphs-java-cpu/"/>
    <updated>2016-05-06T21:35:03+08:00</updated>
    <id>http://winse.github.io/blog/2016/05/06/flamegraphs-java-cpu</id>
    <content type="html"><![CDATA[<p>在MacTalk的公众号上读到了agentzh关于火焰图介绍(2016年5月6日07:57 动态追踪技术（中） - Dtrace、SystemTap、火焰图)，挺新奇的，并且应该对于查询热线程还是有作用的。</p>

<p>先了解perf和flamegraphs基础知识：</p>

<ul>
<li><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-perf1/">https://www.ibm.com/developerworks/cn/linux/l-cn-perf1/</a></li>
<li><a href="http://www.brendangregg.com/perf.html#FlameGraphs">perf Examples</a></li>
<li><a href="http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html">CPU Flame Graphs</a></li>
<li><a href="http://techblog.netflix.com/2015/07/java-in-flames.html">Java in Flames</a></li>
<li><a href="http://isuru-perera.blogspot.hk/2015/07/java-cpu-flame-graphs.html">Java CPU Flame Graphs</a></li>
<li>使用方法<a href="https://randomascii.wordpress.com/2013/03/26/summarizing-xperf-cpu-usage-with-flame-graphs/">xperf - windows perf</a></li>
<li>工具<a href="https://github.com/google/UIforETW/blob/master/bin/xperf_to_collapsedstacks.py">UIforETW</a></li>
</ul>


<p>perf好像有点类似java的btrace，不过perf是操作系统层面的。把操作系统当做服务，客户端通过perf来获取/查询系统的信息。</p>

<h2>监控系统</h2>

<p>perf包括在linux 2.6.31代码里面，没装的话redhat可以通过yum来安装/更新：</p>

<ul>
<li>虚拟机</li>
</ul>


<pre><code>[root@hadoop-master2 ~]# yum install perf
...
Installed:
  perf.x86_64 0:2.6.32-573.26.1.el6  

[root@hadoop-master2 ~]# perf stat ls /dev/shm

 Performance counter stats for 'ls /dev/shm':

          0.697115 task-clock                #    0.613 CPUs utilized          
                 0 context-switches          #    0.000 K/sec                  
                 0 cpu-migrations            #    0.000 K/sec                  
               236 page-faults               #    0.339 M/sec                  
   &lt;not supported&gt; cycles                  
   &lt;not supported&gt; stalled-cycles-frontend 
   &lt;not supported&gt; stalled-cycles-backend  
   &lt;not supported&gt; instructions            
   &lt;not supported&gt; branches                
   &lt;not supported&gt; branch-misses           

       0.001137015 seconds time elapsed
</code></pre>

<p>虚拟机可能有一些event不能用，到真正的实体机上面应该是没问题的（网上有同学验证过）。可以通过 <code>perf list</code> 查看支持的event。</p>

<ul>
<li>实体机指标项：</li>
</ul>


<pre><code>[root@dacs ~]# perf stat ls /dev/shm
...

 Performance counter stats for 'ls /dev/shm':

          1.793297      task-clock (msec)         #    0.677 CPUs utilized          
                 1      context-switches          #    0.558 K/sec                  
                 0      cpu-migrations            #    0.000 K/sec                  
               255      page-faults               #    0.142 M/sec                  
           2765454      cycles                    #    1.542 GHz                     [44.66%]
           1544155      stalled-cycles-frontend   #   55.84% frontend cycles idle    [64.12%]
           1013635      stalled-cycles-backend    #   36.65% backend  cycles idle   
           2692743      instructions              #    0.97  insns per cycle        
                                                  #    0.57  stalled cycles per insn
            603340      branches                  #  336.442 M/sec                  
             12499      branch-misses             #    2.07% of all branches         [98.00%]

       0.002650313 seconds time elapsed
</code></pre>

<p>windows的话直接下载 UIforETW ，运行 UIforETW.exe 就可以用来采样了。把采样产生的etl文件传给xperf_to_collapsedstacks.py，最后用flamegraph.pl画图。</p>

<ul>
<li>perf的常用命令：</li>
</ul>


<pre><code># http://www.brendangregg.com/perf.html
perf list

perf stat ./t1 
perf stat -a -A ls

perf top

perf record – e cpu-clock ./t1 
perf report
</code></pre>

<p>参考：</p>

<ul>
<li><a href="http://isuru-perera.blogspot.hk/2015/07/java-cpu-flame-graphs.html">http://isuru-perera.blogspot.hk/2015/07/java-cpu-flame-graphs.html</a></li>
<li><a href="https://github.com/coderplay/perfj/releases">https://github.com/coderplay/perfj/releases</a></li>
<li><a href="http://techblog.netflix.com/2015/07/java-in-flames.html">http://techblog.netflix.com/2015/07/java-in-flames.html</a></li>
</ul>


<h4>绘制系统火焰图</h4>

<pre><code># http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html
# https://github.com/brendangregg/FlameGraph
# 真实的机器效果还是挺不错的
perf record -F 99 -a -g -- sleep 60
perf script | ~/FlameGraph/stackcollapse-perf.pl &gt;out.perf-folded
~/FlameGraph/flamegraph.pl out.perf-folded &gt;perf.svg
sz perf.svg

# --
# perf script | ./stackcollapse-perf.pl &gt; out.perf-folded
# grep -v cpu_idle out.perf-folded | ./flamegraph.pl &gt; nonidle.svg
# grep ext4 out.perf-folded | ./flamegraph.pl &gt; ext4internals.svg
# egrep 'system_call.*sys_(read|write)' out.perf-folded | ./flamegraph.pl &gt; rw.svg
</code></pre>

<p>安装的虚拟机中操作没采集到有用的。虚拟机和真实机器两个图</p>

<p>实体机：</p>

<p><img src="/images/blogs/flames/flames-real.png" alt="" /></p>

<p>虚拟机：</p>

<p><img src="/images/blogs/flames/flames-vm.png" alt="" /></p>

<h2>监控java</h2>

<p>首先需要jdk8_u60+，直接下载最新的jdk就好了。应用启动带上参数 -XX:+PreserveFramePointer ：</p>

<pre><code>[root@hadoop-master2 ~]# java -version
java version "1.8.0_92"
Java(TM) SE Runtime Environment (build 1.8.0_92-b14)
Java HotSpot(TM) 64-Bit Server VM (build 25.92-b14, mixed mode)
[root@hadoop-master2 ~]# cd /home/hadoop/spark-1.6.0-bin-2.6.3/
[root@hadoop-master2 spark-1.6.0-bin-2.6.3]# export SPARK_SUBMIT_OPTS=-XX:+PreserveFramePointer     
[root@hadoop-master2 spark-1.6.0-bin-2.6.3]# bin/spark-shell --master local   
</code></pre>

<p>这里java进程使用root启动的，如果是普通用户如hadoop，为了采样需要把hadoop用户加入sudoer，在采样时使用 <code>sudo -u hadoop CMD</code>。</p>

<p><a href="http://techblog.netflix.com/2015/07/java-in-flames.html">http://techblog.netflix.com/2015/07/java-in-flames.html</a></p>

<h4>操作方法一：使用perf-map-agent（推荐指数：AAAAA）</h4>

<p><strong>老版本OLD 实际操作</strong> ：</p>

<pre><code>git clone https://github.com/jrudolph/perf-map-agent.git
cd perf-map-agent/
export JAVA_HOME=/opt/jdk1.8.0_92
cmake .
make

perf record -F 99 -g -p 7661 -- sleep 120
bin/create-java-perf-map.sh 7661

sudo perf script | ~/FlameGraph/stackcollapse-perf.pl &gt;out.perf-folded
cat out.perf-folded | ~/FlameGraph/flamegraph.pl --color=java &gt;perf.svg
sz perf.svg
</code></pre>

<p><strong>新版本NEW 再实践</strong> ：</p>

<ul>
<li>NOTE: 2017-10-21 项目改名了，挂到更牛逼的一个组织下了：jvm-profiling-tools</li>
<li>NOTE: 2018-03-09 再实践</li>
<li>NOTE: 2019-6-19 再更</li>
<li>NOTE: 2020-03-15 再更</li>
</ul>


<p>参考：</p>

<ul>
<li><a href="https://colobu.com/2016/08/10/Java-Flame-Graphs/">https://colobu.com/2016/08/10/Java-Flame-Graphs/</a></li>
<li><a href="https://medium.com/netflix-techblog/java-in-flames-e763b3d32166">https://medium.com/netflix-techblog/java-in-flames-e763b3d32166</a></li>
<li><a href="http://neoremind.com/2017/09/%E4%BD%BF%E7%94%A8%E7%81%AB%E7%84%B0%E5%9B%BE%E5%81%9A%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/">http://neoremind.com/2017/09/%E4%BD%BF%E7%94%A8%E7%81%AB%E7%84%B0%E5%9B%BE%E5%81%9A%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</a></li>
<li><a href="https://github.com/jvm-profiling-tools/perf-map-agent">https://github.com/jvm-profiling-tools/perf-map-agent</a></li>
</ul>


<p>实际操作：</p>

<pre><code>[root@dispatch-op-1 bigendian]# yum install git cmake make gcc gcc-c++ perf -y 
[root@dispatch-op-1 bigendian]# git clone https://github.com/jvm-profiling-tools/perf-map-agent.git
[root@dispatch-op-1 perf-map-agent]# cmake .
[root@dispatch-op-1 perf-map-agent]# make 

[root@dispatch-op-1 perf-map-agent]# mkdir -p /home/bigendian/jpt 
[root@dispatch-op-1 perf-map-agent]# bin/create-links-in /home/bigendian/jpt

[root@dispatch-op-1 bigendian]# git clone https://github.com/brendangregg/FlameGraph 

[bigendian@dispatch-op-1 jpt]$ ll
total 0
lrwxrwxrwx 1 root root 51 Mar 15 13:23 perf-java-flames -&gt; /home/bigendian/perf-map-agent/bin/perf-java-flames
lrwxrwxrwx 1 root root 57 Mar 15 13:23 perf-java-record-stack -&gt; /home/bigendian/perf-map-agent/bin/perf-java-record-stack
lrwxrwxrwx 1 root root 57 Mar 15 13:23 perf-java-report-stack -&gt; /home/bigendian/perf-map-agent/bin/perf-java-report-stack
lrwxrwxrwx 1 root root 48 Mar 15 13:23 perf-java-top -&gt; /home/bigendian/perf-map-agent/bin/perf-java-top

[bigendian@dispatch-op-1 ~]$ export FLAMEGRAPH_DIR=~/FlameGraph/
[bigendian@dispatch-op-1 ~]$ jpt/perf-java-flames 23652
Recording events for 15 seconds (adapt by setting PERF_RECORD_SECONDS)

JAVA_OPTS+=" -XX:+PreserveFramePointer  "
[bigendian@dispatch-op-1 ~]$ PERF_RECORD_SECONDS=360 jpt/perf-java-flames 25564 
</code></pre>

<p></p>

<p>然后把生成svg拷贝到本地看。</p>

<p>注意，x 轴表示抽样数, 如果一个函数在 x 轴占据的宽度越宽, 就表示它被抽到的次数多, 即执行的时间长. 注意, x 轴不代表时间, 而是所有的调用栈合并后, 按字母顺序排列的. 火焰图就是看顶层的哪个函数占据的宽度最大。只要有”平顶”(plateaus)，就表示该函数可能存在性能问题，然后结合具体代码进行分析。</p>

<p>按下 Ctrl + F 会显示一个搜索框，用户可以输入关键词或正则表达式，所有符合条件的函数名会高亮显示.</p>

<p>调用栈不完整: 当调用栈过深时，某些系统只返回前面的一部分（比如前10层）。</p>

<p></p>

<h4>操作方式二：使用perfj采样（不再推荐）</h4>

<p>NOTE：2017-10-21 这个项目好久没更新了，用上面 <strong>perf-map-agent</strong> 吧。</p>

<p>参考：<a href="http://greenteajug.cn/2015/07/02/greenteajug%E6%B4%BB%E5%8A%A8-%E7%AC%AC16%E6%9C%9F-%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E5%88%A9%E5%99%A8-perfj/">性能调优利器——PerfJ</a> ，直接下载release-1.0的版本，解压后给 bin/perfj 加上执行权限。</p>

<pre><code># 测试的时刻可以把-F 99设置大一点
# java和perfj的用户得一致！！
# https://github.com/coderplay/perfj/wiki/CPU-Flame-Graph

[root@dacs ~]# export JAVA_HOME=/usr/java/jdk1.8.0_92 
[root@dacs ~]# wget http://blog.minzhou.info/perfj/leveldb-benchmark.jar
[root@dacs ~]# $JAVA_HOME/bin/java -cp leveldb-benchmark.jar -XX:+PreserveFramePointer org.iq80.leveldb.benchmark.DbBenchmark --benchmarks=fillrandom --num=100000000

[root@dacs ~]# export JAVA_HOME=/usr/java/jdk1.8.0_92 
[root@dacs ~]# perfj-1.0/bin/perfj record -F 999 -g -p `pgrep -f DbBenchmark` 

perf script | ~/FlameGraph/stackcollapse-perf.pl &gt;out.perf-folded
~/FlameGraph/flamegraph.pl out.perf-folded  --color=java &gt;perf.svg
sz perf.svg
</code></pre>

<p>还是挺有意思的。运行效果：</p>

<p><img src="/images/blogs/flames/flames-java-leveldb.png" alt="" /></p>

<p>虚拟机的少了好多信息！一模一样的命令，得出来的东西差好远！！</p>

<p><img src="/images/blogs/flames/flames-java-leveldb-vm.png" alt="" /></p>

<p>另一个 <strong>Context Switch</strong> 案例：</p>

<pre><code># https://github.com/coderplay/perfj/wiki/Context-Switch-Analysis
# 在vmware虚拟机里面运行啥都看不到！实体机也看不到作者的那些栈信息
[root@dacs ~]# wget http://blog.minzhou.info/perfj/leveldb-benchmark.jar
[root@dacs ~]# export JAVA_HOME=/usr/java/jdk1.8.0_92 
[root@dacs ~]# $JAVA_HOME/bin/javac ContextSwitchTest.java 
[root@dacs ~]# $JAVA_HOME/bin/java -XX:+PreserveFramePointer ContextSwitchTest

[root@dacs ~]# export JAVA_HOME=/usr/java/jdk1.8.0_92 
[root@dacs ~]# perfj-1.0/bin/perfj record  -e sched:sched_switch -F 999 -g -p `pgrep -f ContextSwitchTest` 
[root@dacs ~]# perfj-1.0/bin/perfj report --stdio
</code></pre>

<p>&ndash;END</p>
]]></content>
  </entry>
  
</feed>
