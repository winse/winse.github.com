<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Shell | Winse Blog]]></title>
  <link href="http://winse.github.io/blog/categories/shell/atom.xml" rel="self"/>
  <link href="http://winse.github.io/"/>
  <updated>2023-04-09T19:31:58+08:00</updated>
  <id>http://winse.github.io/</id>
  <author>
    <name><![CDATA[Winse Liu]]></name>
    <email><![CDATA[winseliu@foxmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Expect-批量实现SSH无密钥登录]]></title>
    <link href="http://winse.github.io/blog/2014/09/07/expect-automate-and-batch-config-ssh/"/>
    <updated>2014-09-07T16:11:18+08:00</updated>
    <id>http://winse.github.io/blog/2014/09/07/expect-automate-and-batch-config-ssh</id>
    <content type="html"><![CDATA[<p>在安装部署Hadoop集群的首要步骤就是配置SSH的无密钥登陆。</p>

<pre><code>ssh-keygen -t rsa -P '' -f ~/.ssh/id_rsa
cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys

ssh-copy-id -i ~/.ssh/id_rsa.pub root@$ip
</code></pre>

<p>然后，可以通过ssh命令来进行批量的操作。</p>

<pre><code>ssh root@$ip 'cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys'
scp -o StrictHostKeyChecking=no /etc/hosts root@${ip}:/etc/
</code></pre>

<p>但是，一些需要密码的dialogue形式的输入时，部署N台datanode就需要输入N遍！同时新建用户也是需要输入用户密码的操作！！</p>

<p>Linux Expect就是用来自动化处理这些需求的。Except能根据提示来实现相应的输入。</p>

<pre><code>[hadoop@master1 hadoop-deploy-0.0.1]$ ssh-copy-id localhost
The authenticity of host 'localhost (::1)' can't be established.
RSA key fingerprint is 4e:fe:7a:0a:98:6e:9a:ab:af:e4:65:51:9b:3d:e0:99.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'localhost' (RSA) to the list of known hosts.
hadoop@localhost's password: 
Now try logging into the machine, with "ssh 'localhost'", and check in:

  .ssh/authorized_keys

to make sure we haven't added extra keys that you weren't expecting.
</code></pre>

<p>根据需要<strong>提示信息</strong>，以及需要<strong>输入的信息</strong>，可以编写对应expect脚本来进行自动化。</p>

<pre><code>    [hadoop@master1 hadoop-deploy-0.0.1]$ cat bin/ssh-copy-id.expect 
    #!/usr/bin/expect  

    ## Usage $0 [user@]host password

    set host [lrange $argv 0 0];
    set password [lrange $argv 1 1] ;

    set timeout 30;

    spawn ssh-copy-id $host ;

    expect {
      "(yes/no)?" { send yes\n; exp_continue; }
      "password:" { send $password\n; exp_continue; }
    }

    exec sleep 1;
</code></pre>

<p>同样新建用户初始化密码的操作一样可以使用expect来使用：</p>

<pre><code>    [hadoop@master1 hadoop-deploy-0.0.1]$ cat bin/passwd.expect
    #!/usr/bin/expect  

    ## Usage $0 host username password

    set host [lrange $argv 0 0];
    set username [lrange $argv 1 1];
    set password [lrange $argv 2 2] ;

    set timeout 30;

    ##

    spawn ssh $host useradd $username ;

    exec sleep 1;

    ##

    spawn ssh $host passwd $username ;

    ## password and repasswd all use this
    expect {
      "password:" { send $password\n; exp_continue; }
    }

    exec sleep 1;
</code></pre>

<p>有了上面的脚本，预定义每台机器的root密码，使用ssh-copy-id.expect建立到各台datanode机器的无密钥登录；然后passwd.expect脚本分发给各台机器，然后使用ssh进行运行脚本建立用户初始化密码。</p>

<p>Expect仅在master机器上安装就可以。安装程序的如下：</p>

<pre><code>yum install expect
</code></pre>

<p>or</p>

<pre><code>rpm -ivh tcl-8.5.7-6.el6.x86_64.rpm
rpm -ivh expect-5.44.1.15-5.el6_4.x86_64.rpm
</code></pre>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala Shell #! 惊叹号井号]]></title>
    <link href="http://winse.github.io/blog/2014/09/03/linux-shell-shebang-tanjinghao/"/>
    <updated>2014-09-03T12:55:32+08:00</updated>
    <id>http://winse.github.io/blog/2014/09/03/linux-shell-shebang-tanjinghao</id>
    <content type="html"><![CDATA[<p>工作中主要是写java代码，shell也只是用于交互性操作，写脚本的次数比较少。对于<code>#!</code><strong>井号叹号</strong>仅仅是教条式的添加在脚本开头，并且基本上都是<code>#!/bin/sh</code>。</p>

<p>今天在看scala官方的<a href="http://www.scala-lang.org/documentation/getting-started.html">入门教程</a>尽然发现<code>!#</code>的写法，很是困惑，Google查询也不知道怎么描述关键字，一般搜索引擎都把这些操作符过滤掉了的。</p>

<pre><code>#!/bin/sh
exec scala "$0" "$@"
!#
object HelloWorld extends App {
  println("Hello, world!")
}
HelloWorld.main(args)
</code></pre>

<p>首先了解下<code>#!</code>作用：如果<code>#!</code>在脚本的最开始，脚本程序会把第一行的剩余部分当做解析器指令；使用当前的解析器来执行程序，同时把当前脚本的路径作为参数传递给解析器。</p>

<blockquote><p>In computing, a shebang is the character sequence consisting of the characters number sign and exclamation mark (that is, &ldquo;#!&rdquo;) at the beginning of a script.</p>

<p>Under Unix-like operating systems, when a script with a shebang is run as a program, the program loader parses the rest of the script&rsquo;s initial line as an interpreter directive; the specified interpreter program is run instead, passing to it as an argument the path that was initially used when attempting to run the script.</p></blockquote>

<p>如果把<code>!#</code>去掉，再执行上面的脚本则会报错：<strong>error: script file does not close its header with !# or ::!#</strong>，查寻一番后，这原来是Scala的脚本功能的内部处理。通过SourceFile.scala关键字搜索到了<a href="http://www.cnblogs.com/agateriver/archive/2010/09/07/scala_pound_bang.html">该文</a>列出了具体的位置，还有<a href="http://alvinalexander.com/scala/scala-shell-script-example-exec-syntax">A Scala shell script example</a>和我有同样疑问。</p>

<p><img src="http://file.bmob.cn/M00/0B/B1/wKhkA1QGuE-AP-ihAAA1mwvYd5E865.png" alt="" /></p>

<p>可以在《Programing in Scala &ndash; A comprehensive step-by-step guide》一书的附录A中 Scala scripts on Unix and Windows 查找到相应的描述：把<code>#!</code>和<code>!#</code>之间的内容忽略掉了。</p>

<p>语法糖的疑惑解决了，针对上面的脚本还有个问题：exec执行完了，下面的内容不执行了？在exec命令的前面打上调试语句，也只输出了<strong>sh start</strong>。</p>

<pre><code>winse@Lenovo-PC ~
$ cat script.scala
#!/bin/sh
echo 'sh start'
exec scala "$0" "$@"
echo 'sh end'
!#
object HelloWorld extends App {
    print("hello world")
}

HelloWorld.main(args)

winse@Lenovo-PC ~
$ sh script.scala
sh start
hello world
</code></pre>

<blockquote><p>exec 使用 exec 方式运行script时, 它和 source 一样, 也是让 script 在当前process内执行, 但是 process 内的原代码剩下部分将被终止. 同样, process 内的环境随script 改变而改变.</p></blockquote>

<p>所以，整个脚本流程就是：执行shell，调用exec来调用scala的解释器执行整个脚本内容，而解释器会过滤掉<code>#!</code>和<code>!#</code>之间内容，执行完后，exec退出脚本，实现scala脚本执行的功能。这样折中的使用方式，应该是为了处理<strong>参数传递</strong>*的问题！</p>

<h2>参考</h2>

<ul>
<li><a href="http://bbs.chinaunix.net/thread-3583927-1-1.html">井号加叹号的作用是什么</a></li>
<li><a href="http://en.wikipedia.org/wiki/Shebang_%28Unix%29">Shebang (Unix)</a></li>
<li><a href="http://bbs.chinaunix.net/thread-218853-1-1.html">shell 十三問? </a></li>
<li><a href="http://www.cnblogs.com/agateriver/archive/2010/09/07/scala_pound_bang.html">Scala 脚本的 pound bang 魔术</a></li>
<li><a href="http://alvinalexander.com/scala/scala-shell-script-example-exec-syntax">A Scala shell script example (and discussion)</a></li>
<li><a href="http://tldp.org/LDP/abs/html/abs-guide.html">Advanced Bash-Scripting Guide An in-depth exploration of the art of shell scripting</a></li>
<li><a href="http://blog.chinaunix.net/uid-27653755-id-4385938.html">linux中fork, source和exec的区别 </a></li>
<li><a href="http://ss64.com/bash/exec.html">exec</a></li>
</ul>


<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Top命令使用]]></title>
    <link href="http://winse.github.io/blog/2013/02/26/linux-top-command-mannual/"/>
    <updated>2013-02-26T00:00:00+08:00</updated>
    <id>http://winse.github.io/blog/2013/02/26/linux-top-command-mannual</id>
    <content type="html"><![CDATA[<p>使用过linux的系统的人，应该都用过top命令。
top集成了系统的许多功能，可以查看时间，查看系统的负载，查看cpu和mem的使用情况，查看系统运行的程序等。</p>

<p>top命令显示界面可以分成3部分：</p>

<ul>
<li>系统总体性能（Summary_Area）</li>
<li>命令输入光标（Message/Prompt line）</li>
<li>任务显示区（Columns Header，Task Area）</li>
</ul>


<h2>常用的命令</h2>

<ul>
<li>[ q ] ，或 [ ctrl + c ]      退出top命令。</li>
<li>[ h ] ，或 [ ? ]             查看帮助，然后可以按ESC回到top界面。</li>
</ul>


<h2>在Top输出界面显示CPU内核数量 - [ 1 ]（数字1）</h2>

<p>top命令默认在一行中显示所有CPUs。</p>

<p><img src="http://dl.iteye.com/upload/attachment/0080/8394/c2b927b9-9f56-39c7-82a7-9842d7096443.png" alt="" /></p>

<p>可以在该交互界面输入 [ 1 ] （数字1），显示当前系统的cpu数量，以及cpus的使用情况。如下图所示。</p>

<p><img src="http://dl.iteye.com/upload/attachment/0080/8396/1544352d-9368-3444-a89b-fa9752417fbc.png" alt="" /></p>

<h2>刷新Top命令界面</h2>

<p>手动刷新可以通过 [ space ] 和 [ enter ] 键来执行。</p>

<p>如果需要修改刷新频率，可以通过命令 [ d ] 或 [ s ] ，然后再输入数字（新的时间），最后键入 [ enter ] 使设置生效。</p>

<p><img src="http://dl.iteye.com/upload/attachment/0080/8401/69556fcc-3ba9-3ea6-8ca5-525dc139e0a3.png" alt="" /></p>

<h2>高亮运行中的进程 - [ b / x / y ]</h2>

<p>输入命令 [ b ] 能开启高亮显示，这个是行列高亮的总开关。(在SSH远程登录时可能需要先输入命令 [ B ] 启动高亮才行)
高亮的行表示运行中的程序，高亮的列为当前数据排序列。</p>

<p>如果还需要对行或列进行控制，可以输入 [ y ] 或 [ x ] 来执行。</p>

<p><img src="http://dl.iteye.com/upload/attachment/0080/8405/28d64d90-d2ea-3e4a-ae3b-dc02dc824bf1.png" alt="" /></p>

<p>还有 [ z ] 命令能改变颜色，但是在远程登录的情况下不起作用。</p>

<h2>显示详细命令和参数- [ c ]</h2>

<p>输入[c] 用来显示 命令路径和其传递的参数。</p>

<p><img src="http://dl.iteye.com/upload/attachment/0080/8407/e0df5c72-a96d-38d7-97be-8fc09bc9b574.png" alt="" /></p>

<h2>修改排序字段</h2>

<p>通过命令 [ M ] 把Task_Area的<strong>排序列</strong>切换到%MEM列， [ N ] 切换为PID， [ P ] 切换到%CPU， [ T ] 切换到Time+。</p>

<p>如果你觉得这些不能满足你，那，你就的自定义。通过 [ F ] / [ O ] （大写的o字母）来选择需要排序的列。小写的 f 和 o 用来选择需要显示的列。
键入 [ F ] 后，会显示所有字段。输入需要排序列前面的字母标识，然后回车即可。</p>

<p><img src="http://dl.iteye.com/upload/attachment/0080/8412/1d0f445e-b6ae-3f08-a3de-df1f76e73d7a.png" alt="" /></p>

<p>在交互界面，可以通过 [ R ] 命令来反转排序。在界面显示的列中还可以通过 [ &lt; ] / [ > ] 直接切换排序列。</p>

<h2>把Top输出切分成多个窗口- [ A ]</h2>

<p>按 [ A ] 后，会显示4个分屏的窗口，使用 [ a ] / [ w ] 可以切换4种状态作为当前状态，然后再按 [ A ] 可使当前状态全屏。</p>

<p><img src="http://dl.iteye.com/upload/attachment/0080/8416/3a62f8c2-50d4-3305-89b1-42e009bb05d5.png" alt="" /></p>

<p>也可以通过输入 [ G ] 命令，再使用数字选择对应的状态即可。</p>

<p><img src="http://dl.iteye.com/upload/attachment/0080/8418/bb906d0f-d4bd-319e-9b22-529114628caf.png" alt="" /></p>

<h2>显示Summary区域的信息</h2>

<p>本来写的是隐藏的，但是作为监控来说，为啥隐藏这些有用的信息呢？
但是，如果默认未显示，可以使用下列的命令显示。</p>

<p><img src="http://dl.iteye.com/upload/attachment/0080/8410/89c2c42a-67fd-31da-ae65-860958a0ec3d.png" alt="" /></p>

<ul>
<li>键入命令 [ l ]（字母L的小写） - 显示/隐藏 系统负载，对应上图的第1行。</li>
<li>键入命令 [ t ] - 显示/隐藏 CPU的状态，对应第2，3行。</li>
<li>键入命令 [ m ] - 显示/隐藏 内存信息，对应第4，5行。</li>
</ul>


<h2>其他不常用的命令</h2>

<ul>
<li>一般使用top都是一起交互方式使用，使用命令行参数 [ -b ] ，可以以类似日志方式（追加）来保存当前系统的运行状态。</li>
<li>如果希望把配置保存起来，作为下次的默认配置，可以使用 [ W ]</li>
<li>使用 [ -u ] / [ u ] / [ p ]来控制监控特定的进程/用户。</li>
<li>使用 [ r ] 来修改程序的优先级别（nice值）</li>
<li>使用 [ k ] 关闭特定pid的程序。</li>
</ul>


<h2>参考资料：</h2>

<ul>
<li><a href="http://www.thegeekstuff.com/2010/01/15-practical-unix-linux-top-command-examples/">Can You Top This? 15 Practical Linux Top Command Examples</a></li>
<li><a href="http://os.51cto.com/art/201108/285581.htm">top具体参数说明</a></li>
<li><a href="http://bbs.linuxtone.org/thread-1684-1-1.html">linux命令详解</a>（很棒）</li>
<li><a href="http://tolywang.itpub.net/post/48/130884">http://tolywang.itpub.net/post/48/130884</a></li>
<li><a href="http://blog.csdn.net/aten_xie/article/details/6564599">http://blog.csdn.net/aten_xie/article/details/6564599</a></li>
</ul>


<hr />

<p><a href="http://winse.iteye.com/blog/1814999">【原文地址】</a></p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
</feed>
