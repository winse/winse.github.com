<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Jekyll | Winse Blog]]></title>
  <link href="http://winseliu.com/blog/categories/jekyll/atom.xml" rel="self"/>
  <link href="http://winseliu.com/"/>
  <updated>2016-03-07T18:32:03+08:00</updated>
  <id>http://winseliu.com/</id>
  <author>
    <name><![CDATA[Winse Liu]]></name>
    <email><![CDATA[winseliu@foxmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[为github Pages页面设置自定义域名]]></title>
    <link href="http://winseliu.com/blog/2014/10/24/github-custom-domain/"/>
    <updated>2014-10-24T00:17:19+08:00</updated>
    <id>http://winseliu.com/blog/2014/10/24/github-custom-domain</id>
    <content type="html"><![CDATA[<ol>
<li>注册个域名（net.cn）</li>
<li>添加CNAME文件（github.com）</li>
<li>添加解析记录（net.cn）</li>
</ol>


<p><img src="http://file.bmob.cn/M00/20/C5/wKhkA1RJKuyAf6lWAACIJ28IFe8161.png" alt="" /></p>

<p>如果是使用子域名的话非常简单。在（pages）CNAME文件中填写www.winseliu.com，然后在（net.cn）解析页添加CNAME指向winse.github.io即可。</p>

<p>如果想默认顶级域名也能访问，需要添加的两个ip指向，参见上图。同时（pages）CNAME中使用winseliu.com。</p>

<h2>参考</h2>

<ul>
<li><a href="https://help.github.com/articles/my-custom-domain-isn-t-working/">My custom domain isn&rsquo;t working</a></li>
<li><a href="https://help.github.com/articles/tips-for-configuring-an-a-record-with-your-dns-provider/">Tips for configuring an A record with your DNS provider</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyll按照tag分页面]]></title>
    <link href="http://winseliu.com/blog/2014/03/20/jekyll-tag-per-page/"/>
    <updated>2014-03-20T06:21:36+08:00</updated>
    <id>http://winseliu.com/blog/2014/03/20/jekyll-tag-per-page</id>
    <content type="html"><![CDATA[<h2>单页实现</h2>

<p>从jekll-bootstrap检出的代码中，<code>tags.html</code>实现了标签的显示。但是所有的标签和日志列表都码在一个文件里面，总感觉有点太拥挤。</p>

<p></p>

<pre><code>&lt;div class="page-header"&gt;
    &lt;h1&gt;{{ page.title }} {% if page.tagline %} &lt;small&gt;{{ page.tagline }}&lt;/small&gt;{% endif %}&lt;/h1&gt;
&lt;/div&gt;

&lt;ul class="tag_box inline"&gt;
    {% assign tags_list = site.tags %}  

    {% if tags_list.first[0] == null %}
        {% for tag in tags_list %} 
        &lt;li&gt;&lt;a href="#{{ tag }}-ref"&gt;{{ tag }} &lt;span&gt;{{ site.tags[tag].size }}&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        {% endfor %}
    {% else %}
        {% for tag in tags_list %} 
        &lt;li&gt;&lt;a href="#{{ tag[0] }}-ref"&gt;{{ tag[0] }} &lt;span&gt;{{ tag[1].size }}&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
        {% endfor %}
    {% endif %}

    {% assign tags_list = nil %}
&lt;/ul&gt;

{% for tag in site.tags %} 
&lt;h2 id="{{ tag[0] }}-ref"&gt;{{ tag[0] }}&lt;/h2&gt;
&lt;ul class="index"&gt;
    {% assign pages_list = tag[1] %}  

    {% if site.JB.pages_list.provider == "custom" %}
        {% include custom/pages_list %}
    {% else %}
        {% for node in pages_list %}
            {% if node.title != null %}
                {% if group == null or group == node.group %}
                    {% if page.url == node.url %}
                    &lt;li class="active"&gt;
                        &lt;a href="{{ BASE_PATH }}{{ node.url }}" class="active"&gt;{{ node.title | xml_escape }}&lt;/a&gt;
                        &lt;span&gt;&lt;time datetime="{{ node.date | date: "%Y-%m-%d" }}"&gt;{{ node.date | date: "%Y/%m/%d" }}&lt;/time&gt;&lt;/span&gt;
                    &lt;/li&gt;
                    {% else %}
                    &lt;li&gt;
                        &lt;a href="{{ BASE_PATH }}{{ node.url }}" class="active"&gt;{{ node.title | xml_escape }}&lt;/a&gt;
                        &lt;span&gt;&lt;time datetime="{{ node.date | date: "%Y-%m-%d" }}"&gt;{{ node.date | date: "%Y/%m/%d" }}&lt;/time&gt;&lt;/span&gt;
                    &lt;/li&gt;
                    {% endif %}
                {% endif %}
            {% endif %}
        {% endfor %}
    {% endif %}

    {% assign pages_list = nil %}
    {% assign group = nil %}   
&lt;/ul&gt;
{% endfor %}
</code></pre>

<p></p>

<h2>插件实现分页面</h2>

<p>找了一些资料，使用plugin的方式可以生成文件，以及页面的自定义标签。在<code>_plugins</code>目录下新增<code>jekyll-tag-page.rb</code> :</p>

<pre><code>module Jekyll

    class TagPage &lt; Page
        def initialize(site, base, dir, tag)
            @site = site
            @base = base
            @dir = dir
            @name = 'index.html'

            self.process(@name)
            self.read_yaml(File.join(base, '_layouts'), 'tag_index.html')

            self.data['tags'] = tag
        end
    end

    class TagPageGenerator &lt; Generator
        safe true

        def generate(site)
            if site.layouts.key? 'tag_index'
                dir = site.config['tag_dir'] || 'tags'
                site.tags.keys.each do |tag|
                    site.pages &lt;&lt; TagPage.new(site, site.source, File.join(dir, tag), tag)
                end
            end
        end
    end
end
</code></pre>

<p>生成插件为每个TAG生成了一个页面，<code>_layout</code>模板设置为tag_index.html，在模板中可以根据当前页面的tags过滤并只显示该tag的日志列表。文件默认保存到<code>tags/TAG</code>目录下。</p>

<p></p>

<pre><code>{% for tag in site.tags %} 
    {% if page.tags == tag[0] %}
    &lt;h2&gt;{{ tag[0] }}&lt;/h2&gt;
    &lt;ul class="index"&gt;
        {% assign pages_list = tag[1] %}  

        {% for node in pages_list %}
            {% if node.title != null %}
            &lt;li&gt;
                &lt;a href="{{ BASE_PATH }}{{ node.url }}"&gt;{{ node.title | xml_escape }}&lt;/a&gt;
                &lt;span&gt;&lt;time datetime="{{ node.date | date: "%Y-%m-%d" }}"&gt;{{ node.date | date: "%Y/%m/%d" }}&lt;/time&gt;&lt;/span&gt;
            &lt;/li&gt;
            {% endif %}
        {% endfor %}

        {% assign pages_list = nil %}
    &lt;/ul&gt;
    {% endif %}
{% endfor %}
</code></pre>

<p></p>

<h2>使用脚本生成目录和md文件来实现</h2>

<p>但是由于github不支持自定义插件功能，也就是说，就算我提交了<code>_plugin</code>的代码也是无效的。<strong>最终最后的实现</strong>，使用Shell脚本在tags目录下生成文件夹和内容：</p>

<pre><code>cd $tools/../tags

find * -type d -exec rm -rf {} +

for tag in `cat tags`; do 
mkdir $tag
cat &gt; $tag/index.md &lt;&lt;EOF
---
layout: tag
categories: [$tag]
---

EOF
done;
</code></pre>

<p>脚本列表tags文件内容生成目录和index.md文件。</p>

<p>layout模板tag.html页面代码如下：</p>

<p></p>

<pre><code>&lt;h3&gt;Tag: {{ page.categories[-1] }}&lt;/h3&gt;
&lt;ul class="archive-list"&gt;

{% for tag in site.tags %}
{% if page.categories[-1] == tag[0] %}

{% assign pages_list = tag[1] %} 
{% for node in pages_list %}
    {% if node.title != null %}
        &lt;li class="archive"&gt;
            &lt;span&gt;
                &lt;time datetime="{{ node.date | date: "%Y-%m-%d" }}"&gt;
                    {{ node.date | date: "%Y/%m/%d" }}
                &lt;/time&gt;
            &lt;/span&gt;
            &lt;a href="{{ BASE_PATH }}{{ node.url }}" class="archive-link"&gt;{{ node.title | xml_escape }}&lt;/a&gt;
        &lt;/li&gt;
    {% endif %}
{% endfor %}
{% assign pages_list = nil %} 

{% endif %}
{% endfor %}

&lt;/ul&gt;
</code></pre>

<p></p>

<p>&ndash;END</p>

<h1>参考</h1>

<ul>
<li><a href="https://github.com/shopify/liquid/wiki/liquid-for-designers">liquid页面渲染语言</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyll页面添加编辑按钮]]></title>
    <link href="http://winseliu.com/blog/2014/03/18/jekyll-edit-link-in-web-page/"/>
    <updated>2014-03-18T05:56:53+08:00</updated>
    <id>http://winseliu.com/blog/2014/03/18/jekyll-edit-link-in-web-page</id>
    <content type="html"><![CDATA[<p>近期把其他博客的日志导出成Markdown后导入到自己的blog。想在本地预览后，看到不好的地方就进行修改，想法是美好的，现实是残酷的！<strong>找文件太麻烦</strong>了，定位到了文件夹，还需要找文件。反正就是觉得很不爽！最终通过<a href="https://gist.github.com/4548d6c182f8162497fa.git">自定义URL协议的方式完美的解决</a>。</p>

<h3>尝试ActiveXObject</h3>

<p>IE下可以通过<a href="http://iask.sina.com.cn/b/8583473.html?sudaref=www.google.com.hk&amp;retcode=0">ActiveXObject调用本地的程序</a>打开文件。尽管局限于IE，但是如果能实现的话将就下也OK的。
理所当然认为IE下是没有问题，就找chrome下能否执行<a href="http://stackoverflow.com/questions/7022568/javascript-activexobject-in-firefox-or-chrome-not-ie">ActiveXObject的兼容对象</a>。</p>

<p>在chrome下，没啥很好的替代实现。同时在IE11下，ActiveXObject调用shell对象报<a href="http://www.cnblogs.com/dongyongjing/archive/2007/04/18/718629.html"><strong>automation服务器不能创建对象</strong></a>，需要额外开启功能、降低IE的安全性等等，也很麻烦！！</p>

<pre><code>function callShellApplication(){
  var objShell = new ActiveXObject("WScript.shell");
  objShell.run('"C:\Program Files (x86)\wkhtmltopdf\wkhtmltopdf.exe" "c:\PDFTestPage.html" "c:\TEST.pdf"');
}
</code></pre>

<h3>尝试Flash</h3>

<p>有想过使用flash解决，毕竟剪贴板复制功能的<code>ZeroClipboard.swf</code>是那么的完美^_^。但是<a href="http://www.cnblogs.com/yao/archive/2008/01/02/1022721.html">swf不能执行exe程序</a>，没办法只能再寻求其他办法。</p>

<h3>自定义URL协议</h3>

<p>最后看到了<a href="http://hi.baidu.com/pluto632/item/5007737da31344326f29f666"><strong>URL Protocol的实现方式</strong></a>，是的哦，Github-Windows、以及QQ等这些网页的工具不都是调用系统的程序吗？！</p>

<p>然后试着按照网页的教程，试着弄弄！<del>又是一个新鲜事物，有挑战的事情做起来就更有激情！</del></p>

<p>添加注册表项<code>reg-npp-windows.bat</code>：（可以先导出github-windows的注册表项参考。这里使用用bat来实现，注册脚本中可以通过<strong>相对路径</strong>指向执行的程序）</p>

<pre><code>set NPP_APP=%~dp0npp-windows.bat
set NPP_ARG=%%1

set "NPP_CMD=\"%NPP_APP%\" \"%NPP_ARG%\""

reg add "HKEY_CLASSES_ROOT\npp-windows" /f
reg add "HKEY_CLASSES_ROOT\npp-windows" /ve /t REG_SZ /d "URL:npp-windows Protocol" /f
reg add "HKEY_CLASSES_ROOT\npp-windows" /v "URL Protocol" /t REG_SZ /d "" /f

reg add "HKEY_CLASSES_ROOT\npp-windows\DefaultIcon"  /f
reg add "HKEY_CLASSES_ROOT\npp-windows\DefaultIcon"  /ve /t REG_SZ /d "" /f

reg add "HKEY_CLASSES_ROOT\npp-windows\shell" /f
reg add "HKEY_CLASSES_ROOT\npp-windows\shell\open" /f
reg add "HKEY_CLASSES_ROOT\npp-windows\shell\open\command" /f
reg add "HKEY_CLASSES_ROOT\npp-windows\shell\open\command" /ve /t REG_SZ /d "%NPP_CMD%" /f

pause
</code></pre>

<p>点击URL真正调用的是<code>npp-windows.bat</code>命令（即上面的注册脚本的<code>NPP_APP</code>）:</p>

<pre><code>@echo off

set fileRelativePath=%1
set filepath="%~dp0..\..\..\%fileRelativePath:~17,-1%"

start D:\local\usr\npp\notepad++.exe %filepath%
exit
</code></pre>

<p><code>start</code>命令新起一个子进程打开程序，这样可以启动后面的程序，同时关闭/退出掉黑窗口！
请求参数有整个url加上双引号，如<code>"npp-windows://e/about.md"</code>。数字<code>17,-1</code>获取真正的路径。由于根下的文件会被自动加反斜杠<code>"npp-windows://about.md/"</code>，所以加上<code>e/</code>进行修复。</p>

<p>在网页使用链接，然后加上<code>npp-windows</code>的协议就可以打开文件进行修改编辑了。</p>

<p>
    <a class="shellExecuteLink" href="npp-windows://e/{{ page.path }}" title="本地编辑"><i class="icon-edit"> </i></a>
</p>

<p>对BAT的命令相当的迷惑：</p>

<ul>
<li><code>"D:\local\usr\npp\notepad++.exe" "%~dp0..\..\..\%fileRelativePath:~17,-1%"</code> OK</li>
<li><code>start D:\local\usr\npp\notepad++.exe "%~dp0..\..\..\%fileRelativePath:~17,-1%"</code> OK</li>
<li><code>start "D:\local\usr\npp\notepad++.exe" "%~dp0..\..\..\%fileRelativePath:~17,-1%"</code> 弹出<strong>Windows无法打开此文件</strong>的框</li>
</ul>


<h3>闪黑窗口优化尝试</h3>

<p>功能已经实现了，但是仍然有一个黑窗口一闪而过！</p>

<p>爱折腾的程序员啊！！</p>

<p>找啊找，发现<strong>vbs可以后台执行命令</strong>。直接在命令行是可以执行<strong>npp-windows.vbs</strong>的，同时那种不弹窗的效果也是自己想要的！！但把vbs作为url-protocol协议的执行程序时，点击页面链接却没一点反应！但是运行bat和exe程序是没有问题的。</p>

<p>其实windows下的bat和vbs程序都是可以转成exe的。
下载了<a href="http://www.abyssmedia.com/scriptcryptor/">ScriptCryptor Compiler</a><a href="http://www.sdbeta.com/uploads/soft/131002/1-131002113S7.rar">破解版</a>，把vbs转成exe后就可以被url-protocol调用了，且没有闪窗的现象了！</p>

<pre><code>Dim CurrPath
CurrPath=WScript.Createobject("Scripting.FileSystemObject").GetFile(Wscript.ScriptFullName).ParentFolder.Path

Dim fileRelativePath
fileRelativePath=WScript.Arguments(0)

Dim filepath
filepath=Mid(fileRelativePath,17)

Dim Wsh
Set Wsh = WScript.CreateObject("WScript.Shell")

Wsh.Run "D:\local\usr\npp\notepad++.exe " + CurrPath + "\..\..\..\" + filepath,0,True

Set Wsh=NoThing
WScript.quit
</code></pre>

<p>同时上面的vbs程序有一个与bat同样的问题：在<strong>文件</strong>没有关闭的前，vbs程序是一直等待的！如果使用这种方式，编辑很多文件就会存在很多进程。</p>

<p>而直接在<code>Wsh.Run</code>后面加上<code>start</code>前缀就报<strong>系统找不到指定的文件</strong>的错误！整来整去最后还是调用bat文件，解决主进程一直等待的问题。</p>

<pre><code>Dim CurrPath
CurrPath=WScript.Createobject("Scripting.FileSystemObject").GetFile(Wscript.ScriptFullName).ParentFolder.Path

Dim fileRelativePath
fileRelativePath=WScript.Arguments(0)

Dim Wsh
Set Wsh = WScript.CreateObject("WScript.Shell")

Wsh.Run CurrPath + "\npp-windows.bat """ + fileRelativePath + """",0,True

Set Wsh=NoThing
WScript.quit
</code></pre>

<p>然后修改<strong>添加注册表项的命令</strong>reg-npp-windows.bat，重新覆盖注册下就可以了。</p>

<pre><code>set NPP_APP=%~dp0npp-windows.vbs.exe
</code></pre>

<p>尽管没有黑窗口了闪现，但是速度慢了很多！！
两种方式换着用呗，修改也简单： 改下程序的名字，重新注册下就行了。</p>

<h2>其他</h2>

<p>URL-protocol的用户选择设置会被chrome缓冲，可以通过<code>C:\Users\Administrator\AppData\Local\Google\Chrome\User Data\Local State</code>文件的<code>protocol_handler</code>节点来修改。</p>

<h2>参考</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/15351508/using-a-wscript-shell-activex-to-execute-a-command-line">Using a WScript.shell activeX to execute a command line</a></li>
<li><a href="http://huagenli.iteye.com/blog/552447">在html中利用WScript.Shell启用本地程序</a></li>
<li><a href="http://blog.csdn.net/insidekernel/article/details/2033175">通过网页链接打开应用程序客户端的两种实现方式</a></li>
<li><a href="http://hi.baidu.com/pluto632/item/5007737da31344326f29f666">浏览器打开本地程序，全面支持ie,firefox,opera,chrome,自定义url protocol</a></li>
<li><a href="http://blog.csdn.net/lockelk/article/details/7541374">自定义URL Protocol调用Winfrom程序（exe）并实现传值——类似网页链接调用QQ、旺旺</a></li>
<li><a href="http://www.cnblogs.com/zjneter/archive/2008/01/08/1030066.html">自定义URL Protocol Handler</a></li>
<li><a href="https://github.com/shopify/liquid/wiki/liquid-for-designers">liquid页面渲染语言</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyll页面实现上/下一篇文章导航]]></title>
    <link href="http://winseliu.com/blog/2014/03/14/jekyll-page-implement-navigate/"/>
    <updated>2014-03-14T08:03:23+08:00</updated>
    <id>http://winseliu.com/blog/2014/03/14/jekyll-page-implement-navigate</id>
    <content type="html"><![CDATA[<p>在博客页面在内容会有上一遍和下一遍文章的链接。
在jekyll的page对象包含上下篇的引用 <a href="http://jekyllbootstrap.com/api/template-data-api.html">Template Data Api</a> ，只需要在页面进行展示即可。</p>

<p>默认主题中jekyll-bootstrap的twitter主题中包含上下篇文章的实现如下：</p>

<p></p>

<pre><code>&lt;hr&gt;
&lt;div class="pagination"&gt;
  &lt;ul&gt;
  {% if page.previous %}
    &lt;li class="prev"&gt;&lt;a href="{{ BASE_PATH }}{{ page.previous.url }}" title="{{ page.previous.title }}"&gt;&amp;larr; Previous&lt;/a&gt;&lt;/li&gt;
  {% else %}
    &lt;li class="prev disabled"&gt;&lt;a&gt;&amp;larr; Previous&lt;/a&gt;&lt;/li&gt;
  {% endif %}
    &lt;li&gt;&lt;a href="{{ BASE_PATH }}{{ site.JB.archive_path }}"&gt;Archive&lt;/a&gt;&lt;/li&gt;
  {% if page.next %}
    &lt;li class="next"&gt;&lt;a href="{{ BASE_PATH }}{{ page.next.url }}" title="{{ page.next.title }}"&gt;Next &amp;rarr;&lt;/a&gt;&lt;/li&gt;
  {% else %}
    &lt;li class="next disabled"&gt;&lt;a&gt;Next &amp;rarr;&lt;/a&gt;
  {% endif %}
  &lt;/ul&gt;
&lt;/div&gt;
&lt;hr&gt;
</code></pre>

<p></p>

<p><strong>注意点</strong></p>

<pre><code>{ % highlight % }{ % endhighlight % }

# 用于直接输出liquid标签源码，但是raw不能嵌套使用
{ % raw % } { % endraw % }
</code></pre>

<h2>参考</h2>

<ul>
<li><a href="http://docs.shopify.com/themes/liquid-basics/output#date">liquid-date output</a></li>
<li><a href="http://joshbranchaud.com/blog/2012/12/24/Date-Formatting-in-Jekyll.html">日期格式化</a></li>
<li><a href="http://blog.segmentfault.com/skyinlayer/1190000000406013">使用Jekyll在Github上搭建个人博客</a></li>
<li><a href="http://blog.segmentfault.com/skyinlayer/1190000000406015">分页</a></li>
<li><a href="http://jser.me/2013/07/28/%E6%97%A7blog%E8%BF%81%E7%A7%BB%E5%88%B0jekyll%2Bgithub.html">旧blog迁移到jekyll+github</a></li>
<li><a href="http://jekyllrb.com/docs/variables/">jekyll可以使用的参数</a></li>
<li><a href="https://github.com/shopify/liquid/wiki/liquid-for-designers">liquid页面渲染语言</a></li>
<li><a href="http://www.open-open.com/lib/view/open1361323129134.html">javascript-liquid</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在windows操作系统安装jekyll服务]]></title>
    <link href="http://winseliu.com/blog/2014/03/14/windows-install-jekyll/"/>
    <updated>2014-03-14T07:35:32+08:00</updated>
    <id>http://winseliu.com/blog/2014/03/14/windows-install-jekyll</id>
    <content type="html"><![CDATA[<p>如果windows安装了<strong>cygwin</strong>，那就不要折腾了，参考本文最后，按照类似linux的安装是最方便简单的了！</p>

<h2>参考文档：</h2>

<ul>
<li><a href="http://chxt6896.github.io/blog/2011/11/30/blog-jekyll-install.html">安装 Jekyll</a></li>
<li><a href="https://github.com/oneclick/rubyinstaller/wiki/development-kit">Development Kit</a></li>
<li><a href="http://blog.ownlinux.net/2012/08/fix-gem-install-jekyll-problem.html">解决GEM INSTALL JEKYLL的问题</a></li>
</ul>


<p>我首先把安装过程中参考的链接放上来，下面的操作其实是对他们的一个梳理。</p>

<h2>下载 &amp; 安装包</h2>

<ul>
<li><a href="https://code.google.com/p/msysgit/">MsysGit</a> Git-1.8.3-preview20130601.exe</li>
<li><a href="http://rubyforge.org/frs/?group_id=167">ruby</a> rubyinstaller-1.9.3-p392.exe</li>
<li><a href="https://github.com/oneclick/rubyinstaller/downloads/">rubydev</a> DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe</li>
</ul>


<p>安装的路径根据自己的需要进行选择即可。我这里选择的是：</p>

<ul>
<li>C:\Program Files\Git</li>
<li>C:\Ruby193</li>
<li>C:\rubydev</li>
</ul>


<h2>设置环境变量，并初始化安装rubydev</h2>

<p>打开git命令窗口(bash命令行)，操作如下：</p>

<pre><code>Winseliu@WINSE ~
$ export PATH=/c/Ruby193/bin:/c/rubydev/bin:$PATH

Winseliu@WINSE ~
$ cd /c/rubydev/

Winseliu@WINSE /c/rubydev
$ ruby dk.rb  init
[INFO] found RubyInstaller v1.9.3 at C:/Ruby193

Initialization complete! Please review and modify the auto-generated
'config.yml' file to ensure it contains the root directories to all
of the installed Rubies you want enhanced by the DevKit.

Winseliu@WINSE /c/rubydev
$ ruby dk.rb install
[INFO] Updating convenience notice gem override for 'C:/Ruby193'
[INFO] Installing 'C:/Ruby193/lib/ruby/site_ruby/devkit.rb'
</code></pre>

<h2>安装jekyll</h2>

<p>安装的过程并非一路顺风，rubygems的官网好像被禁了。需要更新源。</p>

<pre><code>Winseliu@WINSE /c
$ gem install jekyll
ERROR:  Could not find a valid gem 'jekyll' (&gt;= 0) in any repository
ERROR:  Possible alternatives: jekyll

Winseliu@WINSE /c
$ gem sources --remove http://rubygems.org/
http://rubygems.org/ removed from sources

Winseliu@WINSE /c
$ gem sources -a http://ruby.taobao.org/
http://ruby.taobao.org/ added to sources

Winseliu@WINSE /c
$ gem sources -l
*** CURRENT SOURCES ***

http://ruby.taobao.org/

Winseliu@WINSE /c
$ gem install rack
Fetching: rack-1.5.2.gem (100%)
Successfully installed rack-1.5.2
1 gem installed
Installing ri documentation for rack-1.5.2...
Installing RDoc documentation for rack-1.5.2...
</code></pre>

<h2>真正安装jekyll</h2>

<pre><code>Winseliu@WINSE /c/rubydev
$ gem install jekyll
Temporarily enhancing PATH to include DevKit...
Building native extensions.  This could take a while...
Fetching: classifier-1.3.3.gem (100%)
Fetching: directory_watcher-1.4.1.gem (100%)
Fetching: syntax-1.0.0.gem (100%)
Fetching: maruku-0.6.1.gem (100%)
Fetching: kramdown-1.0.2.gem (100%)
Fetching: yajl-ruby-1.1.0-x86-mingw32.gem (100%)
Fetching: posix-spawn-0.3.6.gem (100%)
Building native extensions.  This could take a while...
Fetching: pygments.rb-0.5.1.gem (100%)
Fetching: highline-1.6.19.gem (100%)
Fetching: commander-4.1.3.gem (100%)
Fetching: safe_yaml-0.7.1.gem (100%)
Fetching: colorator-0.1.gem (100%)
Fetching: jekyll-1.0.3.gem (100%)
Successfully installed fast-stemmer-1.0.2
Successfully installed classifier-1.3.3
Successfully installed directory_watcher-1.4.1
Successfully installed syntax-1.0.0
Successfully installed maruku-0.6.1
Successfully installed kramdown-1.0.2
Successfully installed yajl-ruby-1.1.0-x86-mingw32
Successfully installed posix-spawn-0.3.6
Successfully installed pygments.rb-0.5.1
Successfully installed highline-1.6.19
Successfully installed commander-4.1.3
Successfully installed safe_yaml-0.7.1
Successfully installed colorator-0.1
Successfully installed jekyll-1.0.3
14 gems installed
Installing ri documentation for fast-stemmer-1.0.2...
Installing ri documentation for classifier-1.3.3...
Installing ri documentation for directory_watcher-1.4.1...
Installing ri documentation for syntax-1.0.0...
Installing ri documentation for maruku-0.6.1...
Couldn't find file to include 'MaRuKu.txt' from lib/maruku.rb
Installing ri documentation for kramdown-1.0.2...
Installing ri documentation for yajl-ruby-1.1.0-x86-mingw32...
Installing ri documentation for posix-spawn-0.3.6...
Installing ri documentation for pygments.rb-0.5.1...
Installing ri documentation for highline-1.6.19...
Installing ri documentation for commander-4.1.3...
Installing ri documentation for safe_yaml-0.7.1...
Installing ri documentation for colorator-0.1...
Installing ri documentation for jekyll-1.0.3...
Installing RDoc documentation for fast-stemmer-1.0.2...
Installing RDoc documentation for classifier-1.3.3...
Installing RDoc documentation for directory_watcher-1.4.1...
Installing RDoc documentation for syntax-1.0.0...
Installing RDoc documentation for maruku-0.6.1...
Couldn't find file to include 'MaRuKu.txt' from lib/maruku.rb
Installing RDoc documentation for kramdown-1.0.2...
Installing RDoc documentation for yajl-ruby-1.1.0-x86-mingw32...
Installing RDoc documentation for posix-spawn-0.3.6...
Installing RDoc documentation for pygments.rb-0.5.1...
Installing RDoc documentation for highline-1.6.19...
Installing RDoc documentation for commander-4.1.3...
Installing RDoc documentation for safe_yaml-0.7.1...
Installing RDoc documentation for colorator-0.1...
Installing RDoc documentation for jekyll-1.0.3...
</code></pre>

<h2>创建新博客</h2>

<p>（2014年3月19日更新 Cygwin）</p>

<p><strong>建立新的本地测试文件夹</strong></p>

<pre><code>Administrator@winseliu /cygdrive/c/Users/Administrator/target
$ rm -rf export

Administrator@winseliu /cygdrive/c/Users/Administrator/target
$ jekyll new export
New jekyll site installed in /cygdrive/c/Users/Administrator/target/export.

Administrator@winseliu /cygdrive/c/Users/Administrator/target
$ cd export/
</code></pre>

<p><strong>修改配置_config.yml</strong></p>

<pre><code>name: Your New Jekyll Site
markdown: rdiscount
pygments: false
</code></pre>

<p><strong>启动服务</strong></p>

<pre><code>Administrator@winseliu /cygdrive/c/Users/Administrator/target/export
$ jekyll serve --trace -w -P 8000
Configuration file: /cygdrive/c/Users/Administrator/target/export/_config.yml
            Source: /cygdrive/c/Users/Administrator/target/export
       Destination: /cygdrive/c/Users/Administrator/target/export/_site
      Generating... done.
 Auto-regeneration: enabled
  Listen will be polling for changes. Learn more at https://github.com/guard/listen#polling-fallback.

    Server address: http://0.0.0.0:8000
  Server running... press ctrl-c to stop.
</code></pre>

<h2>注意点</h2>

<h3>出现编码问题</h3>

<p>参考：<a href="http://www.duzengqiang.com/blog/post/979.html">http://www.duzengqiang.com/blog/post/979.html</a></p>

<p>文件在对应的文件夹下：
C:\Ruby193\lib\ruby\gems\1.9.1\gems\jekyll-1.0.3\lib\jekyll\convertible.rb</p>

<pre><code>-        self.content = File.read(File.join(base, name))
+        self.content = File.read(File.join(base, name), :encoding=&gt;"utf-8")
</code></pre>

<p>（2014-3-13更新）重装系统后，jekyll-1.3.1版本的代码不同了，修改如下：</p>

<pre><code>    def read_yaml(base, name, opts = {:encoding=&gt;"utf-8"})
      begin
</code></pre>

<p><strong><em>OR</em></strong></p>

<p><a href="http://www.dewen.org/q/5893">http://www.dewen.org/q/5893</a></p>

<blockquote><p>要指定文件的编码格式
在文件开头加上
<code># -*- coding:utf-8 -*-</code></p>

<p>指定运行环境的编码
使用
<code>ruby --encoding=utf-8</code></p></blockquote>

<p><strong>启动</strong>：</p>

<pre><code>Winseliu@WINSE ~
$ cd /c/Users/Winseliu/Documents/GitHub/winse.github.com/

Winseliu@WINSE ~/Documents/GitHub/winse.github.com (master)
$ jekyll serve --trace -w
</code></pre>

<p>然后访问 <a href="http://localhost:4000">http://localhost:4000</a> 即可。</p>

<p><strong>本地调试</strong></p>

<ul>
<li>ruby使用<code>puts</code>输出，可以用来打印调试！</li>
<li>在本地免不了要写一些<strong>中文名的文件</strong>，可以直接增加try-catch（post.rb#self.valid, cleaner.rb#existing_files）！但网上有讲ruby2.0可以处理中文文件名了！</li>
<li>当然本地调试可以通过<strong>修改<code>_config.xml</code>的exclude</strong>排除掉，修改好需要发布时再修改为英文文件名即可！</li>
</ul>


<p>post.rb</p>

<pre><code>    def self.valid?(name)
begin
      name =~ MATCHER
rescue =&gt; err
  puts err
  puts name
end
    end
</code></pre>

<h3>编写文件头需要注意的地方；</h3>

<p><a href="http://cache.baiducontent.com/c?m=9f65cb4a8c8507ed4fece763105392230e54f733779c954228c3933fc239045c0535b6ec3a5d1219b2c176631cab4358e8f43d6537747af1c4969c0f80fbc42777df7e7f2e429141639144ee8d5124b137902dfeae69a7eae733e3b9d3a0c85523cd58127af1abd74d00659133ab526ab0f8c200424810cbaa6c33a80d2c75c87557b636a6b774345ad7e1dd2d16906bc7606180a841a73f62ec44ef&amp;p=8973d716d9c106ff57ee96744c53a5&amp;newp=8349d103929a12a05abd9b7d0f1c8f231615d70e3fd3d111&amp;user=baidu&amp;fm=sc&amp;query=jekyll++post%2Erb%3A59+in+initialize+undefined+method+has_key&amp;qid=&amp;p1=1">诡异的jekyll空格</a></p>

<blockquote><p>忽然想起之前看过的一篇博客，这篇文章中说起“YAML格局默认是：参数＋：＋空格，若是忘怀写空格描画编译报错。”。<br/>
在这里，恰是因为忘怀了空格导致了HTML文件无法生成的题目。</p></blockquote>

<h3>maruku的不足</h3>

<p>使用rdiscount ( <code>gem install rdiscount</code> ) 替换。</p>

<ul>
<li><a href="http://nepshi.com/2012-10-08/chinese-characters-in-jekyll/">Jekyll对中文问题的处理</a></li>
<li><a href="http://chxt6896.github.io/blog/2012/02/13/blog-jekyll-native.html">Jekyll本地调试之若干问题</a></li>
</ul>


<h2>参考</h2>

<ul>
<li><a href="http://chxt6896.github.io/blog/2012/02/13/blog-jekyll-native.html">http://chxt6896.github.io/blog/2012/02/13/blog-jekyll-native.html</a></li>
</ul>


<hr />

<h1>WINDOW直接在cygwin中安装jekyll</h1>

<ol>
<li>使用cygwin setup.exe安装ruby1.9（安装2.0的报编码的错），以及libyaml，最好也把git安装一下。配置环境变量。</li>
<li>使用<code>gem install jekyll</code>安装。</li>
<li>安装依赖<code>gem install rdiscount</code>。</li>
<li>启动<code>jekyll serve --trace -w</code>。</li>
</ol>


<p>由于cygwin下默认是utf8编码，并且已经有了linux的各种命令，安装起来很简单。</p>

<hr />

<p>win10预览版-cygwin32部署octopress(更新于2015-04-18)</p>

<pre><code>winse@Lenovo-PC ~
$ ruby -v
ruby 2.0.0p598 (2014-11-13) [i386-cygwin]

LC_CTYPE=C.BINARY gem sources -a https://ruby.taobao.org/
LC_CTYPE=C.BINARY gem install bundler
LC_CTYPE=C.BINARY gem install rdiscount

cd winsegit/octopress/
bundle install
rake preview

#去掉watch功能，ruby不懂，实时更新也不是很需要
vi Rakefile
#  jekyllPid = Process.spawn({"OCTOPRESS_ENV"=&gt;"preview"}, "jekyll build --watch")
#  compassPid = Process.spawn("compass watch")
  jekyllPid = Process.spawn({"OCTOPRESS_ENV"=&gt;"preview"}, "jekyll build ")
</code></pre>
]]></content>
  </entry>
  
</feed>
