<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: #maven | Winse Blog]]></title>
  <link href="http://winse.github.io/blog/categories/maven/atom.xml" rel="self"/>
  <link href="http://winse.github.io/"/>
  <updated>2024-01-16T13:54:48+08:00</updated>
  <id>http://winse.github.io/</id>
  <author>
    <name><![CDATA[Winse Liu]]></name>
    <email><![CDATA[winseliu@foxmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Maven创建自己的Archetype]]></title>
    <link href="http://winse.github.io/blog/2016/10/12/maven-create-ourself-archetype/"/>
    <updated>2016-10-12T12:06:53+08:00</updated>
    <id>http://winse.github.io/blog/2016/10/12/maven-create-ourself-archetype</id>
    <content type="html"><![CDATA[<p>最近经常用到scala，创建的小工程也挺多的。每次都的复制一些properties和plugins挺繁琐的。准备自己搞一个archetype，以后直接用archetype生成一步到位（相当于一个模板）。</p>

<ul>
<li><a href="https://my.oschina.net/wangrikui/blog/498807">https://my.oschina.net/wangrikui/blog/498807</a></li>
<li><a href="http://www.cnblogs.com/whitewolf/p/3606034.html">http://www.cnblogs.com/whitewolf/p/3606034.html</a></li>
</ul>


<h2>首先创建一个模板工程</h2>

<p>把需要修改的属性和插件，以及一些常用到的文件都放置好，如log4j.properties等。</p>

<h2>使用命令创建archetype工程</h2>

<pre><code>mvn clean archetype:create-from-project
</code></pre>

<p><strong> 注意：</strong> maven-archetype-plugin插件需要定位mvn.bat，而我的maven-3.3.9的命令名称为mvn.cmd，需要简单暴力的复制一个。</p>

<p>生成后，在 <strong> target\generated-sources\archetype </strong> 目录即为创建archetype工程。</p>

<h2>清理IDE相关文件</h2>

<p>target\generated-sources\archetype\src\main\resources\META-INF\maven 下面的 archetype-metadata.xml 为Archetype的元数据（真正包括那些文件的配置）。可以根据实际情况进行编辑</p>

<p>文件夹 target\generated-sources\archetype\src\main\resources\archetype-resources 下包括所有（新建时）需要拷贝的文件，但同时目录下面也包括了IDE相关文件，可以把这些文件<strong> 删掉 </strong> 。</p>

<h2>本地安装</h2>

<p>清理完文件后，回到 target\generated-sources\archetype 执行 <code>mvn install</code> 把这个原型(Archetype)安装到本地。</p>

<h2>使用</h2>

<ul>
<li><a href="https://my.oschina.net/u/225373/blog/468035">https://my.oschina.net/u/225373/blog/468035</a></li>
</ul>


<pre><code>mvn archetype:generate -B \
-DarchetypeGroupId=com.example -DarchetypeArtifactId=scala-simple-archetype -DarchetypeVersion=1.0 \
-DarchetypeCatalog=local \
-DgroupId=com.github.winse -DartifactId=Hello
</code></pre>

<p>注意 <strong> archetypeCatalog </strong> 属性，如果不配置为本地（local/internal ）的话要等很久（可以用-X输出调试信息查看操作停在哪）。对于intellij idea可以在 Default Settings - Build,Exection,Deployment - Build Tools - Maven - Runner 加上 VM Options 参数: <code>-DarchetypeCatalog=local</code>。</p>

<p></p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven压缩js/css功能实践]]></title>
    <link href="http://winse.github.io/blog/2016/08/19/j2ee-maven-resources-compress/"/>
    <updated>2016-08-19T16:34:28+08:00</updated>
    <id>http://winse.github.io/blog/2016/08/19/j2ee-maven-resources-compress</id>
    <content type="html"><![CDATA[<p>为了节约网络带宽，一般在发布项目时对资源(js/css)文件进行压缩（去掉空行、精简代码等）。但是要做到兼容开发与生产还是的下一番功夫才行。</p>

<pre><code>$ ls -l src/main/webapp/static/assets/js/ | head
total 3120
-rwxrwxr--+ 1 winse None  24804 Aug 10 17:40 bootbox.js
-rwxrwxr--+ 1 winse None  71315 Aug 10 17:40 bootstrap.js
-rwxrwxr--+ 1 winse None  13905 Aug 10 17:40 bootstrap-colorpicker.js
-rwxrwxr--+ 1 winse None  49319 Aug 10 17:40 bootstrap-multiselect.js
...

$ ls -l target/dist/js/ | head
total 1368
-rwxrwx---+ 1 winse None   8943 Aug 19 16:53 bootbox-min.js
-rwxrwx---+ 1 winse None   8057 Aug 19 16:53 bootstrap-colorpicker-min.js
-rwxrwx---+ 1 winse None  38061 Aug 19 16:53 bootstrap-min.js
-rwxrwx---+ 1 winse None  18232 Aug 19 16:53 bootstrap-multiselect-min.js
...
</code></pre>

<p>项目中原本使用dist(压缩)、assets目录放置js/css等资源，在部署的时刻替换dist为assets，有点麻烦。首先想到的<strong>用nginx进行url重写</strong>，但是需要增加一个服务有点麻烦，能不能直接用spring来实现呢？</p>

<ul>
<li>自定义一个handler类</li>
</ul>


<p>查看Spring的 <code>mvc:resources</code> 实现，相当于注册了一个 <code>location -&gt; ResourceHttpRequestHandler</code> 的映射。
第一种尝试自动化的方式就是自定义handler类来进行资源的定位。增加 StaticRequestHandler 的处理类，增加配置 location 和 compressLocation 的配置：首先去查找压缩文件([NAME]-min.js)，找不到然后再找源文件([NAME].js)位置。</p>

<p>主要修改 getResource 方法，具体完整代码如下：</p>

<pre><code>## java
public class StaticRequestHandler extends ResourceHttpRequestHandler {

    private final static Log logger = LogFactory.getLog(ResourceHttpRequestHandler.class);

    private String location;
    private String compressLocation;

    private Resource locationResource;
    private Resource compressLocationResource;

    public void setLocation(String location) {
        this.location = location;
    }

    public void setCompressLocation(String compressLocation) {
        this.compressLocation = compressLocation;
    }

    @Override
    public void afterPropertiesSet() throws Exception {
        super.afterPropertiesSet();

        this.locationResource = getWebApplicationContext().getResource(location);
        super.setLocations(Collections.singletonList(this.locationResource));

        this.compressLocationResource = getWebApplicationContext().getResource(compressLocation);
    }

    @Override
    protected Resource getResource(HttpServletRequest request) {
        String path = (String) request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);
        if (path == null) {
            throw new IllegalStateException("Required request attribute '"
                    + HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE + "' is not set");
        }

        if (!StringUtils.hasText(path) || isInvalidPath(path)) {
            if (logger.isDebugEnabled()) {
                logger.debug("Ignoring invalid resource path [" + path + "]");
            }
            return null;
        }

        Resource res = null;
        if (path.endsWith(".css")) {
            res = findResource(compressLocationResource, path.substring(0, path.length() - 4) + ".min.css");
        } else if (path.endsWith(".js")) {
            res = findResource(compressLocationResource, path.substring(0, path.length() - 3) + ".min.js");
        }

        if (res == null) {
            res = findResource(locationResource, path);
        }

        return res;
    }

    private Resource findResource(Resource location, String path) {
        try {
            if (logger.isDebugEnabled()) {
                logger.debug("Trying relative path [" + path + "] against base location: " + location);
            }
            Resource resource = location.createRelative(path);
            if (resource.exists() &amp;&amp; resource.isReadable()) {
                if (logger.isDebugEnabled()) {
                    logger.debug("Found matching resource: " + resource);
                }
                return resource;
            } else if (logger.isTraceEnabled()) {
                logger.trace("Relative resource doesn't exist or isn't readable: " + resource);
            }
        } catch (IOException ex) {
            logger.debug("Failed to create relative resource - trying next resource location", ex);
        }

        return null;
    }

}

## spring config
    &lt;!-- 静态资源 --&gt;
    &lt;!-- &lt;mvc:resources mapping="/static/**" location="/static/" /&gt; --&gt;

    &lt;bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"&gt;
        &lt;property name="mappings"&gt;
            &lt;value&gt;
                /static/assets/**=staticRequestHandler
            &lt;/value&gt;
        &lt;/property&gt;
    &lt;/bean&gt;
    &lt;bean id="staticRequestHandler" class="com.hotel.servlet.resource.StaticRequestHandler"&gt;
        &lt;property name="location" value="/static/assets/" /&gt;
        &lt;property name="compressLocation" value="/static/dist/" /&gt;
    &lt;/bean&gt;
</code></pre>

<p>这种方式实现了自动定位压缩资源 <code>min.js</code> 的功能，但是压缩还是不能自动化而且不能实时的更新（min要单独压缩产生），并且调试和生产环境还是需要手动的修改配置来切换。</p>

<p>有没有更好的自动化的实现开发环境和生产环境分开呢？</p>

<ul>
<li>Maven打包时压缩然后替换源文件</li>
</ul>


<p>使用 <strong>yuicompressor-maven-plugin</strong> 插件压缩资源，然后把压缩资源<strong>先</strong>打包放置到assets目录下。</p>

<p>注意： yuicomressor 插件的 nosuffix 配置为 true ! 这样压缩后的文件名和源文件名称才一样。</p>

<pre><code>## spring config
    &lt;!-- 静态资源 --&gt;
    &lt;mvc:resources mapping="/static/**" location="/static/" /&gt;

## maven pom.xml
        &lt;profile&gt;
            &lt;id&gt;release&lt;/id&gt;

            &lt;build&gt;
                &lt;plugins&gt;
                    &lt;!-- http://alchim.sourceforge.net/yuicompressor-maven-plugin/compress-mojo.html --&gt;
                    &lt;plugin&gt;
                        &lt;groupId&gt;net.alchim31.maven&lt;/groupId&gt;
                        &lt;artifactId&gt;yuicompressor-maven-plugin&lt;/artifactId&gt;
                        &lt;version&gt;1.3.2&lt;/version&gt;
                        &lt;executions&gt;
                            &lt;execution&gt;
                                &lt;id&gt;compress_js_css&lt;/id&gt;
                                &lt;phase&gt;process-resources&lt;/phase&gt;
                                &lt;goals&gt;
                                    &lt;goal&gt;compress&lt;/goal&gt;
                                &lt;/goals&gt;
                            &lt;/execution&gt;
                        &lt;/executions&gt;
                        &lt;configuration&gt;
                            &lt;encoding&gt;UTF-8&lt;/encoding&gt;
                            &lt;nosuffix&gt;true&lt;/nosuffix&gt;
                            &lt;skip&gt;false&lt;/skip&gt;

                            &lt;jswarn&gt;false&lt;/jswarn&gt;
                            &lt;nomunge&gt;false&lt;/nomunge&gt;
                            &lt;preserveAllSemiColons&gt;false&lt;/preserveAllSemiColons&gt;

                            &lt;sourceDirectory&gt;src/main/webapp/static/assets&lt;/sourceDirectory&gt;
                            &lt;outputDirectory&gt;${project.build.directory}/dist&lt;/outputDirectory&gt;
                        &lt;/configuration&gt;
                    &lt;/plugin&gt;

                    &lt;plugin&gt;
                        &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;
                        &lt;version&gt;2.6&lt;/version&gt;
                        &lt;configuration&gt;
                            &lt;webResources&gt;
                                &lt;resource&gt;
                                    &lt;directory&gt;${project.build.directory}/dist&lt;/directory&gt;
                                    &lt;targetPath&gt;static/assets&lt;/targetPath&gt;
                                    &lt;filtering&gt;false&lt;/filtering&gt;
                                &lt;/resource&gt;
                            &lt;/webResources&gt;
                        &lt;/configuration&gt;
                    &lt;/plugin&gt;

                &lt;/plugins&gt;
            &lt;/build&gt;
        &lt;/profile&gt;
</code></pre>

<p>war插件添加了自定义webResources资源，首先把压缩的文件拷贝到对应目录，maven发现文件已经存在就不会再拷贝同名的文件。这样源文件就相当于被替换成压缩的资源了。</p>

<h2>总结</h2>

<p>使用maven插件压缩打包，完美的解决js/css压缩导致的开发和生产不兼容问题。</p>

<h2>后记</h2>

<p>jsp使用了tag的地方总是会产生很多的空行，看着挺烦的。其实可以通过在jsp开头添加 trimDirectiveWhitespaces 属性来去掉空行：</p>

<pre><code>&lt;%@ page language="java" trimDirectiveWhitespaces="true" contentType="text/html; charset=utf-8" pageEncoding="utf-8"%&gt;
</code></pre>

<p>&ndash;END</p>
]]></content>
  </entry>
  
</feed>
