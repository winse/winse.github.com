<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Blabla | Winse Blog]]></title>
  <link href="http://winseliu.com/blog/categories/blabla/atom.xml" rel="self"/>
  <link href="http://winseliu.com/"/>
  <updated>2019-04-11T08:55:53+08:00</updated>
  <id>http://winseliu.com/</id>
  <author>
    <name><![CDATA[Winse Liu]]></name>
    <email><![CDATA[winseliu@foxmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[视频自动翻译]]></title>
    <link href="http://winseliu.com/blog/2018/08/25/video-auto-translate/"/>
    <updated>2018-08-25T21:27:54+08:00</updated>
    <id>http://winseliu.com/blog/2018/08/25/video-auto-translate</id>
    <content type="html"><![CDATA[<p>现在语音翻译应用越来越广泛了。其实视频内的音频应该也可以通过语音的处理方式，来达到添加字幕以及翻译的效果。</p>

<p>google翻译页面已有语音输入的按钮，只是需要我们把电脑的声音转换作为 <strong>电脑输入</strong> 就行了。</p>

<h2>语音识别翻译</h2>

<p><a href="https://speechlogger.appspot.com/zh/">https://speechlogger.appspot.com/zh/</a></p>

<p>翻译</p>

<ul>
<li><a href="https://translate.google.cn">https://translate.google.cn</a></li>
<li><a href="https://www.google.com/intl/en/chrome/demos/speech.html">https://www.google.com/intl/en/chrome/demos/speech.html</a></li>
</ul>


<h2>处理方法</h2>

<h4>转换的工具</h4>

<p>第一种（推荐）: 使用 <a href="https://www.vb-audio.com/Voicemeeter/index.htm">VoiceMeeter</a></p>

<ul>
<li><a href="https://www.youtube.com/watch?v=91acHQfYj48">Speechlogger可以边看国外视频边翻译，如果无法识别音频怎么办？</a></li>
</ul>


<p>第二种：使用 <a href="https://software.muzychenko.net/eng/vac.htm#download">virtual audio cable sofeware</a></p>

<ul>
<li><a href="https://www.youtube.com/watch?v=CleLvQWy8-c">How to convert audio to text (mp3 to text)</a></li>
</ul>


<h4>步骤：</h4>

<ol>
<li>安装（任意一种）转换工具</li>
<li>设置 <strong>播放设备</strong></li>
<li>在浏览器中点击录音按钮后，点击浏览器地址栏的右侧麦克风按钮，设置 <strong>麦克风</strong> 的设备</li>
<li>（可选）如果要翻译同时自己也听到，打开 Voicemeeter 软件就行了，程序会自动输出选择一个输出。</li>
</ol>


<p>记住，不能静音，同时要打开麦克风！！</p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[导出微信照片]]></title>
    <link href="http://winseliu.com/blog/2017/06/04/wechat-images-export/"/>
    <updated>2017-06-04T22:53:51+08:00</updated>
    <id>http://winseliu.com/blog/2017/06/04/wechat-images-export</id>
    <content type="html"><![CDATA[<p>开篇寄语：还是脚本厉害啊！</p>

<p>手机空间不够，又不能加卡，只能删删删。想着把手机上的照片拷贝出来啊，手机拍的，在DCIM目录下的还好，但是微信里面的照片我也想备份下来啊。怎么办？</p>

<p>手机上翻一张微信的照片，然后目录在： tencent/MicroMsg/ea722ad09b762f27f86b29ac43bf6eb8/image2 ，连上电脑一看蒙圈了，这尼玛36(10+26)的平方啊，直接复制完全没反应，在系统上面通过查找*.jpg也不靠谱。还有尼玛的，不是挂在到系统盘的，没办法用脚本。</p>

<p>想着，要不用个助手试试，下载了PP和豌豆荚，导出带反应的都没有啊！你们这程序怎么做的啊！老牌子啊！！！</p>

<p>没办法咯，一个个复制想死的心都有了。最后实在没的办法，用adb shell来整把，然后就一个命令就搞定了（苦笑）：</p>

<pre><code>shell@hydrogen:/sdcard/tencent/MicroMsg/ea722ad09b762f27f86b29ac43bf6eb8/image2 $ which find
/system/bin/find
shell@hydrogen:/sdcard/tencent/MicroMsg/ea722ad09b762f27f86b29ac43bf6eb8/image2 $
$ find . -name "*.*" -exec cp {} /sdcard/Download/ \; 
</code></pre>

<p>最后拷贝download文件夹就好了。</p>

<p>总共600M的样子。拷贝的时刻，又TMD没权限，在explorer窗口就看不到文件。好吧，再用命令拷贝一下吧：</p>

<pre><code>E:\local\usr\share\adt-bundle-windows-x86-20140702\platform-tools&gt;adb pull -a /sdcard/Download/ R:\image2\
[ 14%] /sdcard/Download/9d01c6e9b722366970f33c948ca4435f.jpg: 76%
</code></pre>

<p>好久没弄了，SDK还是14年的，不过还能用啊，赫赫。到此，备份微信图片的工作顺利完成，事情一桩一桩的了。</p>

<p>啥，最后你说还要删掉刚刚复制的图片啊，不能一个个的删啊，好吧，收下我&ndash;|的眼神：</p>

<pre><code>E:\local\usr\share\adt-bundle-windows-x86-20140702\platform-tools&gt;adb shell
shell@hydrogen:/ $ cd /sdcard/Download/
shell@hydrogen:/sdcard/Download $ rm -rf *.jpg
shell@hydrogen:/sdcard/Download $ rm -rf *.png
</code></pre>

<p>拷贝完后，翻了一翻挺有回忆的。</p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[追生产的一次优化]]></title>
    <link href="http://winseliu.com/blog/2017/06/01/optimize-java-on-production-environment/"/>
    <updated>2017-06-01T08:36:33+08:00</updated>
    <id>http://winseliu.com/blog/2017/06/01/optimize-java-on-production-environment</id>
    <content type="html"><![CDATA[<p>注：最后就是升级到JDK8(哭笑)&hellip;</p>

<p>最近闲得慌啊，本来不是自己职能范围内的。但是看着一台机器每天负载50+的跑，不舒服，就想去折腾折腾把负载降下来。</p>

<p>进程图：</p>

<pre><code>top - 08:01:24 up 1203 days,  9:06,  4 users,  load average: 31.41, 32.97, 32.38
Tasks: 569 total,  11 running, 558 sleeping,   0 stopped,   0 zombie
Cpu(s): 20.1%us, 68.1%sy,  0.0%ni,  6.0%id,  0.1%wa,  0.0%hi,  5.7%si,  0.0%st
Mem:  49420852k total, 31831356k used, 17589496k free,   358748k buffers
Swap: 33791992k total,   519332k used, 33272660k free, 18614472k cached

  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                   
 2340 omc       20   0 29.2g 8.5g  11m S 598.1 18.1   3436:40 java                     
31349 omc       20   0 8071m 563m  11m S 348.4  1.2   1735:33 java                     
28147 omc       20   0 15.5g 1.5g  14m S 341.9  3.2   1959:42 java                     
   61 root      20   0     0    0    0 S 48.9  0.0  83728:05 ksoftirqd/14              
   73 root      20   0     0    0    0 S 48.2  0.0  82342:12 ksoftirqd/17              
    9 root      20   0     0    0    0 S 46.9  0.0  85312:03 ksoftirqd/1               
   13 root      20   0     0    0    0 S 46.6  0.0  84297:57 ksoftirqd/2               
   25 root      20   0     0    0    0 S 45.3  0.0  82811:49 ksoftirqd/5               
   89 root      20   0     0    0    0 S 45.3  0.0  84608:31 ksoftirqd/21              
   65 root      20   0     0    0    0 S 44.9  0.0  83475:48 ksoftirqd/15              
   17 root      20   0     0    0    0 R 44.6  0.0  83990:21 ksoftirqd/3               
   57 root      20   0     0    0    0 S 44.6  0.0  84625:38 ksoftirqd/13              
   33 root      20   0     0    0    0 R 44.0  0.0  80537:34 ksoftirqd/7               
    4 root      20   0     0    0    0 R 43.3  0.0  81489:54 ksoftirqd/0               
   41 root      20   0     0    0    0 R 42.0  0.0  82651:17 ksoftirqd/9               
   37 root      20   0     0    0    0 S 40.0  0.0  82636:26 ksoftirqd/8               
   85 root      20   0     0    0    0 S 39.7  0.0  84557:49 ksoftirqd/20              
   21 root      20   0     0    0    0 S 38.7  0.0  83271:24 ksoftirqd/4               
   53 root      20   0     0    0    0 R 36.1  0.0  82083:15 ksoftirqd/12              
   45 root      20   0     0    0    0 R 35.8  0.0  86230:39 ksoftirqd/10              
   93 root      20   0     0    0    0 R 35.4  0.0  86416:12 ksoftirqd/22              
   69 root      20   0     0    0    0 R 35.1  0.0  82726:46 ksoftirqd/16              
   29 root      20   0     0    0    0 S 34.8  0.0  78415:22 ksoftirqd/6               
   77 root      20   0     0    0    0 R 33.1  0.0  82419:34 ksoftirqd/18              
   81 root      20   0     0    0    0 S 30.2  0.0  80141:58 ksoftirqd/19              
   97 root      20   0     0    0    0 R 21.3  0.0  85993:03 ksoftirqd/23              
   49 root      20   0     0    0    0 S 21.0  0.0  86742:13 ksoftirqd/11              
28418 nobody    20   0  855m  32m 1144 S 20.7  0.1  72:23.66 gmetad
</code></pre>

<p>线程图：</p>

<pre><code>top - 08:03:20 up 1203 days,  9:08,  4 users,  load average: 31.07, 32.36, 32.23
Tasks: 940 total,  31 running, 909 sleeping,   0 stopped,   0 zombie
Cpu(s): 20.0%us, 70.0%sy,  0.0%ni,  4.6%id,  0.0%wa,  0.0%hi,  5.4%si,  0.0%st
Mem:  49420852k total, 31845576k used, 17575276k free,   358776k buffers
Swap: 33791992k total,   519332k used, 33272660k free, 18615376k cached

  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND             
28174 omc       20   0 15.5g 1.5g  14m R 59.9  3.2 307:28.86 java                
28203 omc       20   0 15.5g 1.5g  14m S 55.7  3.2 272:43.21 java                
 2416 omc       20   0 29.2g 8.5g  11m R 55.4 18.1 274:31.07 java                
31384 omc       20   0 8071m 563m  11m R 53.7  1.2 240:45.47 java                
 2409 omc       20   0 29.2g 8.5g  11m S 53.1 18.1 245:56.03 java                
28197 omc       20   0 15.5g 1.5g  14m S 52.4  3.2 279:04.35 java                
 2406 omc       20   0 29.2g 8.5g  11m R 51.8 18.1 249:00.25 java                
28208 omc       20   0 15.5g 1.5g  14m R 51.8  3.2 300:50.49 java                
 2412 omc       20   0 29.2g 8.5g  11m S 51.5 18.1 232:11.81 java                
 2415 omc       20   0 29.2g 8.5g  11m R 51.5 18.1 234:57.25 java                
 2391 omc       20   0 29.2g 8.5g  11m R 51.1 18.1 301:52.48 java                
28175 omc       20   0 15.5g 1.5g  14m R 51.1  3.2 299:18.11 java                
31383 omc       20   0 8071m 563m  11m R 50.8  1.2 242:23.43 java                
16662 omc       20   0 29.2g 8.5g  11m R 49.5 18.1   3:26.22 java                
31381 omc       20   0 8071m 563m  11m R 49.5  1.2 237:05.25 java                
   41 root      20   0     0    0    0 S 48.9  0.0  82652:00 ksoftirqd/9         
   17 root      20   0     0    0    0 S 47.9  0.0  83990:59 ksoftirqd/3         
   65 root      20   0     0    0    0 S 47.9  0.0  83476:26 ksoftirqd/15        
 2408 omc       20   0 29.2g 8.5g  11m R 47.9 18.1 249:43.27 java                
31382 omc       20   0 8071m 563m  11m R 47.9  1.2 237:07.76 java                
   49 root      20   0     0    0    0 S 47.3  0.0  86743:04 ksoftirqd/11        
   89 root      20   0     0    0    0 R 46.6  0.0  84609:14 ksoftirqd/21        
   81 root      20   0     0    0    0 S 46.3  0.0  80142:39 ksoftirqd/19        
   61 root      20   0     0    0    0 R 46.0  0.0  83728:50 ksoftirqd/14        
31376 omc       20   0 8071m 563m  11m R 45.3  1.2 306:00.66 java                
   33 root      20   0     0    0    0 R 45.0  0.0  80538:15 ksoftirqd/7         
31385 omc       20   0 8071m 563m  11m R 45.0  1.2 272:52.36 java                
   13 root      20   0     0    0    0 S 44.7  0.0  84298:42 ksoftirqd/2         
   73 root      20   0     0    0    0 S 43.7  0.0  82342:53 ksoftirqd/17        
   53 root      20   0     0    0    0 R 43.4  0.0  82083:54 ksoftirqd/12        
   97 root      20   0     0    0    0 S 43.4  0.0  85993:53 ksoftirqd/23        
   45 root      20   0     0    0    0 R 42.4  0.0  86231:24 ksoftirqd/10        
   77 root      20   0     0    0    0 S 42.1  0.0  82420:20 ksoftirqd/18        
 2407 omc       20   0 29.2g 8.5g  11m R 41.1 18.1 240:01.88 java                
 2410 omc       20   0 29.2g 8.5g  11m R 40.8 18.1 227:49.76 java                
   85 root      20   0     0    0    0 R 40.5  0.0  84558:37 ksoftirqd/20        
28196 omc       20   0 15.5g 1.5g  14m R 38.2  3.2 276:56.00 java                
   29 root      20   0     0    0    0 S 37.9  0.0  78416:08 ksoftirqd/6         
   37 root      20   0     0    0    0 S 37.9  0.0  82637:15 ksoftirqd/8         
 2411 omc       20   0 29.2g 8.5g  11m R 37.9 18.1 247:22.02 java                
 2360 omc       20   0 29.2g 8.5g  11m S 37.6 18.1 179:49.10 java                
 2413 omc       20   0 29.2g 8.5g  11m S 36.9 18.1 233:48.03 java                
   69 root      20   0     0    0    0 R 36.3  0.0  82727:24 ksoftirqd/16        
    4 root      20   0     0    0    0 R 35.6  0.0  81490:34 ksoftirqd/0         
31369 omc       20   0 8071m 563m  11m R 35.6  1.2 192:32.42 java                
   21 root      20   0     0    0    0 S 35.0  0.0  83272:02 ksoftirqd/4         
28167 omc       20   0 15.5g 1.5g  14m R 33.7  3.2 197:02.78 java                
   25 root      20   0     0    0    0 S 27.2  0.0  82812:29 ksoftirqd/5         
   93 root      20   0     0    0    0 R 25.9  0.0  86416:55 ksoftirqd/22
</code></pre>

<p>按照网络上的文档，查cpu时间很长的、占用很高的线程，然后拿着ID转成16进程到jstack里面去对：</p>

<pre><code>[omc@cu-omc1 ~]$ jstack 28147
2017-06-01 08:07:13
Full thread dump Java HotSpot(TM) 64-Bit Server VM (23.7-b01 mixed mode):
...
"Timer-0" daemon prio=10 tid=0x00007fbd84850000 nid=0x6e27 in Object.wait() [0x00007fbe31f98000]
   java.lang.Thread.State: TIMED_WAITING (on object monitor)
        at java.lang.Object.wait(Native Method)
        at java.util.TimerThread.mainLoop(Timer.java:552)
        - locked &lt;0x0000000767760360&gt; (a java.util.TaskQueue)
        at java.util.TimerThread.run(Timer.java:505)

"schedulerFactory_QuartzSchedulerThread" prio=10 tid=0x00007fbd843f6000 nid=0x6e26 in Object.wait() [0x00007fbe32099000]
   java.lang.Thread.State: TIMED_WAITING (on object monitor)
        at java.lang.Object.wait(Native Method)
        at org.quartz.core.QuartzSchedulerThread.run(QuartzSchedulerThread.java:311)
        - locked &lt;0x0000000767770098&gt; (a java.lang.Object)

"schedulerFactory_Worker-2" prio=10 tid=0x00007fbd848cd000 nid=0x6e25 in Object.wait() [0x00007fbe3219a000]
   java.lang.Thread.State: TIMED_WAITING (on object monitor)
        at java.lang.Object.wait(Native Method)
        at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:568)
        - locked &lt;0x00000007677ebb38&gt; (a java.lang.Object)

"schedulerFactory_Worker-1" prio=10 tid=0x00007fbd848b3000 nid=0x6e24 in Object.wait() [0x00007fbe3229b000]
   java.lang.Thread.State: TIMED_WAITING (on object monitor)
        at java.lang.Object.wait(Native Method)
        at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:568)
        - locked &lt;0x00000007677ec710&gt; (a java.lang.Object)
...
"GC task thread#17 (ParallelGC)" prio=10 tid=0x00007fbe64035000 nid=0x6e06 runnable 

"VM Periodic Task Thread" prio=10 tid=0x00007fbe6411f800 nid=0x6e0e waiting on condition 

JNI global references: 321

[omc@cu-omc1 ~]$ echo "obase=16;28203" | bc
6E2B
[omc@cu-omc1 ~]$ cat | while read id ; do echo "obase=16;$id" | bc ; done &lt;&lt;EOF
28174
28203
28197
28208
28175
28196
28167
EOF

6E0E
6E2B
6E25
6E30
6E0F
6E24
6E07
</code></pre>

<p><img src="/images/blogs/linux-jdk7-jstack.png" alt="" /></p>

<p>基本都是sleep，wait的线程占用cpu很大。并且导致了系统cpu软中断处理进程ksoftirqd占用了大部分系统资源。系统不停的在处理上下文，负载奇高：</p>

<p><img src="/images/blogs/linux-jdk7-vmstat.png" alt="" /></p>

<p>ksoftirqd 不知道干嘛的，/proc/interrupts 看不懂，查了sleep和wait的区别，strace、iostat、jmap、jstack、jstat、vmstat、pidstat、还有看到内存补齐的一些文章，反正就是找不到北。</p>

<p>一开始以为是quartz的问题，对比了其他机器的quartz应用，有怀疑过版本问题（quartz-1.8.6, 2.2.0）；有试着去减少simplethreadpool的默认线程数（org.quartz.threadPool.threadCount），CPU占用是会少一点点，但是ksoftirqd还是压力很大，系统还是很大部分消耗在上下文切换，路子不对。</p>

<p>问题环境：</p>

<ul>
<li>Red Hat Enterprise Linux Server release 6.3 (Santiago)/2.6.32-279.el6.x86_64</li>
<li>Spring + quartz-2.2.&frac12;</li>
<li>jdk1.7.0_17</li>
</ul>


<p>完全没辙，不是功能代码的问题啊。搞到12点，困死了，回去睡个觉。今天一早起来，想想，不如换个 <strong>JDK8</strong> 试试吧（按照部署要求jdk放local目录下，要ROOT密码的昨晚就没动）。我勒个去，重启了感觉世界都变亮了。上下文切换cs 1w不到，us、sy基本忽略不计啊。</p>

<pre><code>$ vmstat -a 1
procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu-----
 r  b   swpd   free  inact active   si   so    bi    bo   in   cs us sy id wa st
 0  0 517160 25052176 12486824 10402340    0    0     2    31    0    0  4  9 86  0  0
 0  0 517160 25052732 12486972 10401996    0    0     0  4676 4548 4806  0  0 99  0  0
 1  0 517160 25052468 12486972 10402356    0    0     0     0 4044 4419  0  0 99  0  0
 0  1 517160 25053664 12486852 10401992    0    0     0  8100 7608 5311  0  0 95  4  0
 0  1 517160 25054800 12486852 10402084    0    0     0  8228 7847 5408  1  1 95  4  0
 0  1 517160 25054924 12486852 10402380    0    0     0  8200 8075 4929  0  0 95  4  0
 1  1 517160 25054868 12486852 10402112    0    0     0  7484 7898 5754  1  1 94  4  0
 2  1 517160 25055544 12486848 10402148    0    0     0  8224 7537 4428  0  0 95  4  0
</code></pre>

<p>好吧，以后优化的第一步就是换JDK .__. 。就像优化数据库第一步就建索引 V.V 。应该是JDK8对object.wait调用linux系统调用进行了优化。</p>

<h2>有点意思</h2>

<ul>
<li><a href="http://coderplay.iteye.com/blog/1481211">从Java视角理解CPU上下文切换(Context Switch)</a></li>
<li><a href="http://coderplay.iteye.com/blog/1485760">从Java视角理解CPU缓存(CPU Cache)</a></li>
<li><a href="http://coderplay.iteye.com/blog/1486649">从Java视角理解伪共享(False Sharing)</a></li>
<li><a href="https://github.com/LMAX-Exchange/disruptor">disruptor</a></li>
<li><a href="http://www.cnblogs.com/zhiranok/archive/2012/08/13/context_switch_1.html">http://www.cnblogs.com/zhiranok/archive/2012/08/13/context_switch_1.html</a></li>
<li><a href="http://www.bijishequ.com/detail/60264?p=">http://www.bijishequ.com/detail/60264?p=</a></li>
<li><a href="http://9leg.com/java/2016/08/09/cpu-consumption-analysis.html">http://9leg.com/java/2016/08/09/cpu-consumption-analysis.html</a></li>
</ul>


<blockquote><p>us过高
当us值过高时，表示运行的应用消耗了大部分的cpu。在这种情况下，对于java应用而言，最重要的是找到具体消耗cpu的线程所执行的代码，可以采用如下方法。</p>

<p>首先通过linux命令top命令查看us过高的pid值</p>

<p>通过top -Hp pid查看该pid进程下的线程的cpu消耗状况，得到具体pid值</p>

<p>将pid值转化为16进制，这个转化后的值对应nid值的线程</p>

<p>通过jstack pid grep -C 20 “16进制的值” 命令查看运行程序的线程信息</p>

<p>该线程就是消耗cpu的线程，在采样时须多执行几次上述的过程，以确保找到真实的消耗cpu的线程。</p>

<p>java应用造成us过高的原因主要是线程一直处于可运行的状态Runnable，通常是这些线程在执行无阻塞、循环、正则或纯粹的计算等动作造成。 另外一个可能会造成us过高的原因是频繁的gc。如每次请求都需要分配较多内存，当访问量高时就导致不断的进行gc，系统响应速度下降， 进而造成堆积的请求更多，消耗的内存严重不足，最严重的时候会导致系统不断进行FullGC，对于频繁的gc需要通过分析jvm内存的消耗来查找原因。</p>

<p>sy过高
当sy值过高时，表示linux花费了更多的时间在进行线程切换。java应用造成这种现象的主要原因是启动的线程比较多， 且这些线程多处于不断的阻塞（例如锁等待，io等待）和执行状态的变化过程中，这就导致了操作系统要不断的切换执行的线程， 产生大量的上下文切换。在这种情况下，对java应用而言，最重要的是找出不断切换状态的原因， 可采用的方法为通过kill -3 pid 或jstack -l pid的方法dump出java应用程序的线程信息，查看线程的状态信息以及锁信息， 找出等待状态或锁竞争过多的线程。</p></blockquote>

<ul>
<li><a href="http://yaocoder.blog.51cto.com/2668309/1543352">http://yaocoder.blog.51cto.com/2668309/1543352</a></li>
</ul>


<p>strace -T -r -c -p pid
pstack pid
trace -p tid</p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[批量下载163-open的视频]]></title>
    <link href="http://winseliu.com/blog/2016/09/19/163-open-movies-download/"/>
    <updated>2016-09-19T23:19:31+08:00</updated>
    <id>http://winseliu.com/blog/2016/09/19/163-open-movies-download</id>
    <content type="html"><![CDATA[<p>163的视频资源还是挺丰富的，默认情况下必须用客户端下载。感觉挺麻烦的，对于网络慢的情况可能要下很久，如果能用下载工具批量下载就好了。</p>

<p>首先从视频播放页面获取下载的地址(查看下载按钮的js):</p>

<pre><code>appsrc : 'http://mov.bn.netease.com/open-movie/nos/mp4/2015/01/19/SAFDACJPD_sd.m3u8',
</code></pre>

<ul>
<li>然后从列表页获取列表所有视频的详情URL，</li>
<li>然后从详情URL获取appsrc的地址，</li>
<li>最后把后缀m3u8改成mp4。当然还可以把视频的名称优化下。</li>
</ul>


<p>下面结合【chrome调试工具】、【notepad++】、【shell】来获取视频的下载地址：</p>

<ol>
<li>F12使用js获取列表详情URL</li>
</ol>


<pre><code>$("#list2").find("tr &gt;td.u-ctitle a").each(function(i,node){console.log($(node).attr("href"));})
</code></pre>

<p>使用notepad++的<strong>列处理</strong>功能 处理chrome输出的信息只留下URL保存到url.txt，如 <code>http://open.163.com/movie/2008/1/1/H/M6SGF6VB4_M6SGL3P1H.html</code> 。</p>

<p>这里用同样的步骤也把视频列表的名称获取到，用于后面的视频重命名：</p>

<pre><code>$("#list2").find("tr &gt;td.u-ctitle a").each(function(i,node){console.log($(node).text());})
</code></pre>

<ol>
<li>使用SHELL获取详情页面的URL</li>
</ol>


<pre><code>$ cat url.txt | while read line ; do if [ "$line" != '' ] ; then curl -s $line | grep -a appsrc ; fi ; done
</code></pre>

<p>获取到的数据同样包含一些不需要的信息，使用notepad++进行裁剪。提取 <code>http://mov.bn.netease.com/open-movie/nos/mp4/2015/01/19/SAFDCDGNA_sd.m3u8</code>  的视频地址，使用replace把m3u8替换成mp4，然后把URL复制到<strong>迅雷下载的下载框</strong>即可批量下载了。</p>

<ol>
<li>重命名</li>
</ol>


<p>给获取到的视频的名称加上顺序标识，然后弄成重命名的命令：</p>

<pre><code>mv SAFD8B131_sd.mp4  01机器学习的动机与应用.mp4
mv SAFD8D355_sd.mp4  02监督学习应用.梯度下降.mp4
mv SAFD8O947_sd.mp4  03欠拟合与过拟合的概念.mp4
mv SAFD8PQO8_sd.mp4  04牛顿方法.mp4
mv SAFD94US8_sd.mp4  05生成学习算法.mp4
mv SAFD97CGO_sd.mp4  06朴素贝叶斯算法.mp4
mv SAFD9I82D_sd.mp4  07最优间隔分类器问题.mp4
mv SAFD9L3B9_sd.mp4  08顺序最小优化算法.mp4
mv SAFD9VGEO_sd.mp4  09经验风险最小化.mp4
mv SAFDA37TS_sd.mp4  10特征选择.mp4
mv SAFDACJPD_sd.mp4  11贝叶斯统计正则化.mp4
mv SAFDAHG1C_sd.mp4  12K-means算法.mp4
mv SAFDAQ19J_sd.mp4  13高斯混合模型.mp4
mv SAFDB0UUS_sd.mp4  14主成分分析法.mp4
mv SAFDB7QLL_sd.mp4  15奇异值分解.mp4
mv SAFDBF188_sd.mp4  16马尔可夫决策过程.mp4
mv SAFDBM41T_sd.mp4  17离散与维数灾难.mp4
mv SAFDBTL6V_sd.mp4  18线性二次型调节控制.mp4
mv SAFDC4B84_sd.mp4  19微分动态规划.mp4
mv SAFDCDGNA_sd.mp4  20策略搜索.mp4
</code></pre>

<p>以上几个步骤就能完美的实现视频的下载。步骤比较多，但是还是很有成就感啊，程序员的逗逼方法。</p>

<h2>附</h2>

<p>几年前下载TED视频的脚本(全部用脚本来实现，其实拆分步骤或许是更好的选择简单些)：</p>

<pre><code>wget -qO- http://open.163.com/ted/ | iconv -f gbk -t utf-8 | awk '{if($0 ~ /&lt;a href="http:\/\/v\.163\.com\/movie/ ){print}}' \  
 | sed -n 's/.*&lt;a href="\([^"]*\)".*/\1/p' \  
 | while read url  
do   
        echo $url;  
        wget -qO- "$url" | iconv -f gbk -t utf-8 | awk '/appsrc: \047http:\/\//{if(match($0,/http:[^\047]*/))print substr($0,RSTART,RLENGTH);}' \  
 | sed -e s/-list\.m3u8/.mp4/ -e s/movie/movieMP4/  
done  
</code></pre>

<p>&ndash;END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开年2015]]></title>
    <link href="http://winseliu.com/blog/2015/02/19/starting-2015-spring-festival/"/>
    <updated>2015-02-19T01:42:27+08:00</updated>
    <id>http://winseliu.com/blog/2015/02/19/starting-2015-spring-festival</id>
    <content type="html"><![CDATA[<p>红包把整个2015春节捣腾的。。。</p>

<p>到了凌晨，春晚谢幕，寒气开始袭人，陆陆续续大家都开始休息，除夕的红包大战也告一段落。</p>

<p>静下来，方能更好的反思总结。</p>

<p>2014年过的还算顺当，任务上不仅仅是一些繁琐的应付事的工作。提供了足够的空间余地，可以做做自己喜欢的事情，捣腾一阵后，有时间可以给自己思考。</p>

<p>工作4年，到新的环境已然不是新人，时间的积淀和历练让我们更成熟，更有资本的同时，承担更多的责任。在项目组中，可能需要做一些表率。我觉得也是最尴尬的时间，没有傲立群雄的能耐，也不是自甘堕落的无能者，后有追兵前有猛狼。真实的感觉到85后尴尬一代的现实！</p>

<p>工作一段时间后，越来越容易被身边的事情干扰，时不时就会被这样那样的事情打断头绪！在工作之余，学习的时间越来越少，被电视剧和游戏霸占，觉得很是不应该！对于好胜心强的自己来说，接下来还是应该一心一意的去做一件事情！这样自己才能提升的明显，不至于自己觉得碌碌无为！</p>

<p>2014也帮师兄做了些事情，遇到了一些不一样的人和事情，改变了自己原来而一些看法（或者说被现实打败了）。原来总认为别人做了类似的东西，咋用就好了，原来的自己不屑一顾这些东西。还要自己去再造轮子，不希望也觉得浪费时间精力。</p>

<p>其实已有的东西，自己实现一遍后，才是你自己的东西！！不要觉得是在做无用功，当你改进或者添加新的功能时，你会发现自己写的自己实践过的才是自己的，才能驾轻就熟！</p>

<p>好基友都结婚的勾搭的，知名而不认命，什么时刻能踏上点呢！？</p>

<p>&ndash;END</p>
]]></content>
  </entry>
  
</feed>
